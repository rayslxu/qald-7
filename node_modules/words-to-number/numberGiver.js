let digitMapper = require('./digitsMapper.js')

module.exports = {
	replacer : (model)=>{
		return new Promise((resolve,reject)=>{
			model.stage = 1
			try{
				model.amount = model.amount.toLowerCase().trim()
				while(model.amount.includes("-")){
					model.amount = model.amount.replace("-"," ")				
				}
				while(model.amount.includes(",")){
					model.amount = model.amount.replace(","," ")				
				}
				while(model.amount.includes("  ")){
					model.amount = model.amount.replace("  "," ")				
				}
				if(model.amount.match(/( and )/)){
					model.amount = model.amount.replace(" and ","")				
				}
				if(model.amount.match(/( only\s?)/)){
					model.amount = model.amount.replace(" only","")				
				}
				if(model.amount.match(/(forty)/)){
					model.amount = model.amount.replace("forty"," fourty ")				
				}
				if(model.amount.match(/(billions|billion)/)){
					model.amount = model.amount.replace("billions"," billion, ").replace("billion"," billion, ")			
				}
				if(model.amount.match(/(crores|crore)/)){
					model.amount = model.amount.replace("crores"," crore, ").replace("crore"," crore, ")			
				}
				if(model.amount.match(/(millions|million)/)){
					model.amount = model.amount.replace("millions"," million, ").replace("million"," million, ")			
				}
				if(model.amount.match(/(lakhs|lakh|lacs|lac)/)){
					model.amount = model.amount.replace("lakhs"," lac, ").replace(" lakh "," lac, ").replace("lacs"," lac, ").replace("lac"," lac, ")				
				}
				if(model.amount.match(/(thousands|thousand)/)){
					model.amount = model.amount.replace("thousands"," thousand, ").replace("thousand"," thousand, ")				
				}
				if(model.amount.match(/hundreds|hundred|hundered/)){
					model.amount = model.amount.replace("hundreds"," hundred, ").replace("hundred"," hundred, ").replace("hundered"," hundred, ")
				}
				while(model.amount.includes("  ")){
					model.amount = model.amount.replace("  "," ")
				}
				model.amountArray = model.amount.split(",")
				delete model.amount
				// console.log("--------------replacer-------------")
				// console.log(model)
				return resolve(model)
			}
			catch(e){
				return reject(model)
			}
		})
	},

	trimmer : (model)=>{
		return new Promise((resolve,reject)=>{
			model.stage = 2
			try{
				let tempArray = []
				for(let i=0; i<model.amountArray.length; i++){
					model.amountArray[i] = model.amountArray[i].trim()
					if(model.amountArray[i].length > 0){
						tempArray.push(model.amountArray[i])
					}
				}
				model.amountArray = tempArray
				// console.log("--------------trimmer-------------")
				// console.log(model)
				return resolve(model)
			}
			catch(e){
				return reject(model)
			}
		})
	},

	billionConverter : (model)=>{
		return new Promise((resolve,reject)=>{
			model.stage = 3
			try{
				model.resultArray = []
				for(let i=0; i<model.amountArray.length;){
					if(model.amountArray[i].includes("billion")){
						let amount = model.amountArray[i]
						amount = amount.replace("billion", "").trim()
						amount = amount.split(" ")
						let value = 0
						for(let i=0; i<amount.length; i++){
							amount[i] = parseInt(digitMapper[amount[i]] ? digitMapper[amount[i]] : 0)
							value = value + amount[i]
						}
						value = value * 1000000000
						model.resultArray.push(value)
						model.amountArray.shift()
					}
					else{
						i++
					}
				}
				// console.log("--------------billionConverter-------------")
				// console.log(model)
				return resolve(model)	
			}
			catch(e){
				return reject(model)
			}
		})
	},

	crConverter : (model)=>{
		return new Promise((resolve,reject)=>{
			model.stage = 4
			try{
				for(let i=0; i<model.amountArray.length;){
					if(model.amountArray[i].includes("crore")){
						let amount = model.amountArray[i]
						amount = amount.replace("crore", "").trim()
						amount = amount.split(" ")
						let value = 0
						for(let i=0; i<amount.length; i++){
							amount[i] = parseInt(digitMapper[amount[i]] ? digitMapper[amount[i]] : 0)
							value = value + amount[i]
						}
						value = value * 10000000
						model.resultArray.push(value)
						model.amountArray.shift()
					}
					else{
						i++
					}
				}
				// console.log("--------------crConverter-------------")
				// console.log(model)
				return resolve(model)	
			}
			catch(e){
				return reject(model)
			}
		})
	},

	millionsConverter : (model)=>{
		return new Promise((resolve,reject)=>{
			model.stage = 5
			try{
				for(let i=0; i<model.amountArray.length;){
					if(model.amountArray[i].includes("million")){
						let amount = model.amountArray[i]
						amount = amount.replace("million", "").trim()
						amount = amount.split(" ")
						let value = 0
						for(let i=0; i<amount.length; i++){
							amount[i] = parseInt(digitMapper[amount[i]] ? digitMapper[amount[i]] : 0)
							value = value + amount[i]
						}
						value = value * 1000000
						model.resultArray.push(value)
						model.amountArray.shift()
					}
					else{
						i++
					}
				}
				// console.log("--------------millionsConverter-------------")
				// console.log(model)
				return resolve(model)
			}
			catch(e){
				return reject(model)
			}
		})
	},

	lacksConverter : (model)=>{
		return new Promise((resolve,reject)=>{
			model.stage = 6
			try{
				for(let i= 0; i<model.amountArray.length; ){
					if(model.amountArray[i].includes("lac")){
						let amount = model.amountArray[i]
						amount = amount.replace("lac", "").trim()
						amount = amount.split(" ")
						let value = 0
						for(let i=0; i<amount.length; i++){
							amount[i] = parseInt(digitMapper[amount[i]] ? digitMapper[amount[i]] : 0)
							value = value + amount[i]
						}
						value = value * 100000
						model.resultArray.push(value)
						model.amountArray.shift()
					}
					else{
						i++
					}
				}
				// console.log("--------------lacksConverter-------------")
				// console.log(model)
				return resolve(model)
			}
			catch(e){
				return reject(model)
			}
		})
	},

	thousandConverter : (model)=>{
		return new Promise((resolve,reject)=>{
			model.stage = 7
			try{
				for(let i=0; i<model.amountArray.length;){
					if(model.amountArray[i].includes("thousand")){
						let amount = model.amountArray[i]
						amount = amount.replace("thousand", "").trim()
						amount = amount.split(" ")
						let value = 0
						for(let i=0; i<amount.length; i++){
							amount[i] = parseInt(digitMapper[amount[i]] ? digitMapper[amount[i]] : 0)
							value = value + amount[i]
						}
						value = value * 1000
						model.resultArray.push(value)
						model.amountArray.shift()
					}
					else{
						i++
					}
				}
				// console.log("--------------thousandConverter-------------")
				// console.log(model)
				return resolve(model)
			}
			catch(e){
				return reject(model)
			}
		})
	},

	hundredConverter : (model)=>{
		return new Promise((resolve,reject)=>{
			model.stage = 8
			try{
				for(let i=0; i<model.amountArray.length;){
					if(model.amountArray[i].includes("hundred")){
						let amount = model.amountArray[i]
						amount = amount.replace("hundred", "").trim()
						amount = amount.split(" ")
						let value = 0
						for(let i=0; i<amount.length; i++){
							amount[i] = parseInt(digitMapper[amount[i]] ? digitMapper[amount[i]] : 0)
							value = value + amount[i]
						}
						value = value * 100
						model.resultArray.push(value)
						model.amountArray.shift()
					}
					else{
						i++
					}
				}
				// console.log("--------------hundredConverter-------------")
				// console.log(model)
				return resolve(model)
			}
			catch(e){
				return reject(model)
			}
		})
	},

	tensUnitConverter : (model)=>{
		return new Promise((resolve,reject)=>{
			model.stage = 9
			try{
				let value = 0
				for(let i=0; i<=model.amountArray.length; i++){
					if(model.amountArray.length == 0){
						return resolve(model)
					}
					else if(model.amountArray[i].includes(' ')){
						let amount = model.amountArray[i]
						amount = amount.split(" ")
						for(let i=0; i<amount.length; i++){
							amount[i] = parseInt(digitMapper[amount[i]] ? digitMapper[amount[i]] : 0)
							value = value + amount[i]
						}
						model.resultArray.push(value)
						model.amountArray.shift()
					}
					else{
						let amount = model.amountArray[i]
						amount = parseInt(digitMapper[amount])
						model.resultArray.push(amount)
						model.amountArray.shift()
					}
				}
				// console.log("--------------tensUnitConverter-------------")
				// console.log(model)
				return resolve(model)
			}
			catch(e){
				return reject(model)
			}
		})
	},

	adder : (model)=>{
		return new Promise((resolve,reject)=>{
			model.stage = 10
			try{
				model.response = 0
				for(let i=0; i<model.resultArray.length; i++){
					model.response = model.response + model.resultArray[i]
				}
				return resolve(model)
			}
			catch(e){
				return reject(model)
			}
		})
	},

	quomaAdder : (model)=>{
		return new Promise((resolve,reject)=>{
			model.stage = 11
			try{
				model.response = JSON.stringify(model.response)
				model.response = model.response.replace(/(\d)(?=(\d\d)+\d$)/g, "$1,")
				return resolve(model)
			}
			catch(e){
				return reject(model)
			}
		})
	},

	tagsDeleter : (model)=>{
		return new Promise((resolve,reject)=>{
			delete model.amount
			delete model.amountArray
			delete model.resultArray
			delete model.stage
			return resolve(model)
		})
	}
}
