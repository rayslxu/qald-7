// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of ThingTalk
//
// Copyright 2017-2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>

{
import assert from 'assert';
import * as Ast from '../ast';
import { parseDate } from '../utils/date_utils';

type DialogueHistoryAnnotation =
      { key : 'results', value : Ast.DialogueHistoryResultItem[] }
    | { key : 'error', value : Ast.Value }
    | { key : 'count', value : Ast.Value }
    | { key : 'more', value : true };

type ParserOptions = {
    locale ?: string;
    timezone ?: string;
};

}

$options = ParserOptions;

/**
 * Missing features, compared with full TT:
 * - single statement
 * - no declarations
 * - no alias (in aggregate and as a table/stream operator)
 * - limited compute
 *
 * Differences with full TT:
 * - all filter operators are infix
 * - multiple parameter passings are prefixed with on in a join
 * - function names are one token
 * - parameter names are prefixed with param:
 * - enum choices are prefixed with enum:
 * - units are prefixed with unit:
 * - relative locations are prefixed with location:
 */

input : Ast.Input = {
    program;
    'bookkeeping' 'special' s:SPECIAL => new Ast.ControlCommand($.location, new Ast.ControlIntent.Special($.location, s.value));
    'bookkeeping' 'answer' c:value => new Ast.ControlCommand($.location, new Ast.ControlIntent.Answer($.location, c));
    'bookkeeping' 'choice' n:literal_integer => new Ast.ControlCommand($.location, new Ast.ControlIntent.Choice($.location, n));

    'policy' p:policy => p;

    dialogue_state;
}

literal_integer : number = {
    '0' => 0;
    '1' => 1;
    n:LITERAL_INTEGER => n.value;
}

dialogue_state : Ast.DialogueState = {
    '$dialogue' dialogueAct:FUNCTION ';' history:dialogue_history_item_list => {
        return new Ast.DialogueState($.location, dialogueAct.value.kind, dialogueAct.value.channel, null, history);
    };
    '$dialogue' dialogueAct:FUNCTION pnames:out_param_list ';' history:dialogue_history_item_list => {
        return new Ast.DialogueState($.location, dialogueAct.value.kind, dialogueAct.value.channel, pnames.map((p : Ast.VarRefValue) => p.name), history);
    };

    '$dialogue' dialogueAct:FUNCTION ';' => {
        return new Ast.DialogueState($.location, dialogueAct.value.kind, dialogueAct.value.channel, null, []);
    };
    '$dialogue' dialogueAct:FUNCTION pnames:out_param_list ';' => {
        return new Ast.DialogueState($.location, dialogueAct.value.kind, dialogueAct.value.channel, pnames.map((p : Ast.VarRefValue) => p.name), []);
    };
}

dialogue_history_item_list : Ast.DialogueHistoryItem[] = {
    item:dialogue_history_item => [item];
    list:dialogue_history_item_list item:dialogue_history_item => {
        list.push(item);
        return list;
    };
}

dialogue_history_item : Ast.DialogueHistoryItem = {
    rule:rule ';' => new Ast.DialogueHistoryItem($.location, rule, null, 'accepted');

    // note: the syntax here is very hard-coded because we don't want the AST
    // to be generic, otherwise it's hard to manipulate

    // results
    rule:rule results:dialogue_result_annotation_bag ';' => new Ast.DialogueHistoryItem($.location, rule, results, 'confirmed');

    // confirm
    rule:rule '#[' 'confirm' '=' venum:ENUM ']' ';' => new Ast.DialogueHistoryItem($.location, rule, null, venum.value);
}

dialogue_result_annotation_list : DialogueHistoryAnnotation[] = {
    ann:dialogue_result_annotation => [ann];

    list:dialogue_result_annotation_list ann:dialogue_result_annotation => list.concat([ann]);
}

dialogue_result_annotation_bag : Ast.DialogueHistoryResultList = {
    list:dialogue_result_annotation_list => {
        let results, _error, more, count;

        for (const annot of list) {
            switch (annot.key) {
            case 'results':
                if (results !== undefined)
                    return $.error(`Duplicate history annotation #[results]`);
                results = annot.value;
                break;
            case 'error':
                if (_error !== undefined)
                    return $.error(`Duplicate history annotation #[results]`);
                _error = annot.value;
                break;
            case 'more':
                if (more !== undefined)
                    return $.error(`Duplicate history annotation #[more]`);
                more = annot.value;
                break;
            case 'count':
                if (count !== undefined)
                    return $.error(`Duplicate history annotation #[count]`);
                count = annot.value;
                break;
            }
        }
        if (results === undefined)
            return $.error(`Missing history annotation #[results]`);
        if (count === undefined)
            count = new Ast.Value.Number(results.length);

        return new Ast.DialogueHistoryResultList($.location, results, count, more, _error);
    };
}

dialogue_result_annotation : DialogueHistoryAnnotation = {
    '#[' 'results' '=' results:dialogue_result_list ']' => ({ key: 'results', value: results });
    '#[' 'count' '=' count:value ']' => ({ key: 'count', value: count });
    '#[' 'more' '=' 'true' ']' => ({ key: 'more', value: true });
    '#[' 'error' '=' error:value ']' => ({ key: 'error', value: error });
}

dialogue_result_list : Ast.DialogueHistoryResultItem[] = {
    '[' ']' => [];
    '[' list:dialogue_result_list_nonempty ']' => list;
}

dialogue_result_list_nonempty : Ast.DialogueHistoryResultItem[] = {
    value:object_literal_value => [new Ast.DialogueHistoryResultItem($.location, value.value)];
    list:dialogue_result_list_nonempty ',' value:object_literal_value => {
        list.push(new Ast.DialogueHistoryResultItem(null, value.value));
        return list;
    };
}

program : Ast.Program = {
    assignment => new Ast.Program($.location, [], [], [assignment]);
    rule:rule => new Ast.Program($.location, [], [], [rule]);
    'executor' '=' user:value ':' rule =>
        new Ast.Program(null, [], [], [rule], { impl: { executor: user } });
}

policy : Ast.PermissionRule = {
    'true' ':' policy:policy_body => policy;
    user:filter ':' policy:policy_body => {
        // replace all uses of "source" with "$source"
        user.visit(new class extends Ast.NodeVisitor {
            visitComputeBooleanExpression(atom : Ast.ComputeBooleanExpression) {
                if (atom.lhs instanceof Ast.VarRefValue && atom.lhs.name === 'source')
                    atom.lhs = new Ast.EventValue('source');
                return true;
            }
        });
        policy.principal = user;
        return policy;
    };
}

policy_body : Ast.PermissionRule = {
    'now' '=>' action:policy_fn => {
        return new Ast.PermissionRule($.location, Ast.BooleanExpression.True, Ast.PermissionFunction.Builtin, action);
    };
    query:policy_fn '=>' 'notify' => {
        return new Ast.PermissionRule($.location, Ast.BooleanExpression.True, query, Ast.PermissionFunction.Builtin);
    };
    query:policy_fn '=>' action:policy_fn => {
        return new Ast.PermissionRule($.location, Ast.BooleanExpression.True, query, action);
    };
}

policy_fn : Ast.PermissionFunction = {
    '*' => Ast.PermissionFunction.Star;
    klass:CLASS_STAR => new Ast.PermissionFunction.ClassStar($.location, klass.value);
    fn:FUNCTION => new Ast.PermissionFunction.Specified($.location, fn.value.kind, fn.value.channel, Ast.BooleanExpression.True, null);
    fn:FUNCTION 'filter' filter => new Ast.PermissionFunction.Specified($.location, fn.value.kind, fn.value.channel, filter, null);
}

rule : Ast.ExpressionStatement = {
    stream '=>' action => new Ast.Rule($.location, stream, [action]).toExpression();
    'now' '=>' table '=>' action => new Ast.Command($.location, table, [action]).toExpression();
    'now' '=>' action => new Ast.Command($.location, null, [action]).toExpression();

    rule 'on' pp:param_passing => {
        rule = rule.clone();
        const action = rule.last;
        assert(action instanceof Ast.InvocationExpression);
        action.invocation.in_params.push(pp);
        return rule;
    };
}

assignment : Ast.Assignment = {
    'let' name:PARAM_NAME '=' '(' table ')' => new Ast.Assignment($.location, name.value, table.toExpression([]));
}

aggr_op : ('min'|'max'|'sum'|'avg') = {
    'min' => 'min';
    'max' => 'max';
    'sum' => 'sum';
    'avg' => 'avg';
}

scalar_op : 'distance' = {
    'distance' => 'distance';
}

table : Ast.Table = {
    call => new Ast.Table.Invocation($.location, call, null);
    '(' table ')' 'filter' filter => {
        return new Ast.Table.Filter($.location, table, filter, table.schema);
    };

    'aggregate' op:aggr_op pname:PARAM_NAME 'of' '(' table ')' => new Ast.Table.Aggregation($.location, table, pname.value, op, null, null);
    'aggregate' 'count' 'of' '(' table ')'                     => new Ast.Table.Aggregation($.location, table, '*', 'count', null, null);
    'aggregate' 'count' pname:PARAM_NAME 'of' '(' table ')'    => new Ast.Table.Aggregation($.location, table, pname.value, 'count', null, null);

    'sort' pname:PARAM_NAME 'asc' 'of' '(' table ')'           => new Ast.Table.Sort($.location, table, pname.value, 'asc', null);
    'sort' pname:PARAM_NAME 'desc' 'of' '(' table ')'          => new Ast.Table.Sort($.location, table, pname.value, 'desc', null);
    '(' table ')' '[' indices:array_literal_values ']'       => new Ast.Table.Index($.location, table, indices, null);
    '(' table ')' '[' base:value ':' delta:value ']'    => new Ast.Table.Slice($.location, table, base, delta, null);

    '[' pnames:out_param_list ']' 'of' '(' table ')'          => new Ast.Table.Projection($.location, table, pnames.map((p : Ast.VarRefValue) => p.name), null);

    'compute' expr:non_ambiguous_value 'of' '(' table ')'       => new Ast.Table.Compute($.location, table, expr, null, null);

    table_join;
}

table_join : Ast.JoinTable = {
    '(' t1:table ')' 'join' '(' t2:table ')' => new Ast.Table.Join($.location, t1, t2, [], null);
    join:table_join 'on' pp:param_passing => {
        join = join.clone();
        join.in_params.push(pp);
        return join;
    };
}

stream : Ast.Stream = {
    'timer' 'base' '=' base:value ',' 'interval' '=' interval:value => new Ast.Stream.Timer($.location, base, interval, null, null);
    'timer' 'base' '=' base:value ',' 'interval' '=' interval:value ',' 'frequency' '=' frequency:value => new Ast.Stream.Timer($.location, base, interval, frequency, null);
    'attimer' 'time' '=' time:value => new Ast.Stream.AtTimer($.location, time instanceof Ast.ArrayValue ? time.value : [time], null, null);
    'attimer' 'time' '=' time:value ',' 'expiration_date' '=' expiration_date:value => new Ast.Stream.AtTimer($.location, time instanceof Ast.ArrayValue ? time.value : [time], expiration_date, null);

    'monitor' '(' table ')' => new Ast.Stream.Monitor($.location, table, null, null);
    'monitor' '(' table ')' 'on' 'new' pname:out_param => {
        return new Ast.Stream.Monitor($.location, table, [pname.name], null);
    };

    'monitor' '(' table ')' 'on' 'new' '[' pnames:out_param_list ']' => {
        return new Ast.Stream.Monitor($.location, table, pnames.map((p : Ast.VarRefValue) => p.name), null);
    };

    'edge' '(' stream ')' 'on' filter => {
        return new Ast.Stream.EdgeFilter($.location, stream, filter, null);
    };

    // edge on true is the equivalent of "only once"
    'edge' '(' stream ')' 'on' 'true' => new Ast.Stream.EdgeFilter($.location, stream, Ast.BooleanExpression.True, null);

    '[' pnames:out_param_list ']' 'of' '(' stream ')'          => new Ast.Stream.Projection($.location, stream, pnames.map((p : Ast.VarRefValue) => p.name), null);

    'compute' expr:non_ambiguous_value 'of' '(' stream ')'       => new Ast.Stream.Compute($.location, stream, expr, null, null);

    stream_join;
}

stream_join : Ast.JoinStream = {
    '(' stream ')' '=>' '(' table ')' => new Ast.Stream.Join($.location, stream, table, [], null);
    '(' stream ')' 'join' '(' table ')' => new Ast.Stream.Join($.location, stream, table, [], null);
    join:stream_join 'on' pp:param_passing => {
        join = join.clone();
        join.in_params.push(pp);
        return join;
    };
}

action : Ast.NotifyAction|Ast.InvocationAction = {
    'notify' => new Ast.Action.Notify($.location, 'notify', null);
    call => new Ast.Action.Invocation($.location, call, null);
}

selector : [Ast.DeviceSelector, string] = {
    fn:FUNCTION => [new Ast.DeviceSelector($.location, fn.value.kind, null, null), fn.value.channel];

    selector attr:device_attribute => {
        const [sel,] = selector;
        if (attr.name === 'id') {
            sel.id = String(attr.value.toJS());
            const value = attr.value;
            if (value instanceof Ast.EntityValue && value.display)
                sel.attributes.push(new Ast.InputParam(null, 'name', new Ast.Value.String(value.display)));
        } else if (attr.name === 'all') {
            sel.all = attr.value.toJS() as boolean;
        } else {
            sel.attributes.push(attr);
        }
        return selector;
    };
}

device_attribute : Ast.InputParam = {
    pname:ATTRIBUTE_NAME '=' v:value => new Ast.InputParam($.location, pname.value, v);
}

call : Ast.Invocation = {
    selector => {
        const [sel, chan] = selector;
        return new Ast.Invocation($.location, sel, chan, [], null);
    };
    inv:call ip:const_param => {
        inv = inv.clone();
        inv.in_params.push(ip);
        return inv;
    };
}

param_passing : Ast.InputParam = {
    pname:PARAM_NAME '=' out_param => new Ast.InputParam($.location, pname.value, out_param);
    pname:PARAM_NAME '=' 'event' => new Ast.InputParam($.location, pname.value, new Ast.Value.Event(null));
}

const_param : Ast.InputParam = pname:PARAM_NAME '=' v:value => new Ast.InputParam($.location, pname.value, v);

out_param : Ast.VarRefValue = pname:PARAM_NAME => new Ast.Value.VarRef(pname.value);

out_param_list : Ast.VarRefValue[] = {
    pname:out_param => [pname];
    list:out_param_list ',' pname:out_param => list.concat(pname);
}

// note that $filter is not recursive!
// it must be in CNF form
// also note that and takes priority over or
// this is the opposite of regular TT (which copies JS in that respect)
// because most filters are just a list of
// "condition and this or that and foo or bar"
// to be read as
// "condition and (this or that) and (foo or bar)"
filter : Ast.BooleanExpression = {
    or_filter;
    f1:filter 'and' f2:or_filter => new Ast.BooleanExpression.And($.location, [f1, f2]);
}

or_filter : Ast.BooleanExpression = {
    unary_filter;
    f1:or_filter 'or' f2:unary_filter => new Ast.BooleanExpression.Or($.location, [f1, f2]);
}

unary_filter : Ast.BooleanExpression = {
    atom_filter;
    'not' f:atom_filter => new Ast.BooleanExpression.Not($.location, f);
}

atom_filter : Ast.BooleanExpression = {
    'true' pname:PARAM_NAME => new Ast.BooleanExpression.DontCare($.location, pname.value);

    pname:PARAM_NAME op:comparison_op rhs:value => {
        return new Ast.BooleanExpression.Compute($.location, new Ast.VarRefValue(pname.value), op, rhs);
    };
    lhs:non_ambiguous_value op:comparison_op rhs:value => {
        return new Ast.BooleanExpression.Compute($.location, lhs, op, rhs);
    };
    fn:call '{' filter '}' => {
        const expr = new Ast.FilterExpression(
            $.location,
            new Ast.InvocationExpression($.location, fn, null),
            filter,
            null
        );
        return new Ast.BooleanExpression.ExistentialSubquery($.location, expr);
    };
}

/*
aggregate_expression = {
    'count' '(' pname:PARAM_NAME ')' => {
        const list = new Ast.ListExpression(null, pname.value, null);
        return new Ast.ScalarExpression.Aggregation(null, 'count', '*', list);
    };

    'count' '(' pname:PARAM_NAME 'filter' filter:filter ')' => {
        const list = new Ast.ListExpression(null, pname.value, filter);
        return new Ast.ScalarExpression.Aggregation(null, 'count', '*', list);
    };

    op:aggr_op '(' pname:PARAM_NAME ')' => {
        const list = new Ast.ListExpression(null, pname.value, null);
        return new Ast.ScalarExpression.Aggregation(null, op, null, list);
    };

    op:aggr_op '(' pname:PARAM_NAME 'filter' filter:filter ')' => {
        const list = new Ast.ListExpression(null, pname.value, filter);
        return new Ast.ScalarExpression.Aggregation(null, op, null, list);
    };

    op:aggr_op '(' field:PARAM_NAME 'of' pname:PARAM_NAME ')' => {
        const list = new Ast.ListExpression(null, pname.value, null);
        return new Ast.ScalarExpression.Aggregation(null, op, field.value, list);
    };

    op:aggr_op '(' field:PARAM_NAME 'of' pname:PARAM_NAME 'filter' filter:filter ')' => {
        const list = new Ast.ListExpression(null, pname.value, filter);
        return new Ast.ScalarExpression.Aggregation(null, op, field.value, list);
    };
}
*/

/*
scalar_expression = {
    op:scalar_op '(' operand_list ')' => {
        return new Ast.ScalarExpression.Derived(null, op, operand_list);
    };
    'filter' '(' pname:PARAM_NAME 'filter' filter:filter ')' => {
        const list = new Ast.ListExpression(null, pname.value, filter);
        return new Ast.ScalarExpression.Filter(null, list);
    };
}
*/

operand_list : Ast.Value[] = {
    value => [value];
    list:operand_list ',' value => {
        list.push(value);
        return list;
    };
}

comparison_op : string = {
    '==';
    '>=';
    '<=';
    '=~';
    '~=';
    'starts_with';
    'ends_with';
    'prefix_of';
    'suffix_of';
    'contains';
    'contains~';
    '~contains';
    'in_array';
    'in_array~';
    '~in_array';
}

// to avoid ambiguity caused by the "true" boolean constant and the "true" boolean expression
// and the `PARAM_NAME of ...` value (array field) and the `PARAM_NAME of ...` table (projection)
// we need to force certain expressions not to be constants or raw PARAM_NAMEs
// to do that, we need to duplicate the grammar
non_ambiguous_value : Ast.Value = {
    nc_add_expr;
}

nc_add_expr : Ast.Value= {
    nc_mul_expr;

    lhs:nc_add_expr '+' rhs:nc_mul_expr => new Ast.Value.Computation('+', [lhs, rhs]);
    lhs:nc_add_expr '-' rhs:nc_mul_expr => new Ast.Value.Computation('-', [lhs, rhs]);
}
nc_mul_expr : Ast.Value = {
    nc_exp_expr;

    lhs:nc_mul_expr '*' rhs:nc_exp_expr => new Ast.Value.Computation('*', [lhs, rhs]);
    lhs:nc_mul_expr '/' rhs:nc_exp_expr => new Ast.Value.Computation('/', [lhs, rhs]);
    lhs:nc_mul_expr '%' rhs:nc_exp_expr => new Ast.Value.Computation('%', [lhs, rhs]);
}
nc_exp_expr : Ast.Value = {
    nc_array_field_value;

    lhs:nc_exp_expr '**' rhs:nc_array_field_value => new Ast.Value.Computation('**', [lhs, rhs]);
}

nc_array_field_value : Ast.Value = {
    field:PARAM_NAME 'of' value:nc_filter_value => new Ast.Value.ArrayField(value, field.value);

    nc_filter_value;
}

nc_filter_value : Ast.Value = {
    nc_primary_value;

    value:nc_primary_value 'filter' '{' filter '}' => new Ast.Value.Filter(value, filter);
}

nc_primary_value : Ast.Value = {
    // if we introduce a level of parenthesis, the ambiguity caused by "true"/"false"
    // goes away and we can use constants too
    '(' value ')' => value;

    array_value;
    scalar_function;
    undefined_value;
    context_value;
    object_literal_value;
}

primary_value : Ast.Value = {
    nc_primary_value;
    var_ref_value;
    constant_value;
}


value : Ast.Value = {
    add_expr;
}

add_expr : Ast.Value = {
    mul_expr;

    lhs:add_expr '+' rhs:mul_expr => new Ast.Value.Computation('+', [lhs, rhs]);
    lhs:add_expr '-' rhs:mul_expr => new Ast.Value.Computation('-', [lhs, rhs]);
}
mul_expr : Ast.Value = {
    exp_expr;

    lhs:mul_expr '*' rhs:exp_expr => new Ast.Value.Computation('*', [lhs, rhs]);
    lhs:mul_expr '/' rhs:exp_expr => new Ast.Value.Computation('/', [lhs, rhs]);
    lhs:mul_expr '%' rhs:exp_expr => new Ast.Value.Computation('%', [lhs, rhs]);
}
exp_expr : Ast.Value = {
    array_field_value;

    lhs:exp_expr '**' rhs:array_field_value => new Ast.Value.Computation('**', [lhs, rhs]);
}

array_field_value : Ast.Value = {
    field:PARAM_NAME 'of' value:filter_value => new Ast.Value.ArrayField(value, field.value);

    filter_value;
}

filter_value : Ast.Value = {
    primary_value;

    value:primary_value 'filter' '{' filter '}' => new Ast.Value.Filter(value, filter);
}

scalar_function : Ast.ComputationValue = {
    op:scalar_op '(' operand_list ')' => new Ast.Value.Computation(op, operand_list);
    op:aggr_op '(' value ')' => new Ast.Value.Computation(op, [value]);
    'count' '(' value ')' => new Ast.Value.Computation('count', [value]);
}

undefined_value : Ast.UndefinedValue = {
    'undefined' => new Ast.Value.Undefined(true);
}

var_ref_value : Ast.VarRefValue = {
    out_param;
}

context_value : Ast.ContextRefValue = {
    ctx:CONTEXT_REF => new Ast.Value.ContextRef(ctx.value.name, ctx.value.type);
}

array_value : Ast.ArrayValue = {
    '[' ']' => new Ast.Value.Array([]);
    '[' values:array_literal_values ']' => new Ast.Value.Array(values);
}

object_literal_value : Ast.ObjectValue = {
    '{' '}' => new Ast.Value.Object({});
    '{' values:object_literal_entry_list '}' => new Ast.Value.Object(values);
}

object_literal_entry_list : { [key : string] : Ast.Value } = {
    name:PARAM_NAME '=' value:value => ({ [name.value]: value });
    obj:object_literal_entry_list ',' name:PARAM_NAME '=' value:value => {
        obj[name.value] = value;
        return obj;
    };
}

constant_RecurrentTimeSpecification : Ast.Value = {
    'new' 'RecurrentTimeSpecification' '(' rules:recurrent_time_rule_list ')' =>
        new Ast.Value.RecurrentTimeSpecification(rules);
}

recurrent_time_rule_list : Ast.RecurrentTimeRule[] = {
    first:recurrent_time_rule => [first];

    head:recurrent_time_rule_list ',' tail:recurrent_time_rule => head.concat([tail]);
}

recurrent_time_rule : Ast.RecurrentTimeRule = {
    '{' list:recurrent_time_item_list '}' => {
        const obj : { [key : string] : unknown } = {};
        for (const item of list) {
            if (obj[item[0]])
                return $.error(`Duplicate recurrent time rule key ${item[0]}`);
            obj[item[0]] = item[1];
        }
        return new Ast.RecurrentTimeRule(obj as any);
    };
}

recurrent_time_item_list : Array<[string, any]> = {
    first:recurrent_time_item => [first];

    head:recurrent_time_item_list ',' tail:recurrent_time_item => head.concat([tail]);
}

recurrent_time_item : [string, any] = {
    'beginDate' '=' v:absolute_or_edge_date => ['beginDate', v.value];
    'endDate' '=' v:absolute_or_edge_date => ['endDate', v.value];

    'beginTime' '=' v:absolute_time => ['beginTime', v];
    'endTime' '=' v:absolute_time => ['endTime', v];

    'frequency' '=' v:literal_number => ['frequency', v];
    'interval' '=' v:constant_Measure => ['interval', v];

    'dayOfWeek' '=' v:ENUM => ['dayOfWeek', v.value];

    'subtract' '=' 'true' => ['subtract', true];
    'subtract' '=' 'false' => ['subtract', false];
}

constant_value : Ast.Value = {
    constant_Boolean;
    constant_String;
    constant_Measure;
    constant_Number;
    constant_Currency;
    constant_Location;
    constant_Date;
    constant_Time;
    constant_Entity__unknown;
    constant_Entity__tt__username;
    constant_Entity__tt__hashtag;
    constant_Entity__tt__phone_number;
    constant_Entity__tt__email_address;
    constant_Entity__tt__path_name;
    constant_Entity__tt__url;
    constant_Entity__tt__device;
    constant_Entity__tt__function;
    constant_Entity__tt__picture;
    constant_Enum;
    constant_RecurrentTimeSpecification;
    slot:SLOT => (slot.value === undefined ? new Ast.Value.Undefined(true) : slot.value);
}

array_literal_values : Ast.Value[] = {
    value => [value];
    array:array_literal_values ',' v:value => array.concat([v]);
}

constant_Boolean : Ast.BooleanValue = {
    'true' => new Ast.Value.Boolean(true);
    'false' => new Ast.Value.Boolean(false);
}

constant_String : Ast.StringValue = {
    '""' => new Ast.Value.String('');
    str:QUOTED_STRING => new Ast.Value.String(str.value);
    '"' str:word_list '"' => new Ast.Value.String(str);
}

word_list : string = {
    word:WORD => word.value;
    list:word_list word:WORD => list + ' ' + word.value;
}

literal_number : number = {
    num:NUMBER => num.value;
    num:LITERAL_INTEGER => num.value;
    '1' => 1;
    '0' => 0;
}

constant_Measure : Ast.MeasureValue = {
    num:literal_number unit:UNIT => new Ast.Value.Measure(num, unit.value);
    tok:MEASURE => new Ast.Value.Measure(tok.value.value, tok.value.unit);
    tok:DURATION => new Ast.Value.Measure(tok.value.value, tok.value.unit);
}

constant_Number : Ast.NumberValue = {
    num:literal_number => new Ast.Value.Number(num);
    '-' num:literal_number => new Ast.Value.Number(-num);
}

constant_Currency : Ast.CurrencyValue = {
    tok:CURRENCY => new Ast.Value.Currency(tok.value.value, tok.value.unit);
    'new' 'Currency' '(' num:literal_number ',' unit:UNIT ')' => new Ast.Value.Currency(num, unit.value);
    num:literal_number tok:CURRENCY_CODE => new Ast.Value.Currency(num, tok.value);
}
constant_Location : Ast.LocationValue = {
    'location:current_location' => new Ast.Value.Location(new Ast.Location.Relative('current_location'));
    'location:home' => new Ast.Value.Location(new Ast.Location.Relative('home'));
    'location:work' => new Ast.Value.Location(new Ast.Location.Relative('work'));
    loc:LOCATION => new Ast.Value.Location(new Ast.Location.Absolute(loc.value.latitude, loc.value.longitude, loc.value.display||null));
    'location:' '"' str:word_list '"' => new Ast.Value.Location(new Ast.Location.Unresolved(str));

    'new' 'Location' '(' lat:constant_Number ',' lon:constant_Number ',' display:constant_String ')' => {
        return new Ast.Value.Location(new Ast.Location.Absolute(lat.value, lon.value, display.value));
    };
    'new' 'Location' '(' lat:constant_Number ',' lon:constant_Number ')' => {
        return new Ast.Value.Location(new Ast.Location.Absolute(lat.value, lon.value, null));
    };
    'new' 'Location' '(' name:constant_String ')' => {
        return new Ast.Value.Location(new Ast.Location.Unresolved(name.value));
    };
}

// Note that while keeping digits in ranges [0-23],[0-59],[0-59] is not enforced
// here, it is enforced in tonn_converter, rendering it unnecessary to do so here
absolute_time : Ast.AbsoluteTime = {
    time:TIME => new Ast.Time.Absolute(time.value.hour, time.value.minute, time.value.second||0);
    time:LITERAL_TIME => {
        const tokens = time.value.split(':');
        return new Ast.Time.Absolute(parseInt(tokens[0]), parseInt(tokens[1]), parseInt(tokens[2]));
    };
}

constant_Time : Ast.TimeValue = {
    time:absolute_time => new Ast.Value.Time(time);

    'time:morning' => new Ast.Value.Time(new Ast.Time.Relative('morning'));
    'time:evening' => new Ast.Value.Time(new Ast.Time.Relative('evening'));
}

// start_of/end_of with less than 1h are not supported
// (they don't make sense)
constant_Date : Ast.DateValue = {
    'now' => new Ast.Value.Date(null);
    'new' 'Date' '(' ')' => new Ast.Value.Date(null);

    absolute_or_edge_date;
}

absolute_or_edge_date : Ast.DateValue = {
    'new' 'Date' '(' year:constant_Number ',' month:constant_Number ',' day:constant_Number ')' => {
        let yearnum = year.value;
        if (yearnum > 0 && yearnum < 100) {
            if (yearnum >= 50)
                yearnum = 1900 + yearnum;
            else
                yearnum = 2000 + yearnum;
        }
        const d = new Date;
        d.setFullYear(yearnum);
        // set both the month and the date at the same time
        // otherwise when today's date is the 31st and the chosen
        // month has 30 days, the Date will be adjusted to the
        // first day of the subsequent month, which is wrong
        d.setMonth(month.value-1, day.value);
        d.setHours(0, 0, 0, 0);
        return new Ast.Value.Date(d);
    };
    'new' 'Date' '(' year:constant_Number ',' month:constant_Number ',' day:constant_Number ','
                     hours:constant_Number ',' minutes:constant_Number ',' seconds:constant_Number ')' => {
        const d = new Date;
        let yearnum = year.value;
        if (yearnum > 0 && yearnum < 100) {
            if (yearnum >= 50)
                yearnum = 1900 + yearnum;
            else
                yearnum = 2000 + yearnum;
        }
        d.setFullYear(yearnum);
        d.setMonth(month.value-1, day.value);
        d.setHours(hours.value, minutes.value, seconds.value, 0);
        return new Ast.Value.Date(d);
    };
    'new' 'Date' '(' unix:constant_Number ')' => {
        const d = new Date;
        d.setTime(unix.value);
        return new Ast.Value.Date(d);
    };
    'new' 'Date' '(' '"' iso:word_list '"' ')' => {
        return new Ast.Value.Date(new Date(iso));
    };

    abs:DATE => new Ast.Value.Date(parseDate(abs.value, $.timezone));

    'new' 'Date' '(' year:constant_Number ',' ',' ',' ')' => {
        return new Ast.Value.Date(new Ast.DatePiece(year.value, null, null, null));
    };
    'new' 'Date' '(' ',' month:constant_Number ',' ',' ')' => {
        return new Ast.Value.Date(new Ast.DatePiece(null, month.value, null, null));
    };
    'new' 'Date' '(' ',' ',' day:constant_Number ',' ')' => {
        return new Ast.Value.Date(new Ast.DatePiece(null, null, day.value, null));
    };
    'new' 'Date' '(' year:constant_Number ',' month:constant_Number ',' ',' ')' => {
        return new Ast.Value.Date(new Ast.DatePiece(year.value, month.value, null, null));
    };
    'new' 'Date' '(' ',' month:constant_Number ',' day:constant_Number ',' ')' => {
        return new Ast.Value.Date(new Ast.DatePiece(null, month.value, day.value, null));
    };
    'new' 'Date' '(' ',' ',' day:constant_Number ',' time:absolute_time ')' => {
        return new Ast.Value.Date(new Ast.DatePiece(null, null, day.value, time));
    };
    'new' 'Date' '(' ',' month:constant_Number ',' day:constant_Number ',' time:absolute_time ')' => {
        return new Ast.Value.Date(new Ast.DatePiece(null, month.value, day.value, time));
    };
    'new' 'Date' '(' weekday:ENUM ')' => {
        const d = new Ast.WeekDayDate(weekday.value, null);
        return new Ast.Value.Date(d);
    };
    'new' 'Date' '(' weekday:ENUM ',' time:absolute_time ')' => {
        const d = new Ast.WeekDayDate(weekday.value, time);
        return new Ast.Value.Date(d);
    };

    'start_of' unit:UNIT => new Ast.Value.Date(new Ast.DateEdge('start_of', unit.value));
    'end_of' unit:UNIT => new Ast.Value.Date(new Ast.DateEdge('end_of', unit.value));
}

// luinet expands this into the various enums in the right
// place for a parameter (as the meaning of an enum changes according
// to the parameter anyway)
constant_Enum : Ast.EnumValue = venum:ENUM => new Ast.Value.Enum(venum.value);

constant_Entity__unknown : Ast.EntityValue = {
    entity:GENERIC_ENTITY => new Ast.Value.Entity(entity.value.value, entity.value.type, entity.value.display);
    '"' str:word_list '"' type:ENTITY_TYPE => {
        if (type.value === 'tt:hashtag' || type.value === 'tt:username')
            return new Ast.Value.Entity(str, type.value, null);
        else
            return new Ast.Value.Entity(null, type.value, str);
    };
}

constant_Entity__tt__username      : Ast.EntityValue = entity:USERNAME      => new Ast.Value.Entity(entity.value, 'tt:username', null);
constant_Entity__tt__hashtag       : Ast.EntityValue = entity:HASHTAG       => new Ast.Value.Entity(entity.value, 'tt:hashtag', null);
constant_Entity__tt__url           : Ast.EntityValue = entity:URL           => new Ast.Value.Entity(entity.value, 'tt:url', null);
constant_Entity__tt__phone_number  : Ast.EntityValue = entity:PHONE_NUMBER  => new Ast.Value.Entity(entity.value, 'tt:phone_number', null);
constant_Entity__tt__email_address : Ast.EntityValue = entity:EMAIL_ADDRESS => new Ast.Value.Entity(entity.value, 'tt:email_address', null);
constant_Entity__tt__path_name     : Ast.EntityValue = entity:PATH_NAME     => new Ast.Value.Entity(entity.value, 'tt:path_name', null);
constant_Entity__tt__device        : Ast.EntityValue = entity:DEVICE        => new Ast.Value.Entity(entity.value, 'tt:device', null);
constant_Entity__tt__function      : Ast.EntityValue = entity:FUNCTION      => new Ast.Value.Entity(entity.value.kind + ':' + entity.value.channel, 'tt:function', null);
constant_Entity__tt__picture       : Ast.EntityValue = entity:PICTURE       => new Ast.Value.Entity(entity.value, 'tt:picture', null);
