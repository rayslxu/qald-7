import * as Ast from './ast';
import type SchemaRetriever from './schema';
export default class TypeChecker {
    private _schemas;
    private _classes;
    private _useMeta;
    private _entitySubTypeMap;
    private _cachedEntityAncestors;
    constructor(schemas: SchemaRetriever, useMeta?: boolean);
    private _ensureEntitySubTypes;
    private _getEntityAncestors;
    private _isAssignable;
    private _typeCheckValue;
    private _typecheckPrincipal;
    /**
     * Given a key and a typeScope, return a list of typeScopes where the value
     * of the key is each ancestor of the original entity
     *
     * During overload, entities with the common ancestor is allowed to be assigned
     * to each other. Thus, we would try with all ancestors to see if ant of them
     * is assignable.
     */
    private _expandTypeScope;
    private _resolveOverload;
    private _resolveScalarExpressionOps;
    private _resolveFilterOverload;
    private _typeCheckFilter;
    private _typeCheckFilterHelper;
    private _typeCheckSubquery;
    private _typeCheckSubqueryValue;
    private _resolveAggregationOverload;
    private _typeCheckAggregation;
    private _typeCheckSort;
    private _typeCheckIndex;
    private _typeCheckSlice;
    private _typeCheckMonitor;
    private _typeCheckJoin;
    private _resolveFilter;
    private _resolveNewProjection;
    private _resolveNewProjection2;
    private _resolveChain;
    private _typeCheckInputArgs;
    private _checkExpressionType;
    private _typeCheckExpression;
    private _loadFunctionSchema;
    private _loadTpSchema;
    private _loadAllSchemas;
    typeCheckClass(klass: Ast.ClassDef, isLibrary: boolean): Promise<void>;
    private _typeCheckMixin;
    private _typeCheckMetadata;
    private _typeCheckFunctionAnnotations;
    private _typeCheckFunctionInheritance;
    private _typeCheckFunctionDef;
    private _typeCheckDeclarationArgs;
    private _typeCheckDeclarationCommon;
    private _typeCheckDeclaration;
    typeCheckExample(ast: Ast.Example): Promise<void>;
    private _typeCheckAssignment;
    private _typeCheckExpressionStatement;
    private _typeCheckProgramAnnotations;
    typeCheckProgram(ast: Ast.Program): Promise<void>;
    typeCheckDialogue(ast: Ast.DialogueState): Promise<void>;
    private _getAllowedSchema;
    private _typecheckPermissionFunction;
    typeCheckPermissionRule(permissionRule: Ast.PermissionRule): Promise<void>;
    private _typeCheckDataset;
    typeCheckLibrary(meta: Ast.Library): Promise<void>;
    typeCheckControl(intent: Ast.ControlIntent): Promise<void>;
}
