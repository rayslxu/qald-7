import Type from './type';
import { FunctionDef } from './ast/function_def';
import type * as Builtin from './runtime/builtins';
/**
 * Declare the implementation of a ThingTalk operator.
 */
export interface OpImplementation {
    /**
     * A JavaScript operator that implement this ThingTalk operator.
     */
    op?: string;
    /**
     * A function in the {@link Builtin} namespace that implements this operator.
     */
    fn?: keyof typeof Builtin;
    /**
     * Invert the arguments of the JS function/operator compared to the ThingTalk operator.
     */
    flip?: boolean;
    /**
     * Pass the ExecEnvironment as the first argument to the function.
     */
    env?: boolean;
}
export declare type OverloadResolver = (...types: Type[]) => OpImplementation;
/**
 * Definition of a ThingTalk operator.
 */
export interface OpDefinition extends OpImplementation {
    /**
     * The possible overloads of this operator. Each array member is an overload:
     * the first N-1 elements are the input types and the last
     * is the result type.
     */
    types: Array<Array<(Type | string)>>;
    /**
     * Compute which implementation to use for a given overload.
     */
    overload?: OverloadResolver;
}
/**
 * Definitions (type signatures) of ThingTalk binary comparison operators.
 *
 * @package
 */
export declare const BinaryOps: {
    [op: string]: OpDefinition;
};
/**
 * Definitions (type signatures) of ThingTalk unary operators.
 */
export declare const UnaryOps: {
    [op: string]: OpDefinition;
};
/**
 * Definitions (type signatures) of ThingTalk scalar operators.
 */
export declare const ScalarExpressionOps: {
    [op: string]: OpDefinition;
};
/**
 * Definitions (type signatures) of ThingTalk aggregation operators.
 */
export declare const Aggregations: {
    [op: string]: OpDefinition;
};
/**
 * Definitions (type signatures) of builtin ThingTalk functions.
 *
 * These are functions that are predefined and can be called without the @-sign.
 */
export declare const Functions: {
    [key: string]: FunctionDef;
};
