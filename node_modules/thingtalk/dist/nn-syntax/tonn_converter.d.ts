export default class ToNNConverter {
    constructor(entityFinder: any, typeAnnotations?: boolean);
    typeAnnotations: boolean;
    entityFinder: any;
    findEntity(entityType: any, value: any, options?: {}): any;
    _compoundTypeToScope(type: any, parentscope: any): Scope;
    valueToNN(value: any, scope: any): any;
    cnfFilterToNN(filter: any, scope: any): List<never>;
    streamToNN(stream: any): any;
    _invocationToNN(invocation: any): string;
    tableToNN(table: any): any;
    actionInvocationToNN(action: any, outschema: any): List<string>;
    actionToNN(action: any, outschema: any): any;
    ruleToNN(rule: any): List<any>;
    commandToNN(command: any): List<any>;
    assignmentToNN(ass: any): List<any>;
    permissionFunctionToNN(fn: any, ifbuiltin: any): any;
    permissionRuleToNN(rule: any): any[];
    programToNN(program: any): any[];
    _bookkeepingFilterToNN(filter: any): List<never>;
    _bookkeepingIntentToNN(intent: any): List<any>;
    bookkeepingToNN(program: any): any[];
    _historyResultToNN(ast: any): List<string>;
    _historyItemToNN(item: any): List<any>;
    dialogueStateToNN(state: any): string[];
    toNN(program: any): any[];
}
declare class Scope {
    constructor(schema: any, parent?: null);
    _schema: any;
    _parent: any;
    get(name: any): any;
    has(name: any): any;
    _iterate(): Generator<any, void, any>;
    keys(): any[];
}
import List from "../utils/list";
export {};
