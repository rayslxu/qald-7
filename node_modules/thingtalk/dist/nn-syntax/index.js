"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of ThingTalk
//
// Copyright 2019-2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityRetriever = exports.AbstractEntityRetriever = exports.UnsynthesizableError = exports.applyCompatibility = exports.toNN = exports.fromNN = void 0;
const parser_1 = __importDefault(require("./parser"));
const lexer_1 = __importDefault(require("./lexer"));
const tonn_converter_1 = __importDefault(require("./tonn_converter"));
const errors_1 = require("./errors");
Object.defineProperty(exports, "UnsynthesizableError", { enumerable: true, get: function () { return errors_1.UnsynthesizableError; } });
const entity_retriever_1 = require("../entity-retriever");
Object.defineProperty(exports, "AbstractEntityRetriever", { enumerable: true, get: function () { return entity_retriever_1.AbstractEntityRetriever; } });
Object.defineProperty(exports, "EntityRetriever", { enumerable: true, get: function () { return entity_retriever_1.EntityRetriever; } });
const compat_1 = __importDefault(require("./compat"));
exports.applyCompatibility = compat_1.default;
/**
 * Manipulating NN-syntax ThingTalk programs.
 *
 * NN-syntax is a syntax of ThingTalk optimized for sequential prediction.
 *
 * @namespace NNSyntax
 */
/**
 * Parse a sequence of tokens in NN syntax into a ThingTalk program.
 *
 * @param {string|Array<string>} sequence - the program to parse.
 * @param {Object<string, any>} entities - concrete values of the entities referred in the program.
 * @return {Ast.Input} - the parsed program
 */
function fromNN(input, entities, options = {}) {
    let sequence;
    if (typeof input === 'string')
        sequence = input.split(' ');
    else
        sequence = input;
    const parser = new parser_1.default(options);
    return parser.parse({
        [Symbol.iterator]() {
            return new lexer_1.default(sequence, entities);
        }
    });
}
exports.fromNN = fromNN;
function toNN(program, entityRetriever, options) {
    const converter = new tonn_converter_1.default(entityRetriever, options.typeAnnotations);
    return converter.toNN(program);
}
exports.toNN = toNN;
//# sourceMappingURL=index.js.map