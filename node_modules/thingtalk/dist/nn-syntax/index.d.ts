import type * as Ast from '../ast';
import { UnsynthesizableError } from './errors';
import { AbstractEntityRetriever, EntityRetriever } from '../entity-retriever';
import { MeasureEntity, LocationEntity, TimeEntity, GenericEntity, DateEntity, EntityMap, EntityResolver, AnyEntity } from '../entities';
import applyCompatibility from './compat';
/**
 * Manipulating NN-syntax ThingTalk programs.
 *
 * NN-syntax is a syntax of ThingTalk optimized for sequential prediction.
 *
 * @namespace NNSyntax
 */
/**
 * Parse a sequence of tokens in NN syntax into a ThingTalk program.
 *
 * @param {string|Array<string>} sequence - the program to parse.
 * @param {Object<string, any>} entities - concrete values of the entities referred in the program.
 * @return {Ast.Input} - the parsed program
 */
declare function fromNN(input: string | string[], entities: EntityMap | EntityResolver, options?: {
    locale?: string;
    timezone?: string;
}): Ast.Input;
interface SerializeOptions {
    typeAnnotations?: boolean;
}
declare function toNN(program: Ast.Input, entityRetriever: AbstractEntityRetriever, options: SerializeOptions): string[];
export { fromNN, toNN, applyCompatibility, UnsynthesizableError, AbstractEntityRetriever, EntityRetriever, EntityMap, MeasureEntity, LocationEntity, TimeEntity, GenericEntity, DateEntity, AnyEntity };
