"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of ThingTalk
//
// Copyright 2017-2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const smt = __importStar(require("smtlib"));
const Ast = __importStar(require("./ast"));
const type_1 = __importDefault(require("./type"));
const BuiltinDefs = __importStar(require("./operators"));
const BuiltinOps = __importStar(require("./runtime/primitive_ops"));
const utils_1 = require("./utils");
function arrayEquals(a, b) {
    if (a === null && b === null)
        return true;
    if (a === null || b === null)
        return false;
    if (a.length !== b.length)
        return false;
    for (let i = 0; i < a.length; i++) {
        if (a[i] !== b[i])
            return false;
    }
    return true;
}
function isGroupMember(principal, group, groupmap) {
    return (groupmap.get(principal) || []).indexOf(group) >= 0;
}
function DeclareDatatype(name, constructors) {
    const sortdec = new smt.SExpr(name, '0');
    const datatypedec = new smt.SExpr(...constructors.map((c) => Array.isArray(c) ? new smt.SExpr(...c) : new smt.SExpr(c)));
    return new smt.SExpr('declare-datatypes', new smt.SExpr(sortdec), new smt.SExpr(datatypedec));
}
// Reduces a program and a set of Allowed rules into one call to the SMT, and invokes
// the SMT solver
class SmtReduction {
    constructor(SolverClass, { allowUndefined = false, debug = false }) {
        this._solver = new SolverClass();
        this._allowUndefined = allowUndefined;
        this._debug = debug;
        this._declarations = [];
        this._declarations.push(smt.DeclareSort('ResultId'));
        this._declarations.push(DeclareDatatype('Location', ['loc.home', 'loc.work', 'loc.current_location',
            ['loc.absolute', '(loc.lat Real)', '(loc.lon Real)'],
            ['loc.byName', '(loc.name String)']
        ]));
        this._entityTypes = new Set;
        const contactType = this._declareEntityType(new type_1.default.Entity('tt:contact'));
        const contactGroupType = this._declareEntityType(new type_1.default.Entity('tt:contact_group'));
        this._declarations.push(smt.DeclareFun('Entity_tt_contact.getGroups', [contactType], smt.SetType(contactGroupType)));
        this._currencies = new Set;
        this._enumtypes = [];
        this._fnparams = new Map;
        this._constants = new Map;
        this._classes = {};
        this._functions = new Set;
        this._asserts = [];
        this._filteridx = 0;
        this._filtermap = [];
        this._filterrevmap = new Map;
        this._externalfnidx = 0;
        this._uf = new Map;
        this._nextSkolemBool = 0;
    }
    _getSkolemBool() {
        const bool = 'sk_' + this._nextSkolemBool++;
        this._constants.set(bool, 'Bool');
        return bool;
    }
    _add(stmt) {
        this._solver.add(stmt);
    }
    _declare(stmt) {
        this._declarations.push(stmt);
    }
    _addEverything() {
        for (const [name, t] of this._enumtypes)
            this._add(smt.DeclareDatatype(name, t.entries.map((e) => name + '.' + e)));
        for (const decl of this._declarations)
            this._add(decl);
        for (const [name, t] of this._constants.entries())
            this._add(smt.DeclareFun(name, [], t));
        for (const assert of this._asserts)
            this._solver.assert(assert);
    }
    _makeEnumType(type) {
        for (const [name, enumType] of this._enumtypes) {
            if (arrayEquals(type.entries, enumType.entries))
                return name;
        }
        const name = 'Enum_' + this._enumtypes.length;
        this._enumtypes.push([name, type]);
        return name;
    }
    _declareEntityType(type) {
        const entityType = type.type;
        const smtType = 'Entity_' + entityType.replace(/[^A-Za-z0-9_]/g, '_');
        if (this._entityTypes.has(entityType))
            return smtType;
        this._entityTypes.add(entityType);
        this._declarations.push(DeclareDatatype(smtType, [['mk.' + smtType, '(' + smtType + '.get String)']]));
        return smtType;
    }
    _getEntityValue(value, type) {
        this._declareEntityType(type);
        const entityType = type.type;
        const smtType = 'Entity_' + entityType.replace(/[^A-Za-z0-9_]/g, '_');
        return new smt.SExpr(smtType + '.get', value);
    }
    _typeToSmtType(type) {
        if (type instanceof type_1.default.Array)
            return smt.SetType(this._typeToSmtType(type.elem));
        if (type.isNumber || type.isMeasure)
            return 'Real';
        if (type.isBoolean)
            return 'Bool';
        if (type.isString)
            return 'String';
        if (type.isLocation)
            return 'Location';
        if (type.isTime || type.isDate)
            return 'Int';
        if (type instanceof type_1.default.Entity)
            return this._declareEntityType(type);
        if (type instanceof type_1.default.Enum)
            return this._makeEnumType(type);
        throw new TypeError('Unsupported type ' + type);
    }
    _numberToSmt(v) {
        if (v >= 0)
            return String(v);
        else
            return new smt.SExpr('-', String(-v));
    }
    _locToSmtValue(loc) {
        if (loc instanceof Ast.RelativeLocation)
            return 'loc.' + loc.relativeTag;
        if (loc instanceof Ast.UnresolvedLocation)
            return new smt.SExpr('loc.byName', smt.StringLiteral(loc.name));
        (0, assert_1.default)(loc instanceof Ast.AbsoluteLocation);
        return new smt.SExpr('loc.absolute', this._numberToSmt(loc.lat), this._numberToSmt(loc.lon));
    }
    _entityToSmtValue(entityValue, entityType) {
        const smtType = this._declareEntityType(new type_1.default.Entity(entityType));
        return new smt.SExpr('mk.' + smtType, smt.StringLiteral(entityValue));
    }
    _enumToSmtValue(enumerant, type) {
        const typename = this._makeEnumType(type);
        return typename + '.' + enumerant;
    }
    _currencyToSmt(v) {
        const code = v.code.toLowerCase();
        if (!this._currencies.has(code)) {
            this._declare(smt.DeclareFun('Currency_' + code, ['Real'], 'Real'));
            this._currencies.add(code);
        }
        return smt.Predicate('Currency_' + code, this._numberToSmt(v.value));
    }
    _valueToSmtValue(v, type) {
        if (v.isVarRef)
            throw new TypeError('Unexpected var ref in filter');
        if (v.isUndefined)
            throw new TypeError('Unexpected undefined TT value');
        if (v instanceof Ast.ArrayValue) {
            (0, assert_1.default)(type instanceof type_1.default.Array);
            if (v.value.length === 0)
                return new smt.SExpr('as', 'emptyset', new smt.SExpr('Set', this._typeToSmtType(type.elem)));
            return new smt.SExpr('insert', ...v.value.slice(1).map((elem) => this._valueToSmtValue(elem, type.elem)), new smt.SExpr('singleton', this._valueToSmtValue(v.value[0], type.elem)));
        }
        if (v instanceof Ast.BooleanValue)
            return v.value ? 'true' : 'false';
        if (v instanceof Ast.StringValue)
            return smt.StringLiteral(v.value);
        if (v instanceof Ast.CurrencyValue)
            return this._currencyToSmt(v);
        if (v instanceof Ast.NumberValue || v instanceof Ast.MeasureValue)
            return this._numberToSmt(v.toJS()); // toJS() normalizes the measurement
        if (v instanceof Ast.LocationValue)
            return this._locToSmtValue(v.value);
        if (v instanceof Ast.EntityValue)
            return this._entityToSmtValue(v.value, v.type);
        if (v instanceof Ast.EnumValue) {
            (0, assert_1.default)(type instanceof type_1.default.Enum);
            return this._enumToSmtValue(v.value, type);
        }
        if (v instanceof Ast.DateValue)
            return String(v.toJS().getTime()); // TODO handle relative dates correctly
        throw new TypeError('Unsupported value ' + v);
    }
    addGroups(principal, groups) {
        const lhs = smt.Predicate('Entity_tt_contact.getGroups', this._valueToSmtValue(principal, new type_1.default.Entity('tt:contact')));
        const contactGroupType = this._declareEntityType(new type_1.default.Entity('tt:contact_group'));
        let rhs;
        if (groups.length === 0) {
            rhs = new smt.SExpr('as', 'emptyset', smt.SetType(contactGroupType));
        }
        else if (groups.length === 1) {
            rhs = new smt.SExpr('singleton', this._valueToSmtValue(groups[0], new type_1.default.Entity('tt:contact_group')));
        }
        else {
            rhs = new smt.SExpr('insert', ...groups.slice(1).map((g) => this._valueToSmtValue(g, new type_1.default.Entity('tt:contact_group'))), new smt.SExpr('singleton', this._valueToSmtValue(groups[0], new type_1.default.Entity('tt:contact_group'))));
        }
        this._asserts.push(smt.Eq(lhs, rhs));
    }
    _filterToSmt(operator, param, paramType, value, valueType) {
        if (valueType instanceof type_1.default.Enum)
            valueType = paramType;
        if (operator !== 'group_member' && !valueType.equals(paramType)) {
            if (valueType instanceof type_1.default.Entity)
                value = this._getEntityValue(value, valueType);
            if (paramType instanceof type_1.default.Entity)
                param = this._getEntityValue(param, paramType);
        }
        switch (operator) {
            case '==':
                return smt.Eq(param, value);
            case '!=':
                return smt.NEq(param, value);
            case '>=':
                return smt.GEq(param, value);
            case '<=':
                return smt.LEq(param, value);
            case '>':
                return smt.GT(param, value);
            case '<':
                return smt.LT(param, value);
            case '=~':
                return smt.Predicate('str.contains', param, value);
            case '~=':
                return smt.Predicate('str.contains', value, param);
            case 'starts_with':
                return smt.Predicate('str.prefixof', value, param);
            case 'prefix_of':
                return smt.Predicate('str.prefixof', param, value);
            case 'ends_with':
                return smt.Predicate('str.suffixof', value, param);
            case 'suffix_of':
                return smt.Predicate('str.suffixof', param, value);
            case 'contains': // value is the element, param is the array
                return smt.Predicate('member', value, param);
            case 'in_array': // flip version of contains
                return smt.Predicate('member', param, value);
            // FIXME this is not quite correct...
            case 'contains~': // value is the element, param is the array
                return smt.Predicate('member', value, param);
            case 'in_array~': // flip version of contains
                return smt.Predicate('member', param, value);
            case 'group_member': // value is the group, param is the principal
                return smt.Predicate('member', value, smt.Predicate('Entity_tt_contact.getGroups', param));
            case 'has_member': // flip version of group_member
                return smt.Predicate('member', param, smt.Predicate('Entity_tt_contact.getGroups', value));
            default:
                throw new TypeError('Unsupported operator ' + operator);
        }
    }
    _addGetPredicate(ast, scope, scopeType) {
        const [signature, ufvar] = this._declareUninterpretedFunction(ast.selector.kind, ast.channel, ast.schema);
        const extfnvar = this._declareFunction(ast.selector.kind, ast.channel, 'pred_' + this._externalfnidx++, ast.schema);
        if (ast.schema.is_list)
            this._declare(smt.DeclareFun(extfnvar + '__resultId', [], 'ResultId'));
        const in_passed = {};
        for (const inParam of ast.in_params) {
            const ptype = ast.schema.inReq[inParam.name] || ast.schema.inOpt[inParam.name];
            const value = inParam.value;
            if (value instanceof Ast.VarRefValue) {
                if (!scope[value.name] || !scopeType[value.name])
                    throw new TypeError('Invalid input parameter value ' + value.name);
                in_passed[inParam.name] = scope[value.name];
            }
            else {
                in_passed[inParam.name] = this._valueToSmtValue(value, ptype);
            }
        }
        const inargs = [];
        for (const name of signature) {
            if (name === '__resultId')
                inargs.push(extfnvar + '__resultId');
            else
                inargs.push(in_passed[name] || ufvar + '_' + name + '_null');
        }
        const subscope = {};
        Object.assign(subscope, scope);
        const subscopeType = {};
        Object.assign(subscopeType, scopeType);
        for (const name in ast.schema.out) {
            const predname = ufvar + '_' + name;
            this._asserts.push(smt.Eq('param_' + extfnvar + '_' + name, smt.Predicate(predname, ...inargs)));
            subscope[name] = 'param_' + extfnvar + '_' + name;
            subscopeType[name] = ast.schema.out[name];
        }
        const anyresult = 'anyresult_' + extfnvar;
        this._constants.set(anyresult, 'Bool');
        this._asserts.push(smt.Eq(anyresult, smt.Predicate(ufvar + '_anyresult', ...inargs)));
        this._addInputParams(extfnvar, ast, scope, scopeType, []);
        return smt.And(anyresult, this._processFilter(ast.filter, subscope, subscopeType));
    }
    _processFilter(ast, scope, scopeType) {
        (0, assert_1.default)(scopeType);
        if (ast.isTrue || ast.isDontCare)
            return 'true';
        if (ast.isFalse)
            return 'false';
        if (ast instanceof Ast.AndBooleanExpression && ast.operands.length === 0)
            return 'true';
        if (ast instanceof Ast.OrBooleanExpression && ast.operands.length === 0)
            return 'false';
        if (ast instanceof Ast.AndBooleanExpression)
            return smt.And(...ast.operands.map((o) => this._processFilter(o, scope, scopeType)));
        if (ast instanceof Ast.OrBooleanExpression)
            return smt.Or(...ast.operands.map((o) => this._processFilter(o, scope, scopeType)));
        if (ast instanceof Ast.NotBooleanExpression)
            return smt.Not(this._processFilter(ast.expr, scope, scopeType));
        if (ast instanceof Ast.ExternalBooleanExpression) {
            return this._addGetPredicate(ast, scope, scopeType);
        }
        else if (ast instanceof Ast.ExistentialSubqueryBooleanExpression) {
            const externalEquivalent = ast.toLegacy();
            if (externalEquivalent)
                return this._addGetPredicate(externalEquivalent, scope, scopeType);
            // TODO: add support for existential subquery in general
            throw new Error('Unsupported subquery');
        }
        else if (ast instanceof Ast.ComparisonSubqueryBooleanExpression) {
            // TODO: add support for comparison subquery
            throw new Error('Unsupported subquery');
        }
        else {
            (0, assert_1.default)(ast instanceof Ast.AtomBooleanExpression);
            const filter = ast;
            const pname = scope[filter.name];
            let ptype = scopeType[filter.name];
            if (!ptype)
                throw new TypeError('Invalid filter left-hand-side ' + filter.name);
            switch (filter.operator) {
                case 'contains':
                    ptype = ptype.elem;
                    break;
                case 'contains~':
                    ptype = type_1.default.String;
                    break;
                case 'in_array':
                    ptype = new type_1.default.Array(ptype);
                    break;
                case 'in_array~':
                    ptype = new type_1.default.Array(type_1.default.String);
                    break;
            }
            const value = filter.value;
            if (value.isUndefined) {
                if (this._allowUndefined)
                    // return an unrestricted value, to signify that the predicate could be true
                    // or false
                    return this._getSkolemBool();
                else
                    throw new TypeError('Invalid filter right hand side (should be slot filled)');
            }
            if (value instanceof Ast.VarRefValue) {
                if (!scope[value.name] || !scopeType[value.name])
                    throw new TypeError('Invalid filter right-hand-side ' + value.name);
                return this._filterToSmt(filter.operator, pname, ptype, scope[value.name], scopeType[value.name]);
            }
            else {
                return this._filterToSmt(filter.operator, pname, ptype, this._valueToSmtValue(value, ptype), value.getType());
            }
        }
    }
    _processPermissionFilter(ast, ufvar, schema, scope, scopeType) {
        if (ast.isTrue)
            return 'true';
        if (ast.isFalse)
            return 'false';
        if (ast instanceof Ast.AndBooleanExpression && ast.operands.length === 0)
            return 'true';
        if (ast instanceof Ast.OrBooleanExpression && ast.operands.length === 0)
            return 'false';
        if (ast instanceof Ast.AndBooleanExpression)
            return smt.And(...ast.operands.map((o) => this._processPermissionFilter(o, ufvar, schema, scope, scopeType)));
        if (ast instanceof Ast.OrBooleanExpression)
            return smt.Or(...ast.operands.map((o) => this._processPermissionFilter(o, ufvar, schema, scope, scopeType)));
        if (ast instanceof Ast.NotBooleanExpression)
            return smt.Not(this._processPermissionFilter(ast.expr, ufvar, schema, scope, scopeType));
        if (ast instanceof Ast.ExternalBooleanExpression) {
            return this._addGetPredicate(ast, {}, {});
        }
        else if (ast instanceof Ast.ExistentialSubqueryBooleanExpression) {
            const externalEquivalent = ast.toLegacy();
            if (externalEquivalent)
                return this._addGetPredicate(externalEquivalent, scope, scopeType);
            // TODO: add support for existential subquery in general
            throw new Error('Unsupported subquery');
        }
        else if (ast instanceof Ast.ComparisonSubqueryBooleanExpression) {
            // TODO: add support for comparison subquery
            throw new Error('Unsupported subquery');
        }
        else {
            (0, assert_1.default)(ast instanceof Ast.AtomBooleanExpression);
            const filter = ast;
            let ptype = schema.out[filter.name] || schema.inReq[filter.name] || schema.inOpt[filter.name];
            if (!ptype)
                throw new TypeError('Invalid filter left-hand-side ' + filter.name);
            switch (filter.operator) {
                case 'contains':
                    ptype = ptype.elem;
                    break;
                case 'contains~':
                    ptype = type_1.default.String;
                    break;
                case 'in_array':
                    ptype = new type_1.default.Array(ptype);
                    break;
                case 'in_array~':
                    ptype = new type_1.default.Array(type_1.default.String);
                    break;
            }
            if (filter.value.isUndefined)
                throw new TypeError('Invalid filter right hand side (should be slot filled)');
            const values = [];
            //console.error(String(ast));
            //console.log(this._fnparams);
            for (const pname of (this._fnparams.get(ufvar + ':' + filter.name) || [])) {
                const value = filter.value;
                if (value instanceof Ast.VarRefValue) {
                    const rhs = scope[value.name];
                    const rhsType = scopeType[value.name];
                    for (const rhsname of (this._fnparams.get(rhs) || []))
                        values.push(this._filterToSmt(filter.operator, pname, ptype, rhsname, rhsType));
                }
                else {
                    values.push(this._filterToSmt(filter.operator, pname, ptype, this._valueToSmtValue(value, ptype), value.getType()));
                }
            }
            if (values.length === 1)
                return values[0];
            if (values.length === 0)
                throw new Error('what');
            return smt.And(...values);
        }
    }
    _declareUninterpretedFunction(kind, fn, def) {
        const cleanKind = kind.replace(/[^A-Za-z0-9_]/g, '_');
        const ufvar = 'uf_' + cleanKind + '_' + fn;
        if (this._uf.has(ufvar))
            return [this._uf.get(ufvar), ufvar];
        const signames = [];
        const sigtypes = [];
        if (def.is_list) {
            signames.push('__resultId');
            sigtypes.push('ResultId');
        }
        for (const arg of def.args) {
            const type = def.inReq[arg] || def.inOpt[arg];
            if (!type || type.isAny)
                continue;
            signames.push(arg);
            sigtypes.push(this._typeToSmtType(type));
            if (def.inOpt[arg])
                this._declare(smt.DeclareFun(ufvar + '_' + arg + '_null', [], this._typeToSmtType(type)));
        }
        this._uf.set(ufvar, signames);
        for (const arg of def.args) {
            const type = def.out[arg];
            if (!type || type.isAny)
                continue;
            const p = ufvar + '_' + arg;
            this._declare(smt.DeclareFun(p, sigtypes, this._typeToSmtType(type)));
        }
        this._declare(smt.DeclareFun(ufvar + '_anyresult', sigtypes, 'Bool'));
        return [signames, ufvar];
    }
    _declareFunction(kind, fn, suffix, def) {
        kind = kind.replace(/[^A-Za-z0-9_]/g, '_');
        const fnvar = suffix; //kind + '_' + fn + '_' + suffix;
        if (this._functions.has(fnvar))
            return fnvar;
        const ufvar = 'uf_' + kind + '_' + fn;
        this._functions.add(fnvar);
        for (const arg of def.args) {
            const p = 'param_' + fnvar + '_' + arg;
            const type = def.inReq[arg] || def.inOpt[arg] || def.out[arg];
            if (type.isAny)
                continue;
            if (def.out[arg] && type.isTime)
                this._asserts.push(smt.And(smt.GEq(p, '0'), smt.LEq(p, '86400')));
            this._declare(smt.DeclareFun(p, [], this._typeToSmtType(type)));
            this._addParam(ufvar, arg, p);
        }
        return fnvar;
    }
    _addParam(ufvar, param, value) {
        const key = ufvar + ':' + param;
        if (!this._fnparams.has(key))
            this._fnparams.set(key, []);
        this._fnparams.get(key).push(value);
    }
    _addInputParams(fnvar, prim, scope, scopeType, extraInParams) {
        const in_passed = {};
        (0, assert_1.default)(Array.isArray(extraInParams));
        for (const inParam of prim.in_params.concat(extraInParams)) {
            const pname = 'param_' + fnvar + '_' + inParam.name;
            const ptype = prim.schema.inReq[inParam.name] || prim.schema.inOpt[inParam.name];
            if (inParam.value.isUndefined)
                continue;
            const value = inParam.value;
            if (value instanceof Ast.VarRefValue) {
                if (!scope[value.name] || !scopeType[value.name])
                    throw new TypeError('Invalid input parameter value ' + value.name);
                in_passed[inParam.name] = scope[value.name];
                this._asserts.push(this._filterToSmt('==', pname, ptype, scope[value.name], scopeType[value.name]));
            }
            else {
                in_passed[inParam.name] = this._valueToSmtValue(value, ptype);
                this._asserts.push(this._filterToSmt('==', pname, ptype, this._valueToSmtValue(value, ptype), value.getType()));
            }
        }
        return in_passed;
    }
    _addGet(prim, scope, scopeType, extraInParams) {
        const [signature, ufvar] = this._declareUninterpretedFunction(prim.selector.kind, prim.channel, prim.schema);
        const fnvar = this._declareFunction(prim.selector.kind, prim.channel, 'get_' + this._externalfnidx++, prim.schema);
        if (prim.schema.is_list)
            this._declare(smt.DeclareFun(fnvar + '__resultId', [], 'ResultId'));
        const in_passed = this._addInputParams(fnvar, prim, scope, scopeType, extraInParams);
        const inargs = [];
        for (const name of signature) {
            if (name === '__resultId') {
                (0, assert_1.default)(prim.schema.is_list);
                inargs.push(fnvar + '__resultId');
            }
            else {
                inargs.push(in_passed[name] || ufvar + '_' + name + '_null');
            }
        }
        for (const name in prim.schema.out) {
            const predname = ufvar + '_' + name;
            this._asserts.push(smt.Eq('param_' + fnvar + '_' + name, smt.Predicate(predname, ...inargs)));
            scope[name] = 'param_' + fnvar + '_' + name;
            scopeType[name] = prim.schema.out[name];
        }
    }
    _addAction(fn, prefix, scope, scopeType) {
        const fnvar = this._declareFunction(fn.selector.kind, fn.channel, prefix, fn.schema);
        this._addInputParams(fnvar, fn, scope, scopeType, []);
    }
    _addStream(stream, scope, scopeType) {
        if (stream.isTimer || stream.isAtTimer)
            return;
        if (stream instanceof Ast.MonitorStream) {
            this._addTable(stream.table, scope, scopeType, []);
            return;
        }
        if (stream instanceof Ast.EdgeNewStream) {
            this._addStream(stream.stream, scope, scopeType);
            return;
        }
        if (stream instanceof Ast.FilteredStream || stream instanceof Ast.EdgeFilterStream) {
            this._addStream(stream.stream, scope, scopeType);
            this._asserts.push(this._processFilter(stream.filter, scope, scopeType));
            return;
        }
        if (stream instanceof Ast.JoinStream) {
            this._addStream(stream.stream, scope, scopeType);
            this._addTable(stream.table, scope, scopeType, stream.in_params);
            return;
        }
        if (stream instanceof Ast.ProjectionStream) {
            this._addStream(stream.stream, scope, scopeType);
            for (const name in scope) {
                if (stream.args.indexOf(name) < 0) {
                    delete scope[name];
                    delete scopeType[name];
                }
            }
            return;
        }
        throw new TypeError(`Unimplemented stream ${stream}`);
    }
    _addTable(table, scope, scopeType, extraInParams) {
        if (table instanceof Ast.InvocationTable) {
            this._addGet(table.invocation, scope, scopeType, extraInParams);
            return;
        }
        if (table instanceof Ast.FilteredTable) {
            this._addTable(table.table, scope, scopeType, extraInParams);
            this._asserts.push(this._processFilter(table.filter, scope, scopeType));
            return;
        }
        if (table instanceof Ast.JoinTable) {
            this._addTable(table.lhs, scope, scopeType, extraInParams);
            this._addTable(table.rhs, scope, scopeType, extraInParams.concat(table.in_params));
            return;
        }
        if (table instanceof Ast.ProjectionTable) {
            this._addTable(table.table, scope, scopeType, extraInParams);
            for (const name in scope) {
                if (table.args.indexOf(name) < 0) {
                    delete scope[name];
                    delete scopeType[name];
                }
            }
            return;
        }
        throw new TypeError(`Unimplemented table ${table}`);
    }
    addRule(principal, program, rule) {
        for (const classdef of program.classes)
            this._classes[classdef.name] = classdef;
        const scope = {};
        const scopeType = {};
        if (rule instanceof Ast.Rule)
            this._addStream(rule.stream, scope, scopeType);
        else if (rule.table)
            this._addTable(rule.table, scope, scopeType, []);
        rule.actions.forEach((action, i) => {
            if (action instanceof Ast.VarRefAction)
                throw new TypeError(`Unimplemented action ${action}`);
            if (action instanceof Ast.InvocationAction && !isRemoteSend(action.invocation))
                this._addAction(action.invocation, 'a_' + i, scope, scopeType);
        });
    }
    _addPermissionFunction(fn, scope, scopeType) {
        const kind = fn.kind.replace(/[^A-Za-z0-9_]/g, '_');
        const ufvar = 'uf_' + kind + '_' + fn.channel;
        const ands = [];
        const filter = this._processPermissionFilter(fn.filter, ufvar, fn.schema, scope, scopeType);
        const name = this._filteridx++;
        this._filtermap[name] = fn.filter;
        this._filterrevmap.set(fn.filter, name);
        this._constants.set('filter_' + name, 'Bool');
        this._asserts.push(smt.Eq('filter_' + name, filter));
        ands.push('filter_' + name);
        for (const arg in fn.schema.out) {
            scope[arg] = ufvar + ':' + arg;
            scopeType[arg] = fn.schema.out[arg];
        }
        if (ands.length > 1)
            return smt.And(...ands);
        else
            return ands[0];
    }
    addPermission(permissionRule) {
        const ands = [];
        const scope = {};
        const scopeType = {};
        const query = permissionRule.query;
        if (query instanceof Ast.SpecifiedPermissionFunction)
            ands.push(this._addPermissionFunction(query, scope, scopeType));
        const action = permissionRule.action;
        if (action instanceof Ast.SpecifiedPermissionFunction)
            ands.push(this._addPermissionFunction(action, scope, scopeType));
        if (ands.length > 1)
            return smt.And(...ands);
        if (ands.length === 1)
            return ands[0];
        return 'true';
    }
    addAssert(v) {
        this._asserts.push(v);
    }
    async checkSatisfiable(enableAssignments = false) {
        if (enableAssignments)
            this._solver.enableAssignments();
        this._addEverything();
        if (this._debug)
            this._solver.dump();
        const [sat, assignment] = await this._solver.checkSat();
        //console.log('CVC4 result: ', sat);
        this._assignment = assignment;
        return sat;
    }
    getFilterName(filter) {
        const name = this._filterrevmap.get(filter);
        (0, assert_1.default)(typeof name === 'number');
        return 'filter_' + name;
    }
    isFilterTrue(filter) {
        if (!this._assignment) // unsat
            throw new Error('Not satifisiable');
        return this._assignment[this.getFilterName(filter)];
    }
    clone() {
        const self = new SmtReduction(this._solver.constructor, { allowUndefined: this._allowUndefined });
        self._declarations = this._declarations;
        self._constants = this._constants;
        self._classes = this._classes;
        self._functions = this._functions;
        // make a copy of the array
        self._asserts = this._asserts.slice();
        self._filteridx = this._filteridx;
        self._filtermap = this._filtermap;
        self._filterrevmap = this._filterrevmap;
        return self;
    }
}
// Verifies that a program is allowed, with the help of an SMT solver
const PARALLEL_DO_ALL = false;
async function promiseDoAll(array, fn) {
    if (PARALLEL_DO_ALL) {
        await Promise.all(array.map(fn));
        return;
    }
    for (let i = 0; i < array.length; i++)
        await fn(array[i], i);
}
const OP_FUNCTIONS = {
    '>': (a, b) => a > b,
    '<': (a, b) => a < b,
    '>=': (a, b) => a >= b,
    '<=': (a, b) => a <= b,
    '!': (a, b) => !a
};
function evaluateOp(builtinOp, arg1, arg2) {
    if (builtinOp.op)
        return OP_FUNCTIONS[builtinOp.op](arg1, arg2);
    else if (builtinOp.flip)
        return BuiltinOps[builtinOp.fn](arg2, arg1);
    else
        return BuiltinOps[builtinOp.fn](arg1, arg2);
}
function isRemoteSend(fn) {
    return (fn.selector.kind === 'org.thingpedia.builtin.thingengine.remote' || fn.selector.kind.startsWith('__dyn_')) &&
        fn.channel === 'send';
}
class RuleTransformer {
    constructor(SolverClass, principal, program, rule, permissiondb, groupmap, options) {
        this._firstReduction = null;
        this._secondReduction = null;
        this._SolverClass = SolverClass;
        this._groupmap = groupmap;
        this._options = options;
        this._principal = principal;
        this._program = program;
        this._classes = {};
        for (const classdef of program.classes)
            this._classes[classdef.name] = classdef;
        this._rule = rule;
        this._primKey = Array.from(rule.iteratePrimitives(false));
        this._relevantPermissions = this._computeRelevantPermissions(permissiondb);
        //console.log('Found ' + this._relevantPermissions.length + ' relevant permissions');
        //for (let permission of this._relevantPermissions)
        //    console.log(Ast.prettyprintPermissionRule(permission));
        this._newrule = null;
    }
    _addAllGroups(reduction) {
        for (const [principal, groups] of this._groupmap.entries()) {
            reduction.addGroups(new Ast.Value.Entity(principal, 'tt:contact', null), groups.map((g) => new Ast.Value.Entity(g, 'tt:contact_group', null)));
        }
    }
    _isFunctionPermissionRelevant(rulefn, programfn) {
        if (rulefn === Ast.PermissionFunction.Star)
            return true;
        if (isRemoteSend(programfn))
            return rulefn === Ast.PermissionFunction.Builtin;
        let kind = programfn.selector.kind;
        if (kind in this._classes)
            kind = this._classes[kind].extends[0];
        if (rulefn instanceof Ast.ClassStarPermissionFunction)
            return kind === rulefn.kind;
        if (rulefn instanceof Ast.SpecifiedPermissionFunction)
            return kind === rulefn.kind && programfn.channel === rulefn.channel;
        return false;
    }
    _isPermissionRelevantForFunctions(permissionRule) {
        if (!(this._rule instanceof Ast.Rule) && !this._rule.table &&
            !(permissionRule.query.isBuiltin || permissionRule.query.isStar))
            return false;
        for (const [primType, prim] of this._primKey) {
            if (primType === 'query' || primType === 'filter') {
                if (!this._isFunctionPermissionRelevant(permissionRule.query, prim))
                    return false;
            }
        }
        for (const action of this._rule.actions) {
            if (action instanceof Ast.VarRefAction)
                continue;
            if (action instanceof Ast.NotifyAction) {
                if (permissionRule.action !== Ast.PermissionFunction.Builtin &&
                    permissionRule.action !== Ast.PermissionFunction.Star)
                    return false;
                continue;
            }
            (0, assert_1.default)(action instanceof Ast.InvocationAction);
            if (!this._isFunctionPermissionRelevant(permissionRule.action, action.invocation))
                return false;
        }
        //console.log(Ast.prettyprintPermissionRule(rule) + ' is relevant');
        return true;
    }
    _computeRelevantPermissions(permissiondb) {
        const ret = [];
        for (const rule of permissiondb) {
            if (!rule.principal.isTrue) {
                const inParamMap = {
                    $source: this._principal
                };
                const simplified = this._partiallyEvalFilter(rule.principal, inParamMap, {}).optimize();
                if (simplified.isFalse)
                    continue;
                if (!simplified.isTrue)
                    throw new Error('Predicate on source is not either true or false?');
            }
            if (this._isPermissionRelevantForFunctions(rule))
                ret.push(rule);
        }
        return ret;
    }
    _addProgram(reduction) {
        reduction.addRule(this._principal, this._program, this._rule);
    }
    _isPermissionApplicable(permission) {
        // if we only have one permission, and we checked that the program was conditionally
        // allowed, skip the call and say yes
        if (this._relevantPermissions.length === 1) {
            console.error('Hit OPT 0');
            return Promise.resolve(true);
        }
        const filters = [];
        const queryperm = permission.query;
        const actionperm = permission.action;
        if (queryperm instanceof Ast.SpecifiedPermissionFunction && !queryperm.filter.isTrue)
            filters.push(queryperm.filter);
        if (actionperm instanceof Ast.SpecifiedPermissionFunction && !actionperm.filter.isTrue)
            filters.push(actionperm.filter);
        if (filters.every((f) => this._firstReduction.isFilterTrue(f))) {
            // we got lucky! the main reduction found a case where the filters
            // are all true
            // skip the call and say yes
            console.error('Hit OPT 1');
            return Promise.resolve(true);
        }
        if (filters.every((f) => this._secondReduction.isFilterTrue(f))) {
            // same thing, but with the second reduction
            console.error('Hit OPT 1');
            return Promise.resolve(true);
        }
        const reduction = new SmtReduction(this._SolverClass, this._options);
        this._addAllGroups(reduction);
        this._addProgram(reduction);
        reduction.addAssert(reduction.addPermission(permission));
        //console.log('Checking that permission ' + prettyprintPermissionRule(permission) + ' is applicable');
        return reduction.checkSatisfiable();
    }
    _isFilterImplied(permission, permissionFunction, check) {
        if (!(permissionFunction instanceof Ast.SpecifiedPermissionFunction))
            return Promise.resolve(true);
        const filter = permissionFunction.filter;
        if (filter.isTrue)
            return Promise.resolve(true);
        if (filter.isFalse)
            return Promise.resolve(false);
        if (!this._firstReduction.isFilterTrue(filter)) {
            // we got lucky! the main reduction found a case where this filter
            // is false
            // skip the call and say no
            console.error('Hit OPT 2');
            return Promise.resolve(false);
        }
        if (!this._secondReduction.isFilterTrue(filter)) {
            // same thing, but with the second reduction
            console.error('Hit OPT 2');
            return Promise.resolve(false);
        }
        const reduction = new SmtReduction(this._SolverClass, this._options);
        this._addAllGroups(reduction);
        this._addProgram(reduction);
        reduction.addPermission(permission);
        check(reduction);
        //console.log('Checking that filter ' + filter + ' in permission ' + prettyprintPermissionRule(permission) + ' is valid');
        return reduction.checkSatisfiable().then((r) => !r);
    }
    _partiallyEvalFilter(expr, inParamMap, previousPrimitiveDef) {
        const groupmap = this._groupmap;
        return (function recursiveHelper(expr) {
            if (expr.isTrue || expr.isFalse || expr.isDontCare)
                return expr;
            if (expr instanceof Ast.OrBooleanExpression)
                return new Ast.BooleanExpression.Or(expr.location, expr.operands.map(recursiveHelper));
            if (expr instanceof Ast.AndBooleanExpression)
                return new Ast.BooleanExpression.And(expr.location, expr.operands.map(recursiveHelper));
            if (expr instanceof Ast.NotBooleanExpression)
                return new Ast.BooleanExpression.Not(expr.location, recursiveHelper(expr.expr));
            if (expr instanceof Ast.ExternalBooleanExpression) // external predicates don't refer to the inputs or outputs of the function so we're good
                return expr;
            if (expr instanceof Ast.ExistentialSubqueryBooleanExpression)
                return expr;
            if (expr instanceof Ast.ComparisonSubqueryBooleanExpression)
                return expr;
            let lhs, rhs;
            let filter;
            if (expr instanceof Ast.ComputeBooleanExpression) {
                filter = expr;
                if (expr.lhs instanceof Ast.EventValue) {
                    (0, assert_1.default)(expr.lhs.name === 'source');
                    lhs = inParamMap['$source'];
                }
                else {
                    (0, assert_1.default)(expr.lhs instanceof Ast.VarRefValue);
                    lhs = inParamMap[expr.lhs.name];
                }
                rhs = expr.rhs;
            }
            else {
                (0, assert_1.default)(expr instanceof Ast.AtomBooleanExpression);
                filter = expr;
                lhs = inParamMap[filter.name];
                rhs = expr.value;
            }
            // the filter comes from tne Allowed() rule, it should not have anything funky
            (0, assert_1.default)(!rhs.isUndefined);
            if (!lhs)
                return expr;
            (0, assert_1.default)(!(rhs instanceof Ast.VarRefValue)); // ???
            if (rhs instanceof Ast.VarRefValue && inParamMap[rhs.name])
                rhs = inParamMap[rhs.name];
            if (rhs instanceof Ast.VarRefValue && previousPrimitiveDef[rhs.name])
                rhs = new Ast.Value.VarRef(rhs.name);
            if (lhs.isUndefined)
                throw new Error('Unexpected $undefined');
            if (lhs instanceof Ast.VarRefValue) {
                if (previousPrimitiveDef[lhs.name])
                    return new Ast.BooleanExpression.Atom(expr.location, lhs.name, filter.operator, rhs);
                else
                    return new Ast.BooleanExpression.Atom(expr.location, lhs.name, filter.operator, rhs);
            }
            else {
                if ((lhs instanceof Ast.LocationValue && (lhs.value.isRelative || lhs.value.isUnresolved)) ||
                    (rhs instanceof Ast.LocationValue && (rhs.value.isRelative || rhs.value.isUnresolved)))
                    return expr;
                if (rhs instanceof Ast.VarRefValue)
                    return new Ast.BooleanExpression.Atom(expr.location, rhs.name, (0, utils_1.flipOperator)(filter.operator), lhs);
                const jslhs = lhs.toJS();
                const jsrhs = rhs.toJS();
                let result;
                if (filter.operator === 'group_member')
                    result = isGroupMember(jslhs, jsrhs, groupmap);
                else
                    result = evaluateOp(BuiltinDefs.BinaryOps[filter.operator], jslhs, jsrhs);
                if (result === true)
                    return Ast.BooleanExpression.True;
                else if (result === false)
                    return Ast.BooleanExpression.False;
                else
                    throw new TypeError('Partially evaluated filter is not boolean?');
            }
        })(expr);
    }
    _adjust() {
        const newfilter = [];
        return promiseDoAll(this._relevantPermissions, (permission) => this._isPermissionApplicable(permission).then(async (isApplicable) => {
            if (!isApplicable) {
                //console.log('Not applicable');
                return;
            }
            // check if the query permission function is "valid" - in the sense of logical validity: it is entailed (implied) by the program
            const isQueryValid = await this._isFilterImplied(permission, permission.query, (reduction) => {
                reduction.addAssert(smt.Not(reduction.getFilterName(permission.query.filter)));
            });
            //console.log('isQueryValid ' + isQueryValid);
            let querypredicate;
            if (isQueryValid) {
                querypredicate = Ast.BooleanExpression.True;
            }
            else {
                const inParamMap = {};
                const newrule = this._newrule;
                if (newrule instanceof Ast.Rule) {
                    for (const [, in_param, ,] of newrule.stream.iterateSlots({})) {
                        if (!(in_param instanceof Ast.InputParam))
                            continue;
                        if (in_param.name in inParamMap)
                            inParamMap[in_param.name] = undefined;
                        else
                            inParamMap[in_param.name] = in_param.value;
                    }
                }
                else if (newrule.table) {
                    for (const [, in_param, ,] of newrule.table.iterateSlots({})) {
                        if (!(in_param instanceof Ast.InputParam))
                            continue;
                        if (in_param.name in inParamMap)
                            inParamMap[in_param.name] = undefined;
                        else
                            inParamMap[in_param.name] = in_param.value;
                    }
                }
                else {
                    throw new Error('how did we get here?');
                }
                querypredicate = this._partiallyEvalFilter(permission.query.filter, inParamMap, {});
            }
            const isActionValid = await this._isFilterImplied(permission, permission.action, (reduction) => {
                if (permission.query.isSpecified)
                    reduction.addAssert(reduction.getFilterName(permission.query.filter));
                reduction.addAssert(smt.Not(reduction.getFilterName(permission.action.filter)));
            });
            //console.log('isActionValid ' + isActionValid);
            if (!isActionValid) {
                const rule = this._rule;
                for (const action of rule.actions) {
                    (0, assert_1.default)(action instanceof Ast.InvocationAction);
                    const inParamMap = {};
                    for (const inParam of action.invocation.in_params)
                        inParamMap[inParam.name] = inParam.value;
                    const previousPrimitiveDef = (rule instanceof Ast.Rule ? rule.stream.schema : rule.table.schema);
                    querypredicate = new Ast.BooleanExpression.And(null, [
                        querypredicate, this._partiallyEvalFilter(permission.action.filter, inParamMap, previousPrimitiveDef.out)
                    ]);
                }
            }
            newfilter.push(querypredicate);
        })).then(() => {
            const queryfilter = new Ast.BooleanExpression.Or(null, newfilter).optimize();
            if (queryfilter.isFalse)
                return null;
            const newrule = this._newrule;
            if (newrule instanceof Ast.Rule)
                newrule.stream = new Ast.Stream.Filter(null, newrule.stream, queryfilter, newrule.stream.schema);
            else if (newrule.table)
                newrule.table = new Ast.Table.Filter(null, newrule.table, queryfilter, newrule.table.schema);
            else if (!queryfilter.isTrue)
                return null;
            return this._newrule;
        });
    }
    async check() {
        if (this._relevantPermissions.length === 0)
            return false;
        const satReduction = new SmtReduction(this._SolverClass, this._options);
        this._addAllGroups(satReduction);
        this._addProgram(satReduction);
        if (!await satReduction.checkSatisfiable())
            return false;
        const anyPermissionReduction = new SmtReduction(this._SolverClass, this._options);
        this._addAllGroups(anyPermissionReduction);
        this._addProgram(anyPermissionReduction);
        const ors = [];
        for (const permission of this._relevantPermissions)
            ors.push(anyPermissionReduction.addPermission(permission));
        anyPermissionReduction.addAssert(smt.Or(...ors));
        return anyPermissionReduction.checkSatisfiable();
    }
    async transform() {
        if (this._relevantPermissions.length === 0)
            return null;
        const satReduction = new SmtReduction(this._SolverClass, this._options);
        this._addAllGroups(satReduction);
        this._addProgram(satReduction);
        if (!await satReduction.checkSatisfiable()) {
            //console.log('Rule not satifisiable');
            //console.log(Ast.prettyprint(this._program, true));
            return null;
        }
        {
            // first check if the permission is directly satisfied
            this._firstReduction = new SmtReduction(this._SolverClass, this._options);
            this._addAllGroups(this._firstReduction);
            this._addProgram(this._firstReduction);
            const ors = [];
            for (const permission of this._relevantPermissions)
                ors.push(this._firstReduction.addPermission(permission));
            this._firstReduction.addAssert(smt.Not(smt.Or(...ors)));
            if (!await this._firstReduction.checkSatisfiable(true))
                return this._rule.clone();
        }
        {
            // now check if the permission can be satisfied at all
            this._secondReduction = new SmtReduction(this._SolverClass, this._options);
            this._addAllGroups(this._secondReduction);
            this._addProgram(this._secondReduction);
            const ors = [];
            for (const permission of this._relevantPermissions)
                ors.push(this._secondReduction.addPermission(permission));
            this._secondReduction.addAssert(smt.Or(...ors));
            if (!await this._secondReduction.checkSatisfiable(true))
                return null;
        }
        this._newrule = this._rule.clone();
        return this._adjust();
    }
}
class PermissionChecker {
    constructor(SolverClass, schemaRetriever, groupDelegate) {
        this._SolverClass = SolverClass;
        this._schemaRetriever = schemaRetriever;
        this._groupDelegate = groupDelegate;
        this._permissiondb = new Set;
        this._principals = new Set;
        // maps a principal to its array of groups, as returned by the group delegate
        this._groupmap = new Map;
    }
    _collectPrincipals(program, into) {
        for (const slot of program.iterateSlots2()) {
            if (!(slot instanceof Ast.DeviceSelector)) {
                const value = slot.get();
                if (value instanceof Ast.EntityValue && value.type === 'tt:contact')
                    into.add(value.value);
            }
        }
    }
    async _setProgram(principal, program) {
        await program.typecheck(this._schemaRetriever);
        this._principals.add(principal.value);
        const programPrincipals = new Set(this._principals);
        this._collectPrincipals(program, programPrincipals);
        await Promise.all(Array.from(programPrincipals).map(async (principal) => {
            const groups = await this._groupDelegate.getGroups(principal);
            this._groupmap.set(principal, groups);
        }));
    }
    async _doCheck(principal, program) {
        let all = true;
        await promiseDoAll(program.statements, (rule) => {
            if (rule instanceof Ast.Assignment)
                throw new Error(`Unsupported assignment`);
            const transformer = new RuleTransformer(this._SolverClass, principal, program, rule.toLegacy(), this._permissiondb, this._groupmap, { allowUndefined: true, debug: false });
            return transformer.check().then((ok) => {
                if (!ok)
                    all = false;
            });
        });
        return all;
    }
    async _doTransform(principal, program) {
        const newrules = [];
        await promiseDoAll(program.statements, (rule) => {
            if (rule instanceof Ast.Assignment)
                throw new Error(`Unsupported assignment`);
            const transformer = new RuleTransformer(this._SolverClass, principal, program, rule.toLegacy(), this._permissiondb, this._groupmap, { allowUndefined: false, debug: false });
            return transformer.transform().then((newrule) => {
                if (newrule !== null)
                    newrules.push(newrule.toExpression());
            });
        });
        if (newrules.length === 0)
            return null;
        return (new Ast.Program(null, program.classes, program.declarations, newrules)).optimize();
    }
    async check(principal, program, options = { transform: true }) {
        await this._setProgram(principal, program);
        if (options.transform)
            return this._doTransform(principal, program);
        else
            return this._doCheck(principal, program);
    }
    allowed(permissionRule) {
        return permissionRule.typecheck(this._schemaRetriever).then(() => {
            this._permissiondb.add(permissionRule);
            this._collectPrincipals(permissionRule, this._principals);
        });
    }
    disallowed(permissionRule) {
        this._permissiondb.delete(permissionRule);
    }
}
exports.default = PermissionChecker;
//# sourceMappingURL=permission_checker.js.map