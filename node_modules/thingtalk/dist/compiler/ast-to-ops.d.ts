import * as Ast from '../ast';
import { StreamOp, TableOp, ActionOp, RuleOp, QueryInvocationHints, BooleanExpressionOp } from './ops';
declare function compileStreamToOps(stream: Ast.Expression, hints: QueryInvocationHints): StreamOp;
declare function compileTableToOps(table: Ast.Expression, hints: QueryInvocationHints): TableOp;
declare function compileActionToOps(action: Ast.Expression, projection: Set<string>, statementSchema: Ast.FunctionDef | null): ActionOp.InvokeVarRef | ActionOp.InvokeDo;
declare function compileStatementToOp(statement: Ast.ExpressionStatement | Ast.ReturnStatement): RuleOp;
declare function compileBooleanExpressionToOp(expr: Ast.BooleanExpression): BooleanExpressionOp;
export { compileStatementToOp, compileStreamToOps, compileTableToOps, compileActionToOps, compileBooleanExpressionToOp };
