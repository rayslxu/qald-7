import type * as Ast from '../ast';
import { Register } from './jsir';
import Type from '../type';
import type { CompiledStatement } from '../runtime/exec_environment';
export interface RegisterScopeEntry {
    type: 'scalar';
    register: Register;
    tt_type: Type | null;
    direction: 'input' | 'output' | 'special';
    isInVarScopeNames: boolean;
}
export interface DeclarationScopeEntry {
    type: 'declaration';
    register: Register | null;
    schema: Ast.FunctionDef;
    args: string[];
    code: string | CompiledStatement | null;
}
export interface ProcedureScopeEntry {
    type: 'procedure';
    register: Register | null;
    schema: Ast.FunctionDef;
    args: string[];
    code: string | CompiledStatement | null;
}
export interface AssignmentScopeEntry {
    type: 'assignment';
    register: Register;
    schema: Ast.FunctionDef;
    isPersistent: boolean;
}
export declare type ScopeEntry = RegisterScopeEntry | DeclarationScopeEntry | ProcedureScopeEntry | AssignmentScopeEntry;
export default class Scope {
    private _parent;
    private _names;
    constructor(parent?: Scope | null);
    get $outputType(): never;
    get $output(): never;
    get parent(): Scope | null;
    get isTopLevel(): boolean;
    hasOwnKey(name: string): boolean;
    get(name: string): ScopeEntry;
    set(name: string, value: ScopeEntry): void;
    private _doIterate;
    [Symbol.iterator](): Generator<[string, ScopeEntry], void>;
    ownKeys(): Generator<string, void>;
}
