import * as Ast from '../ast';
import * as JSIr from './jsir';
import Scope from './scope';
import type AppCompiler from './index';
import { StreamOp, TableOp, ActionOp, RuleOp } from './ops';
export default class OpCompiler {
    private _compiler;
    private _timezone;
    private _irBuilder;
    private _globalScope;
    private _currentScope;
    private _varScopeNames;
    constructor(compiler: AppCompiler, timezone: string, globalScope: Scope, irBuilder: JSIr.IRBuilder);
    private _compileTpFunctionCall;
    private _allocState;
    private _compileOneInputParam;
    private _compileInputParams;
    private _compileIterateQuery;
    private _compileFilterValue;
    private _compileScalarExpression;
    private _compileComparison;
    compileValue(ast: Ast.Value, scope: Scope): JSIr.Register;
    private _compileFilter;
    private _setInvocationOutputs;
    private _compileInvokeSubscribe;
    private _compileTimer;
    private _compileAtTimer;
    private _compileOnTimer;
    private _compileInvocationHints;
    private _compileInvokeGet;
    private _compileVarRefInputParams;
    private _compileInvokeGenericVarRef;
    private _compileInvokeTableVarRef;
    private _compileInvokeStreamVarRef;
    private _compileInvokeOutput;
    private _compileInvokeEmit;
    private _compileInvokeAction;
    private _compileAction;
    private _compileProcedureAction;
    private _compileStreamFilter;
    private _compileTableFilter;
    private _compileProjection;
    private _compileCompute;
    private _compileBooleanCompute;
    private _compileStreamMap;
    private _compileTableMap;
    private _compileTableReduce;
    private _compileStreamEdgeNew;
    private _compileStreamEdgeFilter;
    private _readTypeResult;
    private _mergeResults;
    private _mergeScopes;
    private _mergeJoinScope;
    private _compileStreamUnion;
    private _compileStreamJoin;
    private _compileStreamInvokeTable;
    private _compileStream;
    private _compileTableJoinHelper;
    private _compileTableJoin;
    private _compileTableCrossJoin;
    private _compileTableNestedLoopJoin;
    private _compileDatabaseQuery;
    private _compileTable;
    private _compileEndOfFlow;
    compileStatement(ruleop: RuleOp): void;
    compileProcedureStatement(ruleop: RuleOp, returnResult: boolean): void;
    compileStreamDeclaration(streamop: StreamOp): void;
    compileQueryDeclaration(tableop: TableOp): void;
    compileActionDeclaration(action: ActionOp): void;
    compileActionAssignment(action: ActionOp, isPersistent: boolean): JSIr.Register;
    compileAssignment(tableop: TableOp, isPersistent: boolean): JSIr.Register;
}
