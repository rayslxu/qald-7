import * as Grammar from '../syntax_api';
import * as Ast from '../ast';
import { CompiledProgram } from '../runtime/exec_environment';
import type SchemaRetriever from '../schema';
export default class AppCompiler {
    private _testMode;
    private _declarations;
    private _toplevelscope;
    private _timezone;
    private _schemaRetriever;
    private _nextStateVar;
    private _nextProcId;
    private _astVars;
    constructor(schemaRetriever: SchemaRetriever, timezone: string, testMode?: boolean);
    compileCode(code: string, options?: Grammar.ParseOptions): Promise<CompiledProgram>;
    _allocState(): number;
    _allocAst(v: Ast.Node): number;
    private _declareArguments;
    private _compileAssignment;
    private _compileProcedure;
    private _doCompileStatement;
    private _compileRule;
    private _compileInScope;
    private _verifyCompilable;
    compileProgram(program: Ast.Program): Promise<CompiledProgram>;
}
