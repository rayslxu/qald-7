import type * as Ast from './ast';
import { KEYWORDS, CONTEXTUAL_KEYWORDS } from './new-syntax/keywords';
import { EntityMap, EntityResolver } from './entities';
import { AbstractEntityRetriever, EntityRetriever, SequentialEntityAllocator } from './entity-retriever';
export * from './entities';
export * from './new-syntax/tokenstream';
/**
 * APIs to parse and serialize ThingTalk code.
 *
 * @namespace
 */
export declare enum SyntaxType {
    Legacy = 0,
    LegacyNN = 1,
    Normal = 2,
    Tokenized = 3
}
export interface ParseOptions {
    locale?: string;
    timezone: string | undefined;
}
/**
 * Parse a string into a ThingTalk {@link Ast}
 *
 * @param {string} code - the ThingTalk code to parse
 * @return {Ast.Input} the parsed program, library or permission rule
 */
export declare function parse(code: string | string[], syntaxType: SyntaxType.Tokenized | SyntaxType.LegacyNN, entities: EntityMap | EntityResolver, options: ParseOptions): Ast.Input;
export declare function parse(code: string, syntaxType: SyntaxType.Normal | SyntaxType.Legacy, options: ParseOptions): Ast.Input;
export interface SerializeOptions {
    typeAnnotations?: boolean;
    includeEntityValue?: boolean;
    excludeEntityDisplay?: boolean;
    compatibility?: string;
}
/**
 * Serialize a ThingTalk AST node to a surface form, either in human-readable
 * syntax or in tokenized syntax suitable for machine prediction.
 *
 * @param node - the program to serialize
 * @param entityRetriever - object to use to retrieve entities
 * @param [options={}] - additional options
 * @param options.typeAnnotations - include type annotations for parameters
 *   (only meaningful to legacy NN syntax)
 */
export declare function serialize(node: Ast.Input, syntaxType: SyntaxType.LegacyNN, entities: AbstractEntityRetriever, options?: SerializeOptions): string[];
export declare function serialize(node: Ast.Node, syntaxType: SyntaxType.Tokenized, entities: AbstractEntityRetriever, options?: SerializeOptions): string[];
export declare function serialize(node: Ast.Node, syntaxType?: SyntaxType.Normal | SyntaxType.Legacy, entities?: undefined, options?: SerializeOptions): string;
export { KEYWORDS, CONTEXTUAL_KEYWORDS, AbstractEntityRetriever, SequentialEntityAllocator, EntityRetriever, };
