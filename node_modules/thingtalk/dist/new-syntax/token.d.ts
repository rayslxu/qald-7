import { SourceRange } from '../utils/source_locations';
import * as Ast from '../ast';
import Type from '../type';
import { AnyEntity, MeasureEntity, TimeEntity, LocationEntity, DateEntity } from '../entities';
interface GenericEntityToken {
    value: string | null;
    type: string;
    display?: string | null;
}
declare type TokenValue = AnyEntity | GenericEntityToken;
interface TokenTypes {
    CLASS_OR_FUNCTION_REF: string;
    SLOT: Ast.Value | undefined;
    QUOTED_STRING: string;
    NUMBER: number;
    MEASURE: MeasureEntity;
    CURRENCY: MeasureEntity;
    DURATION: MeasureEntity;
    LOCATION: LocationEntity;
    DATE: Date | DateEntity;
    TIME: TimeEntity;
    GENERIC_ENTITY: GenericEntityToken;
    ENTITY_NAME: string;
    USERNAME: string;
    HASHTAG: string;
    URL: string;
    PHONE_NUMBER: string;
    EMAIL_ADDRESS: string;
    PATH_NAME: string;
    PICTURE: string;
    TYPE_ANNOT: Type;
    IDENTIFIER: string;
    DOLLARIDENTIFIER: string;
}
export declare type TypeOfToken<K extends keyof TokenTypes> = TokenTypes[K];
export declare class Token {
    token: string;
    location: SourceRange;
    value: TokenValue | null;
    private constructor();
    static make<K extends string>(token: K, location: SourceRange, value: (K extends keyof TokenTypes ? TypeOfToken<K> : null)): Token;
    toString(): string;
}
export {};
