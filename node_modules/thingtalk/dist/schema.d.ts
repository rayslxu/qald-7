import Type from './type';
import { ClassDef } from './ast/class_def';
import { FunctionDef } from './ast/function_def';
import { Dataset } from './ast/statement';
interface MemoryTable {
    args: string[];
    types: Type[];
}
interface TpMixinDeclaration {
    kind: string;
    types: string[];
    args: string[];
    required: boolean[];
    is_input: boolean[];
    facets: string[];
}
interface MixinDeclaration {
    kind: string;
    types: Type[];
    args: string[];
    required: boolean[];
    is_input: boolean[];
    facets: string[];
}
/**
 * A delegate object to access tables stored in long-term assistant memory.
 *
 * @deprecated Long-term memory support in Almond is still experimental and APIs will change
 */
export interface MemoryClient {
    /**
     * Retrieve the type information of a stored table
     *
     * @param {string} table - the name of the table to retrieve
     * @return {Object}
     */
    getSchema(table: string, principal: string | null): Promise<MemoryTable | null>;
}
interface EntityTypeRecord {
    type: string;
    is_well_known: boolean | number;
    has_ner_support: boolean | number;
    subtype_of?: string[] | null;
}
/**
 * The abstract interface to access Thingpedia.
 *
 * This is the minimal interface needed by the ThingTalk library. It is usally
 * implemented by the Thingpedia SDK.
 */
export interface AbstractThingpediaClient {
    get locale(): string;
    /**
     * Retrieve the full code of a Thingpedia class.
     *
     * @param {string} kind - the Thingpedia class identifier
     * @return {string} - the raw code of the class
     */
    getDeviceCode(kind: string): Promise<string>;
    /**
     * Retrieve type and metadata information for one or more Thingpedia classes.
     *
     * @param {string[]} kinds - the Thingpedia class identifiers to retrieve
     * @param {boolean} getMeta - whether to retrieve metadata or not
     * @return {string} - the retrieved type information, as ThingTalk classes
     */
    getSchemas(kinds: string[], getMeta: boolean): Promise<string>;
    getMixins(): Promise<{
        [key: string]: TpMixinDeclaration;
    }>;
    /**
     * Retrieve the {@link Ast.Dataset} associated with one or more Thingpedia classes.
     *
     * @param {string[]} kinds - the Thingpedia class identifiers to retrieve
     */
    getExamplesByKinds(kinds: string[]): Promise<string>;
    /**
     * Retrieve the list of all entity types declared in Thingpedia.
     */
    getAllEntityTypes(): Promise<EntityTypeRecord[]>;
}
/**
 * Delegate object to retrieve type information and metadata from Thingpedia.
 *
 * This class wraps an {@link AbstractThingpediaClient} and provides batching, in-memory
 * caching, and parsing.
 */
export default class SchemaRetriever {
    private _manifestCache;
    private _currentRequest;
    private _pendingRequests;
    private _classCache;
    private _entityTypeCache;
    private _thingpediaClient;
    private _memoryClient;
    private _silent;
    /**
     * Construct a new schema retriever.
     *
     * @param {AbstractThingpediaClient} tpClient - the Thingpedia client interface to wrap
     * @param {MemoryClient} [mClient] - the client interface to access stored tables
     * @param {boolean} [silent=false] - whether debugging information should be printed
     */
    constructor(tpClient: AbstractThingpediaClient, mClient?: MemoryClient | null, silent?: boolean);
    /**
     * Remove all information related to the given Thingpedia class from the cache.
     *
     * @param {string} kind - the class identifier
     */
    removeFromCache(kind: string): void;
    /**
     * Remove all information from all caches.
     */
    clearCache(): void;
    /**
     * Override cached type information with the passed in class.
     *
     * This can be used to ensure the schema retriever is consistent with other
     * cached information (for example, on disk caching of device implementation).
     *
     * @param {Ast.ClassDef} classDef - class definition to inject
     */
    injectClass(classDef: ClassDef): void;
    private _getManifestRequest;
    private _getManifest;
    getFormatMetadata(kind: string, query: string): Promise<unknown[]>;
    private _makeRequest;
    private _ensureRequest;
    private _getClass;
    /**
     * Return the full type information of the passed in class.
     *
     * @param {string} kind - the class identifier
     * @return {Ast.ClassDef} the corresponding class
     */
    getFullSchema(kind: string): Promise<ClassDef>;
    /**
     * Return the full type information and metadata of the passed in class.
     *
     * @param {string} kind - the class identifier
     * @return {Ast.ClassDef} the corresponding class, including metadata
     */
    getFullMeta(kind: string): Promise<ClassDef>;
    _where(where: 'query' | 'action' | 'both'): ('queries' | 'actions' | 'both');
    /**
     * Return the type signature of the given function.
     *
     * This method is deprecated because it returns the types without the
     * argument names, directions and annotations.
     *
     * @param {string} kind - the class identifier
     * @param {string} functionType - the type of function (either `query` or `action`)
     * @param {string} name - the function name
     * @return {Type[]} the list of types in the signature
     * @deprecated Use {@link SchemaRetriever.getSchemaAndNames} instead
     */
    getSchema(kind: string, functionType: 'query' | 'action' | 'both', name: string): Promise<Type[]>;
    private _getFunction;
    /**
     * Return the type information of the given function.
     *
     * This method returns the minimal amount of information necessary to typecheck
     * a program, but not enough to drive the dialog agent.
     * This method is preferred to {@link SchemaRetriever.getMeta} when metadata
     * is not needed, because it reduces the load on the server (which can skip the
     * localization step) and reduces the amount of transferred data.
     *
     * @param {string} kind - the class identifier
     * @param {string} functionType - the type of function (either `query` or `action`)
     * @param {string} name - the function name
     * @return {Ast.FunctionDef} the function definition
     */
    getSchemaAndNames(kind: string, functionType: 'query' | 'action' | 'both', name: string): Promise<FunctionDef>;
    /**
     * Return the type information and metadata of the given function.
     *
     * This method returns the full amount of information necessary to typecheck
     * and drive the dialog agent, but might not include implementation only information
     * (such as loader or configuration mixins).
     *
     * @param {string} kind - the class identifier
     * @param {string} functionType - the type of function (either `query` or `action`)
     * @param {string} name - the function name
     * @return {Ast.FunctionDef} the function definition
     */
    getMeta(kind: string, functionType: 'query' | 'action' | 'both', name: string): Promise<FunctionDef>;
    getMemorySchema(table: string, getMeta?: boolean): Promise<FunctionDef>;
    getMixins(kind: string): Promise<MixinDeclaration>;
    private _makeDatasetRequest;
    private _ensureDatasetRequest;
    getExamplesByKind(kind: string): Promise<Dataset>;
    private _getEntityTypeRecord;
    getEntityParents(entityType: string): Promise<string[]>;
}
export {};
