import * as smt from 'smtlib';
import * as Ast from './ast';
import SchemaRetriever from './schema';
interface SolverConstructor {
    new (): smt.BaseSolver;
}
interface GroupDelegate {
    getGroups(principal: string): Promise<string[]>;
}
export default class PermissionChecker {
    private _SolverClass;
    private _schemaRetriever;
    private _groupDelegate;
    private _permissiondb;
    private _principals;
    private _groupmap;
    constructor(SolverClass: SolverConstructor, schemaRetriever: SchemaRetriever, groupDelegate: GroupDelegate);
    private _collectPrincipals;
    private _setProgram;
    private _doCheck;
    private _doTransform;
    check(principal: Ast.EntityValue, program: Ast.Program, options: {
        transform: false;
    }): Promise<boolean>;
    check(principal: Ast.EntityValue, program: Ast.Program, options?: {
        transform: true;
    }): Promise<Ast.Program | null>;
    allowed(permissionRule: Ast.PermissionRule): Promise<void>;
    disallowed(permissionRule: Ast.PermissionRule): void;
}
export {};
