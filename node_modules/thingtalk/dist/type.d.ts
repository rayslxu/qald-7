import type * as Ast from './ast';
import { TokenStream } from './new-syntax/tokenstream';
/**
 * The base class of all ThingTalk types.
 */
declare abstract class Type {
    /**
     * @deprecated
     */
    isAny: boolean;
    /**
     * @deprecated
     */
    isBoolean: boolean;
    /**
     * @deprecated
     */
    isString: boolean;
    /**
     * @deprecated
     */
    isNumber: boolean;
    /**
     * @deprecated
     */
    isCurrency: boolean;
    /**
     * @deprecated
     */
    isEntity: boolean;
    /**
     * @deprecated
     */
    isMeasure: boolean;
    /**
     * @deprecated
     */
    isEnum: boolean;
    /**
     * @deprecated
     */
    isArray: boolean;
    /**
     * @deprecated
     */
    isTime: boolean;
    /**
     * @deprecated
     */
    isDate: boolean;
    /**
     * @deprecated
     */
    isRecurrentTimeSpecification: boolean;
    /**
     * @deprecated
     */
    isLocation: boolean;
    /**
     * @deprecated
     */
    isArgMap: boolean;
    /**
     * @deprecated
     */
    isCompound: boolean;
    /**
     * @deprecated
     */
    isObject: boolean;
    /**
     * @deprecated
     */
    isUnknown: boolean;
    static Any: Type;
    static Boolean: Type;
    static String: Type;
    static Number: Type;
    static Currency: Type;
    static Time: Type;
    static Date: Type;
    static RecurrentTimeSpecification: Type;
    static Location: Type;
    static ArgMap: Type;
    static Object: Type;
    static fromString(str: Type | string): Type;
    prettyprint(): string;
    isNumeric(): boolean;
    isComparable(): boolean;
    abstract toSource(): TokenStream;
    abstract hash(): number;
    abstract equals(other: Type): boolean;
    clone(): Type;
    static resolve(type: Type | string, typeScope: Type.TypeScope): Type;
    static isAssignable(type: Type, assignableTo: Type | string, typeScope?: Type.TypeScope, entitySubTypeMap?: Type.EntitySubTypeMap): boolean;
}
declare namespace Type {
    class Entity extends Type {
        type: string;
        constructor(type: string);
        toString(): string;
        toSource(): TokenStream;
        hash(): number;
        clone(): Entity;
        equals(other: Type): boolean;
    }
    class Measure extends Type {
        unit: string;
        constructor(unit: string);
        toString(): string;
        toSource(): TokenStream;
        hash(): number;
        clone(): Measure;
        equals(other: Type): boolean;
    }
    class Enum extends Type {
        entries: string[] | null;
        constructor(entries: string[] | null);
        toString(): string;
        toSource(): TokenStream;
        hash(): number;
        clone(): Enum;
        equals(other: Type): boolean;
    }
    class Array extends Type {
        elem: Type | string;
        constructor(elem: Type | string);
        toString(): string;
        toSource(): TokenStream;
        hash(): number;
        clone(): Array;
        equals(other: Type): boolean;
    }
    type FieldMap = Record<string, Ast.ArgumentDef>;
    class Compound extends Type {
        name: string | null;
        fields: FieldMap;
        private _hash;
        constructor(name: string | null, fields: FieldMap);
        toString(): string;
        toSource(): TokenStream;
        hash(): number;
        clone(): Compound;
        equals(other: Type): boolean;
    }
    class Unknown extends Type {
        name: string;
        constructor(name: string);
        toString(): string;
        toSource(): TokenStream;
        hash(): number;
        clone(): Unknown;
        equals(other: Type): boolean;
    }
    type TypeMap = Record<string, Type>;
    type TypeScope = Record<string, Type | string>;
    type EntitySubTypeMap = Record<string, string[]>;
}
export default Type;
