import Node, { SourceRange } from './base';
import NodeVisitor from './visitor';
import { FunctionDef } from './function_def';
import { Value } from './values';
import { AbstractSlot, OldSlot, ScopeMap, InvocationLike } from './slots';
import { TokenStream } from '../new-syntax/tokenstream';
interface Device {
    name: string;
}
/**
 * An expression that maps to one or more devices in Thingpedia.
 *
 * Selectors correspond to the `@`-device part of the ThingTalk code,
 * up to but not including the function name.
 *
 */
export declare class DeviceSelector extends Node {
    kind: string;
    id: string | null;
    principal: null;
    attributes: InputParam[];
    all: boolean;
    device?: Device;
    /**
     * Construct a new device selector.
     *
     * @param location - the position of this node in the source code
     * @param kind - the Thingpedia class ID
     * @param id - the unique ID of the device being selected, or null
     *                           to select devices according to the attributes, or
     *                           all devices if no attributes are specified
     * @param principal - reserved/deprecated, must be `null`
     * @param attributes - other attributes used to select a device, if ID is unspecified
     * @param [all=false] - operate on all devices that match the attributes, instead of
     *                                having the user choose
     */
    constructor(location: SourceRange | null, kind: string, id: string | null, principal: null, attributes?: InputParam[], all?: boolean);
    getAttribute(name: string): InputParam | undefined;
    toSource(): TokenStream;
    clone(): DeviceSelector;
    equals(other: DeviceSelector): boolean;
    visit(visitor: NodeVisitor): void;
    toString(): string;
}
/**
 * AST node corresponding to an input parameter passed to a function.
 */
export declare class InputParam extends Node {
    isInputParam: boolean;
    /**
     * The input argument name.
     */
    name: string;
    /**
     * The value being passed.
     */
    value: Value;
    /**
     * Construct a new input parameter node.
     *
     * @param {Ast~SourceRange|null} location - the position of this node
     *        in the source code
     * @param {string} name - the input argument name
     * @param {Ast.Value} value - the value being passed
     */
    constructor(location: SourceRange | null, name: string, value: Value);
    visit(visitor: NodeVisitor): void;
    toSource(): TokenStream;
    clone(): InputParam;
    equals(other: InputParam): boolean;
    toString(): string;
}
/**
 * An invocation of a ThingTalk function.
 *
 */
export declare class Invocation extends Node {
    isInvocation: boolean;
    /**
     * The selector choosing where the function is invoked.
     */
    selector: DeviceSelector;
    /**
     * The function name being invoked.
     */
    channel: string;
    /**
     * The input parameters passed to the function.
     */
    in_params: InputParam[];
    /**
     * Type signature of the invoked function.
     * This property is guaranteed not `null` after type-checking.
     */
    schema: FunctionDef | null;
    __effectiveSelector: DeviceSelector | null;
    /**
     * Construct a new invocation.
     *
     * @param location - the position of this node in the source code
     * @param {Ast.DeviceSelector} selector - the selector choosing where the function is invoked
     * @param {string} channel - the function name
     * @param {Ast.InputParam[]} in_params - input parameters passed to the function
     * @param {Ast.FunctionDef|null} schema - type signature of the invoked function
     */
    constructor(location: SourceRange | null, selector: DeviceSelector, channel: string, in_params: InputParam[], schema: FunctionDef | null);
    toSource(): TokenStream;
    clone(): Invocation;
    visit(visitor: NodeVisitor): void;
    toString(): string;
    /**
     * Iterate all slots (scalar value nodes) in this invocation.
     *
     * @param scope - available names for parameter passing
     * @deprecated Use {@link Ast.Invocation.iterateSlots2} instead.
     */
    iterateSlots(scope: ScopeMap): Generator<OldSlot, [InvocationLike, ScopeMap]>;
    /**
     * Iterate all slots (scalar value nodes) in this invocation.
     *
     * @param {Object.<string, Ast~SlotScopeItem>} scope - available names for parameter passing
     */
    iterateSlots2(scope: ScopeMap): Generator<DeviceSelector | AbstractSlot, [InvocationLike, ScopeMap]>;
}
export {};
