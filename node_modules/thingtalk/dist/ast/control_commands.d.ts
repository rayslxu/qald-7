import Node, { SourceRange } from './base';
import NodeVisitor from './visitor';
import { Input } from './program';
import { Value } from './values';
import SchemaRetriever from '../schema';
import { TokenStream } from '../new-syntax/tokenstream';
/**
 * A ThingTalk input that drives the dialog.
 *
 * Control commands are special commands like yes, no or cancel
 * whose purpose is to drive a dialog agent, but have no direct executable
 * semantic.
 *
 * Their definition is included in ThingTalk to aid using ThingTalk as a
 * virtual assistant representation language without extensions.
 *
 */
export declare class ControlCommand extends Input {
    /**
     * The intent associated with this input.
     *
     */
    intent: ControlIntent;
    /**
     * Construct a new control input.
     *
     * @param location - the position of this node
     *        in the source code
     * @param intent - the current intent
     */
    constructor(location: SourceRange | null, intent: ControlIntent);
    toSource(): TokenStream;
    visit(visitor: NodeVisitor): void;
    clone(): ControlCommand;
    typecheck(schemas: SchemaRetriever, getMeta?: boolean): Promise<this>;
}
/**
 * All types of special control commands.
 */
export declare const ControlCommandType: string[];
/**
 * Base class of all the control intents.
 *
 * The meaning of all control commands is mapped to a subclass of
 * this class.
 *
 */
export declare abstract class ControlIntent extends Node {
    static Special: any;
    isSpecial: boolean;
    static Choice: any;
    isChoice: boolean;
    static Answer: any;
    isAnswer: boolean;
    abstract clone(): ControlIntent;
}
/**
 * A special control command.
 *
 * Special commands have no parameters, and are expected to trigger
 * unusual behavior from the dialog agent.
 */
export declare class SpecialControlIntent extends ControlIntent {
    /**
     * The special command type (one of {@link ControlCommandType}).
     */
    type: string;
    /**
     * Construct a new special command.
     *
     * @param location - the position of this node
     *        in the source code
     * @param type - the command type (one of {@link ControlCommandType})
     */
    constructor(location: SourceRange | null, type: string);
    toSource(): TokenStream;
    visit(visitor: NodeVisitor): void;
    clone(): SpecialControlIntent;
}
/**
 * A multiple-choice control command.
 *
 * This indicates the user chose one option out of the just-presented list.
 *
 */
export declare class ChoiceControlIntent extends ControlIntent {
    /**
     * The choice index.
     */
    value: number;
    /**
     * Construct a new choice command.
     *
     * @param {Ast~SourceRange|null} location - the position of this node
     *        in the source code
     * @param {number} value - the choice index
     */
    constructor(location: SourceRange | null, value: number);
    toSource(): TokenStream;
    visit(visitor: NodeVisitor): void;
    clone(): ChoiceControlIntent;
}
/**
 * A direct answer to a slot-filling question.
 *
 */
export declare class AnswerControlIntent extends ControlIntent {
    /**
     * The answer value.
     */
    value: Value;
    /**
     * Construct a new answer command.
     *
     * @param location - the position of this node in the source code
     * @param value - the answer value
     */
    constructor(location: SourceRange | null, value: Value);
    toSource(): TokenStream;
    visit(visitor: NodeVisitor): void;
    clone(): AnswerControlIntent;
}
