import AstNode from './base';
import type * as Values from './values';
import type * as BK from './control_commands';
import type * as CD from './class_def';
import type { FunctionDef, ArgumentDef } from './function_def';
import type * as Prog from './program';
import type * as Stmt from './statement';
import type * as Perm from './permissions';
import type * as Inv from './invocation';
import type * as BE from './boolean_expression';
import type * as Exp2 from './expression';
import type * as Prim from './legacy';
import type * as D from './dialogues';
/**
 * Base class (interface) for traversing the AST using the visitor
 * pattern.
 *
 * During the traversal, each node will call the {@link Ast.NodeVisitor.enter}
 * method when visiting the node.
 *
 * After that, the the node will call the appropriate visit
 * method based on the node type. If the visit method returns true,
 * (which is the default for non-overridden methods), traversal continues
 * with children.
 *
 * After children have been visited, the node will call {@link Ast.NodeVisitor.exit} before
 * returning to the parent. {@link Ast.NodeVisitor.exit} is called regardless of the return value
 * of visit, so {@link Ast.NodeVisitor.enter} and {@link Ast.NodeVisitor.exit} are always paired.
 *
 * Expected usage:
 * ```javascript
 * const visitor = new class extends Ast.NodeVisitor {
 *    visitMonitorStream(node) {
 *       // do something with it
 *       return true;
 *    }
 * };
 * program.visit(visitor);
 * ```
 *
 */
export default abstract class NodeVisitor {
    /**
     * Begin visiting a node.
     *
     * This is called for all nodes before calling the corresponding
     * visit method.
     *
     * @param node - the node being entered
     */
    enter(node: AstNode): void;
    /**
     * End visiting a node.
     *
     * This is called for all nodes after calling the corresponding
     * visit method and visiting all children.
     *
     * This method is not called if {@link Ast.NodeVisitor.enter} or
     * visit throws an exception.
     *
     * @param node - the node being exited
     */
    exit(node: AstNode): void;
    visitValue(node: Values.Value): boolean;
    visitArrayValue(node: Values.ArrayValue): boolean;
    visitVarRefValue(node: Values.VarRefValue): boolean;
    visitArrayFieldValue(node: Values.ArrayFieldValue): boolean;
    visitComputationValue(node: Values.ComputationValue): boolean;
    visitFilterValue(node: Values.FilterValue): boolean;
    visitUndefinedValue(node: Values.UndefinedValue): boolean;
    visitNullValue(node: Values.NullValue): boolean;
    visitContextRefValue(node: Values.ContextRefValue): boolean;
    visitBooleanValue(node: Values.BooleanValue): boolean;
    visitStringValue(node: Values.StringValue): boolean;
    visitNumberValue(node: Values.NumberValue): boolean;
    visitMeasureValue(node: Values.MeasureValue): boolean;
    visitCurrencyValue(node: Values.CurrencyValue): boolean;
    visitLocationValue(node: Values.LocationValue): boolean;
    visitDateValue(node: Values.DateValue): boolean;
    visitTimeValue(node: Values.TimeValue): boolean;
    visitEntityValue(node: Values.EntityValue): boolean;
    visitEnumValue(node: Values.EnumValue): boolean;
    visitEventValue(node: Values.EventValue): boolean;
    visitArgMapValue(node: Values.ArgMapValue): boolean;
    visitObjectValue(node: Values.ObjectValue): boolean;
    visitRecurrentTimeSpecificationValue(node: Values.RecurrentTimeSpecificationValue): boolean;
    visitRecurrentTimeRule(node: Values.RecurrentTimeRule): boolean;
    visitControlCommand(node: BK.ControlCommand): boolean;
    visitSpecialControlIntent(node: BK.SpecialControlIntent): boolean;
    visitChoiceControlIntent(node: BK.ChoiceControlIntent): boolean;
    visitAnswerControlIntent(node: BK.AnswerControlIntent): boolean;
    visitClassDef(node: CD.ClassDef): boolean;
    visitFunctionDef(node: FunctionDef): boolean;
    visitArgumentDef(node: ArgumentDef): boolean;
    visitMixinImportStmt(node: CD.MixinImportStmt): boolean;
    visitEntityDef(node: CD.EntityDef): boolean;
    visitDeviceSelector(node: Inv.DeviceSelector): boolean;
    visitInputParam(node: Inv.InputParam): boolean;
    visitInvocation(node: Inv.Invocation): boolean;
    visitTrueBooleanExpression(node: BE.TrueBooleanExpression): boolean;
    visitFalseBooleanExpression(node: BE.FalseBooleanExpression): boolean;
    visitAndBooleanExpression(node: BE.AndBooleanExpression): boolean;
    visitOrBooleanExpression(node: BE.OrBooleanExpression): boolean;
    visitNotBooleanExpression(node: BE.NotBooleanExpression): boolean;
    visitAtomBooleanExpression(node: BE.AtomBooleanExpression): boolean;
    visitExternalBooleanExpression(node: BE.ExternalBooleanExpression): boolean;
    visitDontCareBooleanExpression(node: BE.DontCareBooleanExpression): boolean;
    visitComputeBooleanExpression(node: BE.ComputeBooleanExpression): boolean;
    visitComparisonSubqueryBooleanExpression(node: BE.ComparisonSubqueryBooleanExpression): boolean;
    visitExistentialSubqueryBooleanExpression(node: BE.ExistentialSubqueryBooleanExpression): boolean;
    visitPropertyPathElement(node: BE.PropertyPathElement): boolean;
    visitPropertyPathBooleanExpression(node: BE.PropertyPathBooleanExpression): boolean;
    visitVarRefTable(node: Prim.VarRefTable): boolean;
    visitInvocationTable(node: Prim.InvocationTable): boolean;
    visitFilteredTable(node: Prim.FilteredTable): boolean;
    visitProjectionTable(node: Prim.ProjectionTable): boolean;
    visitComputeTable(node: Prim.ComputeTable): boolean;
    visitAliasTable(node: Prim.AliasTable): boolean;
    visitAggregationTable(node: Prim.AggregationTable): boolean;
    visitSortedTable(node: Prim.SortedTable): boolean;
    visitIndexTable(node: Prim.IndexTable): boolean;
    visitSlicedTable(node: Prim.SlicedTable): boolean;
    visitJoinTable(node: Prim.JoinTable): boolean;
    visitVarRefStream(node: Prim.VarRefStream): boolean;
    visitTimerStream(node: Prim.TimerStream): boolean;
    visitAtTimerStream(node: Prim.AtTimerStream): boolean;
    visitMonitorStream(node: Prim.MonitorStream): boolean;
    visitEdgeNewStream(node: Prim.EdgeNewStream): boolean;
    visitEdgeFilterStream(node: Prim.EdgeFilterStream): boolean;
    visitFilteredStream(node: Prim.FilteredStream): boolean;
    visitProjectionStream(node: Prim.ProjectionStream): boolean;
    visitComputeStream(node: Prim.ComputeStream): boolean;
    visitAliasStream(node: Prim.AliasStream): boolean;
    visitJoinStream(node: Prim.JoinStream): boolean;
    visitVarRefAction(node: Prim.VarRefAction): boolean;
    visitInvocationAction(node: Prim.InvocationAction): boolean;
    visitNotifyAction(node: Prim.NotifyAction): boolean;
    visitSpecifiedPermissionFunction(node: Perm.SpecifiedPermissionFunction): boolean;
    visitBuiltinPermissionFunction(node: Perm.BuiltinPermissionFunction): boolean;
    visitClassStarPermissionFunction(node: Perm.ClassStarPermissionFunction): boolean;
    visitStarPermissionFunction(node: Perm.StarPermissionFunction): boolean;
    visitFunctionCallExpression(node: Exp2.FunctionCallExpression): boolean;
    visitInvocationExpression(node: Exp2.InvocationExpression): boolean;
    visitMonitorExpression(node: Exp2.MonitorExpression): boolean;
    visitFilterExpression(node: Exp2.FilterExpression): boolean;
    visitProjectionExpression(node: Exp2.ProjectionExpression): boolean;
    visitProjectionElement(node: Exp2.ProjectionElement): boolean;
    visitProjectionExpression2(node: Exp2.ProjectionExpression2): boolean;
    visitBooleanQuestionExpression(node: Exp2.BooleanQuestionExpression): boolean;
    visitAliasExpression(node: Exp2.AliasExpression): boolean;
    visitAggregationExpression(node: Exp2.AggregationExpression): boolean;
    visitSortExpression(node: Exp2.SortExpression): boolean;
    visitIndexExpression(node: Exp2.IndexExpression): boolean;
    visitSliceExpression(node: Exp2.SliceExpression): boolean;
    visitChainExpression(node: Exp2.ChainExpression): boolean;
    visitJoinExpression(node: Exp2.JoinExpression): boolean;
    visitFunctionDeclaration(node: Stmt.FunctionDeclaration): boolean;
    visitAssignment(node: Stmt.Assignment): boolean;
    visitRule(node: Stmt.Rule): boolean;
    visitCommand(node: Stmt.Command): boolean;
    visitExpressionStatement(node: Stmt.ExpressionStatement): boolean;
    visitReturnStatement(node: Stmt.ReturnStatement): boolean;
    visitDataset(node: Stmt.Dataset): boolean;
    visitExample(node: Stmt.Example): boolean;
    visitProgram(node: Prog.Program): boolean;
    visitPermissionRule(node: Prog.PermissionRule): boolean;
    visitLibrary(node: Prog.Library): boolean;
    visitDialogueState(node: D.DialogueState): boolean;
    visitDialogueHistoryItem(node: D.DialogueHistoryItem): boolean;
    visitDialogueHistoryResultList(node: D.DialogueHistoryResultList): boolean;
    visitDialogueHistoryResultItem(node: D.DialogueHistoryResultItem): boolean;
}
