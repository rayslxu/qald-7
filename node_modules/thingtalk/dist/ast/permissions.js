"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of ThingTalk
//
// Copyright 2019-2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Silei Xu <silei@cs.stanford.edu>
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StarPermissionFunction = exports.ClassStarPermissionFunction = exports.BuiltinPermissionFunction = exports.SpecifiedPermissionFunction = exports.PermissionFunction = void 0;
const assert_1 = __importDefault(require("assert"));
const base_1 = __importDefault(require("./base"));
const function_def_1 = require("./function_def");
const boolean_expression_1 = require("./boolean_expression");
const slots_1 = require("./slots");
const list_1 = __importDefault(require("../utils/list"));
/**
 * The base class of all function clauses in a ThingTalk
 * permission rule.
 *
 */
class PermissionFunction extends base_1.default {
    *iterateSlots(scope) {
        return [null, {}];
    }
    *iterateSlots2(scope) {
        return [null, {}];
    }
}
exports.PermissionFunction = PermissionFunction;
PermissionFunction.prototype.isSpecified = false;
PermissionFunction.prototype.isBuiltin = false;
PermissionFunction.prototype.isClassStar = false;
PermissionFunction.prototype.isStar = false;
/**
 * A permission function that applies only to a specific
 * Thingpedia function.
 *
 */
class SpecifiedPermissionFunction extends PermissionFunction {
    /**
     * Construct a new specified permission function.
     *
     * @param location - the position of this node in the source code
     * @param kind - the class that the function belongs to
     * @param channel - the name of the function
     * @param filter - a predicate on the input and output
     *        parameters of the function restricting when the permission applies
     * @param schema - type signature of the underlying Thingpedia function
     */
    constructor(location, kind, channel, filter, schema) {
        super(location);
        (0, assert_1.default)(typeof kind === 'string');
        this.kind = kind;
        (0, assert_1.default)(typeof channel === 'string');
        this.channel = channel;
        (0, assert_1.default)(filter instanceof boolean_expression_1.BooleanExpression);
        this.filter = filter;
        (0, assert_1.default)(schema === null || schema instanceof function_def_1.FunctionDef);
        this.schema = schema;
    }
    optimize() {
        this.filter = this.filter.optimize();
        return this;
    }
    toSource() {
        if (this.filter.isTrue)
            return list_1.default.concat('@' + this.kind, '.', this.channel);
        return list_1.default.concat('@' + this.kind, '.', this.channel, 'filter', this.filter.toSource());
    }
    visit(visitor) {
        visitor.enter(this);
        if (visitor.visitSpecifiedPermissionFunction(this))
            this.filter.visit(visitor);
        visitor.exit(this);
    }
    clone() {
        return new SpecifiedPermissionFunction(this.location, this.kind, this.channel, this.filter.clone(), this.schema ? this.schema.clone() : null);
    }
    *iterateSlots(scope) {
        yield* this.filter.iterateSlots(this.schema, this, scope);
        return [this, (0, slots_1.makeScope)(this)];
    }
    *iterateSlots2(scope) {
        yield* this.filter.iterateSlots2(this.schema, this, scope);
        return [this, (0, slots_1.makeScope)(this)];
    }
}
exports.SpecifiedPermissionFunction = SpecifiedPermissionFunction;
PermissionFunction.Specified = SpecifiedPermissionFunction;
PermissionFunction.Specified.prototype.isSpecified = true;
class BuiltinPermissionFunction extends PermissionFunction {
    constructor() {
        super(null);
    }
    visit(visitor) {
        visitor.enter(this);
        visitor.visitBuiltinPermissionFunction(this);
        visitor.exit(this);
    }
    toSource() {
        return list_1.default.singleton('notify');
    }
    clone() {
        return this;
    }
}
exports.BuiltinPermissionFunction = BuiltinPermissionFunction;
BuiltinPermissionFunction.prototype.isBuiltin = true;
/**
 * A permission function that applies only to the builtins `now` and
 * `notify`.
 *
 * This is a singleton, not a class.
 */
PermissionFunction.Builtin = new BuiltinPermissionFunction();
/**
 * A permission function that applies to all functions of a class,
 * unconditionally.
 *
 */
class ClassStarPermissionFunction extends PermissionFunction {
    /**
     * Construct a new class start permission function.
     *
     * @param location - the position of this node in the source code
     * @param kind - the class to apply the permission to
     */
    constructor(location, kind) {
        super(location);
        (0, assert_1.default)(typeof kind === 'string');
        this.kind = kind;
    }
    toSource() {
        return list_1.default.concat('@' + this.kind, '.', '*');
    }
    visit(visitor) {
        visitor.enter(this);
        visitor.visitClassStarPermissionFunction(this);
        visitor.exit(this);
    }
    clone() {
        return new ClassStarPermissionFunction(this.location, this.kind);
    }
}
exports.ClassStarPermissionFunction = ClassStarPermissionFunction;
PermissionFunction.ClassStar = ClassStarPermissionFunction;
PermissionFunction.ClassStar.prototype.isClassStar = true;
class StarPermissionFunction extends PermissionFunction {
    constructor() {
        super(null);
    }
    visit(visitor) {
        visitor.enter(this);
        visitor.visitStarPermissionFunction(this);
        visitor.exit(this);
    }
    toSource() {
        return list_1.default.singleton('*');
    }
    clone() {
        return this;
    }
}
exports.StarPermissionFunction = StarPermissionFunction;
StarPermissionFunction.prototype.isStar = true;
/**
 * The universal permission function, that applies to all functions
 * of all classes, unconditionally.
 *
 * This is a singleton, not a class.
 */
PermissionFunction.Star = new StarPermissionFunction();
//# sourceMappingURL=permissions.js.map