"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of ThingTalk
//
// Copyright 2018-2021 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
//         Silei Xu <silei@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Library = exports.PermissionRule = exports.Program = exports.Input = void 0;
const assert_1 = __importDefault(require("assert"));
const type_1 = __importDefault(require("../type"));
const base_1 = __importStar(require("./base"));
const boolean_expression_1 = require("./boolean_expression");
const permissions_1 = require("./permissions");
const slots_1 = require("./slots");
const Optimizer = __importStar(require("../optimize"));
const typecheck_1 = __importDefault(require("../typecheck"));
const convert_to_permission_rule_1 = __importDefault(require("./convert_to_permission_rule"));
const list_1 = __importDefault(require("../utils/list"));
/**
 * A collection of Statements from the same source file.
 *
 * It is somewhat organized for "easier" API handling,
 * and for backward compatibility with API users.
 *
 */
class Input extends base_1.default {
    *iterateSlots() {
    }
    *iterateSlots2() {
    }
    optimize() {
        return this;
    }
}
exports.Input = Input;
Input.prototype.isControlCommand = false;
Input.prototype.isProgram = false;
Input.prototype.isLibrary = false;
Input.prototype.isPermissionRule = false;
Input.prototype.isDialogueState = false;
/**
 * An executable ThingTalk program (containing at least one executable
 * statement).
 *
 */
class Program extends Input {
    /**
     * Construct a new ThingTalk program.
     *
     * @param {Ast~SourceRange|null} location - the position of this node
     *        in the source code
     * @param {Ast.ClassDef[]} classes - locally defined classes
     * @param {Ast.Statement.Declaration[]} declarations - declaration statements
     * @param {Ast.Statement[]} rules - executable statements (rules and commands)
     * @param {Ast.Value|null} principal - executor of this program
     * @param {Ast.Statement.OnInputChoice[]} - on input continuations of this program
     */
    constructor(location, classes, declarations, statements, { nl, impl } = {}) {
        super(location);
        (0, assert_1.default)(Array.isArray(classes));
        this.classes = classes;
        (0, assert_1.default)(Array.isArray(declarations));
        this.declarations = declarations;
        (0, assert_1.default)(Array.isArray(statements));
        this.statements = statements;
        this.nl_annotations = nl || {};
        this.impl_annotations = impl || {};
    }
    /**
     * @deprecated
     */
    get principal() {
        return this.impl_annotations.executor || null;
    }
    toSource() {
        let input = list_1.default.concat((0, base_1.nlAnnotationsToSource)(this.nl_annotations), (0, base_1.implAnnotationsToSource)(this.impl_annotations), '\n');
        for (const classdef of this.classes)
            input = list_1.default.concat(input, classdef.toSource(), '\n');
        for (const decl of this.declarations)
            input = list_1.default.concat(input, decl.toSource(), '\n');
        for (const stmt of this.statements)
            input = list_1.default.concat(input, stmt.toSource(), '\n');
        return input;
    }
    visit(visitor) {
        visitor.enter(this);
        if (visitor.visitProgram(this)) {
            for (const classdef of this.classes)
                classdef.visit(visitor);
            for (const decl of this.declarations)
                decl.visit(visitor);
            for (const rule of this.statements)
                rule.visit(visitor);
        }
        visitor.exit(this);
    }
    *iterateSlots() {
        for (const decl of this.declarations)
            yield* decl.iterateSlots();
        for (const rule of this.statements)
            yield* rule.iterateSlots();
    }
    *iterateSlots2() {
        if (this.principal)
            yield new slots_1.FieldSlot(null, {}, new type_1.default.Entity('tt:contact'), this.impl_annotations, 'program', 'executor');
        for (const decl of this.declarations)
            yield* decl.iterateSlots2();
        for (const rule of this.statements)
            yield* rule.iterateSlots2();
    }
    clone() {
        // clone annotations
        const nl = {};
        Object.assign(nl, this.nl_annotations);
        const impl = {};
        Object.assign(impl, this.impl_annotations);
        const annotations = { nl, impl };
        return new Program(this.location, this.classes.map((c) => c.clone()), this.declarations.map((d) => d.clone()), this.statements.map((s) => s.clone()), annotations);
    }
    optimize() {
        return Optimizer.optimizeProgram(this);
    }
    async typecheck(schemas, getMeta = false) {
        const typeChecker = new typecheck_1.default(schemas, getMeta);
        await typeChecker.typeCheckProgram(this);
        return this;
    }
    /**
     * Attempt to convert this program to an equivalent permission rule.
     *
     * @param principal - the principal to use as source
     * @param contactName - the display value for the principal
     * @return the new permission rule, or `null` if conversion failed
     */
    convertToPermissionRule(principal, contactName) {
        return (0, convert_to_permission_rule_1.default)(this, principal, contactName);
    }
}
exports.Program = Program;
Program.prototype.isProgram = true;
Input.Program = Program;
/**
 * An ThingTalk program definining a permission control policy.
 *
 */
class PermissionRule extends Input {
    /**
     * Construct a new permission rule.
     *
     * @param {Ast~SourceRange|null} location - the position of this node
     *        in the source code
     * @param {Ast.BooleanExpression} principal - the predicate selecting
     *        the source of the program this rule is applicable to
     * @param {Ast.PermissionFunction} query - a permission function for the query part
     * @param {Ast.PermissionFunction} action - a permission function for the action part
     */
    constructor(location, principal, query, action) {
        super(location);
        (0, assert_1.default)(principal instanceof boolean_expression_1.BooleanExpression);
        this.principal = principal;
        (0, assert_1.default)(query instanceof permissions_1.PermissionFunction);
        this.query = query;
        (0, assert_1.default)(action instanceof permissions_1.PermissionFunction);
        this.action = action;
    }
    toSource() {
        let list = list_1.default.concat('$policy', '{', '\t+', '\n', this.principal.toSource(), ':');
        if (this.query.isBuiltin)
            list = list_1.default.concat(list, 'now');
        else
            list = list_1.default.concat(list, this.query.toSource());
        list = list_1.default.concat(list, '=>', this.action.toSource(), ';', '\t-', '\n', '}');
        return list;
    }
    optimize() {
        this.principal = this.principal.optimize();
        this.query.optimize();
        this.action.optimize();
        return this;
    }
    visit(visitor) {
        visitor.enter(this);
        if (visitor.visitPermissionRule(this)) {
            this.principal.visit(visitor);
            this.query.visit(visitor);
            this.action.visit(visitor);
        }
        visitor.exit(this);
    }
    *iterateSlots() {
        yield* this.principal.iterateSlots(null, null, {});
        const [, scope] = yield* this.query.iterateSlots({});
        yield* this.action.iterateSlots(scope);
    }
    *iterateSlots2() {
        yield* this.principal.iterateSlots2(null, null, {});
        const [, scope] = yield* this.query.iterateSlots2({});
        yield* this.action.iterateSlots2(scope);
    }
    clone() {
        return new PermissionRule(this.location, this.principal.clone(), this.query.clone(), this.action.clone());
    }
    async typecheck(schemas, getMeta = false) {
        const typeChecker = new typecheck_1.default(schemas, getMeta);
        await typeChecker.typeCheckPermissionRule(this);
        return this;
    }
}
exports.PermissionRule = PermissionRule;
PermissionRule.prototype.isPermissionRule = true;
Input.PermissionRule = PermissionRule;
/**
 * An ThingTalk input file containing a library of classes and datasets.
 *
 */
class Library extends Input {
    /**
     * Construct a new ThingTalk library.
     *
     * @param {Ast~SourceRange|null} location - the position of this node
     *        in the source code
     * @param {Ast.ClassDef[]} classes - classes defined in the library
     * @param {Ast.Dataset[]} datasets - datasets defined in the library
     */
    constructor(location, classes, datasets) {
        super(location);
        (0, assert_1.default)(Array.isArray(classes));
        this.classes = classes;
        (0, assert_1.default)(Array.isArray(datasets));
        this.datasets = datasets;
    }
    toSource() {
        let input = list_1.default.Nil;
        for (const classdef of this.classes)
            input = list_1.default.concat(input, classdef.toSource(), '\n');
        for (const dataset of this.datasets)
            input = list_1.default.concat(input, dataset.toSource(), '\n');
        return input;
    }
    visit(visitor) {
        visitor.enter(this);
        if (visitor.visitLibrary(this)) {
            for (const classdef of this.classes)
                classdef.visit(visitor);
            for (const dataset of this.datasets)
                dataset.visit(visitor);
        }
        visitor.exit(this);
    }
    *iterateSlots() {
        for (const dataset of this.datasets)
            yield* dataset.iterateSlots();
    }
    *iterateSlots2() {
        for (const dataset of this.datasets)
            yield* dataset.iterateSlots2();
    }
    clone() {
        return new Library(this.location, this.classes.map((c) => c.clone()), this.datasets.map((d) => d.clone()));
    }
    optimize() {
        for (const d of this.datasets)
            d.optimize();
        return this;
    }
    async typecheck(schemas, getMeta = false) {
        const typeChecker = new typecheck_1.default(schemas, getMeta);
        await typeChecker.typeCheckLibrary(this);
        return this;
    }
}
exports.Library = Library;
Library.prototype.isLibrary = true;
Input.Library = Library;
//# sourceMappingURL=program.js.map