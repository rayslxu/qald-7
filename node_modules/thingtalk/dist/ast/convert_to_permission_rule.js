"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of ThingTalk
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const boolean_expression_1 = require("./boolean_expression");
const expression_1 = require("./expression");
const permissions_1 = require("./permissions");
const values_1 = require("./values");
const remote_utils_1 = require("./remote_utils");
const statement_1 = require("./statement");
const program_1 = require("./program");
const Optimizer = __importStar(require("../optimize"));
function convertPrimitiveToPermission(prim) {
    if (prim === null || (0, remote_utils_1.isRemoteSend)(prim) || (0, remote_utils_1.isRemoteReceive)(prim))
        return permissions_1.PermissionFunction.Builtin;
    const filterargs = [];
    for (const inParam of prim.in_params) {
        if (inParam.value.isUndefined)
            continue;
        filterargs.push(new boolean_expression_1.BooleanExpression.Atom(null, inParam.name, '==', inParam.value));
    }
    const filter = new boolean_expression_1.BooleanExpression.And(null, filterargs);
    return new permissions_1.PermissionFunction.Specified(null, prim.selector.kind, prim.channel, filter, prim.schema);
}
function convertExpressionToPermissionFunction(expression) {
    if (expression instanceof expression_1.InvocationExpression)
        return convertPrimitiveToPermission(expression.invocation);
    if (expression instanceof expression_1.FilterExpression) {
        const inner = convertExpressionToPermissionFunction(expression.expression);
        if (!(inner instanceof permissions_1.SpecifiedPermissionFunction))
            return inner;
        return new permissions_1.PermissionFunction.Specified(null, inner.kind, inner.channel, new boolean_expression_1.BooleanExpression.And(null, [inner.filter, expression.filter]), inner.schema);
    }
    if (expression instanceof expression_1.ProjectionExpression ||
        expression instanceof expression_1.AliasExpression ||
        expression instanceof expression_1.MonitorExpression)
        return convertExpressionToPermissionFunction(expression.expression);
    if (expression instanceof expression_1.ChainExpression) {
        if (expression.expressions.length === 1)
            return convertExpressionToPermissionFunction(expression.expressions[0]);
        console.log('NOT IMPLEMENTED: cannot support more than one permission primitive');
        return null;
    }
    console.log(`NOT IMPLEMENTED: converting expression ${expression} to permission function`);
    return null;
}
function convertToPermissionRule(program, principal, contactName) {
    if (program.statements.length > 1) {
        console.log('NOT IMPLEMENTED: cannot support more than one rule');
        return null;
    }
    const stmt = program.statements[0];
    if (stmt instanceof statement_1.Assignment) {
        console.log('NOT IMPLEMENTED: declaration or assignment statements');
        return null;
    }
    const last = stmt.last;
    const action = last.schema.functionType === 'action' ? last : null;
    let pfquery = permissions_1.PermissionFunction.Builtin, pfaction = permissions_1.PermissionFunction.Builtin;
    if (action) {
        const remaining = stmt.expression.expressions.slice(0, stmt.expression.expressions.length - 1);
        if (remaining.length > 0)
            pfquery = convertExpressionToPermissionFunction(new expression_1.ChainExpression(null, remaining, null));
        pfaction = convertExpressionToPermissionFunction(action);
    }
    else {
        pfquery = convertExpressionToPermissionFunction(stmt.expression);
    }
    if (!pfaction || !pfquery)
        return null;
    if (pfquery instanceof permissions_1.SpecifiedPermissionFunction)
        pfquery.filter = Optimizer.optimizeFilter(pfquery.filter);
    if (pfaction instanceof permissions_1.SpecifiedPermissionFunction)
        pfaction.filter = Optimizer.optimizeFilter(pfaction.filter);
    return new program_1.PermissionRule(null, new boolean_expression_1.BooleanExpression.Atom(null, 'source', '==', new values_1.Value.Entity(principal, 'tt:contact', contactName)), pfquery, pfaction);
}
exports.default = convertToPermissionRule;
//# sourceMappingURL=convert_to_permission_rule.js.map