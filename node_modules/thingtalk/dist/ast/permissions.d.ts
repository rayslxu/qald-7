import Node, { SourceRange } from './base';
import { FunctionDef } from './function_def';
import { DeviceSelector } from './invocation';
import { BooleanExpression } from './boolean_expression';
import { AbstractSlot, OldSlot, ScopeMap, InvocationLike } from './slots';
import NodeVisitor from './visitor';
import { TokenStream } from '../new-syntax/tokenstream';
/**
 * The base class of all function clauses in a ThingTalk
 * permission rule.
 *
 */
export declare abstract class PermissionFunction extends Node {
    static Specified: typeof SpecifiedPermissionFunction;
    isSpecified: boolean;
    static Builtin: PermissionFunction;
    isBuiltin: boolean;
    static ClassStar: typeof ClassStarPermissionFunction;
    isClassStar: boolean;
    static Star: PermissionFunction;
    isStar: boolean;
    abstract clone(): PermissionFunction;
    iterateSlots(scope: ScopeMap): Generator<OldSlot, [InvocationLike | null, ScopeMap]>;
    iterateSlots2(scope: ScopeMap): Generator<DeviceSelector | AbstractSlot, [InvocationLike | null, ScopeMap]>;
}
/**
 * A permission function that applies only to a specific
 * Thingpedia function.
 *
 */
export declare class SpecifiedPermissionFunction extends PermissionFunction {
    kind: string;
    channel: string;
    filter: BooleanExpression;
    schema: FunctionDef | null;
    /**
     * Construct a new specified permission function.
     *
     * @param location - the position of this node in the source code
     * @param kind - the class that the function belongs to
     * @param channel - the name of the function
     * @param filter - a predicate on the input and output
     *        parameters of the function restricting when the permission applies
     * @param schema - type signature of the underlying Thingpedia function
     */
    constructor(location: SourceRange | null, kind: string, channel: string, filter: BooleanExpression, schema: FunctionDef | null);
    optimize(): this;
    toSource(): TokenStream;
    visit(visitor: NodeVisitor): void;
    clone(): SpecifiedPermissionFunction;
    iterateSlots(scope: ScopeMap): Generator<OldSlot, [InvocationLike, ScopeMap]>;
    iterateSlots2(scope: ScopeMap): Generator<DeviceSelector | AbstractSlot, [InvocationLike, ScopeMap]>;
}
export declare class BuiltinPermissionFunction extends PermissionFunction {
    constructor();
    visit(visitor: NodeVisitor): void;
    toSource(): TokenStream;
    clone(): BuiltinPermissionFunction;
}
/**
 * A permission function that applies to all functions of a class,
 * unconditionally.
 *
 */
export declare class ClassStarPermissionFunction extends PermissionFunction {
    kind: string;
    /**
     * Construct a new class start permission function.
     *
     * @param location - the position of this node in the source code
     * @param kind - the class to apply the permission to
     */
    constructor(location: SourceRange | null, kind: string);
    toSource(): TokenStream;
    visit(visitor: NodeVisitor): void;
    clone(): ClassStarPermissionFunction;
}
export declare class StarPermissionFunction extends PermissionFunction {
    constructor();
    visit(visitor: NodeVisitor): void;
    toSource(): TokenStream;
    clone(): StarPermissionFunction;
}
