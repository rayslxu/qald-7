import NodeVisitor from './visitor';
import type { Invocation } from './invocation';
import type { ExternalBooleanExpression } from './boolean_expression';
import type { Value } from './values';
import type { VarRefAction, VarRefTable, VarRefStream } from './legacy';
import type { FunctionCallExpression } from './expression';
import { SourceRange, SourceLocation } from '../utils/source_locations';
import { TokenStream } from '../new-syntax/tokenstream';
export { SourceRange, SourceLocation };
export declare type NLAnnotationMap = {
    [key: string]: any;
};
export declare type AnnotationMap = {
    [key: string]: Value;
};
export interface AnnotationSpec {
    nl?: NLAnnotationMap;
    impl?: AnnotationMap;
}
export declare type Primitive = Invocation | VarRefTable | VarRefAction | VarRefStream | FunctionCallExpression | ExternalBooleanExpression;
export declare function implAnnotationsToSource(map: AnnotationMap, prefix?: string): TokenStream;
export declare function toJSON(value: unknown): TokenStream;
export declare function nlAnnotationsToSource(map: NLAnnotationMap, prefix?: string): TokenStream;
/**
 * Base class of AST nodes.
 *
 */
export default abstract class Node {
    /**
     * The location of this node in the source code, or `null` if the
     * node is not associated with any source.
     *
     */
    location: SourceRange | null;
    /**
     * Construct a new AST node.
     *
     * @param location - the position of this node in the source code
     */
    constructor(location?: SourceRange | null);
    /**
     * Traverse the current subtree using the visitor pattern.
     * See {@link Ast.NodeVisitor} for details and example usage.
     *
     * @param {Ast.NodeVisitor} visitor - the visitor to use.
     */
    abstract visit(visitor: NodeVisitor): void;
    abstract clone(): Node;
    /**
     * Optimize this AST node.
     *
     * Optimization removes redundant operations and converts ThingTalk to canonical form.
     *
     * @returns {Ast~Node} the optimized node
     */
    optimize(): Node;
    /**
     * Convert this AST node to a sequence of tokens.
     */
    abstract toSource(): TokenStream;
    /**
     * Convert this AST node to a normalized surface form in ThingTalk.
     */
    prettyprint(): string;
    /**
     * Iterate all primitives (Thingpedia function invocations) in the subtree of this
     * AST node (including the node itself).
     *
     * This method is implemented using {@link Ast.NodeVisitor}. It is recommended to use
     * {@link Ast.NodeVisitor} directly to traverse ASTs instead of this or similar methods.
     *
     * @param {boolean} includeVarRef - whether to include local function calls (VarRef nodes)
     *                                  in the iteration
     * @deprecated Use {@link Ast.NodeVisitor}.
     */
    iteratePrimitives(includeVarRef: false): Array<[('action' | 'query' | 'stream' | 'filter' | 'expression'), Invocation | ExternalBooleanExpression]>;
    iteratePrimitives(includeVarRef: boolean): Array<[('action' | 'query' | 'stream' | 'filter' | 'expression'), Primitive]>;
}
