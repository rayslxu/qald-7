import AstNode, { SourceRange, AnnotationMap, NLAnnotationMap, AnnotationSpec } from './base';
import { Input } from './program';
import { ExpressionStatement } from './statement';
import { DeviceSelector } from './invocation';
import { Value } from './values';
import { FunctionDef } from './function_def';
import NodeVisitor from './visitor';
import { OldSlot, AbstractSlot } from './slots';
import type SchemaRetriever from '../schema';
import { TokenStream } from '../new-syntax/tokenstream';
export declare class DialogueHistoryResultItem extends AstNode {
    value: Record<string, Value>;
    raw: Record<string, unknown> | null;
    constructor(location: SourceRange | null, value: Record<string, Value>, raw?: Record<string, unknown> | null);
    toSource(): TokenStream;
    clone(): DialogueHistoryResultItem;
    visit(visitor: NodeVisitor): void;
    iterateSlots2(schema: FunctionDef | null): Generator<DeviceSelector | AbstractSlot, void>;
    equals(other: DialogueHistoryResultItem): boolean;
}
/**
 * A wrapper for results that contains the current page of results to present, the
 * total number of results and whether there are more results that have not been
 * fetched.
 *
 */
export declare class DialogueHistoryResultList extends AstNode {
    results: DialogueHistoryResultItem[];
    count: Value;
    more: boolean;
    error: Value | null;
    constructor(location: SourceRange | null, results: DialogueHistoryResultItem[], count: Value, more?: boolean, error?: Value | null);
    toSource(): TokenStream;
    clone(): DialogueHistoryResultList;
    visit(visitor: NodeVisitor): void;
    iterateSlots2(schema: FunctionDef | null): Generator<DeviceSelector | AbstractSlot, void>;
    equals(other: DialogueHistoryResultList): boolean;
}
export declare type ConfirmationState = 'proposed' | 'accepted' | 'confirmed';
/**
 * A single item in the dialogue state. Consists of a program and optionally
 * the results from that program.
 *
 */
export declare class DialogueHistoryItem extends AstNode {
    stmt: ExpressionStatement;
    results: DialogueHistoryResultList | null;
    confirm: ConfirmationState;
    nl_annotations: NLAnnotationMap;
    impl_annotations: AnnotationMap;
    constructor(location: SourceRange | null, stmt: ExpressionStatement, results: DialogueHistoryResultList | null, confirm: string | boolean, { nl, impl }?: AnnotationSpec);
    toSource(): TokenStream;
    private _getFunctions;
    compatible(other: DialogueHistoryItem): boolean;
    isExecutable(): boolean;
    equals(other: DialogueHistoryItem): boolean;
    optimize(): this;
    clone(): DialogueHistoryItem;
    visit(visitor: NodeVisitor): void;
    iterateSlots(): Generator<OldSlot, void>;
    iterateSlots2(): Generator<DeviceSelector | AbstractSlot, void>;
}
/**
 * The representation of a dialogue state.
 *
 * It is composed of:
 *
 * - A policy name (which is used as a namespace for the dialogueAct)
 * - The current abstract dialogue act
 * - An parameter name that modifies the current dialogue act (optional, used for questions from the agent)
 * - The history of all programs up to that point, and all programs that are scheduled to execute
 *
 */
export declare class DialogueState extends Input {
    /**
     * The identifier of the current dialogue policy.
     * This is a reverse-DNS name and acts as a namespace
     * for the dialogue act.
     * Most commonly it will be the string "org.thingpedia.dialogue.transaction".
     */
    policy: string;
    /**
     * The dialogue act at this point of the conversation.
     *
     * Immediately after the user speaks, this is the dialogue act of the last
     * user turn. Immediately before the user speaks, this is the dialogue act
     * of the last agent state.
     */
    dialogueAct: string;
    /**
     * Parameters associated with this dialogue act.
     *
     * This is a container for arbitrary constants or identifiers that parametrize
     * a dialogue act. It is used, among other things, to parametrize the
     * "sys_slot_fill" dialogue act with the list of slots being requested by the
     * agent at this turn.
     */
    dialogueActParam: Array<string | Value> | null;
    /**
     * The history of all executed ThingTalk statements and their results, as well
     * as the future, yet to be executed statements.
     */
    history: DialogueHistoryItem[];
    nl_annotations: NLAnnotationMap;
    impl_annotations: AnnotationMap;
    private _current;
    private _next;
    constructor(location: SourceRange | null, policy: string, dialogueAct: string, dialogueActParam: Array<string | Value> | string | null, history: DialogueHistoryItem[], { nl, impl }?: AnnotationSpec);
    /**
     * A pointer to the most recently executed ThingTalk statement, if any.
     *
     * This is a pointer into the history, provided for API convenience only.
     */
    get current(): DialogueHistoryItem | null;
    /**
     * The definition of the main Thingpedia function associated with the current
     * statement, if any.
     */
    get currentFunction(): FunctionDef | null;
    /**
     * The definition of the main Thingpedia query associated with the current
     * statement, if any.
     *
     * If the current statement is a query, this will be the same as
     * {@link currentFunction}. Otherwise, it will be the last query before
     * the action is invoked.
     */
    get currentQuery(): FunctionDef | null;
    /**
     * The results of the current ThingTalk statements, if any.
     *
     * This is a convenience API to access the results of the current statement.
     */
    get currentResults(): DialogueHistoryResultList | null;
    /**
     * A pointer to the immediate next unexecuted ThingTalk statement, if any.
     *
     * This is a pointer into the history, provided for API convenience only.
     */
    get next(): DialogueHistoryItem | null;
    /**
     * The definition of the main Thingpedia function associated with the next
     * statement, if any.
     */
    get nextFunction(): FunctionDef | null;
    /**
     * Update the {@link current} and {@link next} pointers.
     *
     * This method should be called when {@link history} is modified or statements
     * are executed.
     */
    updateCurrent(): void;
    optimize(): this;
    toSource(): TokenStream;
    clone(): DialogueState;
    typecheck(schemas: SchemaRetriever, getMeta?: boolean): Promise<this>;
    visit(visitor: NodeVisitor): void;
    iterateSlots(): Generator<OldSlot, void>;
    iterateSlots2(): Generator<DeviceSelector | AbstractSlot, void>;
}
