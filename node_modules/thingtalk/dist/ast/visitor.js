"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of ThingTalk
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Base class (interface) for traversing the AST using the visitor
 * pattern.
 *
 * During the traversal, each node will call the {@link Ast.NodeVisitor.enter}
 * method when visiting the node.
 *
 * After that, the the node will call the appropriate visit
 * method based on the node type. If the visit method returns true,
 * (which is the default for non-overridden methods), traversal continues
 * with children.
 *
 * After children have been visited, the node will call {@link Ast.NodeVisitor.exit} before
 * returning to the parent. {@link Ast.NodeVisitor.exit} is called regardless of the return value
 * of visit, so {@link Ast.NodeVisitor.enter} and {@link Ast.NodeVisitor.exit} are always paired.
 *
 * Expected usage:
 * ```javascript
 * const visitor = new class extends Ast.NodeVisitor {
 *    visitMonitorStream(node) {
 *       // do something with it
 *       return true;
 *    }
 * };
 * program.visit(visitor);
 * ```
 *
 */
class NodeVisitor {
    /**
     * Begin visiting a node.
     *
     * This is called for all nodes before calling the corresponding
     * visit method.
     *
     * @param node - the node being entered
     */
    enter(node) { }
    /**
     * End visiting a node.
     *
     * This is called for all nodes after calling the corresponding
     * visit method and visiting all children.
     *
     * This method is not called if {@link Ast.NodeVisitor.enter} or
     * visit throws an exception.
     *
     * @param node - the node being exited
     */
    exit(node) { }
    // values
    visitValue(node) {
        return true;
    }
    /* istanbul ignore next */
    visitArrayValue(node) {
        return true;
    }
    /* istanbul ignore next */
    visitVarRefValue(node) {
        return true;
    }
    /* istanbul ignore next */
    visitArrayFieldValue(node) {
        return true;
    }
    /* istanbul ignore next */
    visitComputationValue(node) {
        return true;
    }
    /* istanbul ignore next */
    visitFilterValue(node) {
        return true;
    }
    /* istanbul ignore next */
    visitUndefinedValue(node) {
        return true;
    }
    /* istanbul ignore next */
    visitNullValue(node) {
        return true;
    }
    /* istanbul ignore next */
    visitContextRefValue(node) {
        return true;
    }
    /* istanbul ignore next */
    visitBooleanValue(node) {
        return true;
    }
    /* istanbul ignore next */
    visitStringValue(node) {
        return true;
    }
    /* istanbul ignore next */
    visitNumberValue(node) {
        return true;
    }
    /* istanbul ignore next */
    visitMeasureValue(node) {
        return true;
    }
    /* istanbul ignore next */
    visitCurrencyValue(node) {
        return true;
    }
    /* istanbul ignore next */
    visitLocationValue(node) {
        return true;
    }
    /* istanbul ignore next */
    visitDateValue(node) {
        return true;
    }
    /* istanbul ignore next */
    visitTimeValue(node) {
        return true;
    }
    /* istanbul ignore next */
    visitEntityValue(node) {
        return true;
    }
    /* istanbul ignore next */
    visitEnumValue(node) {
        return true;
    }
    /* istanbul ignore next */
    visitEventValue(node) {
        return true;
    }
    /* istanbul ignore next */
    visitArgMapValue(node) {
        return true;
    }
    /* istanbul ignore next */
    visitObjectValue(node) {
        return true;
    }
    /* istanbul ignore next */
    visitRecurrentTimeSpecificationValue(node) {
        return true;
    }
    /* istanbul ignore next */
    visitRecurrentTimeRule(node) {
        return true;
    }
    // bookkeeping
    /* istanbul ignore next */
    visitControlCommand(node) {
        return true;
    }
    /* istanbul ignore next */
    visitSpecialControlIntent(node) {
        return true;
    }
    /* istanbul ignore next */
    visitChoiceControlIntent(node) {
        return true;
    }
    /* istanbul ignore next */
    visitAnswerControlIntent(node) {
        return true;
    }
    // classes
    /* istanbul ignore next */
    visitClassDef(node) {
        return true;
    }
    /* istanbul ignore next */
    visitFunctionDef(node) {
        return true;
    }
    /* istanbul ignore next */
    visitArgumentDef(node) {
        return true;
    }
    /* istanbul ignore next */
    visitMixinImportStmt(node) {
        return true;
    }
    /* istanbul ignore next */
    visitEntityDef(node) {
        return true;
    }
    // expressions
    /* istanbul ignore next */
    visitDeviceSelector(node) {
        return true;
    }
    /* istanbul ignore next */
    visitInputParam(node) {
        return true;
    }
    /* istanbul ignore next */
    visitInvocation(node) {
        return true;
    }
    /* istanbul ignore next */
    visitTrueBooleanExpression(node) {
        return true;
    }
    /* istanbul ignore next */
    visitFalseBooleanExpression(node) {
        return true;
    }
    /* istanbul ignore next */
    visitAndBooleanExpression(node) {
        return true;
    }
    /* istanbul ignore next */
    visitOrBooleanExpression(node) {
        return true;
    }
    /* istanbul ignore next */
    visitNotBooleanExpression(node) {
        return true;
    }
    /* istanbul ignore next */
    visitAtomBooleanExpression(node) {
        return true;
    }
    /* istanbul ignore next */
    visitExternalBooleanExpression(node) {
        return true;
    }
    /* istanbul ignore next */
    visitDontCareBooleanExpression(node) {
        return true;
    }
    /* istanbul ignore next */
    visitComputeBooleanExpression(node) {
        return true;
    }
    /* istanbul ignore next */
    visitComparisonSubqueryBooleanExpression(node) {
        return true;
    }
    /* istanbul ignore next */
    visitExistentialSubqueryBooleanExpression(node) {
        return true;
    }
    /* istanbul ignore next */
    visitPropertyPathElement(node) {
        return true;
    }
    /* istanbul ignore next */
    visitPropertyPathBooleanExpression(node) {
        return true;
    }
    // streams, tables, actions
    /* istanbul ignore next */
    visitVarRefTable(node) {
        return true;
    }
    /* istanbul ignore next */
    visitInvocationTable(node) {
        return true;
    }
    /* istanbul ignore next */
    visitFilteredTable(node) {
        return true;
    }
    /* istanbul ignore next */
    visitProjectionTable(node) {
        return true;
    }
    /* istanbul ignore next */
    visitComputeTable(node) {
        return true;
    }
    /* istanbul ignore next */
    visitAliasTable(node) {
        return true;
    }
    /* istanbul ignore next */
    visitAggregationTable(node) {
        return true;
    }
    /* istanbul ignore next */
    visitSortedTable(node) {
        return true;
    }
    /* istanbul ignore next */
    visitIndexTable(node) {
        return true;
    }
    /* istanbul ignore next */
    visitSlicedTable(node) {
        return true;
    }
    /* istanbul ignore next */
    visitJoinTable(node) {
        return true;
    }
    /* istanbul ignore next */
    visitVarRefStream(node) {
        return true;
    }
    /* istanbul ignore next */
    visitTimerStream(node) {
        return true;
    }
    /* istanbul ignore next */
    visitAtTimerStream(node) {
        return true;
    }
    /* istanbul ignore next */
    visitMonitorStream(node) {
        return true;
    }
    /* istanbul ignore next */
    visitEdgeNewStream(node) {
        return true;
    }
    /* istanbul ignore next */
    visitEdgeFilterStream(node) {
        return true;
    }
    /* istanbul ignore next */
    visitFilteredStream(node) {
        return true;
    }
    /* istanbul ignore next */
    visitProjectionStream(node) {
        return true;
    }
    /* istanbul ignore next */
    visitComputeStream(node) {
        return true;
    }
    /* istanbul ignore next */
    visitAliasStream(node) {
        return true;
    }
    /* istanbul ignore next */
    visitJoinStream(node) {
        return true;
    }
    /* istanbul ignore next */
    visitVarRefAction(node) {
        return true;
    }
    /* istanbul ignore next */
    visitInvocationAction(node) {
        return true;
    }
    /* istanbul ignore next */
    visitNotifyAction(node) {
        return true;
    }
    /* istanbul ignore next */
    visitSpecifiedPermissionFunction(node) {
        return true;
    }
    /* istanbul ignore next */
    visitBuiltinPermissionFunction(node) {
        return true;
    }
    /* istanbul ignore next */
    visitClassStarPermissionFunction(node) {
        return true;
    }
    /* istanbul ignore next */
    visitStarPermissionFunction(node) {
        return true;
    }
    // new-style expressions
    /* istanbul ignore next */
    visitFunctionCallExpression(node) {
        return true;
    }
    /* istanbul ignore next */
    visitInvocationExpression(node) {
        return true;
    }
    /* istanbul ignore next */
    visitMonitorExpression(node) {
        return true;
    }
    /* istanbul ignore next */
    visitFilterExpression(node) {
        return true;
    }
    /* istanbul ignore next */
    visitProjectionExpression(node) {
        return true;
    }
    /* istanbul ignore next */
    visitProjectionElement(node) {
        return true;
    }
    /* istanbul ignore next */
    visitProjectionExpression2(node) {
        return true;
    }
    /* istanbul ignore next */
    visitBooleanQuestionExpression(node) {
        return true;
    }
    /* istanbul ignore next */
    visitAliasExpression(node) {
        return true;
    }
    /* istanbul ignore next */
    visitAggregationExpression(node) {
        return true;
    }
    /* istanbul ignore next */
    visitSortExpression(node) {
        return true;
    }
    /* istanbul ignore next */
    visitIndexExpression(node) {
        return true;
    }
    /* istanbul ignore next */
    visitSliceExpression(node) {
        return true;
    }
    /* istanbul ignore next */
    visitChainExpression(node) {
        return true;
    }
    /* istanbul ignore next */
    visitJoinExpression(node) {
        return true;
    }
    // statements and inputs
    /* istanbul ignore next */
    visitFunctionDeclaration(node) {
        return true;
    }
    /* istanbul ignore next */
    visitAssignment(node) {
        return true;
    }
    /* istanbul ignore next */
    visitRule(node) {
        return true;
    }
    /* istanbul ignore next */
    visitCommand(node) {
        return true;
    }
    /* istanbul ignore next */
    visitExpressionStatement(node) {
        return true;
    }
    /* istanbul ignore next */
    visitReturnStatement(node) {
        return true;
    }
    /* istanbul ignore next */
    visitDataset(node) {
        return true;
    }
    /* istanbul ignore next */
    visitExample(node) {
        return true;
    }
    /* istanbul ignore next */
    visitProgram(node) {
        return true;
    }
    /* istanbul ignore next */
    visitPermissionRule(node) {
        return true;
    }
    /* istanbul ignore next */
    visitLibrary(node) {
        return true;
    }
    // dialogue states
    visitDialogueState(node) {
        return true;
    }
    visitDialogueHistoryItem(node) {
        return true;
    }
    visitDialogueHistoryResultList(node) {
        return true;
    }
    visitDialogueHistoryResultItem(node) {
        return true;
    }
}
exports.default = NodeVisitor;
//# sourceMappingURL=visitor.js.map