"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of ThingTalk
//
// Copyright 2018-2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityDef = exports.MixinImportStmt = exports.ClassDef = void 0;
const assert_1 = __importDefault(require("assert"));
const base_1 = __importStar(require("./base"));
const utils_1 = require("../utils");
const statement_1 = require("./statement");
const list_1 = __importDefault(require("../utils/list"));
/**
 * The definition of a ThingTalk class.
 *
 */
class ClassDef extends statement_1.Statement {
    /**
     * Construct a new class definition.
     *
     * @param location - the position of this node in the source code
     * @param kind - the class identifier in Thingpedia
     * @param _extends - parent classes (if any)
     * @param members - the class members including queries, actions, entities, imports
     * @param members.imports - import statements in this class
     * @param members.entities - entity declarations in this class
     * @param members.queries - query functions in this class
     * @param members.actions - action functions in this class
     * @param annotations - annotations of the class
     * @param annotations.nl - natural language annotations of the class (translatable annotations)
     * @param annotations.impl - implementation annotations of the class
     * @param options - additional options for the class
     * @param options.is_abstract - `true` if this is an abstract class which has no implementation
     */
    constructor(location, kind, _extends, members, annotations, options) {
        super(location);
        this.name = kind;
        this.kind = kind;
        // load parent classes
        (0, assert_1.default)(_extends === null || Array.isArray(_extends));
        if (_extends === null)
            _extends = [];
        this.extends = _extends;
        // load class members
        this.imports = members.imports || [];
        this.entities = members.entities || [];
        this.queries = members.queries || {};
        this.actions = members.actions || {};
        this._adjustParentPointers();
        // load annotations
        (0, assert_1.default)(typeof annotations.nl === 'undefined' ||
            typeof annotations.nl === 'object');
        (0, assert_1.default)(typeof annotations.impl === 'undefined' ||
            typeof annotations.impl === 'object');
        this.nl_annotations = annotations.nl || {};
        this.impl_annotations = annotations.impl || {};
        // load additional options
        this.is_abstract = !!(options && options.is_abstract);
    }
    toSource() {
        let list = list_1.default.concat('class', '@' + this.kind);
        if (this.extends.length > 0)
            list = list_1.default.concat(list, 'extends', list_1.default.join(this.extends.map((e) => list_1.default.singleton('@' + e)), ','));
        let first = true;
        list = list_1.default.concat(list, (0, base_1.nlAnnotationsToSource)(this.nl_annotations), (0, base_1.implAnnotationsToSource)(this.impl_annotations), ' ', '{', '\n', '\t+');
        for (const import_ of this.imports) {
            if (first)
                first = false;
            else
                list = list_1.default.concat(list, '\n');
            list = list_1.default.concat(list, import_.toSource(), '\n');
        }
        for (const entity of this.entities) {
            if (first)
                first = false;
            else
                list = list_1.default.concat(list, '\n');
            list = list_1.default.concat(list, entity.toSource(), '\n');
        }
        for (const q in this.queries) {
            if (first)
                first = false;
            else
                list = list_1.default.concat(list, '\n');
            list = list_1.default.concat(list, this.queries[q].toSource(), '\n');
        }
        for (const a in this.actions) {
            if (first)
                first = false;
            else
                list = list_1.default.concat(list, '\n');
            list = list_1.default.concat(list, this.actions[a].toSource(), '\n');
        }
        list = list_1.default.concat(list, '\t-', '}');
        if (this.is_abstract)
            list = list_1.default.concat('abstract', list);
        return list;
    }
    *iterateSlots() {
    }
    *iterateSlots2() {
    }
    visit(visitor) {
        visitor.enter(this);
        if (visitor.visitClassDef(this)) {
            for (const import_ of this.imports)
                import_.visit(visitor);
            for (const entity of this.entities)
                entity.visit(visitor);
            for (const query in this.queries)
                this.queries[query].visit(visitor);
            for (const action in this.actions)
                this.actions[action].visit(visitor);
        }
        visitor.exit(this);
    }
    _adjustParentPointers() {
        for (const name in this.queries)
            this.queries[name].setClass(this);
        for (const name in this.actions)
            this.actions[name].setClass(this);
    }
    /**
     * Get a function defined in this class with the given type and name.
     *
     * @param {string} type - the function type, either `query` or `action`
     * @param {string} name - the function name
     * @return {module.Ast.FunctionDef|undefined} the function definition, or `undefined`
     *         if the function does not exist
     */
    getFunction(type, name) {
        if (type === 'query')
            return this.queries[name];
        else
            return this.actions[name];
    }
    /**
     * Read and normalize an implementation annotation from this class.
     *
     * @param {string} name - the annotation name
     * @return {any|undefined} the annotation normalized value, or `undefined` if the
     *         annotation is not present
     */
    getImplementationAnnotation(name) {
        if (Object.prototype.hasOwnProperty.call(this.impl_annotations, name))
            return this.impl_annotations[name].toJS();
        else
            return undefined;
    }
    /**
     * Read a natural-language annotation from this class.
     *
     * @param {string} name - the annotation name
     * @return {any|undefined} the annotation value, or `undefined` if the
     *         annotation is not present
     */
    getNaturalLanguageAnnotation(name) {
        if (Object.prototype.hasOwnProperty.call(this.nl_annotations, name))
            return this.nl_annotations[name];
        else
            return undefined;
    }
    /**
     * Clone the class definition.
     *
     * @return {Ast.ClassDef} the cloned class definition
     */
    clone() {
        // clone members
        const imports = this.imports.map((i) => i.clone());
        const entities = this.entities.map((e) => e.clone());
        const queries = {};
        const actions = {};
        for (const name in this.queries)
            queries[name] = this.queries[name].clone();
        for (const name in this.actions)
            actions[name] = this.actions[name].clone();
        const members = { imports, entities, queries, actions };
        // clone annotations
        const nl = {};
        Object.assign(nl, this.nl_annotations);
        const impl = {};
        Object.assign(impl, this.impl_annotations);
        const annotations = { nl, impl };
        // clone other options
        const options = {
            is_abstract: this.is_abstract
        };
        return new ClassDef(this.location, this.kind, this.extends, members, annotations, options);
    }
    /**
     * The `loader` mixin for this class, if one is present
     *
     */
    get loader() {
        return this.imports.find((i) => i.facets.includes('loader'));
    }
    /**
     * The `config` mixin for this class, if one is present
     *
     */
    get config() {
        return this.imports.find((i) => i.facets.includes('config'));
    }
    /**
     * The canonical form of this class.
     *
     * This is is the preferred property to use as a user visible name for devices of
     * this class. It will never be null or undefined: if the `#_[canonical]` annotation
     * is missing, a default will be computed from the class name.
     */
    get canonical() {
        return this.nl_annotations.canonical || (0, utils_1.cleanKind)(this.kind);
    }
    /**
     * The natural language annotations of the class
     *
     * @deprecated metadata is deprecated. Use nl_annotations instead.
     */
    get metadata() {
        return this.nl_annotations;
    }
    /**
     * The implementation annotations of the class
     *
     * @deprecated annotations is deprecated. Use impl_annotations instead.
     */
    get annotations() {
        return this.impl_annotations;
    }
    /**
     * Read and normalize an annotation from this class.
     *
     * @param {string} name - the annotation name
     * @return {any|undefined} the annotation normalized value, or `undefined` if the
     *         annotation is not present
     * @deprecated getAnnotation is deprecated and should not be used. Use {@link Ast.ClassDef.getImplementationAnnotation} instead.
     */
    getAnnotation(name) {
        return this.getImplementationAnnotation(name);
    }
}
exports.ClassDef = ClassDef;
/**
 * A `import` statement that imports a mixin inside a ThingTalk class.
 *
 * Mixins add implementation functionality to ThingTalk classes, such as specifying
 * how the class is loaded (which language, which format, which version of the SDK)
 * and how devices are configured.
 */
class MixinImportStmt extends base_1.default {
    /**
     * Construct a new mixin import statement.
     *
     * @param location - the position of this node in the source code
     * @param facets - which facets to import from the mixin (`config`, `auth`, `loader`, ...)
     * @param module - the mixin identifier to import
     * @param in_params - input parameters to pass to the mixin
     */
    constructor(location, facets, module, in_params) {
        super(location);
        (0, assert_1.default)(Array.isArray(facets));
        this.facets = facets;
        (0, assert_1.default)(typeof module === 'string');
        this.module = module;
        (0, assert_1.default)(Array.isArray(in_params));
        this.in_params = in_params;
    }
    toSource() {
        return list_1.default.concat('import', list_1.default.join(this.facets.map((f) => list_1.default.singleton(f)), ','), ' ', 'from', ' ', '@' + this.module, '(', list_1.default.join(this.in_params.map((ip) => ip.toSource()), ','), ')', ';');
    }
    clone() {
        return new MixinImportStmt(this.location, this.facets.slice(0), this.module, this.in_params.map((p) => p.clone()));
    }
    visit(visitor) {
        visitor.enter(this);
        if (visitor.visitMixinImportStmt(this)) {
            for (const in_param of this.in_params)
                in_param.visit(visitor);
        }
        visitor.exit(this);
    }
}
exports.MixinImportStmt = MixinImportStmt;
/**
 * An `entity` statement inside a ThingTalk class.
 *
 */
class EntityDef extends base_1.default {
    /**
     * Construct a new entity declaration.
     *
     * @param location - the position of this node in the source code
     * @param name - the entity name (the part after the ':')
     * @param extends - the parent entity type, if any (this can be a fully qualified name with ':', or just the part after ':')
     * @param annotations - annotations of the entity type
     * @param [annotations.nl={}] - natural-language annotations (translatable annotations)
     * @param [annotations.impl={}] - implementation annotations
     */
    constructor(location, name, _extends, annotations) {
        super(location);
        this.isEntityDef = true;
        this.name = name;
        _extends = typeof _extends === 'string' ? [_extends] : _extends;
        this.extends = _extends || [];
        this.nl_annotations = annotations.nl || {};
        this.impl_annotations = annotations.impl || {};
    }
    toSource() {
        if (this.extends.length > 0) {
            const _extends = this.extends.map((e) => e.includes(':') ? `^^${e}` : e);
            return list_1.default.concat('entity', ' ', this.name, 'extends', list_1.default.join(_extends.map((e) => list_1.default.singleton(e)), ','), '\t+', (0, base_1.nlAnnotationsToSource)(this.nl_annotations), (0, base_1.implAnnotationsToSource)(this.impl_annotations), '\t-', ';');
        }
        else {
            return list_1.default.concat('entity', ' ', this.name, '\t+', (0, base_1.nlAnnotationsToSource)(this.nl_annotations), (0, base_1.implAnnotationsToSource)(this.impl_annotations), '\t-', ';');
        }
    }
    /**
     * Clone this entity and return a new object with the same properties.
     *
     * @return the new instance
     */
    clone() {
        const nl = {};
        Object.assign(nl, this.nl_annotations);
        const impl = {};
        Object.assign(impl, this.impl_annotations);
        return new EntityDef(this.location, this.name, this.extends, { nl, impl });
    }
    /**
     * Read and normalize an implementation annotation from this entity definition.
     *
     * @param {string} name - the annotation name
     * @return {any|undefined} the annotation normalized value, or `undefined` if the
     *         annotation is not present
     */
    getImplementationAnnotation(name) {
        if (Object.prototype.hasOwnProperty.call(this.impl_annotations, name))
            return this.impl_annotations[name].toJS();
        else
            return undefined;
    }
    /**
     * Read a natural-language annotation from this entity definition.
     *
     * @param {string} name - the annotation name
     * @return {any|undefined} the annotation value, or `undefined` if the
     *         annotation is not present
     */
    getNaturalLanguageAnnotation(name) {
        if (Object.prototype.hasOwnProperty.call(this.nl_annotations, name))
            return this.nl_annotations[name];
        else
            return undefined;
    }
    visit(visitor) {
        visitor.enter(this);
        visitor.visitEntityDef(this);
        visitor.exit(this);
    }
}
exports.EntityDef = EntityDef;
//# sourceMappingURL=class_def.js.map