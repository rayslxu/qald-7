import Node, { SourceRange, NLAnnotationMap, AnnotationMap, AnnotationSpec } from './base';
import NodeVisitor from './visitor';
import { Value } from './values';
import { DeviceSelector } from './invocation';
import { BooleanExpression } from './boolean_expression';
import { PermissionFunction } from './permissions';
import { Dataset, FunctionDeclaration, TopLevelExecutableStatement } from './statement';
import { ClassDef } from './class_def';
import { AbstractSlot, OldSlot } from './slots';
import SchemaRetriever from '../schema';
import { TokenStream } from '../new-syntax/tokenstream';
/**
 * A collection of Statements from the same source file.
 *
 * It is somewhat organized for "easier" API handling,
 * and for backward compatibility with API users.
 *
 */
export declare abstract class Input extends Node {
    static ControlCommand: any;
    isControlCommand: boolean;
    static Program: any;
    isProgram: boolean;
    static Library: any;
    isLibrary: boolean;
    static PermissionRule: any;
    isPermissionRule: boolean;
    static DialogueState: any;
    isDialogueState: boolean;
    iterateSlots(): Generator<OldSlot, void>;
    iterateSlots2(): Generator<DeviceSelector | AbstractSlot, void>;
    optimize(): Input;
    abstract clone(): Input;
    /**
     * Typecheck this ThingTalk input.
     *
     * This is the main API to typecheck a ThingTalk input.
     *
     * @param schemas - schema retriever object to retrieve Thingpedia information
     * @param [getMeta=false] - retreive natural language metadata during typecheck
     */
    abstract typecheck(schemas: SchemaRetriever, getMeta?: boolean): Promise<this>;
}
/**
 * An executable ThingTalk program (containing at least one executable
 * statement).
 *
 */
export declare class Program extends Input {
    classes: ClassDef[];
    declarations: FunctionDeclaration[];
    statements: TopLevelExecutableStatement[];
    nl_annotations: NLAnnotationMap;
    impl_annotations: AnnotationMap;
    /**
     * Construct a new ThingTalk program.
     *
     * @param {Ast~SourceRange|null} location - the position of this node
     *        in the source code
     * @param {Ast.ClassDef[]} classes - locally defined classes
     * @param {Ast.Statement.Declaration[]} declarations - declaration statements
     * @param {Ast.Statement[]} rules - executable statements (rules and commands)
     * @param {Ast.Value|null} principal - executor of this program
     * @param {Ast.Statement.OnInputChoice[]} - on input continuations of this program
     */
    constructor(location: SourceRange | null, classes: ClassDef[], declarations: FunctionDeclaration[], statements: TopLevelExecutableStatement[], { nl, impl }?: AnnotationSpec);
    /**
     * @deprecated
     */
    get principal(): Value | null;
    toSource(): TokenStream;
    visit(visitor: NodeVisitor): void;
    iterateSlots(): Generator<OldSlot, void>;
    iterateSlots2(): Generator<DeviceSelector | AbstractSlot, void>;
    clone(): Program;
    optimize(): this;
    typecheck(schemas: SchemaRetriever, getMeta?: boolean): Promise<this>;
    /**
     * Attempt to convert this program to an equivalent permission rule.
     *
     * @param principal - the principal to use as source
     * @param contactName - the display value for the principal
     * @return the new permission rule, or `null` if conversion failed
     */
    convertToPermissionRule(principal: string, contactName: string | null): PermissionRule | null;
}
/**
 * An ThingTalk program definining a permission control policy.
 *
 */
export declare class PermissionRule extends Input {
    principal: BooleanExpression;
    query: PermissionFunction;
    action: PermissionFunction;
    /**
     * Construct a new permission rule.
     *
     * @param {Ast~SourceRange|null} location - the position of this node
     *        in the source code
     * @param {Ast.BooleanExpression} principal - the predicate selecting
     *        the source of the program this rule is applicable to
     * @param {Ast.PermissionFunction} query - a permission function for the query part
     * @param {Ast.PermissionFunction} action - a permission function for the action part
     */
    constructor(location: SourceRange | null, principal: BooleanExpression, query: PermissionFunction, action: PermissionFunction);
    toSource(): TokenStream;
    optimize(): this;
    visit(visitor: NodeVisitor): void;
    iterateSlots(): Generator<OldSlot, void>;
    iterateSlots2(): Generator<DeviceSelector | AbstractSlot, void>;
    clone(): PermissionRule;
    typecheck(schemas: SchemaRetriever, getMeta?: boolean): Promise<this>;
}
/**
 * An ThingTalk input file containing a library of classes and datasets.
 *
 */
export declare class Library extends Input {
    classes: ClassDef[];
    datasets: Dataset[];
    /**
     * Construct a new ThingTalk library.
     *
     * @param {Ast~SourceRange|null} location - the position of this node
     *        in the source code
     * @param {Ast.ClassDef[]} classes - classes defined in the library
     * @param {Ast.Dataset[]} datasets - datasets defined in the library
     */
    constructor(location: SourceRange | null, classes: ClassDef[], datasets: Dataset[]);
    toSource(): TokenStream;
    visit(visitor: NodeVisitor): void;
    iterateSlots(): Generator<OldSlot, void>;
    iterateSlots2(): Generator<DeviceSelector | AbstractSlot, void>;
    clone(): Library;
    optimize(): Library;
    typecheck(schemas: SchemaRetriever, getMeta?: boolean): Promise<this>;
}
