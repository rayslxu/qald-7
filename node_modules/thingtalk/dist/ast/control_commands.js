"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of ThingTalk
//
// Copyright 2019-2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnswerControlIntent = exports.ChoiceControlIntent = exports.SpecialControlIntent = exports.ControlIntent = exports.ControlCommandType = exports.ControlCommand = void 0;
const assert_1 = __importDefault(require("assert"));
const base_1 = __importDefault(require("./base"));
const program_1 = require("./program");
const values_1 = require("./values");
const typecheck_1 = __importDefault(require("../typecheck"));
const list_1 = __importDefault(require("../utils/list"));
/**
 * A ThingTalk input that drives the dialog.
 *
 * Control commands are special commands like yes, no or cancel
 * whose purpose is to drive a dialog agent, but have no direct executable
 * semantic.
 *
 * Their definition is included in ThingTalk to aid using ThingTalk as a
 * virtual assistant representation language without extensions.
 *
 */
class ControlCommand extends program_1.Input {
    /**
     * Construct a new control input.
     *
     * @param location - the position of this node
     *        in the source code
     * @param intent - the current intent
     */
    constructor(location, intent) {
        super(location);
        this.intent = intent;
    }
    toSource() {
        return list_1.default.concat(this.intent.toSource(), ';');
    }
    visit(visitor) {
        visitor.enter(this);
        if (visitor.visitControlCommand(this))
            this.intent.visit(visitor);
        visitor.exit(this);
    }
    clone() {
        return new ControlCommand(this.location, this.intent.clone());
    }
    async typecheck(schemas, getMeta = false) {
        const typeChecker = new typecheck_1.default(schemas, getMeta);
        await typeChecker.typeCheckControl(this.intent);
        return this;
    }
}
exports.ControlCommand = ControlCommand;
program_1.Input.ControlCommand = ControlCommand;
ControlCommand.prototype.isControlCommand = true;
/**
 * All types of special control commands.
 */
exports.ControlCommandType = [
    'yes',
    'no',
    'failed',
    'ood',
    'train',
    'debug',
    'nevermind',
    'stop',
    'help',
    'wakeup', // do nothing and wake up the screen
];
/**
 * Base class of all the control intents.
 *
 * The meaning of all control commands is mapped to a subclass of
 * this class.
 *
 */
class ControlIntent extends base_1.default {
}
exports.ControlIntent = ControlIntent;
ControlIntent.prototype.isSpecial = false;
ControlIntent.prototype.isChoice = false;
ControlIntent.prototype.isAnswer = false;
/**
 * A special control command.
 *
 * Special commands have no parameters, and are expected to trigger
 * unusual behavior from the dialog agent.
 */
class SpecialControlIntent extends ControlIntent {
    /**
     * Construct a new special command.
     *
     * @param location - the position of this node
     *        in the source code
     * @param type - the command type (one of {@link ControlCommandType})
     */
    constructor(location, type) {
        super(location);
        (0, assert_1.default)(typeof type === 'string');
        this.type = type;
    }
    toSource() {
        return list_1.default.singleton('$' + this.type);
    }
    visit(visitor) {
        visitor.enter(this);
        visitor.visitSpecialControlIntent(this);
        visitor.exit(this);
    }
    clone() {
        return new SpecialControlIntent(this.location, this.type);
    }
}
exports.SpecialControlIntent = SpecialControlIntent;
SpecialControlIntent.prototype.isSpecial = true;
ControlIntent.Special = SpecialControlIntent;
/**
 * A multiple-choice control command.
 *
 * This indicates the user chose one option out of the just-presented list.
 *
 */
class ChoiceControlIntent extends ControlIntent {
    /**
     * Construct a new choice command.
     *
     * @param {Ast~SourceRange|null} location - the position of this node
     *        in the source code
     * @param {number} value - the choice index
     */
    constructor(location, value) {
        super(location);
        (0, assert_1.default)(typeof value === 'number');
        this.value = value;
    }
    toSource() {
        return list_1.default.concat('$choice', '(', String(this.value), ')');
    }
    visit(visitor) {
        visitor.enter(this);
        visitor.visitChoiceControlIntent(this);
        visitor.exit(this);
    }
    clone() {
        return new ChoiceControlIntent(this.location, this.value);
    }
}
exports.ChoiceControlIntent = ChoiceControlIntent;
ChoiceControlIntent.prototype.isChoice = true;
ControlIntent.Choice = ChoiceControlIntent;
/**
 * A direct answer to a slot-filling question.
 *
 */
class AnswerControlIntent extends ControlIntent {
    /**
     * Construct a new answer command.
     *
     * @param location - the position of this node in the source code
     * @param value - the answer value
     */
    constructor(location, value) {
        super(location);
        (0, assert_1.default)(value instanceof values_1.Value);
        this.value = value;
    }
    toSource() {
        return list_1.default.concat('$answer', '(', this.value.toSource(), ')');
    }
    visit(visitor) {
        visitor.enter(this);
        if (visitor.visitAnswerControlIntent(this))
            this.value.visit(visitor);
        visitor.exit(this);
    }
    clone() {
        return new AnswerControlIntent(this.location, this.value);
    }
}
exports.AnswerControlIntent = AnswerControlIntent;
AnswerControlIntent.prototype.isAnswer = true;
ControlIntent.Answer = AnswerControlIntent;
//# sourceMappingURL=control_commands.js.map