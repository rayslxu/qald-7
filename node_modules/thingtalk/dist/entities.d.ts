import * as Ast from './ast';
export interface MeasureEntity {
    unit: string;
    value: number;
}
export interface LocationEntity {
    latitude: number;
    longitude: number;
    display?: string | null;
}
export interface TimeEntity {
    hour: number;
    minute: number;
    second: number;
}
export interface GenericEntity {
    value: string | null;
    display?: string | null;
}
export interface DateEntity {
    year: number;
    month: number;
    day: number;
    hour?: number;
    minute?: number;
    second?: number;
}
export declare type AnyEntity = MeasureEntity | LocationEntity | TimeEntity | DateEntity | GenericEntity | Ast.Value | Date | string | number | undefined;
export declare type EntityMap = Record<string, AnyEntity>;
export declare type EntityResolver = (key: string, lastparam: string | null, lastfunction: string | null, unit: string | null) => AnyEntity;
export declare type EntityType = 'QUOTED_STRING' | 'NUMBER' | 'MEASURE' | 'LOCATION' | 'DATE' | 'TIME' | 'CURRENCY' | 'PICTURE' | 'USERNAME' | 'HASHTAG' | 'URL' | 'PHONE_NUMBER' | 'EMAIL_ADDRESS' | 'PATH_NAME' | 'GENERIC_ENTITY' | 'SLOT';
export declare type StringLikeEntityType = 'QUOTED_STRING' | 'PICTURE' | 'USERNAME' | 'HASHTAG' | 'URL' | 'PHONE_NUMBER' | 'EMAIL_ADDRESS' | 'PATH_NAME';
export declare type TypeOfEntity<K extends EntityType> = K extends StringLikeEntityType ? string : K extends 'NUMBER' ? number : K extends 'MEASURE' | 'CURRENCY' ? MeasureEntity : K extends 'LOCATION' ? LocationEntity : K extends 'DATE' ? (Date | DateEntity) : K extends 'TIME' ? TimeEntity : K extends 'GENERIC_ENTITY' ? GenericEntity : K extends 'SLOT' ? (Ast.Value | undefined) : never;
