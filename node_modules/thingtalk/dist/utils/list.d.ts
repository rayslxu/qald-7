/**
 * A lazy functional list with O(1) concatenation
 */
export default abstract class List<T> {
    static Nil: List<never>;
    static concat<T>(...lists: Array<T | List<T>>): List<T>;
    static join<T>(lists: Array<List<T>>, joiner: T): List<T>;
    static singleton<T>(el: T): List<T>;
    static append<T>(list: List<T>, el: T): List<T>;
    flatten(into?: T[]): T[];
    [Symbol.iterator](): Iterator<T>;
    abstract traverse(cb: (x: T) => void): void;
    abstract getFirst(): T;
}
