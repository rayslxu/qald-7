import { SourceRange } from './source_locations';
declare const enum ParserAction {
    Accept = 0,
    Shift = 1,
    Reduce = 2
}
export declare type ActionTable = {
    [key: number]: {
        [key: number]: [ParserAction, number];
    };
};
export declare type GotoTable = {
    [key: number]: {
        [key: number]: number;
    };
};
export declare type SymbolTable = {
    [key: string]: number;
};
export declare type ParserInterface<OptionType> = OptionType & {
    location: SourceRange | null;
    error(msg: string): never;
};
declare type SemanticAction = ($: ParserInterface<any>, ...args: any[]) => any;
interface ParserConfig {
    TERMINAL_IDS: SymbolTable;
    RULE_NON_TERMINALS: number[];
    ARITY: number[];
    GOTO: GotoTable;
    PARSER_ACTION: ActionTable;
    SEMANTIC_ACTION: SemanticAction[];
}
interface Parser<RootType> {
    parse(sequence: Iterable<TokenWrapper<unknown>>): RootType;
}
export interface ParserConstructor<RootType, OptionType> {
    new (options: OptionType): Parser<RootType>;
}
export interface TokenWrapper<T> {
    token: string;
    value: T;
    location: SourceRange | null;
}
export declare function createParser<RootType, OptionType = any>({ TERMINAL_IDS, RULE_NON_TERMINALS, ARITY, GOTO, PARSER_ACTION, SEMANTIC_ACTION }: ParserConfig): ParserConstructor<RootType, OptionType>;
export {};
