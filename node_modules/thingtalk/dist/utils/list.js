"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of ThingTalk
//
// Copyright 2019-2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * A lazy functional list with O(1) concatenation
 */
class List {
    static concat(...lists) {
        let result = List.Nil;
        for (let i = lists.length - 1; i >= 0; i--) {
            if (lists[i] === List.Nil)
                continue;
            if (lists[i] instanceof List && result === List.Nil)
                result = lists[i];
            else if (lists[i] instanceof List)
                result = new Concat(lists[i], result);
            else
                result = new Cons(lists[i], result);
        }
        return result;
    }
    static join(lists, joiner) {
        let result = List.Nil;
        let first = true;
        for (const list of lists) {
            if (first)
                first = false;
            else
                result = new Snoc(result, joiner);
            result = new Concat(result, list);
        }
        return result;
    }
    static singleton(el) {
        return new Cons(el, List.Nil);
    }
    static append(list, el) {
        return new Snoc(list, el);
    }
    flatten(into = []) {
        this.traverse((el) => into.push(el));
        return into;
    }
    [Symbol.iterator]() {
        return new ListIterator(this);
    }
}
exports.default = List;
class NilClass extends List {
    traverse(cb) {
    }
    getFirst() {
        throw new Error('getFirst on an empty list');
    }
}
List.Nil = new NilClass();
class Cons extends List {
    constructor(head, tail) {
        super();
        this.head = head;
        this.tail = tail;
    }
    traverse(cb) {
        cb(this.head);
        this.tail.traverse(cb);
    }
    getFirst() {
        return this.head;
    }
}
class Snoc extends List {
    constructor(head, tail) {
        super();
        this.head = head;
        this.tail = tail;
    }
    traverse(cb) {
        this.head.traverse(cb);
        cb(this.tail);
    }
    getFirst() {
        return this.head.getFirst();
    }
}
class Concat extends List {
    constructor(first, second) {
        super();
        this.first = first;
        this.second = second;
        this.first = first;
        this.second = second;
    }
    traverse(cb) {
        this.first.traverse(cb);
        this.second.traverse(cb);
    }
    getFirst() {
        return this.first.getFirst();
    }
}
class ListIterator {
    constructor(list) {
        this._stack = [list];
    }
    next() {
        while (this._stack.length > 0) {
            const x = this._stack.pop();
            if (x instanceof List) {
                if (x instanceof Cons || x instanceof Snoc)
                    this._stack.push(x.tail, x.head);
                else if (x instanceof Concat)
                    this._stack.push(x.second, x.first);
            }
            else {
                return { done: false, value: x };
            }
        }
        return { done: true, value: undefined };
    }
}
//# sourceMappingURL=list.js.map