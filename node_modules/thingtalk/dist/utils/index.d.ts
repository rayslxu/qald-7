import * as Ast from '../ast';
import type SchemaRetriever from '../schema';
export declare function clean(name: string): string;
export declare function cleanKind(kind: string): string;
export declare function split(pattern: string, regexp: string | RegExp): Generator<string | string[], void>;
export declare function getScalarExpressionName(ast: Ast.Value): string;
export declare function getPropertyPathName(sequence: Ast.PropertyPathSequence): string;
export declare function getSchemaForSelector(schemaRetriever: SchemaRetriever, kind: string, name: string, schemaType: 'query' | 'action' | 'both', getMeta?: boolean, classes?: {
    [key: string]: Ast.ClassDef;
}): Promise<Ast.FunctionDef>;
interface UnaryTableToTableOp extends Ast.Table {
    table: Ast.Table;
}
export declare function isUnaryTableToTableOp(table: Ast.Table): table is UnaryTableToTableOp;
interface UnaryStreamToTableOp extends Ast.Table {
    stream: Ast.Stream;
}
export declare function isUnaryStreamToTableOp(table: Ast.Table): table is UnaryStreamToTableOp;
interface UnaryStreamToStreamOp extends Ast.Stream {
    stream: Ast.Stream;
}
export declare function isUnaryStreamToStreamOp(stream: Ast.Stream): stream is UnaryStreamToStreamOp;
interface UnaryTableToStreamOp extends Ast.Stream {
    table: Ast.Table;
}
export declare function isUnaryTableToStreamOp(stream: Ast.Stream): stream is UnaryTableToStreamOp;
interface UnaryExpressionOp extends Ast.Expression {
    expression: Ast.Expression;
}
export declare function isUnaryExpressionOp(expression: Ast.Expression): expression is UnaryExpressionOp;
export declare function flipOperator(op: string): string;
export {};
