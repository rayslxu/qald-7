/**
  A Map-like data structure where objects expire on their own based on timeouts.

  @package
 */
export default class Cache<K, V> {
    private store;
    private _expiration;
    constructor(expiration: number);
    clear(): void;
    delete(key: K): boolean;
    entries(): Generator<[K, V]>;
    [Symbol.iterator](): Generator<[K, V]>;
    keys(): Generator<K>;
    values(): Generator<V>;
    forEach<T>(callback: (this: T, value: V, key: K, map: this) => void, thisArg: T): void;
    set(key: K, value: V, expires?: number): void;
    has(key: K): boolean;
    get(key: K): V | undefined;
}
