"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of ThingTalk
//
// Copyright 2017-2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityRetriever = exports.SequentialEntityAllocator = exports.AbstractEntityRetriever = exports.CONTEXTUAL_KEYWORDS = exports.KEYWORDS = exports.serialize = exports.parse = exports.SyntaxType = void 0;
const assert_1 = __importDefault(require("assert"));
const semver = __importStar(require("semver"));
// the old grammar
const Grammar = __importStar(require("./grammar"));
// the old nnsyntax
const LegacyNNSyntax = __importStar(require("./nn-syntax"));
// the new grammar
const parser_1 = __importDefault(require("./new-syntax/parser"));
const lexer_1 = require("./new-syntax/lexer");
const nn_lexer_1 = require("./new-syntax/nn-lexer");
const pretty_1 = require("./new-syntax/pretty");
const legacy_prettyprint_1 = require("./legacy-prettyprint");
const nn_serializer_1 = require("./new-syntax/nn-serializer");
const keywords_1 = require("./new-syntax/keywords");
Object.defineProperty(exports, "KEYWORDS", { enumerable: true, get: function () { return keywords_1.KEYWORDS; } });
Object.defineProperty(exports, "CONTEXTUAL_KEYWORDS", { enumerable: true, get: function () { return keywords_1.CONTEXTUAL_KEYWORDS; } });
const entity_retriever_1 = require("./entity-retriever");
Object.defineProperty(exports, "AbstractEntityRetriever", { enumerable: true, get: function () { return entity_retriever_1.AbstractEntityRetriever; } });
Object.defineProperty(exports, "EntityRetriever", { enumerable: true, get: function () { return entity_retriever_1.EntityRetriever; } });
Object.defineProperty(exports, "SequentialEntityAllocator", { enumerable: true, get: function () { return entity_retriever_1.SequentialEntityAllocator; } });
// reexport for documentation
__exportStar(require("./entities"), exports);
__exportStar(require("./new-syntax/tokenstream"), exports);
/**
 * APIs to parse and serialize ThingTalk code.
 *
 * @namespace
 */
var SyntaxType;
(function (SyntaxType) {
    SyntaxType[SyntaxType["Legacy"] = 0] = "Legacy";
    SyntaxType[SyntaxType["LegacyNN"] = 1] = "LegacyNN";
    SyntaxType[SyntaxType["Normal"] = 2] = "Normal";
    SyntaxType[SyntaxType["Tokenized"] = 3] = "Tokenized";
})(SyntaxType = exports.SyntaxType || (exports.SyntaxType = {}));
function parse(code, syntaxType = SyntaxType.Normal, entities, options) {
    var _a;
    let input;
    if (syntaxType === SyntaxType.Tokenized) {
        input = new parser_1.default(options !== null && options !== void 0 ? options : {}).parse((0, nn_lexer_1.nnLexer)(code, entities));
    }
    else if (syntaxType === SyntaxType.LegacyNN) {
        input = LegacyNNSyntax.fromNN(code, entities);
    }
    else if (syntaxType === SyntaxType.Normal) {
        (0, assert_1.default)(typeof code === 'string');
        input = new parser_1.default((_a = entities) !== null && _a !== void 0 ? _a : {}).parse((0, lexer_1.surfaceLexer)(code));
    }
    else {
        // workaround grammar bug with // comments at the end of input
        input = Grammar.parse(code + '\n');
    }
    return input.optimize();
}
exports.parse = parse;
function serialize(node, syntaxType = SyntaxType.Normal, entityRetriever, options = {}) {
    if (syntaxType === SyntaxType.Tokenized && options.compatibility &&
        semver.satisfies(options.compatibility, '1.*')) {
        syntaxType = SyntaxType.LegacyNN;
        entityRetriever.setSyntaxType(syntaxType);
        const serialized = LegacyNNSyntax.toNN(node, entityRetriever, options);
        LegacyNNSyntax.applyCompatibility(serialized, options.compatibility);
        return serialized;
        // if we introduce compatibility fixes for new syntax, they will go here as well
    }
    else if (syntaxType === SyntaxType.Tokenized || syntaxType === SyntaxType.LegacyNN) {
        entityRetriever.setSyntaxType(syntaxType);
        if (syntaxType === SyntaxType.Tokenized)
            return (0, nn_serializer_1.nnSerialize)(node.toSource(), entityRetriever, options);
        else
            return LegacyNNSyntax.toNN(node, entityRetriever, options);
    }
    else if (syntaxType === SyntaxType.Normal && options.compatibility &&
        semver.satisfies(options.compatibility, '1.*')) {
        return (0, legacy_prettyprint_1.prettyprint)(node);
    }
    else if (syntaxType === SyntaxType.Normal) {
        return (0, pretty_1.prettyprint)(node.toSource());
    }
    else {
        return (0, legacy_prettyprint_1.prettyprint)(node);
    }
}
exports.serialize = serialize;
//# sourceMappingURL=syntax_api.js.map