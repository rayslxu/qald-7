"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of ThingTalk
//
// Copyright 2019 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
Object.defineProperty(exports, "__esModule", { value: true });
exports.indexArray = exports.sliceArray = exports.sortkeydesc = exports.sortkeyasc = exports.sortdesc = exports.sortasc = void 0;
function sortGeneric(array, field, reverse) {
    array.sort(([a, aType], [b, bType]) => {
        let result = 0;
        if (a[field] < b[field])
            result = -1;
        else if (b[field] < a[field])
            result = 1;
        if (reverse)
            result = -result;
        return result;
    });
    return array;
}
function sortasc(array, field) {
    return sortGeneric(array, field, false);
}
exports.sortasc = sortasc;
function sortdesc(array, field) {
    return sortGeneric(array, field, true);
}
exports.sortdesc = sortdesc;
function sortkeyGeneric(array, reverse) {
    array.sort(([a, aType, akey], [b, bType, bkey]) => {
        let result = 0;
        if (akey < bkey)
            result = -1;
        else if (bkey < akey)
            result = 1;
        if (reverse)
            result = -result;
        return result;
    });
    return array;
}
function sortkeyasc(array) {
    return sortkeyGeneric(array, false);
}
exports.sortkeyasc = sortkeyasc;
function sortkeydesc(array) {
    return sortkeyGeneric(array, true);
}
exports.sortkeydesc = sortkeydesc;
function sliceArray(array, base, limit) {
    if (base < -array.length || base > array.length)
        return [];
    if (base === 0) {
        base = 1;
        limit--;
    }
    if (limit <= 0)
        return [];
    if (base < 0)
        return array.slice(array.length + base - limit + 1, array.length + base + 1);
    else
        return array.slice(base - 1, base - 1 + limit);
}
exports.sliceArray = sliceArray;
function indexArray(array, indices) {
    const newArray = [];
    for (const index of indices) {
        if (index === 0 || index > array.length || index < -array.length)
            continue;
        if (index < 0)
            newArray.push(array[array.length + index]);
        else
            newArray.push(array[index - 1]);
    }
    return newArray;
}
exports.indexArray = indexArray;
//# sourceMappingURL=sort_index_ops.js.map