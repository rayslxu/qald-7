class @com.facebook
#_[canonical="facebook account"] {
  monitorable list query list_photos(in opt album: String #_[prompt="Which album? "] #_[canonical="album"],
                                     out date: Date #_[canonical="date"],
                                     out picture_url: Entity(tt:picture) #_[canonical="picture url"])
  #_[canonical="facebook photos"]
  #_[confirmation="my facebook photos"];

  monitorable list query list_posts(out id: String #_[canonical="id"],
                                    out date: Date #_[canonical="date"],
                                    out message: String #_[canonical="message"],
                                    out picture_url: Entity(tt:picture) #_[canonical="picture url"],
                                    out type: String #_[canonical="type"],
                                    out link: Entity(tt:url) #_[canonical="link"],
                                    out link_title: String #_[canonical="link title"])
  #_[canonical="facebook posts"]
  #_[confirmation="my posts on facebook"];

  action post(in req status: String #_[prompt="What do you want to post?"] #_[canonical="status"])
  #_[canonical="post on facebook"]
  #_[confirmation="post $status on Facebook"];

  action post_picture(in req picture_url: Entity(tt:picture) #_[prompt="Upload the picture now."] #_[canonical="picture url"],
                      in req caption: String #_[prompt="What should be the caption of the picture?"] #_[canonical="caption"])
  #_[canonical="post picture on facebook"]
  #_[confirmation="upload a picture on Facebook with caption $caption"];
}
class @com.google
#_[canonical="google account"] {
}
class @com.linkedin
#_[canonical="linkedin account"] {
  monitorable query get_profile(out formatted_name: String #_[canonical="formatted name"],
                                out headline: String #_[canonical="headline"],
                                out industry: String #_[canonical="industry"],
                                out specialties: String #_[canonical="specialties"],
                                out positions: Array(String) #_[canonical="positions"],
                                out profile_picture: Entity(tt:picture) #_[canonical="profile picture"])
  #_[canonical="get profile on linkedin"]
  #_[confirmation="your LinkedIn profile"];

  action share(in req status: String #_[prompt="What do you want to post? Include a link to a page."] #_[canonical="status"])
  #_[canonical="post on linkedin"]
  #_[confirmation="share $status on your LinkedIn"];
}
class @com.twitter
#_[canonical="twitter account"] {
  monitorable list query direct_messages(out sender: Entity(tt:username) #_[canonical="sender"],
                                         out message: String #_[canonical="message"])
  #_[canonical="twitter direct messages"]
  #_[confirmation="direct messages you received on Twitter"];

  monitorable list query home_timeline(out text: String #_[canonical="text"],
                                       out hashtags: Array(Entity(tt:hashtag)) #_[canonical="hashtags"],
                                       out urls: Array(Entity(tt:url)) #_[canonical="urls"],
                                       out author: Entity(tt:username) #_[canonical="author"],
                                       out in_reply_to: Entity(tt:username) #_[canonical="in reply to"],
                                       out tweet_id: Entity(com.twitter:id) #_[canonical="tweet id"])
  #_[canonical="twitter home timeline"]
  #_[confirmation="tweets from anyone you follow"];

  monitorable list query my_tweets(out text: String #_[canonical="text"],
                                   out hashtags: Array(Entity(tt:hashtag)) #_[canonical="hashtags"],
                                   out urls: Array(Entity(tt:url)) #_[canonical="urls"],
                                   out in_reply_to: Entity(tt:username) #_[canonical="in reply to"],
                                   out tweet_id: Entity(com.twitter:id) #_[canonical="tweet id"])
  #_[canonical="my tweets on twitter"]
  #_[confirmation="tweets from you"];

  monitorable list query search(in opt count: Number #_[prompt="How many tweets do you want?"] #_[canonical="count"],
                                out text: String #_[canonical="text"],
                                out hashtags: Array(Entity(tt:hashtag)) #_[canonical="hashtags"],
                                out urls: Array(Entity(tt:url)) #_[canonical="urls"],
                                out author: Entity(tt:username) #_[prompt="From which user do you want tweets?"] #_[canonical="author"],
                                out in_reply_to: Entity(tt:username) #_[prompt="In reply to which user do you want tweets?"] #_[canonical="in reply to"],
                                out tweet_id: Entity(com.twitter:id) #_[canonical="tweet id"])
  #_[canonical="search on twitter"]
  #_[confirmation="recent tweets"];

  action follow(in req user_name: Entity(tt:username) #_[prompt="What user do you want to follow?"] #_[canonical="user name"])
  #_[canonical="follow on twitter"]
  #_[confirmation="follow $user_name on Twitter"];

  action post(in req status: String #_[prompt="What do you want to tweet?"] #_[canonical="status"])
  #_[canonical="post on twitter"]
  #_[confirmation="tweet $status"];

  action post_picture(in req caption: String #_[prompt="What caption do you want?"] #_[canonical="caption"],
                      in req picture_url: Entity(tt:picture) #_[prompt="Upload the picture now."] #_[canonical="picture url"])
  #_[canonical="post picture on twitter"]
  #_[confirmation="tweet $caption with an attached picture"];

  action retweet(in req tweet_id: Entity(com.twitter:id) #_[prompt="What tweet do you want to retweet?"] #_[canonical="tweet id"])
  #_[canonical="retweet"]
  #_[confirmation="retween $tweet_id"];

  action send_direct_message(in req to: Entity(tt:username) #_[prompt="Who do you want to send the message to?"] #_[canonical="to"],
                             in req message: String #_[prompt="What message do you want to send?"] #_[canonical="message"])
  #_[canonical="send dm on twitter"]
  #_[confirmation="send a direct message on Twitter to $to saying $message"];

  action unfollow(in req user_name: Entity(tt:username) #_[prompt="What user do you want to unfollow?"] #_[canonical="user name"])
  #_[canonical="unfollow on twitter"]
  #_[confirmation="unfollow $user_name on Twitter"];
}
class @org.thingpedia.builtin.bluetooth.generic
#_[canonical="generic bluetooth device"] {
}
class @online-account
#_[canonical="online account"] {
}
class @messaging
#_[canonical="messaging"] {
}
class @us.sportradar
#_[canonical="sportradar"] {
  monitorable query mlb(in req team: Entity(sportradar:mlb_team) #_[prompt="What team are you interested in? Use the 3 letter alias."] #_[canonical="team"],
                        out opponent: Entity(sportradar:mlb_team) #_[prompt="What team are you interested in competitions against? Use the 3 letter alias."] #_[canonical="opponent"],
                        out is_home: Boolean #_[canonical="is home"],
                        out game_status: Enum(scheduled,inprogress,halftime,closed) #_[prompt="What point of the game are you interested in? Use scheduled, inprogress, halftime or closed."] #_[canonical="game status"],
                        out scheduled_time: Date #_[canonical="scheduled time"],
                        out game_inning: String #_[canonical="game inning"],
                        out opponent_runs: Number #_[canonical="opponent runs"],
                        out team_runs: Number #_[canonical="team runs"],
                        out result: Enum(win,lose,draw,unclosed) #_[canonical="result"])
  #_[canonical="mlb game status on sportradar"]
  #_[confirmation="MLB game"];

  monitorable query nba(in req team: Entity(sportradar:nba_team) #_[prompt="What team are you interested in? Use the 3 letter alias."] #_[canonical="team"],
                        out opponent: Entity(sportradar:nba_team) #_[prompt="What team are you interested in competitions against? Use the 3 letter alias."] #_[canonical="opponent"],
                        out is_home: Boolean #_[canonical="is home"],
                        out game_status: Enum(scheduled,inprogress,halftime,closed) #_[prompt="What point of the game are you interested in? Use scheduled, inprogress, halftime or closed."] #_[canonical="game status"],
                        out scheduled_time: Date #_[canonical="scheduled time"],
                        out score: Number #_[canonical="score"],
                        out opponent_score: Number #_[canonical="opponent score"],
                        out result: Enum(win,lose,unclosed) #_[canonical="result"])
  #_[canonical="nba game status on sportradar"]
  #_[confirmation="NBA game "];

  monitorable query ncaafb(in req team: Entity(sportradar:ncaafb_team) #_[prompt="What team are you interested in? Use the 3 letter alias."] #_[canonical="team"],
                           out opponent: Entity(sportradar:ncaafb_team) #_[prompt="What team are you interested in competitions against? Use the 3 letter alias."] #_[canonical="opponent"],
                           out is_home: Boolean #_[canonical="is home"],
                           out game_status: Enum(scheduled,inprogress,halftime,closed) #_[prompt="What point of the game are you interested in? Use scheduled, inprogress, halftime or closed."] #_[canonical="game status"],
                           out scheduled_time: Date #_[canonical="scheduled time"],
                           out opponent_score: Number #_[canonical="opponent score"],
                           out team_score: Number #_[canonical="team score"],
                           out result: Enum(win,lose,unclosed) #_[canonical="result"])
  #_[canonical="ncaafb game status on sportradar"]
  #_[confirmation="NCAA Football game"];

  monitorable query ncaambb(in req team: Entity(sportradar:ncaambb_team) #_[prompt="What team are you interested in? Use the 3 letter alias."] #_[canonical="team"],
                            out opponent: Entity(sportradar:ncaambb_team) #_[prompt="What team are you interested in competitions against? Use the 3 letter alias."] #_[canonical="opponent"],
                            out is_home: Boolean #_[canonical="is home"],
                            out game_status: Enum(scheduled,inprogress,halftime,closed) #_[prompt="What point of the game are you interested in? Use scheduled, inprogress, halftime or closed."] #_[canonical="game status"],
                            out scheduled_time: Date #_[canonical="scheduled time"],
                            out opponent_score: Number #_[canonical="opponent score"],
                            out team_score: Number #_[canonical="team score"],
                            out result: Enum(win,lose,unclosed) #_[canonical="result"])
  #_[canonical="ncaa mbb game status on sportradar"]
  #_[confirmation="NCAA Men's Basketball game"];

  monitorable query soccer_eu(in req team: Entity(sportradar:eu_soccer_team) #_[prompt="What team are you interested in? Use the 3 letter alias."] #_[canonical="team"],
                              out opponent: Entity(sportradar:eu_soccer_team) #_[prompt="What team are you interested in competitions against? Use the 3 letter alias."] #_[canonical="opponent"],
                              out is_home: Boolean #_[canonical="is home"],
                              out game_status: Enum(scheduled,inprogress,halftime,closed) #_[prompt="What point of the game are you interested in? Use scheduled, inprogress, halftime or closed."] #_[canonical="game status"],
                              out scheduled_time: Date #_[canonical="scheduled time"],
                              out opponent_score: Number #_[canonical="opponent score"],
                              out team_score: Number #_[canonical="team score"],
                              out result: Enum(win,lose,draw,unclosed) #_[canonical="result"])
  #_[canonical="eu soccer game status on sportradar"]
  #_[confirmation="European soccer game"];

  monitorable query soccer_eu_tourney(in req tournament: Entity(sportradar:eu_tournament) #_[prompt="What tournament are you interested in?"] #_[canonical="tournament"],
                                      out tournament_league_name: String #_[canonical="tournament league name"],
                                      out away_team: Entity(sportradar:eu_soccer_team) #_[canonical="away team"],
                                      out home_team: Entity(sportradar:eu_soccer_team) #_[canonical="home team"],
                                      out game_status: Enum(scheduled,inprogress,halftime,closed) #_[prompt="What point of the game are you interested in? Use scheduled, inprogress, halftime or closed."] #_[canonical="game status"],
                                      out scheduled_time: Date #_[canonical="scheduled time"],
                                      out away_score: Number #_[canonical="away score"],
                                      out home_score: Number #_[canonical="home score"])
  #_[canonical="eu soccer tournament status on sportradar"]
  #_[confirmation="European soccer game "];

  monitorable query soccer_us(in req team: Entity(sportradar:us_soccer_team) #_[prompt="What team are you interested in? Use the 3 letter alias."] #_[canonical="team"],
                              out opponent: Entity(sportradar:us_soccer_team) #_[prompt="What team are you interested in competitions against? Use the 3 letter alias."] #_[canonical="opponent"],
                              out is_home: Boolean #_[canonical="is home"],
                              out game_status: Enum(scheduled,inprogress,halftime,closed) #_[prompt="What point of the game are you interested in? Use scheduled, inprogress, halftime or closed."] #_[canonical="game status"],
                              out scheduled_time: Date #_[canonical="scheduled time"],
                              out opponent_score: Number #_[canonical="opponent score"],
                              out team_score: Number #_[canonical="team score"],
                              out result: Enum(win,lose,draw,unclosed) #_[canonical="result"])
  #_[canonical="us soccer game status on sportradar"]
  #_[confirmation="American soccer game"];

  monitorable query soccer_us_tourney(in req tournament: Entity(sportradar:us_tournament) #_[prompt="What tournament are you interested in?"] #_[canonical="tournament"],
                                      out tournament_league_name: String #_[canonical="tournament league name"],
                                      out away_team: Entity(sportradar:us_soccer_team) #_[canonical="away team"],
                                      out home_team: Entity(sportradar:us_soccer_team) #_[canonical="home team"],
                                      out game_status: Enum(scheduled,inprogress,halftime,closed) #_[prompt="What point of the game are you interested in? Use scheduled, inprogress, halftime or closed."] #_[canonical="game status"],
                                      out scheduled_time: Date #_[canonical="scheduled time"],
                                      out away_score: Number #_[canonical="away score"],
                                      out home_score: Number #_[canonical="home score"])
  #_[canonical="us soccer tournament status on sportradar"]
  #_[confirmation="American soccer game "];
}
class @com.thecatapi
#_[canonical="the cat api"] {
  query get(out image_id: Entity(com.thecatapi:image_id) #_[canonical="image id"],
            in opt count: Number #_[prompt="How many cats do you want?"] #_[canonical="count"],
            out picture_url: Entity(tt:picture) #_[canonical="picture url"],
            out link: Entity(tt:url) #_[canonical="link"])
  #_[canonical="cat picture"]
  #_[confirmation="cat pictures"];
}
class @data-source
#_[canonical="data source"] {
}
class @org.thingpedia.builtin.thingengine.phone
#_[canonical="phone"] {
  monitorable list query sms(out sender: Entity(tt:phone_number) #_[prompt="What number do you want to monitor?"] #_[canonical="sender"],
                             out message: String #_[canonical="message"],
                             out date: Date #_[canonical="date"])
  #_[canonical="receive sms on phone"]
  #_[confirmation="your SMS"]
  #_[formatted=[{type="text",text="SMS from ${from} received at ${date}: ${body}"}]];

  action call(in req number: Entity(tt:phone_number) #_[prompt="Who do you want to call?"] #_[canonical="number"])
  #_[canonical="make call on phone"]
  #_[confirmation="call $number"];

  action call_emergency()
  #_[canonical="call emergency on phone"]
  #_[confirmation="call emergency assistance"];

  action send_sms(in req to: Entity(tt:phone_number) #_[prompt="Who do you want to text?"] #_[canonical="to"],
                  in req message: String #_[prompt="What do you want to say in your text?"] #_[canonical="message"])
  #_[canonical="send sms on phone"]
  #_[confirmation="send a message to $to containing $message"];

  action set_ringer(in req mode: Enum(normal,vibrate,silent) #_[prompt="What mode to you want to set?"] #_[canonical="mode"])
  #_[canonical="set ringer on phone"]
  #_[confirmation="set your phone to $mode"];
}
class @com.nest
#_[canonical="nest account"] {
}
class @thermostat
#_[canonical="thermostat"] {
  monitorable query get_humidity(out value: Number #_[canonical="value"])
  #_[canonical="get humidity on thermostat"]
  #_[confirmation="the humidity reported by your thermostat"];

  monitorable query get_hvac_state(out mode: Enum(heat,cool,heat_cool,off) #_[canonical="mode"],
                                   out state: Enum(heating,cooling,off) #_[canonical="state"])
  #_[canonical="get hvac state on thermostat"]
  #_[confirmation="the state of your heating system"];

  monitorable query get_temperature(out value: Measure(C) #_[canonical="value"])
  #_[canonical="get temperature on thermostat"]
  #_[confirmation="the temperature on your thermostat"];

  action set_hvac_mode(in req mode: Enum(heat,cool,heat_cool,off) #_[prompt="What mode do you want to set?"] #_[canonical="mode"])
  #_[canonical="set hvac mode on thermostat"]
  #_[confirmation="set your HVAC to $mode"];

  action set_minmax_temperature(in req low: Measure(C) #_[prompt="What low temperature do you want to set?"] #_[canonical="low"],
                                in req high: Measure(C) #_[prompt="What high temperature do you want to set?"] #_[canonical="high"])
  #_[canonical="set minimum maximum temperature on thermostat"]
  #_[confirmation="set your thermostat between $low and $high"];

  action set_target_temperature(in req value: Measure(C) #_[prompt="What temperature do you want to set?"] #_[canonical="value"])
  #_[canonical="set target temperature on thermostat"]
  #_[confirmation="set your thermostat to $value"];
}
class @com.tesla
#_[canonical="tesla account"] {
}
class @car
#_[canonical="car"] {
  action honk_horn()
  #_[canonical="honk horn on car"]
  #_[confirmation="honk your car's horn"];
}
class @security-camera
#_[canonical="security camera"] {
  monitorable query current_event(out start_time: Date #_[canonical="start time"],
                                  out has_sound: Boolean #_[prompt="Do you want events with sound?"] #_[canonical="has sound"],
                                  out has_motion: Boolean #_[prompt="Do you want events with motion?"] #_[canonical="has motion"],
                                  out has_person: Boolean #_[prompt="Do you want events with people in front of the camera?"] #_[canonical="has person"],
                                  out picture_url: Entity(tt:picture) #_[canonical="picture url"])
  #_[canonical="current event on security camera"]
  #_[confirmation="the current event detected on your security camera"];

  action set_power(in req power: Enum(on,off) #_[prompt="Do you want to turn your camera on or off?"] #_[canonical="power"])
  #_[canonical="set power on security camera"]
  #_[confirmation="turn $power your security camera"];
}
class @com.slack
#_[canonical="slack"] {
  monitorable list query channel_history(out channel: Entity(tt:hashtag) #_[prompt="What channel are you interested in?"] #_[canonical="channel"],
                                         out date: Date #_[canonical="date"],
                                         out sender: Entity(tt:username) #_[prompt="What user are you interested in?"] #_[canonical="sender"],
                                         out message: String #_[canonical="message"])
  #_[canonical="get message on slack"]
  #_[confirmation="your messages on Slack"];

  action send(in req channel: Entity(tt:hashtag) #_[prompt="What channel do you want to send the message to?"] #_[canonical="channel"],
              in req message: String #_[prompt="What message do you want me to send?"] #_[canonical="message"])
  #_[canonical="send message on slack"]
  #_[confirmation="send a message on slack to channel $channel saying $message"];

  action send_picture(in req channel: Entity(tt:hashtag) #_[prompt="What channel do you want to send the message to?"] #_[canonical="channel"],
                      in req caption: String #_[prompt="What is the caption of the picture?"] #_[canonical="caption"],
                      in req picture_url: Entity(tt:picture) #_[prompt="Upload the picture now."] #_[canonical="picture url"])
  #_[canonical="send picture on slack"]
  #_[confirmation="send a picture on slack to channel $channel with caption $caption"];

  action setPresence(in req presence: Enum(away,auto) #_[prompt="What should be your new presence?"] #_[canonical="presence"])
  #_[canonical="set presence on slack"]
  #_[confirmation="set your presence status on slack to $presence"];

  action updateChannelPurpose(in req channel: Entity(tt:hashtag) #_[prompt="What channel do you want to change?"] #_[canonical="channel"],
                              in req purpose: String #_[prompt="What purpose do you want to set?"] #_[canonical="purpose"])
  #_[canonical="update channel purpose on slack"]
  #_[confirmation="update the purpose of slack channel $channel to $purpose"];

  action updateChannelTopic(in req channel: Entity(tt:hashtag) #_[prompt="What channel do you want to change?"] #_[canonical="channel"],
                            in req topic: String #_[prompt="What should be the new topic?"] #_[canonical="topic"])
  #_[canonical="update channel topic on slack"]
  #_[confirmation="update the topic of slack channel $channel to $topic"];
}
class @bluetooth-uuid-0000110b-0000-1000-8000-00805f9b34fb
#_[canonical="bluetooth uuid 0000110b 0000 1000 8000 00805f9b34fb"] {
}
class @org.thingpedia.bluetooth.speaker.a2dp
#_[canonical="bluetooth speaker"] {
  action lower_volume()
  #_[canonical="lower volume on bluetooth speaker"]
  #_[confirmation="decrease the volume on your bluetooth speaker"];

  action play_music()
  #_[canonical="play music on bluetooth speaker"]
  #_[confirmation="play some music on your bluetooth speaker"];

  action raise_volume()
  #_[canonical="raise volume on bluetooth speaker"]
  #_[confirmation="increase the volume on your bluetooth speaker"];

  action set_sink()
  #_[canonical="set audio sink on bluetooth speaker"]
  #_[confirmation="set your bluetooth speaker to be the default audio output"];

  action set_volume(in req percent: Number #_[prompt="What volume do you want to set (in percent)?"] #_[canonical="percent"])
  #_[canonical="set volume on bluetooth speaker"]
  #_[confirmation="set the volume on your bluetooth speaker to $percent %"];
}
class @com.bing
#_[canonical="bing search"] {
  monitorable list query image_search(in req query: String #_[prompt="What do you want to search?"] #_[canonical="query"],
                                      out title: String #_[canonical="title"],
                                      out picture_url: Entity(tt:picture) #_[canonical="picture url"],
                                      out link: Entity(tt:url) #_[canonical="link"],
                                      out width: Number #_[prompt="What width are you looking for (in pixels)?"] #_[canonical="width"],
                                      out height: Number #_[prompt="What height are you looking for (in pixels)?"] #_[canonical="height"])
  #_[canonical="image search on bing"]
  #_[confirmation="images matching $query from Bing"]
  #_[formatted=[{type="rdl",webCallback="${link}",displayTitle="${title}"}, {type="picture",url="${picture_url}"}]];

  monitorable list query web_search(in req query: String #_[prompt="What do you want to search?"] #_[canonical="query"],
                                    out title: String #_[canonical="title"],
                                    out description: String #_[canonical="description"],
                                    out link: Entity(tt:url) #_[canonical="link"])
  #_[canonical="web search on bing"]
  #_[confirmation="websites matching $query on Bing"]
  #_[formatted=[{type="rdl",webCallback="${link}",displayTitle="${title}",displayText="${description}"}]];
}
class @com.github
#_[canonical="github account"] {
  monitorable list query get_commit(in req repo_name: Entity(tt:path_name) #_[prompt="What repository do you want to watch?"] #_[canonical="repo name"],
                                    out user: Entity(tt:username) #_[prompt="What user are you interested in?"] #_[canonical="user"],
                                    out message: String #_[canonical="message"],
                                    out time: Date #_[canonical="time"],
                                    out modified_files: Array(Entity(tt:path_name)) #_[canonical="modified files"],
                                    out added_files: Array(Entity(tt:path_name)) #_[canonical="added files"],
                                    out deleted_files: Array(Entity(tt:path_name)) #_[canonical="deleted files"])
  #_[canonical="commits on github"]
  #_[confirmation="commits of repository $repo_name on Github"];

  query get_file(in req repo_name: Entity(tt:path_name) #_[prompt="What repository is the file in?"] #_[canonical="repo name"],
                 in req file_name: Entity(tt:path_name) #_[prompt="What file do you want to get?"] #_[canonical="file name"],
                 out url: Entity(tt:url) #_[canonical="url"])
  #_[canonical="link of file in github"]
  #_[confirmation="link of ${file_name} in Github repository ${repo_name}"];

  monitorable list query get_issue(in req repo_name: Entity(tt:path_name) #_[prompt="What repository do you want to watch?"] #_[canonical="repo name"],
                                   out user: Entity(tt:username) #_[prompt="What user are you interested in?"] #_[canonical="user"],
                                   out number: Number #_[canonical="number"],
                                   out title: String #_[canonical="title"],
                                   out body: String #_[canonical="body"],
                                   out time: Date #_[canonical="time"])
  #_[canonical="issues on github"]
  #_[confirmation="opened issues of repository $repo_name on Github"];

  monitorable list query get_issue_comment(in req repo_name: Entity(tt:path_name) #_[prompt="What repository do you want to watch?"] #_[canonical="repo name"],
                                           out user: Entity(tt:username) #_[prompt="What user are you interested in?"] #_[canonical="user"],
                                           out issue_number: Number #_[prompt="What issue number to want to watch?"] #_[canonical="issue number"],
                                           out body: String #_[canonical="body"],
                                           out time: Date #_[canonical="time"])
  #_[canonical="get issue comments on github"]
  #_[confirmation="comments on issues on Github repository $repo_name"];

  monitorable list query get_milestone(in req repo_name: Entity(tt:path_name) #_[prompt="What repository do you want to watch?"] #_[canonical="repo name"],
                                       out user: Entity(tt:username) #_[prompt="What user are you interested in?"] #_[canonical="user"],
                                       out description: String #_[canonical="description"],
                                       out time: Date #_[canonical="time"],
                                       out title: String #_[canonical="title"])
  #_[canonical="milestones on github"]
  #_[confirmation="the milestones created on Github repository $repo_name"];

  action add_email(in req email: Entity(tt:email_address) #_[prompt="What email do youli want to add?"] #_[canonical="email"])
  #_[canonical="add email on github"]
  #_[confirmation="add $email to your Github account"];

  action comment_issue(in req repo_name: Entity(tt:path_name) #_[prompt="What repository do you want to comment on?"] #_[canonical="repo name"],
                       in req issue_number: Number #_[prompt="What issue do you want to comment on?"] #_[canonical="issue number"],
                       in req body: String #_[prompt="What do you want to comment?"] #_[canonical="body"])
  #_[canonical="comment on issue on github"]
  #_[confirmation="comment on issue $issue_number in $repo_name on Github"];
}
class @com.xkcd
#_[canonical="xkcd"] {
  monitorable query get_comic(in opt number: Number #_[prompt="What Xkcd comic do you want?"] #_[canonical="number"],
                              out title: String #_[canonical="title"],
                              out picture_url: Entity(tt:picture) #_[canonical="picture url"],
                              out link: Entity(tt:url) #_[canonical="link"],
                              out alt_text: String #_[canonical="alt text"])
  #_[canonical="xkcd comic"]
  #_[confirmation="an Xkcd comic"]
  #_[formatted=[{type="rdl",webCallback="${link}",displayTitle="${title}"}, {type="picture",url="${picture_url}"}, {type="text",text="${alt_text}"}]];

  query random_comic(out number: Number #_[canonical="number"],
                     out title: String #_[canonical="title"],
                     out picture_url: Entity(tt:picture) #_[canonical="picture url"],
                     out link: Entity(tt:url) #_[canonical="link"],
                     out alt_text: String #_[canonical="alt text"])
  #_[canonical="random xkcd comic"]
  #_[confirmation="a random Xkcd comic"]
  #_[formatted=[{type="rdl",webCallback="${link}",displayTitle="${title}"}, {type="picture",url="${picture_url}"}, {type="text",text="${alt_text}"}]];

  monitorable list query what_if(out title: String #_[canonical="title"],
                                 out link: Entity(tt:url) #_[canonical="link"],
                                 out updated_time: Date #_[canonical="updated time"])
  #_[canonical="xkcd what if blog posts"]
  #_[confirmation="Xkcd's What If blog posts"]
  #_[formatted=[{type="rdl",webCallback="${link}",displayTitle="${title}"}]];
}
class @com.uber
#_[canonical="uber"] {
  monitorable query current(out status: String #_[canonical="status"],
                            out vehicle: String #_[canonical="vehicle"],
                            out vehicle_picture: Entity(tt:picture) #_[canonical="vehicle picture"],
                            out driver: String #_[canonical="driver"],
                            out driver_picture: Entity(tt:picture) #_[canonical="driver picture"],
                            out eta: Measure(ms) #_[canonical="eta"],
                            out from: Location #_[canonical="from"],
                            out to: Location #_[canonical="to"])
  #_[canonical="get current uber ride"]
  #_[confirmation="your current Uber ride status"];

  monitorable list query price_estimate(in req start: Location #_[prompt="Where do you want to be picked up?"] #_[canonical="start"],
                                        in req end: Location #_[prompt="Where do you want to go?"] #_[canonical="end"],
                                        out uber_type: Enum(pool,uber_x,uber_xl,uber_black,select,suv,assist) #_[canonical="uber type"],
                                        out low_estimate: Currency #_[canonical="low estimate"],
                                        out high_estimate: Currency #_[canonical="high estimate"],
                                        out surge: Number #_[canonical="surge"],
                                        out duration: Measure(ms) #_[canonical="duration"],
                                        out distance: Measure(m) #_[canonical="distance"])
  #_[canonical="get price estimate on uber"]
  #_[confirmation="estimated prices for Uber from $start to $end"];

  monitorable list query time_estimate(in req start: Location #_[prompt="Where do you want to call Uber?"] #_[canonical="start"],
                                       out uber_type: Enum(pool,uber_x,uber_xl,uber_black,select,suv,assist) #_[canonical="uber type"],
                                       out estimate: Measure(ms) #_[canonical="estimate"])
  #_[canonical="get time estimate on uber"]
  #_[confirmation="ETAs for uber services at $start"];

  action request(in req start: Location #_[prompt="Where do you want to call Uber?"] #_[canonical="start"],
                 in req end: Location #_[prompt="Where to you want to go? "] #_[canonical="end"],
                 in req uber_type: Enum(pool,uber_x,uber_xl,uber_black,select,suv,assist) #_[prompt="What type of uber do you want to call? "] #_[canonical="uber type"],
                 in opt seat_count: Number #_[prompt="How many seats? "] #_[canonical="seat count"])
  #_[canonical="request uber ride"]
  #_[confirmation="request an Uber ride from $start to $end"];
}
class @com.yandex.translate
#_[canonical="yandex translate"] {
  query detect_language(in req text: String #_[prompt="What text do you want to analyze?"] #_[canonical="text"],
                        out value: Entity(tt:iso_lang_code) #_[canonical="value"])
  #_[canonical="detect language on ytranslate"]
  #_[confirmation="the language of $text "];

  query translate(in opt source_language: Entity(tt:iso_lang_code) #_[prompt="What's the source language? Use an ISO language code like it, en or zh."] #_[canonical="source language"],
                  in req target_language: Entity(tt:iso_lang_code) #_[prompt="What's the target language? Use an ISO language code like it, en or zh."] #_[canonical="target language"],
                  in req text: String #_[prompt="What do you want to translate?"] #_[canonical="text"],
                  out translated_text: String #_[canonical="translated text"])
  #_[canonical="translate on ytranslate"]
  #_[confirmation="the translation of $text to $target_language"];
}
class @com.yahoo.finance
#_[canonical="yahoo finance"] {
  monitorable query get_stock_div(in req stock_id: Entity(tt:stock_id) #_[prompt="What company's stock do you want to watch? Use the 4 letter ID, like GOOG, AAPL or MSFT"] #_[canonical="stock id"],
                                  out company_name: String #_[canonical="company name"],
                                  out yield_: Number #_[canonical="yield"],
                                  out value: Currency #_[canonical="value"],
                                  out pay_date: Date #_[canonical="pay date"],
                                  out ex_dividend_date: Date #_[canonical="ex dividend date"])
  #_[canonical="stock dividend change on yahoofinance"]
  #_[confirmation="the dividend info of $stock_id"];

  monitorable query get_stock_quote(in req stock_id: Entity(tt:stock_id) #_[prompt="What company's stock do you want to watch? Use the 4 letter ID, like GOOG, AAPL or MSFT"] #_[canonical="stock id"],
                                    out company_name: String #_[canonical="company name"],
                                    out ask_price: Currency #_[canonical="ask price"],
                                    out bid_price: Currency #_[canonical="bid price"])
  #_[canonical="get stock price"]
  #_[confirmation="the stock price of $stock_id"];
}
class @org.thingpedia.rss
#_[canonical="rss feed"] {
  monitorable list query get_post(out title: String #_[canonical="title"],
                                  out link: Entity(tt:url) #_[canonical="link"])
  #_[canonical="get post on rss"]
  #_[confirmation="posts on the RSS feed"];
}
class @com.youtube
#_[canonical="youtube account"] {
  monitorable list query channels_by_category(in req category_id: Enum(best_of_youtube,recommended,paid,music,comedy,film_and_entertainment,gaming,beauty_and_fashion,from_tv,automotive,animation,sports,diy,tech,science,cooking,causes,news_and_politics,lifestyle) #_[prompt="What category do you want to list?"] #_[canonical="category id"],
                                              out channel_id: Entity(com.youtube:channel_id) #_[canonical="channel id"],
                                              out title: String #_[canonical="title"],
                                              out description: String #_[canonical="description"],
                                              out thumbnail: Entity(tt:picture) #_[canonical="thumbnail"])
  #_[canonical="list channel by category on youtube"]
  #_[confirmation="channels in YouTube Category $category_id"];

  monitorable list query list_subscriptions(out channel_id: Entity(com.youtube:channel_id) #_[canonical="channel id"],
                                            out title: String #_[canonical="title"],
                                            out description: String #_[canonical="description"],
                                            out thumbnail: Entity(tt:picture) #_[canonical="thumbnail"])
  #_[canonical="list subscriptions on youtube"]
  #_[confirmation="your subscribed channels on YouTube"];

  monitorable list query list_videos(in req channel_id: Entity(com.youtube:channel_id) #_[prompt="What channel do you want to be notified about? Use the full channel URL, like https://www.youtube.com/channels/xxxxxxx."] #_[canonical="channel id"],
                                     out channel_title: String #_[canonical="channel title"],
                                     out title: String #_[canonical="title"],
                                     out video_id: Entity(com.youtube:video_id) #_[canonical="video id"],
                                     out video_url: Entity(tt:url) #_[canonical="video url"],
                                     out description: String #_[canonical="description"],
                                     out thumbnail: Entity(tt:picture) #_[canonical="thumbnail"])
  #_[canonical="list video on youtube"]
  #_[confirmation="recent videos in YouTube channel ${channel_id}"];

  monitorable list query search_channel(in req query: String #_[prompt="What do you want to search?"] #_[canonical="query"],
                                        out channel_id: Entity(com.youtube:channel_id) #_[canonical="channel id"],
                                        out title: String #_[canonical="title"],
                                        out description: String #_[canonical="description"],
                                        out thumbnail: Entity(tt:picture) #_[canonical="thumbnail"])
  #_[canonical="search channel on youtube"]
  #_[confirmation="YouTube channels matching $query"];

  monitorable list query search_videos(in req query: String #_[prompt="What do you want to search?"] #_[canonical="query"],
                                       out video_id: Entity(com.youtube:video_id) #_[canonical="video id"],
                                       in opt channel_id: Entity(com.youtube:channel_id) #_[prompt="What channel do you want to limit the search to?"] #_[canonical="channel id"],
                                       out title: String #_[canonical="title"],
                                       out description: String #_[canonical="description"],
                                       out thumbnail: Entity(tt:picture) #_[canonical="thumbnail"],
                                       in opt count: Number #_[prompt="How many search results do you want?"] #_[canonical="count"],
                                       out video_url: Entity(tt:url) #_[canonical="video url"])
  #_[canonical="search video on youtube"]
  #_[confirmation="YouTube videos matching $query"];
}
class @org.thingpedia.weather
#_[canonical="weather api"] {
  monitorable query current(in req location: Location #_[prompt="What location do you want the current weather for?"] #_[canonical="location"],
                            out temperature: Measure(C) #_[canonical="temperature"],
                            out wind_speed: Measure(mps) #_[canonical="wind speed"],
                            out humidity: Number #_[canonical="humidity"],
                            out cloudiness: Number #_[canonical="cloudiness"],
                            out fog: Number #_[canonical="fog"],
                            out status: Enum(raining,cloudy,sunny,snowy,sleety,drizzling,windy) #_[canonical="status"],
                            out icon: Entity(tt:picture) #_[canonical="icon"])
  #_[canonical="get current weather on weatherapi"]
  #_[confirmation="the current weather for $location"]
  #_[formatted=[{type="text",text="Current weather for ${location}: ${status}, temperature ${temperature:C} C, wind speed ${wind_speed:mps} m/s, humidity ${humidity}%, cloudiness ${cloudiness}%, fog ${fog}%."}]];

  monitorable query moon(in req location: Location #_[prompt="What location do you want moon time info for?"] #_[canonical="location"],
                         in opt date: Date #_[prompt="What day are you interested in?"] #_[canonical="date"],
                         out phase: Enum(new_moon,waxing_crescent,first_quarter,waxing_gibbous,full_moon,waning_gibbous,third_quarter,waning_crescent) #_[canonical="phase"])
  #_[canonical="get moon phase on weatherapi"]
  #_[confirmation="the moon phase for $location"]
  #_[formatted=[{type="text",text="Moon phase on ${date:date} for ${location}: ${phase}."}]];

  monitorable query sunrise(in req location: Location #_[prompt="What location do you want sun time info for?"] #_[canonical="location"],
                            in opt date: Date #_[prompt="What day are you interested in?"] #_[canonical="date"],
                            out sunrise_time: Time #_[canonical="sunrise time"],
                            out sunset_time: Time #_[canonical="sunset time"])
  #_[canonical="get sunrise on weatherapi"]
  #_[confirmation="the sunrise and sunset time for location $location"]
  #_[formatted=[{type="text",text="Sun times on ${date:date} for ${location}: rises at ${sunrise_time}, sets at ${sunset_time}"}]];
}
class @com.instagram
#_[canonical="instagram"] {
  monitorable list query get_pictures(in opt count: Number #_[prompt="How many pictures do you want?"] #_[canonical="count"],
                                      out media_id: Entity(instagram:media_id) #_[canonical="media id"],
                                      out picture_url: Entity(tt:picture) #_[canonical="picture url"],
                                      out caption: String #_[canonical="caption"],
                                      out link: Entity(tt:url) #_[canonical="link"],
                                      out filter_: Entity(com.instagram:filter_) #_[prompt="With what filters do you want pictures?"] #_[canonical="filter"],
                                      out hashtags: Array(Entity(tt:hashtag)) #_[canonical="hashtags"],
                                      out location: Location #_[canonical="location"])
  #_[canonical="get pictures on instagram"]
  #_[confirmation="your recent Instagram pictures"];
}
class @com.live.onedrive
#_[canonical="onedrive account"] {
  monitorable list query list_files(out file_id: Entity(com.live.onedrive:file_id) #_[canonical="file id"],
                                    out file_name: Entity(tt:path_name) #_[canonical="file name"],
                                    out description: String #_[canonical="description"],
                                    out created_time: Date #_[canonical="created time"],
                                    out modified_time: Date #_[canonical="modified time"],
                                    out modified_by: Entity(com.live.onedrive:user_id) #_[canonical="modified by"],
                                    out link: Entity(tt:url) #_[canonical="link"],
                                    in opt order_by: Enum(created_time_increasing,created_time_decreasing,modified_time_increasing,modified_time_decreasing,name_increasing,name_decreasing) #_[canonical="order by"])
  #_[canonical="file created on onedrive"]
  #_[confirmation="files your OneDrive"];

  query open(in req file_name: Entity(tt:path_name) #_[prompt="What file do you want to open? Use the full path name."] #_[canonical="file name"],
             out url: Entity(tt:url) #_[canonical="url"])
  #_[canonical="open on onedrive"]
  #_[confirmation="the link to $file_name in your Onedrive"];

  action create_file(in req file_name: Entity(tt:path_name) #_[prompt="What should be the name of the file?"] #_[canonical="file name"],
                     in req contents: String #_[prompt="What do you want to write in the file?"] #_[canonical="contents"])
  #_[canonical="create file on onedrive"]
  #_[confirmation="create a new file on OneDrive named $file_name containing $contents"];

  action delete_file(in req file_name: Entity(tt:path_name) #_[prompt="What file do you want to delete?"] #_[canonical="file name"])
  #_[canonical="delete file on onedrive"]
  #_[confirmation="delete the file $file_name from OneDrive"];

  action rename_file(in req old_name: Entity(tt:path_name) #_[prompt="What file do you want to rename?"] #_[canonical="old name"],
                     in req new_name: Entity(tt:path_name) #_[prompt="What should be the new name?"] #_[canonical="new name"])
  #_[canonical="rename file on onedrive"]
  #_[confirmation="rename $old_name to $new_name on OneDrive"];

  action upload_picture(in req file_name: Entity(tt:path_name) #_[prompt="What should be the file name of the picture?"] #_[canonical="file name"],
                        in req picture_url: Entity(tt:picture) #_[prompt="Upload the picture now."] #_[canonical="picture url"])
  #_[canonical="upload picture on onedrive"]
  #_[confirmation="upload a picture on OneDrive as $file_name"];
}
class @org.thingpedia.builtin.thingengine.builtin
#_[canonical="miscellaneous interfaces"] {
  list query get_commands(in req device: Entity(tt:device) #_[prompt="What device do you want help for?"] #_[canonical="device"],
                          out program: Entity(tt:program) #_[canonical="program"])
  #_[canonical="list commands"]
  #_[confirmation="the list of commands of $device"]
  #_[formatted=[{type="text",text="${program}"}]];

  query get_date(out date: Date #_[canonical="date"])
  #_[canonical="get date"]
  #_[confirmation="today's date"]
  #_[formatted=[{type="text",text="Today is ${date:date}."}]];

  monitorable query get_gps(out location: Location #_[prompt="What location are you interested in?"] #_[canonical="location"],
                            out altitude: Measure(m) #_[canonical="altitude"],
                            out bearing: Number #_[canonical="bearing"],
                            out speed: Measure(mps) #_[canonical="speed"])
  #_[canonical="get current location"]
  #_[confirmation="your location"]
  #_[formatted=[{type="text",text="Current Location: ${location}"}]];

  query get_random_between(in req low: Number #_[prompt="What should be the lower bound?"] #_[canonical="low"],
                           in req high: Number #_[prompt="What should be the upper bound?"] #_[canonical="high"],
                           out random: Number #_[canonical="random"])
  #_[canonical="get random integer"]
  #_[confirmation="a random integer between $low and $high"]
  #_[formatted=[{type="text",text="${random}"}]];

  query get_time(out time: Date #_[canonical="time"])
  #_[canonical="get time"]
  #_[confirmation="the current time"]
  #_[formatted=[{type="text",text="Current time is ${time:time}."}]];

  action configure(in req device: Entity(tt:device) #_[prompt="What device do you want to configure?"] #_[canonical="device"])
  #_[canonical="configure"]
  #_[confirmation="configure a new $device"];

  action debug_log(in req message: String #_[prompt="What should I write in the logs?"] #_[canonical="message"])
  #_[canonical="log"]
  #_[confirmation="write $message in the developer logs"];

  action discover()
  #_[canonical="discover"]
  #_[confirmation="search for new devices"];

  action open_url(in req url: Entity(tt:url) #_[prompt="What URL do you want to open?"] #_[canonical="url"])
  #_[canonical="open url on builtin"]
  #_[confirmation="open $url"];

  action say(in req message: String #_[prompt="What do you want me to say?"] #_[canonical="message"])
  #_[canonical="say"]
  #_[confirmation="send me a message $message"];
}
class @light-bulb {
  action alert_long()
  #_[canonical="flash alert lights on light bulb"]
  #_[confirmation="flash alerts on ${__device}"];

  action color_loop()
  #_[canonical="color loop lights on light bulb"]
  #_[confirmation="loop colors on ${__device}"];

  action set_power(in req power: Enum(on,off) #_[prompt="Do you want to turn it on or off?"] #_[canonical="power"])
  #_[canonical="set power on light bulb"]
  #_[confirmation="turn $power ${__device}"];
}
class @com.hue
#_[canonical="philips hue"] {
}
class @com.gmail
#_[canonical="gmail account"] {
  monitorable list query inbox(out sender_name: String #_[canonical="sender name"],
                               out sender_address: Entity(tt:email_address) #_[canonical="sender address"],
                               out subject: String #_[canonical="subject"],
                               out date: Date #_[canonical="date"],
                               out labels: Array(String) #_[canonical="labels"],
                               out snippet: String #_[canonical="snippet"],
                               out thread_id: Entity(com.gmail:thread_id) #_[canonical="thread id"],
                               out email_id: Entity(com.gmail:email_id) #_[canonical="email id"],
                               in opt is_important: Boolean #_[canonical="is important"],
                               in opt is_primary: Boolean #_[canonical="is primary"])
  #_[canonical="list email in inbox"]
  #_[confirmation="the emails in your GMail inbox"];

  action forward(in req email_id: Entity(com.gmail:email_id) #_[prompt="What email do you want to forward?"] #_[canonical="email id"],
                 in req to: Entity(tt:email_address) #_[prompt="Who do you want to forward it to?"] #_[canonical="to"],
                 in req message: String #_[prompt="What do you want to say in the email?"] #_[canonical="message"])
  #_[canonical="gmail forward email"]
  #_[confirmation="forward $email_id to $to saying $message with your GMail"];

  action reply(in req email_id: Entity(com.gmail:email_id) #_[prompt="What email do you want to reply to?"] #_[canonical="email id"],
               in opt subject: String #_[canonical="subject"],
               in req message: String #_[prompt="What do you want to say in your reply?"] #_[canonical="message"])
  #_[canonical="gmail reply email"]
  #_[confirmation="reply to $email_id saying $message"];

  action send_email(in req to: Entity(tt:email_address) #_[prompt="Who do you want to send to?"] #_[canonical="to"],
                    in req subject: String #_[prompt="With what subject?"] #_[canonical="subject"],
                    in req message: String #_[prompt="What message do you want to send?"] #_[canonical="message"])
  #_[canonical="send email on gmail"]
  #_[confirmation="send an email to $to with subject $subject on GMail"];

  action send_picture(in req to: Entity(tt:email_address) #_[prompt="Who do you want to send to?"] #_[canonical="to"],
                      in req subject: String #_[prompt="With what subject?"] #_[canonical="subject"],
                      in req message: String #_[prompt="What message do you want to send?"] #_[canonical="message"],
                      in req picture_url: Entity(tt:picture) #_[prompt="Upload the picture now."] #_[canonical="picture url"])
  #_[canonical="send picture on gmail"]
  #_[confirmation="send a picture to $to with subject $subject on GMail"];
}
class @smoke-alarm
#_[canonical="smoke alarm"] {
  monitorable query status(out detected : Boolean)
  #_[canonical="smoke alarm status"]
  #_[confirmation="the status of ${__device}"];
}
class @com.google.drive
#_[canonical="google drive"] {
  monitorable list query list_drive_files(out file_id: Entity(com.google.drive:file_id) #_[canonical="file id"],
                                          out file_name: Entity(tt:path_name) #_[canonical="file name"],
                                          out mime_type: Entity(tt:mime_type) #_[canonical="mime type"],
                                          out description: String #_[canonical="description"],
                                          out starred: Boolean #_[canonical="starred"],
                                          out created_time: Date #_[canonical="created time"],
                                          out modified_time: Date #_[canonical="modified time"],
                                          out file_size: Measure(byte) #_[canonical="file size"],
                                          in opt order_by: Enum(created_time_increasing,created_time_decreasing,modified_time_increasing,modified_time_decreasing,name_increasing,name_decreasing) #_[canonical="order by"],
                                          out last_modified_by: String #_[canonical="last modified by"],
                                          out link: Entity(tt:url) #_[canonical="link"])
  #_[canonical="google drive file list"]
  #_[confirmation="files in your Google Drive"];

  action create_new_drive_file(in req file_name: Entity(tt:path_name) #_[prompt="what's the name of the file?"] #_[canonical="file name"])
  #_[canonical="create a new file on google drive"]
  #_[confirmation="create a file with name $file_name on google drive"];
}
class @org.thingpedia.icalendar
#_[canonical="icalendar events"] {
  monitorable list query list_events(out start_date: Date #_[canonical="start date"],
                                     out end_date: Date #_[canonical="end date"],
                                     out summary: String #_[canonical="summary"],
                                     out description: String #_[canonical="description"],
                                     out sequence: Number #_[canonical="sequence"],
                                     out organizer: String #_[prompt="Who should be the organizer of the events?"] #_[canonical="organizer"],
                                     out location: String #_[prompt="What should be the location of the events?"] #_[canonical="location"],
                                     out status: Enum(scheduled,upcoming,started,ended) #_[canonical="status"])
  #_[canonical="list event on icalendar"]
  #_[confirmation="the events in your calendar"];
}
class @org.thingpedia.holidays
#_[canonical="holidays calendar"] {
  monitorable list query get_holidays(in opt country: Entity(tt:country) #_[canonical="country"],
                                      out date: Date #_[canonical="date"],
                                      out summary: String #_[canonical="summary"],
                                      out description: String #_[canonical="description"])
  #_[canonical="get holidays"]
  #_[confirmation="the holidays in ${country}"];
}
class @com.dropbox
#_[canonical="dropbox account"] {
  monitorable query get_space_usage(out used_space: Measure(byte) #_[canonical="used space"],
                                    out total_space: Measure(byte) #_[canonical="total space"])
  #_[canonical="get space usage on dropbox"]
  #_[confirmation="your Dropbox quota info"];

  monitorable list query list_folder(in req folder_name: Entity(tt:path_name) #_[prompt="What folder do you want to list?"] #_[canonical="folder name"],
                                     out file_name: Entity(tt:path_name) #_[canonical="file name"],
                                     out is_folder: Boolean #_[canonical="is folder"],
                                     out modified_time: Date #_[canonical="modified time"],
                                     out file_size: Measure(byte) #_[canonical="file size"],
                                     out full_path: Entity(tt:path_name) #_[canonical="full path"],
                                     in opt order_by: Enum(modified_time_decreasing,modified_time_increasing,name_decreasing,name_increasing) #_[canonical="order by"])
  #_[canonical="list folder on dropbox"]
  #_[confirmation="the content of $folder_name in your Dropbox"];

  query open(in req file_name: Entity(tt:path_name) #_[prompt="What file do you want to open? Use the full path name."] #_[canonical="file name"],
             out url: Entity(tt:url) #_[canonical="url"])
  #_[canonical="open on dropbox"]
  #_[confirmation="the link to $file_name in your Dropbox"];

  action create_new_folder(in req folder_name: Entity(tt:path_name) #_[prompt="How do you want to call the folder?"] #_[canonical="folder name"])
  #_[canonical="create folder on dropbox"]
  #_[confirmation="create a new folder called $folder_name in your Dropbox"];

  action move(in req old_name: Entity(tt:path_name) #_[prompt="What file do you want to move?"] #_[canonical="old name"],
              in req new_name: Entity(tt:path_name) #_[prompt="What should be the new name?"] #_[canonical="new name"])
  #_[canonical="move on dropbox"]
  #_[confirmation="rename $old_name to $new_name in your Dropbox"];
}
class @com.imgflip
#_[canonical="imgflip meme generator"] {
  query generate(in req template: Entity(imgflip:meme_id) #_[prompt="What meme do you want to generate?"] #_[canonical="template"],
                 in req text_top: String #_[prompt="What do you want to write at the top? Leave blank for the default (if recognized)"] #_[canonical="text top"],
                 in req text_bottom: String #_[prompt="What do you want to write at the bottom? Leave blank for the default (if recognized)"] #_[canonical="text bottom"],
                 out picture_url: Entity(tt:picture) #_[canonical="picture url"])
  #_[canonical="generate meme on imgflip"]
  #_[confirmation="the meme $template with $text_top at the top and $text_bottom at the bottom, generated using Imflip"];

  list query list(out name: String #_[prompt="What meme do you want?"] #_[canonical="name"],
                  out picture_url: Entity(tt:picture) #_[canonical="picture url"])
  #_[canonical="list meme templates on imgflip"]
  #_[confirmation="meme templates available on Imgflip"];
}
class @com.giphy
#_[canonical="giphy"] {
  query get(in opt tag: Entity(tt:hashtag) #_[prompt="With what tag?"] #_[canonical="tag"],
            out picture_url: Entity(tt:picture) #_[canonical="picture url"])
  #_[canonical="random giphy gif"]
  #_[confirmation="a gif from giphy"];
}
class @media
#_[canonical="media"] {
}
class @service
#_[canonical="service"] {
}
class @social-network
#_[canonical="social network"] {
}
class @communication
#_[canonical="communication"] {
}
class @home
#_[canonical="home"] {
}
class @health
#_[canonical="health"] {
}
class @data-management
#_[canonical="data management"] {
}
class @com.washingtonpost
#_[canonical="the washington post"] {
  monitorable list query get_article(in req section: Enum(politics,opinions,local,sports,national,world,business,lifestyle) #_[prompt="What section do you want to read?"] #_[canonical="section"],
                                     out title: String #_[canonical="title"],
                                     out link: Entity(tt:url) #_[canonical="link"],
                                     out description: String #_[canonical="description"],
                                     out picture_url: Entity(tt:picture) #_[canonical="picture url"])
  #_[canonical="articles on washington post"]
  #_[confirmation="the latest articles in the ${section} section of the Washington Post"];

  monitorable list query get_blog_post(in req section: Enum(the_fix,politics,powerpost,fact_checker,world_views,compost,the_plum_line,post_partisan,post_everything,right_turn,capital_weather_gang,morning_mix,wonkblog) #_[prompt="What blog do you want to monitor?"] #_[canonical="section"],
                                       out title: String #_[canonical="title"],
                                       out link: Entity(tt:url) #_[canonical="link"],
                                       out updated: Date #_[canonical="updated"])
  #_[canonical="blog post on washington post"]
  #_[confirmation="the latest articles in the $section blog of the Washington Post"];
}
class @com.phdcomics
#_[canonical="piled higher and deeper"] {
  monitorable list query get_post(out title: String #_[canonical="title"],
                                  out link: Entity(tt:url) #_[canonical="link"],
                                  out picture_url: Entity(tt:picture) #_[canonical="picture url"],
                                  out updated_time: Date #_[canonical="updated time"])
  #_[canonical="phdcomics posts"]
  #_[confirmation="PhD comics"];
}
class @gov.nasa
#_[canonical="nasa daily"] {
  monitorable query apod(out title: String #_[canonical="title"],
                         out description: String #_[canonical="description"],
                         out picture_url: Entity(tt:picture) #_[canonical="picture url"])
  #_[canonical="get astronomy picture of the day on nasa"]
  #_[confirmation="NASA's Astronomy Picture of the Day"];

  monitorable query asteroid(out asteroid_id: Entity(gov.nasa:asteroid_id) #_[canonical="asteroid id"],
                             out name: String #_[canonical="name"],
                             out estimated_diameter_min: Measure(m) #_[canonical="estimated diameter min"],
                             out estimated_diameter_max: Measure(m) #_[canonical="estimated diameter max"],
                             out is_dangerous: Boolean #_[canonical="is dangerous"],
                             out relative_velocity: Measure(mps) #_[canonical="relative velocity"],
                             out distance: Measure(m) #_[canonical="distance"],
                             out orbiting_body: String #_[canonical="orbiting body"])
  #_[canonical="close asteroid on nasa"]
  #_[confirmation="the asteroid passing close to Earth today"];

  monitorable list query rover(in opt date_taken: Date #_[prompt="From what Earth day do you want pictures?"] #_[canonical="date taken"],
                               in opt count: Number #_[prompt="How many pictures do you want?"] #_[canonical="count"],
                               out picture_url: Entity(tt:picture) #_[canonical="picture url"],
                               out camera_used: Entity(gov.nasa:curiosity_rover_camera) #_[canonical="camera used"])
  #_[canonical="get curiosity rover picture on nasa"]
  #_[confirmation="Curiosity Rover photos from NASA"];
}
class @com.tumblr
#_[canonical="tumblr"] {
  monitorable list query new_photo(in req blog_name: Entity(tt:username) #_[prompt="What blog name do you want to follow?"] #_[canonical="blog name"],
                                   out date: Date #_[canonical="date"],
                                   out caption: String #_[canonical="caption"],
                                   out link: Entity(tt:url) #_[canonical="link"],
                                   out tags: Array(Entity(tt:hashtag)) #_[canonical="tags"],
                                   out picture_urls: Array(Entity(tt:picture)) #_[canonical="picture urls"])
  #_[canonical="get photo post on tumblr"]
  #_[confirmation="recent pictures in $blog_name on Tumblr"];

  monitorable list query new_text(in req blog_name: Entity(tt:username) #_[prompt="What blog name do you want to follow?"] #_[canonical="blog name"],
                                  out date: Date #_[canonical="date"],
                                  out title: String #_[canonical="title"],
                                  out link: Entity(tt:url) #_[canonical="link"],
                                  out tags: Array(Entity(tt:hashtag)) #_[canonical="tags"],
                                  out body: String #_[canonical="body"])
  #_[canonical="get text post on tumblr"]
  #_[confirmation="recent posts in Tumblr blog $blog_name"];
}
class @com.reddit.frontpage
#_[canonical="reddit frontpage"] {
  monitorable list query get(out title: String #_[canonical="title"],
                             out link: Entity(tt:url) #_[canonical="link"],
                             out user: Entity(tt:username) #_[prompt="What user do you want to monitor?"] #_[canonical="user"],
                             out category: String #_[prompt="What sub-reddit do you want to monitor?"] #_[canonical="category"],
                             out updated: Date #_[canonical="updated"])
  #_[canonical="get post on reddit front page"]
  #_[confirmation="the posts on the front page of Reddit"];
}
class @upnp-lge-com-service-webos-second-screen-1
#_[canonical="upnp lge com service webos second screen 1"] {
}
class @com.lg.tv.webos2
#_[canonical="lg webos tv"] {
  action lower_volume()
  #_[canonical="lower volume on lg webos tv"]
  #_[confirmation="decrease the volume on your LG WebOS TV"];

  action mute()
  #_[canonical="mute on lg webos tv"]
  #_[confirmation="mute your LG WebOS TV"];

  action play_url(in req url: Entity(tt:url) #_[prompt="What video do you want to play? Use the full URL."] #_[canonical="url"])
  #_[canonical="play url on lg webos tv"]
  #_[confirmation="play $url on your LG WebOS TV"];

  action raise_volume()
  #_[canonical="raise volume on lg webos tv"]
  #_[confirmation="increase the volume on your LG WebOS TV"];

  action set_power(in req power: Enum(on,off) #_[prompt="Do you want to turn the tv on or off?"] #_[canonical="power"])
  #_[canonical="set power on lg webos tv"]
  #_[confirmation="turn $power your LG WebOS TV"];

  action set_volume(in req percent: Number #_[prompt="What volume do you want to set (in percent)?"] #_[canonical="percent"])
  #_[canonical="set volume on lg webos tv"]
  #_[confirmation="set the volume on your LG WebOS TV to $percent%"];

  action unmute()
  #_[canonical="unmute on lg webos tv"]
  #_[confirmation="unmute your LG WebOS Tv"];
}
class @com.wsj
#_[canonical="the wall street journal"] {
  monitorable list query get(in req section: Enum(opinions,world_news,us_business,markets,technology,lifestyle) #_[prompt="What section of the Wall Street Journal do you want to read?"] #_[canonical="section"],
                             out title: String #_[canonical="title"],
                             out link: Entity(tt:url) #_[canonical="link"],
                             out updated: Date #_[canonical="updated"])
  #_[canonical="get post on wall street journal"]
  #_[confirmation="articles published in the $section section of the Wall Street Journal"];
}
class @thingengine-system
#_[canonical="thingengine system"] {
}
class @org.thingpedia.builtin.thingengine
#_[canonical="thingengine"] {
}
class @org.thingpedia.builtin.thingengine.remote
#_[canonical="remote thingengine"] {
}
class @uk.co.thedogapi
#_[canonical="the dog api"] {
  query get(in opt count: Number #_[prompt="How many dogs do you want?"] #_[canonical="count"],
            out image_id: Entity(dogapi:image_id) #_[canonical="image id"],
            out picture_url: Entity(tt:picture) #_[canonical="picture url"])
  #_[canonical="get dogs"]
  #_[confirmation="dog pictures"];
}
class @org.thingpedia.demo.coffee
#_[canonical="almond coffee"] {
  action order(in req beverage: Enum(drip_coffee,espresso,latte,flat_white,mocha,caramel_mocha,white_mocha,macchiato,caramel_macchiato,cappuccino,americano) #_[prompt="What beverage do you want?"] #_[canonical="beverage"],
               in req delivery_location: Location #_[prompt="Where do you want it delivered?"] #_[canonical="delivery location"],
               in req size: Enum(small,medium,large) #_[prompt="What size do you want?"] #_[canonical="size"],
               in opt iced: Boolean #_[prompt="Do you want it iced?"] #_[canonical="iced"],
               in opt extras: Enum(none,milk,sugar,both) #_[prompt="Do you want milk or sugar?"] #_[canonical="extras"])
  #_[canonical="order coffee"]
  #_[confirmation="order a $size $beverage to deliver at $delivery_location"];
}
class @com.nytimes
#_[canonical="new york times"] {
  monitorable list query get_front_page(out title: String #_[canonical="title"],
                                        out link: Entity(tt:url) #_[canonical="link"],
                                        out updated: Date #_[canonical="updated"],
                                        out description: String #_[canonical="description"])
  #_[canonical="get new york times front page"]
  #_[confirmation="New York Times articles"];
}
class @org.thingpedia.builtin.matrix
#_[canonical="matrix"] {
}
class @org.thingpedia.builtin.test
#_[canonical="test device"] {
  query dup_data(in req data_in: String #_[prompt="What data do you want to duplicate?"] #_[canonical="data in"],
                 out data_out: String #_[canonical="data out"])
  #_[canonical="duplicate data on test"]
  #_[confirmation="duplicate ${data_in} data"];

  monitorable list query get_data(in req size: Measure(byte) #_[prompt="How much fake data do you want?"] #_[canonical="size"],
                                  in opt count: Number #_[canonical="count"],
                                  out data: String #_[canonical="data"])
  #_[canonical="get data on test"]
  #_[confirmation="generate $size of fake data"];

  action eat_data(in req data: String #_[prompt="What do you want me to consume?"] #_[canonical="data"])
  #_[canonical="eat data on test"]
  #_[confirmation="consume $data"];
}
class @org.thingpedia.builtin.thingengine.home
#_[canonical="home"] {
  action start_playing(in req link: Entity(tt:url) #_[prompt="What do you want to play? Enter the URL to the file"] #_[canonical="link"])
  #_[canonical="start playing on almond home"]
  #_[confirmation="play ${link} in your Almond Home"];

  action stop_playing()
  #_[canonical="stop playing on almond home"]
  #_[confirmation="stop playing the current song or movie in your Almond Home"];
}
class @org.thingpedia.builtin.thingengine.gnome
#_[canonical="almond 4 gnome"] {
  query get_screenshot(out picture_url: Entity(tt:picture) #_[canonical="picture url"])
  #_[canonical="screenshot on laptop"]
  #_[confirmation="a screenshot of your PC"];

  action create_file(in req file_name: Entity(tt:path_name) #_[prompt="What should be the name of the file?"] #_[canonical="file name"],
                     in req contents: String #_[prompt="What do you want to write in the file?"] #_[canonical="contents"])
  #_[canonical="create file on laptop"]
  #_[confirmation="create a new file in your laptop named $file_name containing $contents"];

  action delete_file(in req file_name: Entity(tt:path_name) #_[prompt="What file do you want to delete?"] #_[canonical="file name"])
  #_[canonical="delete file on laptop"]
  #_[confirmation="delete the file $file_name from your laptop"];

  action lock()
  #_[canonical="lock on laptop"]
  #_[confirmation="lock your PC"];

  action open_app(in req app_id: Entity(org.freedesktop:app_id) #_[prompt="What app do you want to open?"] #_[canonical="app id"],
                  in opt url: Entity(tt:url) #_[prompt="What file do you want to open?"] #_[canonical="url"])
  #_[canonical="open app on laptop"]
  #_[confirmation="open $app_id"];

  action set_background(in req picture_url: Entity(tt:picture) #_[prompt="What picture do you want to use as the background?"] #_[canonical="picture url"])
  #_[canonical="set background on laptop"]
  #_[confirmation="set your laptop's background to $picture_url"];

  action set_power(in req power: Enum(on,off) #_[prompt="Do you want to turn it on or off?"] #_[canonical="power"])
  #_[canonical="set power on laptop"]
  #_[confirmation="turn $power your PC"];
}
class @com.icanhazdadjoke
#_[canonical="dad jokes"] {
  query get(out text: String #_[canonical="text"],
            out joke_id: Entity(com.icanhazdadjoke:id) #_[canonical="joke id"])
  #_[canonical="dad joke"]
  #_[confirmation="a dad joke"];
}
class @com.forismatic.quotes
#_[canonical="quotes"] {
  query get(out text: String #_[canonical="text"],
            out author: String #_[canonical="author"])
  #_[canonical="quote"]
  #_[confirmation="a quote"];
}
class @com.steampowered
#_[canonical="steam"] {
  monitorable query get_price(in req game_name: String #_[prompt="What is the name of the app you're looking for? (Case-insensitive)"] #_[canonical="game name"],
                              out price: Number #_[canonical="price"])
  #_[canonical="get price from steam"]
  #_[confirmation="get price of ${game_name} from steam"];

  query get_steam_id(in req name: String #_[prompt="What is the Steam name? (Go to a Steam profile and enter the NAME from the URL https://steamcommunity.com/id/NAME)"] #_[canonical="name"],
                     out id: Entity(com.steampowered:user_id) #_[canonical="id"])
  #_[canonical="get user's steam ID"]
  #_[confirmation="get steam ID of ${name}"];
}
class @org.upcdatabase
#_[canonical="upc database"] {
  monitorable query get(in req query: String #_[prompt="What product do you want to search? "] #_[canonical="query"],
                        out product: String #_[canonical="product"],
                        out upc: String #_[canonical="upc"])
  #_[canonical="get upc code"]
  #_[confirmation="upc code for $query"];
}
class @me.omlet.chat
#_[canonical="omlet account"] {
  monitorable list query messages(out feed: Entity(omlet:feed_id) #_[prompt="What feed do you want to monitor?"] #_[canonical="feed"],
                                  out message: String #_[canonical="message"],
                                  in opt from_me: Boolean #_[canonical="from me"])
  #_[canonical="list messages on omlet"]
  #_[confirmation="Omlet messages"];

  action send_picture(in req to: Entity(tt:username) #_[prompt="Who do you want to send the message to? Use the Omlet ID, phone number or email address."] #_[canonical="to"],
                      in req picture_url: Entity(tt:picture) #_[prompt="Upload the picture you want to send now."] #_[canonical="picture url"],
                      in req caption: String #_[prompt="What caption should the picture have?"] #_[canonical="caption"])
  #_[canonical="send picture on omlet"]
  #_[confirmation="send a picture on Omlet to $to with caption $caption"];

  action send_to(in req to: Entity(tt:username) #_[prompt="Who do you want to send the message to? Use the Omlet ID, phone number or email address."] #_[canonical="to"],
                 in req message: String #_[prompt="What do you want to say?"] #_[canonical="message"])
  #_[canonical="send message on omlet"]
  #_[confirmation="send a message on Omlet to $to saying $message"];
}
class @org.thingpedia.friendhub.stickynotes
#_[canonical="sticky notes"] {
  monitorable list query list_posts(out post: String #_[canonical="post"],
                                    out author: Entity(tt:username) #_[canonical="author"],
                                    out date: Date #_[canonical="date"])
  #_[canonical="list sticky notes"]
  #_[confirmation="list sticky notes"];

  action post(in req post: String #_[prompt="What do you want to post"] #_[canonical="post"],
              in req author: String #_[prompt="What's your name?"] #_[canonical="author"])
  #_[canonical="post on sticky notes"]
  #_[confirmation="Add $post to sticky notes"];
}
class @com.nest.security_camera
#_[canonical="nest security camera"] {
  monitorable query current_event(out start_time: Date #_[canonical="start time"],
                                  out has_sound: Boolean #_[prompt="Do you want events with sound?"] #_[canonical="has sound"],
                                  out has_motion: Boolean #_[prompt="Do you want events with motion?"] #_[canonical="has motion"],
                                  out has_person: Boolean #_[prompt="Do you want events with people in front of the camera?"] #_[canonical="has person"],
                                  out picture_url: Entity(tt:picture) #_[canonical="picture url"])
  #_[canonical="current event on nest security camera"]
  #_[confirmation="the current event detected on your Nest security camera"]
  #_[formatted=[{type="code",code="function(argMap, hint, formatter) {\n    var timeString = formatter.dateAndTimeToString(argMap.start_time);\n\n    var title;\n    if (argMap.has_person)\n        title = `Person detected on your camera at ${timeString}`;\n    else if (argMap.has_sound && argMap.has_motion)\n        title = `Sound and motion detected on your camera at ${timeString}`;\n    else if (argMap.has_sound)\n        title = `Sound detected on your camera at ${timeString}`;\n    else if (argMap.has_motion)\n        title = `Motion detected on your camera at ${timeString}`;\n    else\n        title = `Something detected on your camera at ${timeString}`;\n    return title;\n}"}, {type="picture",url="${picture_url}"}]];

  action set_power(in req power: Enum(on,off) #_[prompt="Do you want to turn your camera on or off?"] #_[canonical="power"])
  #_[canonical="set power on nest security camera"]
  #_[confirmation="turn $power your Nest security camera"];
}
class @com.nest.thermostat
#_[canonical="nest thermostat"] {
  monitorable query get_humidity(out value: Number #_[canonical="value"])
  #_[canonical="get humidity on thermostat"]
  #_[confirmation="the humidity reported by Nest Thermostat"];

  monitorable query get_hvac_state(out mode: Enum(heat,cool,heat_cool,off) #_[canonical="mode"],
                                   out state: Enum(heating,cooling,off) #_[canonical="state"])
  #_[canonical="get hvac state on thermostat"]
  #_[confirmation="the state of your Nest Thermostat"];

  monitorable query get_temperature(out value: Measure(C) #_[canonical="value"])
  #_[canonical="get temperature on thermostat"]
  #_[confirmation="the temperature on your thermostat"];

  action set_hvac_mode(in req mode: Enum(heat,cool,heat_cool,off) #_[prompt="What mode do you want to set?"] #_[canonical="mode"])
  #_[canonical="set hvac mode on thermostat"]
  #_[confirmation="set your Nest Thermostat to $mode"];

  action set_minmax_temperature(in req low: Measure(C) #_[prompt="What low temperature do you want to set?"] #_[canonical="low"],
                                in req high: Measure(C) #_[prompt="What high temperature do you want to set?"] #_[canonical="high"])
  #_[canonical="set minimum maximum temperature on thermostat"]
  #_[confirmation="set your Nest Thermostat between $low and $high"];

  action set_target_temperature(in req value: Measure(C) #_[prompt="What temperature do you want to set?"] #_[canonical="value"])
  #_[canonical="set target temperature on thermostat"]
  #_[confirmation="set your Nest Thermostat to $value"];
}
class @com.microsoft.cognitive.vision
#_[canonical="microsoft computer vision"] {
  query generate_description(in req picture_url: Entity(tt:picture) #_[prompt="What picture do you want to describe?"] #_[canonical="picture url"],
                             out description: String #_[canonical="description"])
  #_[canonical="generate description of picture"]
  #_[confirmation="the description of ${picture_url}"];
}
class @com.tesla.car
#_[canonical="tesla car"] {
  monitorable query get_charge_state(out charging_state: String #_[canonical="charging state"],
                                     out battery_level: Number #_[canonical="battery level"],
                                     out charge_port_door_open: Boolean #_[canonical="charge port door open"],
                                     out charge_port_latch: String #_[canonical="charge port latch"])
  #_[canonical="get the charge state of the Tesla car"]
  #_[confirmation="the charge state of your Tesla car"];

  monitorable query get_climate_state(out inside_temperature: Measure(C) #_[canonical="inside temperature"],
                                      out temperature_setting: Measure(C) #_[canonical="temperature setting"],
                                      out conditioner_on: Boolean #_[canonical="conditioner on"])
  #_[canonical="get the climate state of the Tesla car"]
  #_[confirmation="the climate state of your Tesla car"];

  monitorable query get_drive_state(out location: Location #_[canonical="location"])
  #_[canonical="get the location of the Tesla car"]
  #_[confirmation="the location of your Tesla car"];

  monitorable query get_mobile_enabled(out mobile_enabled: Boolean #_[canonical="mobile enabled"])
  #_[canonical="is your Tesla car remotely accessible"]
  #_[confirmation="remote accessibility of your Tesla "];

  monitorable query get_vehicle_state(out odometer: Number #_[canonical="odometer"],
                                      out locked: Boolean #_[canonical="locked"])
  #_[canonical="get state on Tesla"]
  #_[confirmation="your Tesla car state"];

  action flash()
  #_[canonical="flash your tesla car"]
  #_[confirmation="flash your Tesla car"];

  action honk_horn()
  #_[canonical="honk your Tesla car"]
  #_[confirmation="honk the horn on your Tesla car"];

  action set_air_conditioning(in req power: Enum(on,off) #_[prompt="Do you want to turn the air-conditioner on your Tesla car on or off?"] #_[canonical="power"])
  #_[canonical="set power on the Tesla air-conditioner"]
  #_[confirmation="turn $power your Tesla air-conditioner"];

  action set_temperature(in req value: Measure(C) #_[prompt="What temperature do you want to set?"] #_[canonical="value"])
  #_[canonical="set target temperature of the Tesla car"]
  #_[confirmation="set the temperature of your Tesla car to $value"];

  action wake_up()
  #_[canonical="wake up your Tesla car"]
  #_[confirmation="wake up your Tesla car"];
}
class @com.tumblr.blog
#_[canonical="tumblr blog"] {
  action post_picture(in req caption: String #_[prompt="What is the caption of the picture?"] #_[canonical="caption"],
                      in req picture_url: Entity(tt:picture) #_[prompt="Upload the picture now."] #_[canonical="picture url"])
  #_[canonical="post picture on tumblr blog"]
  #_[confirmation="post a picture with caption $caption in your Tumblr"];

  action post_text(in req title: String #_[prompt="What is the title of the post?"] #_[canonical="title"],
                   in req body: String #_[prompt="What is the body of the post? Markdown is allowed."] #_[canonical="body"])
  #_[canonical="post on tumblr blog"]
  #_[confirmation="post $title with body $body in your Tumblr"];
}
class @com.fitbit
#_[canonical="fitbit tracker"] {
  monitorable query getbody(out weight: Measure(kg) #_[canonical="weight"],
                            out bmi: Number #_[canonical="bmi"],
                            out fat: Number #_[canonical="fat"])
  #_[canonical="retrieve body measurements on fitbit"]
  #_[confirmation="your body measurements from FitBit"];

  monitorable query getsteps(in opt date: Date #_[canonical="date"],
                             out steps: Number #_[canonical="steps"])
  #_[canonical="retrieve steps on fitbit"]
  #_[confirmation="your step count from your FitBit"];

  action recordweight(in req weight: Measure(kg) #_[prompt="What is your weight?"] #_[canonical="weight"])
  #_[canonical="record weight on fitbit"]
  #_[confirmation="record weight"];
}
class @com.nest.smoke_alarm
#_[canonical="nest smoke alarm"] {
}
class @com.cryptonator
#_[canonical="cryptonator"] {
  monitorable query get_price(in req currency: Entity(tt:cryptocurrency_code) #_[prompt="What crypto currency do you want to check?"] #_[canonical="currency"],
                              out price: Currency #_[canonical="price"])
  #_[canonical="get crypto currency price"]
  #_[confirmation="price of ${currency}"];
}
class @org.arxiv
#_[canonical="arxiv"] {
  monitorable list query query(in opt query: String #_[prompt="what do you want to search?"] #_[canonical="query"],
                               in opt category: String #_[prompt="what field do you want to search?"] #_[canonical="category"],
                               out title: String #_[canonical="title"],
                               in opt author: String #_[canonical="author"],
                               out pubDate: Date #_[canonical="pub date"],
                               out link: Entity(tt:url) #_[canonical="link"],
                               out summary: String #_[canonical="summary"])
  #_[canonical="Search papers on ArXiv"]
  #_[confirmation="search ${query} in field ${category} on ArXiv"];
}
class @org.thingpedia.builtin.test.invisible
#_[canonical="invisible device"] {
  action eat_data(in req data: String #_[prompt="What do you want me to consume?"] #_[canonical="data"])
  #_[canonical="eat data on test"]
  #_[confirmation="consume $data"];
}
class @com.fortnitetracker
#_[canonical="fortnite tracker"] {
  monitorable query get(in req user_id: String #_[prompt="what's the user id you want to track?"] #_[canonical="user id"],
                        out rating: Number #_[canonical="rating"],
                        out rank: Number #_[canonical="rank"],
                        out kd: Number #_[canonical="kd"],
                        out winRatio: Number #_[canonical="win ratio"])
  #_[canonical="get fortnite stats"]
  #_[confirmation="fortnite stats of $user_id"];
}
class @com.test
#_[canonical="test"] {
}
class @rss.outsideworld
#_[canonical="outsideworld"] {
  monitorable list query get_pages(out title: String #_[canonical="title"],
                                   out link: Entity(tt:url) #_[canonical="link"],
                                   out updated: Date #_[canonical="updated"],
                                   out description: String #_[canonical="description"])
  #_[canonical="get pages on outsideworld"]
  #_[confirmation="News articles"];
}
class @outsideworld.rss
#_[canonical="outsideworld"] {
  monitorable list query get_stories(out title: String #_[canonical="title"],
                                     out link: Entity(tt:url) #_[canonical="link"],
                                     out updated: Date #_[canonical="updated"],
                                     out description: String #_[canonical="description"])
  #_[canonical="get stories on outsideworld"]
  #_[confirmation="Outside World"];
}
class @jpk.athletics
#_[canonical="stanford athletics feed"] {
  monitorable list query get_feed(out title: String #_[canonical="title"],
                                  out link: Entity(tt:url) #_[canonical="link"],
                                  out updated: Date #_[canonical="updated"],
                                  out description: String #_[canonical="description"])
  #_[canonical="get feed on stanford athletics feed"]
  #_[confirmation="Outside World"];
}
class @com.wikicfp
#_[name="WikiCFP"]
#_[description="Keep updated with paper submission deadlines"]
#[version=15]
#[package_version=15] {
  import loader from @org.thingpedia.v2();
  import config from @org.thingpedia.config.none();

  monitorable list query search(in req query: String #_[prompt="What do you want to search?"] #_[canonical="query"] #[string_values="tt:search_query"],
                                out abbr: String #_[canonical="abbreviation"],
                                out name: String #_[canonical="name"],
                                out start: Date #_[canonical="start date"],
                                out end: Date #_[canonical="end date"],
                                out city: String #_[canonical="city"],
                                out deadline: Date #_[canonical="deadline"],
                                out link: Entity(tt:url) #_[canonical="link"])
  #_[canonical="get events from wikicfp"]
  #_[confirmation="information of $query on wikicfp"]
  #_[formatted=[{type="rdl",webCallback="${link}",displayTitle="${name} (${abbr})",displayText="Where: ${city},\nWhen: ${start:date} - ${end:date},\nDeadline: ${deadline:date}."}]]
  #_[confirmation_remote="information of $query on wikicfp"];
}
class @com.spotify
#_[canonical="spotify"] {
  monitorable query get_currently_playing(out song: String #_[canonical="song"] #[string_values="tt:song_name"])
  #_[canonical="currently playing track"]
  #_[confirmation="the currently playing track"]
  #_[formatted=[{type="text",text="The current playing song is ${song}."}]];

  monitorable query get_song_info(in req song: String #_[prompt="What song are you looking for?"] #_[canonical="song"] #[string_values="tt:song_name"],
                                  out acousticness: Number #_[canonical="acousticness"],
                                  out danceability: Number #_[canonical="danceability"],
                                  out energy: Number #_[canonical="energy"],
                                  out instrumentalness: Number #_[canonical="instrumentalness"],
                                  out key: Enum(C,C_sharp,D,D_sharp,E,F,F_sharp,G,G_sharp,A,A_sharp,B) #_[canonical="key"],
                                  out modality: Enum(Major,minor) #_[canonical="modality"],
                                  out liveness: Number #_[canonical="liveness"],
                                  out loudness: Number #_[canonical="loudness"],
                                  out speechness: Number #_[canonical="speechness"],
                                  out tempo: Number #_[canonical="tempo"],
                                  out beats: Number #_[canonical="beats"],
                                  out valence: Number #_[canonical="valence"])
  #_[formatted=[
    "The tempo of this track is ${tempo} beats per minute",
    "On a scale from 0 to 1, the danceability of this track is ${danceability}",
    "On a scale from 0 to 1, the acousticness of this track is ${acousticness}.",
    "On a scale from 0 to 1, the energy of this track is ${energy}",
    "On a scale from 0 to 1, the speechiness of this track is ${speechiness}",
    "On a scale from 0 to 1, the valence of this track is ${valence}",
    "On a scale from 0 to 1, the liveness of this track is ${liveness}",
    "On a scale from 0 to 1, the instrumentalness of this track is ${instrumentalness}",
    "On a scale from -60 to 0 dB, the loudness of this track is ${loudness} dB",
    "On a scale from 0 to 1, the valence of this track is ${valence}",
    "The key of this track is ${key} ${modality}",
    "This track has ${beats} beats per measure"
  ]]
  #_[canonical="spotify song info"]
  #_[confirmation="info about ${song}"];

  monitorable list query get_user_playlist(out playlist: String)
  #_[canonical="my spotify playlists"]
  #_[confirmation="your Spotify playlists"]
  #[doc="retrieve all your Spotify playlists"];

  monitorable list query get_user_playlist_track(in req playlist: String #_[prompt="Which playlist do you want?"] #_[canonical="playlist"],
                                                 out song: String #_[canonical="song"] #[string_values="tt:song_name"])
  #_[canonical="songs in playlist"]
  #_[confirmation="songs in your Spotify playlist ${playlist}"]
  #_[formatted=[{type="text",text="${song}"}]];

  monitorable list query get_user_top_tracks(out song: String #_[canonical="song"] #[string_values="tt:song_name"])
  #_[canonical="spotify top tracks"]
  #_[confirmation="your top tracks in Spotify"]
  #_[formatted=[{type="text",text="${song}"}]];

  action add_album_to_playlist(in req album: String #_[prompt="What album would you like to add to your playlist?"] #_[canonical="to add"] #[string_values="tt:song_name"],
                               in req playlist: String #_[prompt="What play list would you like to add to?"] #_[canonical="playlist"] #[string_values="com.spotify:playlist"])
  #_[canonical="add an album to a playlist"]
  #_[confirmation="add the album $album to the playlist $playlist"];

  action add_songs_to_playlist(in req songs: Array(String) #_[prompt="What songs would you like to add?"] #_[canonical="to add"] #[string_values="tt:song_name"],
                               in req playlist: String #_[prompt="What playlist would you like to add to?"] #_[canonical="playlist"] #[string_values="com.spotify:playlist"])
  #_[canonical="add songs to a playlist"]
  #_[confirmation="add the songs $songs to the playlist $playlist"];

  action create_new_playlist(in req title: String #_[prompt="What would you like to name your playlist?"] #_[canonical="title"] #[string_values="com.spotify:playlist"],
                             in opt description: String #_[prompt="What description would you like to give your playlist?"] #_[canonical="description"] #[string_values="tt:long_free_text"],
                             in opt isPublic: Boolean #_[prompt="Would you like your playlist to be public?"] #_[canonical="is public"])
  #_[canonical="create a new playlist"]
  #_[confirmation="create a new playlist named $title"];

  action play_album(in req album: String #_[prompt="What album would you like to play?"] #_[canonical="to play"] #[string_values="tt:song_album"])
  #_[canonical="play an album"]
  #_[confirmation="play the album $album"];

  action play_artist(in req artist: String #_[prompt="What artist would you like to play?"] #_[canonical="to play"] #[string_values="tt:song_artist"])
  #_[canonical="play an artist"]
  #_[confirmation="play the artist $artist"];

  action play_my_playlist(in req playlist: String #_[prompt="Which one of your playlists do you want to play?"] #_[canonical="to play"] #[string_values="com.spotify:playlist"])
  #_[canonical="play your playlist"]
  #_[confirmation="play your playlist $playlist"];

  action play_playlist(in req playlist: String #_[prompt="What playlist do you want to play?"] #_[canonical="to play"] #[string_values="com.spotify:playlist"])
  #_[canonical="play the playlist"]
  #_[confirmation="play the playlist $playlist"];

  action play_seek_seconds(in req seconds: Measure(ms) #_[prompt="What timestamp (in seconds) should we seek to?"] #_[canonical="seconds"])
  #_[canonical="seek the track in seconds"]
  #_[confirmation="seek the track to $seconds"];

  action play_songs(in req songs: Array(String) #_[prompt="List the songs you want to play, separated by comma."] #_[canonical="to play"] #[string_values="tt:song_name"])
  #_[canonical="play the song(s)"]
  #_[confirmation="play the song(s) $songs"];

  action player_next()
  #_[canonical="go to the next song"]
  #_[confirmation="go to the next song"];

  action player_pause()
  #_[canonical="pause playback"]
  #_[confirmation="pause playback"];

  action player_play()
  #_[canonical="resume playback"]
  #_[confirmation="resume playback"];

  action player_previous()
  #_[canonical="go to the previous song"]
  #_[confirmation="go to the previous song"];

  action player_repeat(in req repeat: Enum(track,context,off) #_[prompt="Should we set the repeat state to 'track', 'context', or 'off'?"] #_[canonical="repeat"])
  #_[canonical="set the repeat state"]
  #_[confirmation="set repeat mode to ${repeat}"];

  action player_shuffle(in req shuffle: Enum(on,off) #_[prompt="Should we set the shuffle state to 'on' or 'off'?"] #_[canonical="shuffle"])
  #_[canonical="set the shuffle state"]
  #_[confirmation="turn shuffle ${shuffle}"];

  action save_current_track()
  #_[canonical="save the currently playing track"]
  #_[confirmation="save the currently playing track"];
}
class @com.spotify2
#_[thingpedia_name="Spotify"]
#_[thingpedia_description="Play music on Spotify"]
#_[canonical="spotify"]
#[license="BSD-3-Clause"]
#[license_gplcompatible=true]
#[subcategory="media"]
#_[name="Spotify Account of ${display_name}"]
#_[description="This is your Spotify Account"]
{

  import loader from @org.thingpedia.v2();
  import config from @org.thingpedia.config.oauth2(
    client_id=$?, client_secret=$?,
    authorize="https://accounts.spotify.com/authorize"^^tt:url,
    get_access_token="https://accounts.spotify.com/api/token"^^tt:url,
    scope=["streaming", "playlist-read-collaborative", "playlist-modify-private", "playlist-read-private", "playlist-modify-public", "user-read-email", "user-read-private", "user-read-playback-state", "user-read-currently-playing", "user-modify-playback-state", "user-read-recently-played", "user-top-read", "user-follow-read", "user-follow-modify", "user-library-read", "user-library-modify"],
    get_profile="https://api.spotify.com/v1/me"^^tt:url,
    profile=["id", "display_name"]
  );

  entity song #_[description="Songs on Spotify"];
  entity artist #_[description="Artists on Spotify"];
  entity album #_[description="Albums on Spotify"];
  entity device #_[description="Spotify Connect device ID"];

  list query song(out id: Entity(com.spotify2:song)
                    #[string_values="tt:song_name"]
                    #[unique=true]
                    #_[canonical={
                      default="base",
                      base=["name", "title", "track name"],
                      passive_verb=["named #", "called #", "titled #"],
                      property=["name #", "title #"]
                    }],
                    out artists: Array(Entity(com.spotify2:artist))
                    #[string_values="tt:song_artist"]
                    #_[canonical={
                      default="preposition",
                      base=["artist", "author", "song writer", "band", "artist name",
                            "singer", "composer"],
                      property=["artist #", "song writer #"],
                      preposition=["by #", "from #"],
                      adjective=["#"],
                      passive_verb=["written by #", "released by #", "produced by #",
                                    "composed by #", "recorded by #"],
                      verb = ["# wrote", "# released", "# produced", "# composed",
                              "# did", "# recorded", "# sang", "# made"]
                    }],
                    out album: Entity(com.spotify2:album)
                    #[string_values="tt:song_album"]
                    #_[canonical={
                      default="preposition",
                      base=["album"],
                      property=["album #"],
                      preposition=["in the album #",
                                   "in #", "part of #", "from the album #",
                                   "from #"],
                    }],
                    out genres: Array(String)
                    #[string_values="com.spotify:genre"]
                    #_[canonical={
                      default="adjective",
                      base=["genres", "type of genre", "type of music", "category"],
                      property=["# songs", "# music"],
                      adjective=["#"],
                      preposition=["in the # genre", "in #", "of the # genre",
                                   "in the # style", "in the # category"],
                    }],
                    out release_date : Date
                    #_[canonical={
                      default="passive_verb",
                      base=["date", "release date", "release year", "release day"],
                      property=["release date #"],
                      adjective=["#"],
                      preposition=["from #", "in #"],
                      passive_verb=["released in #", "released #", "published in #"],
                      adjective_argmin=["least recent", "oldest", "first"],
                      adjective_argmax=["most recent", "newest", "latest"],
                      passive_verb_argmax=["released most recently"],
                    }],
                    out popularity: Number
                    #[min_number=0]
                    #[max_number=100]
                    #_[canonical={
                      default="base",
                      base=["popularity", "average popularity"],
                      passive_verb=["rated # popularity"],
                      property=["# popularity"],
                      adjective_argmin=["least popular", "most niche"],
                      adjective_argmax=["most popular", "most well-known", "best", "greatest", "top"],
                    }],
                    out energy : Number
                    #[min_number=0]
                    #[max_number=100]
                    #[filterable=false]
                    #_[canonical={
                      default="base",
                      base=["energy"],
                      adjective_argmin=["least energetic"],
                      adjective_argmax=["most energetic"],
                    }],
                    out danceability : Number
                    #[min_number=0]
                    #[max_number=100]
                    #[filterable=false]
                    #_[canonical={
                      default="base",
                      base=["danceability"],
                      adjective_argmin=["least danceable"],
                      adjective_argmax=["most danceable"],
                    }])
    #_[canonical=["song", "music", "track"]]
    #_[confirmation="songs on Spotify"]
    #[minimal_projection=["id"]]
    #_[formatted=[{type="text",text="${id} by ${artists}"}]]
    #[doc="search for songs on Spotify"];

    action play_song (in req song: Entity(com.spotify2:song)
                      #[string_values="tt:song_name"]
                      #_[prompt=["what song do you want to play"]]
                      #_[canonical={
                        default="base",
                        base=["name"],
                        // FIXME: actions must use "preposition" not "passive_verb"
                        preposition=["named #", "called #", "titled #"],
                        property=["name #", "title #"]
                      }],
                      out device : Entity(com.spotify2:device)
                      #_[canonical={
                        default="preposition",
                        base=["device", "player", "app"], // "can you tell me the app"?
                        preposition=["on"]
                      }])
    #_[canonical=["play a song", "play the song", "play a track", "play music",
                  // i would like to...
                  "listen to a song", "hear a song"]]
    #_[confirmation="play the song $song"]
    #[confirm=enum(auto)];

    list query artist(out id: Entity(com.spotify2:artist)
                      #[string_values="tt:song_artist"]
                      #[unique=true]
                      #_[canonical={
                        default="base",
                        base=["name"],
                        passive_verb=["named #", "called #"],
                        property=["name #"]
                      }],
                      out genres: Array(String)
                      #[string_values="com.spotify:genre"]
                      #_[canonical={
                        default="adjective",
                        base=["genres", "type of genre", "type of music", "category"],
                        property=["# songs", "# music"],
                        adjective=["#"],
                        preposition=["in the # genre", "in #", "of the # genre",
                                     "in the # style", "in the # category"],
                        verb=["plays # music", "plays the # genre", "does # music",
                              "plays # songs", "does the # genre",
                              "plays the # style", "belongs to the genre #",
                              "belongs to the # genre", "plays #"]
                      }],
                      out popularity: Number
                      #[min_number=0]
                      #[max_number=100]
                      #_[canonical={
                        default="base",
                        base=["popularity", "average popularity"],
                        passive_verb=["rated # popularity"],
                        property=["# popularity"],
                        adjective_argmin=["least popular", "most niche"],
                        adjective_argmax=["most popular", "most well-known", "best", "greatest", "top"],
                      }])
    #_[canonical=["artist", "composer", "musician", "singer"]]
    #_[confirmation="artists on Spotify"]
    #[minimal_projection=["id"]]
    #_[formatted=[{type="text",text="${id}"}]]
    #[doc="search for artists on Spotify"];

    list query album(out id: Entity(com.spotify2:album) #[string_values="tt:song_album"]
                    #[unique=true]
                    #_[canonical={
                      default="base",
                      base=["name"],
                      passive_verb=["named #", "called #", "titled #"],
                      property=["name #", "title"]
                    }],
                    out artists: Array(Entity(com.spotify2:artist))
                    #[string_values="tt:song_artist"]
                    #_[canonical={
                      default="preposition",
                      base=["artist", "author", "song writer", "band", "artist name",
                            "singer", "composer"],
                      property=["artist #", "song writer #"],
                      preposition=["by #", "from #"],
                      adjective=["#"],
                      passive_verb=["written by #", "released by #", "produced by #",
                                    "composed by #", "recorded by #"],
                      verb = ["# wrote", "# released", "# produced", "# composed",
                              "# did", "# recorded", "# sang", "# made"]
                    }],
                    out release_date : Date
                    #_[canonical={
                      default="preposition",
                      base=["date", "release date", "release year", "release day"],
                      property=["release date #"],
                      adjective=["#"],
                      preposition=["from #", "in #"],
                      passive_verb=["released in #", "released #", "published in #"],
                      adjective_argmin=["least recent", "oldest", "first"],
                      adjective_argmax=["most recent", "newest", "latest"],
                      passive_verb_argmax=["released most recently"],
                    }],
                    out popularity: Number
                    #[min_number=0]
                    #[max_number=100]
                    #_[canonical={
                      default="base",
                      base=["popularity", "average popularity"],
                      passive_verb=["rated # popularity"],
                      property=["# popularity"],
                      adjective_argmin=["least popular", "most niche"],
                      adjective_argmax=["most popular", "most well-known", "best", "greatest", "top"],
                    }])
    #_[canonical=["album", "music collection"]]
    #_[confirmation="album on Spotify"]
    #[minimal_projection=["id"]]
    #_[formatted=[{type="text",text="${id} by ${artists}"}]]
    #[doc="search for albums on Spotify"];

    monitorable query get_currently_playing(out song: Entity(com.spotify2:song)
                                            #[string_values="tt:song_name"])
    #_[canonical=["the currently playing track name", "the currently playing song",
                  "the song currently playing"]]
    #_[confirmation="the currently playing track name"]
    #_[result=["currently playing ${song}", "the currently playing track is ${song}"]]
    #_[on_error={
      no_song_playing=["no song is currently playing", "nothing is currently playing"]
    }]
    #_[formatted=[{type="text",text="The current playing song is ${song}."}]]
    #[poll_interval=60000ms]
    #[doc="retrieve the currently playing track name"];

    monitorable list query get_user_top_tracks(out song: Entity(com.spotify2:song)
                                               #[string_values="tt:song_name"])
    #_[canonical=["spotify top tracks", "my favorite songs",
                  "my top tracks"]]
    #_[confirmation="my top tracks in Spotify"]
    #_[formatted=[{type="text",text="${song}"}]]
    #[poll_interval=3600000ms]
    #[doc="get user's top tracks in the last 4 weeks"];

    action player_next()
    #_[canonical=["play the next song", "go to the next song", "skip this song"]]
    #_[confirmation="go to the next song"]
    #[doc="go to the next song"]
    #[confirm=false];

    action player_previous()
    #_[canonical=["play the previous song", "go back",
                  "play the last song",
                  "go back to the last song",
                  "go to the previous song"]]
    #_[confirmation="go to the previous song"]
    #[doc="go to the previous song"]
    #[confirm=false];

    action player_play()
    #_[canonical=["resume playing", "start playing again", "resume playback"]]
    #_[confirmation="resume playing"]
    #[doc="resume playback"]
    #[confirm=false];

    action player_pause()
    #_[canonical=["pause playback", "pause my spotify"]]
    #_[confirmation="pause playback"]
    #_[confirmation_remote="pause $_person's playback"]
    #[doc="pause playback"]
    #[confirm=false];

    action player_shuffle(in req shuffle: Enum(on,off)
                          #_[prompt="should we set the shuffle state to on or off"]
                          #_[canonical={
                            base=["shuffle"],
                            preposition=["to"]
                          }])
    #_[canonical="set the shuffle state"]
    #_[confirmation="set the shuffle state"]
    #_[confirmation_remote="set the shuffle state"]
    #[doc="set the shuffle state"]
    #[confirm=false];

    action player_repeat(in req repeat: Enum(track,context,off)
                         #_[prompt="should we set the repeat state to track, context, or off"]
                         #_[canonical={
                           base=["repeat"],
                           preposition=["to"]
                         }])
    #_[canonical="set the repeat state"]
    #_[confirmation="set the repeat state"]
    #_[confirmation_remote="set the repeat state"]
    #[doc="set the repeat state"]
    #[confirm=false];
}

class @com.yelp
#_[name="Yelp"]
#_[description="Search restaurants on Yelp"]
#_[canonical="yelp"]
{
  list query restaurant(out id: Entity(com.yelp:restaurant)
                        #[conflict_filter=["cuisines", "price_range"]]
                        #[unique=true]
                        #[string_values="gov.data:restaurant_names"]
                        #_[canonical={
                          default="property",
                          base=["name"],
                          property=[]
                        }],
                        out image_url: Entity(tt:picture)
                        #[genie=false]
                        #_[canonical={
                          base=["picture", "image", "photo"]
                        }],
                        out link: Entity(tt:url)
                        #[genie=false]
                        #_[canonical="link"],
                        out cuisines: Array(Entity(com.yelp:restaurant_cuisine))
                        #[conflict_filter=["id"]]
                        #_[canonical={
                          default="property",
                          base=["cuisines", "types of cuisine", "food", "types of food"],
                          property=["# food", "# cuisine"],
                          adjective=["#"],
                          verb=["serves # cuisine", "serves # food", "offer # cuisine", "offer # food", "serves", "offers"]
                        }],
                        out price : Enum(cheap, moderate, expensive, luxury)
                        #[conflict_filter=["id"]]
                        #_[canonical={
                          default="adjective",
                          base=["price range", "price"],
                          property=[],
                          adjective=["#", "# -ly priced"]
                          // FIXME
                          /*adjective_enum={ expensive=["upscale"] }*/
                        }],
                        out rating: Number
                        #_[canonical={
                          default="passive_verb",
                          base=["rating", "average rating"],
                          passive_verb=["rated # star"],
                          adjective=["# star"],
                          npp=["rating", "# star rating"]
                        }],
                        out reviewCount: Number
                        #_[canonical="review count"],
                        out geo: Location
                        #_[canonical={
                          default="preposition",
                          base=["address", "location"],
                          preposition=["near #", "in #", "around #"]
                        }],
                        out phone: Entity(tt:phone_number)
                        #_[canonical={
                          default="base",
                          base=["phone number", "telephone"]
                        }],
                        out openingHours: RecurrentTimeSpecification
                        #_[canonical={
                          default="base",
                          base=["opening hours"]
                        }])
  #_[canonical="restaurant"]
  #_[confirmation="restaurants on Yelp"]
  #[minimal_projection=["id"]]
  #[default_projection=["id", "link", "rating", "cuisines", "geo", "image_url"]]
  #_[formatted=[{
    type="rdl",
    displayTitle="${name}",
    webCallback="${link}",
    displayText="Rating: ${rating}\nCuisines: ${cuisines}\nAddress: ${geo}",
    pictureUrl="${image_url}"
  }]]
  #[doc="search for restaurants on Yelp"]
  #[confirm=false];
}

class @org.thingpedia.test.compounds_and_inheritance {
  monitorable list query thing(out name: String,
                               out description: String,
                               out image: Entity(tt:picture));

  monitorable list query foo extends thing (out compound: {
                                              nestedCompound: {
                                                p1: String,
                                                p2: Number
                                              },
                                              p3: String
                                            },
                                            out p4: String);
}

class @org.wikidata
#_[name="Wikidata for domain Q515"]
#_[description="Natural language dialogues over Wikidata knowledge base."] {
  import loader from @org.thingpedia.v2();
  import config from @org.thingpedia.config.none();

  list query human(out id: Entity(org.wikidata:human),
                   out place_of_birth: Entity(org.wikidata:geographic_entity),
                   out country: Entity(org.wikidata:country),
                   out height: Measure(m));
  list query geographic_entity(out id: Entity(org.wikidata:geographic_entity),
                               out located_in_the_administrative_territorial_entity: Entity(org.wikidata:administrative_territorial_entity));
  list query administrative_territorial_entity(out id: Entity(org.wikidata:administrative_territorial_entity),
                                               out located_in_the_administrative_territorial_entity: Entity(org.wikidata:administrative_territorial_entity),
                                               out population: Number,
                                               out twinned_administrative_body : Array(Entity(org.wikidata:administrative_territorial_entity)),
                                               out member_of : Array({
                                                 value : Entity(org.wikidata:organization),
                                                 start_time : Date,
                                                 end_time : Date
                                               }),
                                               out population : {
                                                 value : Number,
                                                 point_in_time : Date
                                               });

  list query city(out id: Entity(org.wikidata:city)
                  #_[canonical={
                    base=["name"],
                    passive_verb=["named", "called"]
                  }]
                  #[unique=true],
                  out inception: Date
                  #_[canonical={
                    default="property",
                    base=["inception", "foundation", "formation", "introduction", "date of establishment", "date of founding", "establishment date", "founding date", "commencement date", "construction date", "creation date", "date commenced", "date constructed", "date created", "date formed", "date founded", "date incorporated", "date of commencement", "date of creation", "date of foundation", "date of foundation or creation", "date of incorporation", "dedication date", "first issue", "formation date", "foundation / creation date", "foundation date", "incorporation date", "launch date", "time of foundation or creation", "time of inception", "year commenced", "year created", "year established", "year founded", "year incorporated", "year written"],
                    passive_verb=["formed in", "introduced", "created", "built", "completed", "constructed", "created on date", "established", "established on date", "formed at", "formed on date", "founded", "founded on date", "inaugurated", "incorporated", "incorporated on date", "inititated", "written on date", "launched"],
                    verb=["commenced on date"]
                  }]
                  #[wikidata_id="P571"],
                  out named_after: String
                  #_[canonical={
                    default="passive_verb",
                    passive_verb=["named after", "toponym", "eponym", "named for", "linked with"],
                    base=["etymology", "name after", "namesake"],
                    reverse_property=["named in honor of", "# named in honor", "# 's named in honor"]
                  }]
                  #[wikidata_id="P138"]
                  #[string_values="org.wikidata:city_named_after"],
                  out continent: Enum(Africa,SouthAmerica,Europe,Asia,NorthAmerica,Antarctica,Oceania,Americas,Australia,Eurasia,CentralAmerica,AustraliaAndOceania,Caribbean,Tamriel,Faerun,KaraTur,Westeros,NorthernAmericaAndMexico)
                  #_[canonical={
                    default="property",
                    base=["continent"]
                  }]
                  #[wikidata_id="P30"],
                  out country: Entity(org.wikidata:country)
                  #_[canonical={
                    default="property",
                    base=["country", "state", "land", "sovereign state", "host country"]
                  }]
                  #[wikidata_id="P17"],
                  out capital_of: String
                  #_[canonical={
                    default="reverse_property",
                    reverse_property=["capital of", "# capital", "# 's capital", "county seat of", "# county seat", "# 's county seat"],
                    base=["county seat for"]
                  }]
                  #[wikidata_id="P1376"]
                  #[string_values="org.wikidata:city_capital_of"],
                  out located_in_the_administrative_territorial_entity: String
                  #_[canonical={
                    default="passive_verb",
                    passive_verb=["located in the administrative territorial entity", "based in", "in", "in administrative unit", "in the administrative unit", "located in", "located in administrative unit", "located in the administrative territorial entity", "located in the administrative unit", "located in the territorial entity"],
                    base=["city", "town", "locality", "administrative territorial entity", "region", "state", "indian reservation", "location (administrative territorial entity)"],
                    verb=["happens in"],
                    reverse_property=["in administrative unit", "in the administrative region of", "in the administrative unit", "in the arrondissement of", "in the borough of", "in the city of", "in the commune of", "in the county of", "in the department of", "in the district of", "in the indian reservation of", "in the indian reserve of", "in the local government area of", "in the municipality of", "in the parish of", "in the prefecture of", "in the principal area of", "in the province of", "in the region of", "in the rural city of", "in the settlement of", "in the shire of", "in the state of", "in the territory of", "in the town of", "in the village of", "in the voivodeship of", "in the ward of"]
                  }]
                  #[wikidata_id="P131"]
                  #[string_values="org.wikidata:city_located_in_the_administrative_territorial_entity"],
                  out located_in_or_next_to_body_of_water: Array(String)
                  #_[canonical={
                    default="passive_verb",
                    passive_verb=["located in or next to body of water", "located next to body of water", "located on body of water", "on", "on", "on", "on"],
                    base=["bays", "lakes", "seas", "body of water", "loc (water)", "next to lakes", "oceans", "on bays", "on harbour", "on lakes", "on rivers"],
                    reverse_property=["on coast of", "# on coast", "# 's on coast", "on shore of", "# on shore", "# 's on shore", "on the coast of", "# on the coast", "# 's on the coast", "on the shore of", "# on the shore", "# 's on the shore"]
                  }]
                  #[wikidata_id="P206"]
                  #[string_values="org.wikidata:city_located_in_or_next_to_body_of_water"],
                  out coordinate_location: Location
                  #_[canonical={
                    default="property",
                    base=["coordinate location", "position", "location", "co-ordinate location", "coordinate location", "geo", "geographic coordinate", "geographical coordinates", "gps coordinate", "gps coordinates", "gps location", "latitude", "location on earth", "location on map", "longitude", "point on a map", "point on earth", "point on the globe"],
                    passive_verb=["geolocation", "co-ords", "coords", "geocoordinates", "geotag", "gps", "gps co-ordinate", "gps co-ordinates", "wgs 84", "wgs-84", "wgs84"],
                    verb=["co-ordinates", "coordinates"]
                  }]
                  #[wikidata_id="P625"],
                  out head_of_government: Entity(org.wikidata:human)
                  #_[canonical={
                    default="property",
                    base=["head of government", "president", "chancellor", "mayor", "prime minister", "governor", "premier", "first minister", "executive power headed by", "government headed by", "head of national government"]
                  }]
                  #[wikidata_id="P6"],
                  out population: Number
                  #_[canonical={
                    default="property",
                    base=["population", "human population", "inhabitants"]
                  }]
                  #[wikidata_id="P1082"],
                  out water_as_percent_of_area: Number
                  #_[canonical={
                    default="property",
                    base=["water as percent of area", "percent of area that is water"],
                    passive_verb=["h₂ o%"]
                  }]
                  #[wikidata_id="P2927"],
                  out elevation_above_sea_level: Measure(m)
                  #_[canonical={
                    default="property",
                    base=["elevation above sea level", "altitude", "height", "elevation", "elevation above mean sea level"],
                    passive_verb=["masl", "amsl", "easl", "mamsl"]
                  }]
                  #[wikidata_id="P2044"],
                  out located_in_time_zone: String
                  #_[canonical={
                    default="passive_verb",
                    passive_verb=["located in time zone", "timezone", "tz"],
                    base=["time zone", "time"]
                  }]
                  #[wikidata_id="P421"]
                  #[string_values="org.wikidata:city_located_in_time_zone"],
                  out twinned_administrative_body: Array(Entity(org.wikidata:city))
                  #_[canonical={
                    default="passive_verb",
                    passive_verb=["twinned administrative bodies"],
                    base=["twin towns", "partner cities", "partner towns", "sister cities", "sister towns", "twin cities", "twin cities"]
                  }]
                  #[wikidata_id="P190"],
                  out shares_border_with: Array(Entity(org.wikidata:city))
                  #_[canonical={
                    default="property",
                    base=["shares border with", "borders", "borders"],
                    passive_verb=["adjacent to", "bordered by", "next to"]
                  }]
                  #[wikidata_id="P47"],
                  out area: Measure(m2)
                  #_[canonical={
                    default="property",
                    base=["area", "size", "surface", "surface area", "acreage", "total area"]
                  }]
                  #[wikidata_id="P2046"],
                  out postal_code: String
                  #_[canonical={
                    default="property",
                    base=["postal code", "pin code", "post code", "postal index number", "zip code"],
                    passive_verb=["postcode", "zip+4", "zipcode"]
                  }]
                  #[wikidata_id="P281"]
                  #[string_values="org.wikidata:city_postal_code"],
                  out official_website: Entity(tt:url)
                  #_[canonical={
                    default="property",
                    base=["official website", "site", "web site", "home page", "home page (official)", "homepage (official)", "official homepage", "official page", "official site", "official url", "official web site", "url (official)", "url official", "web address", "website (official)", "www site (official)", "site (official)", "site official", "website official"],
                    passive_verb=["website", "homepage"]
                  }]
                  #[wikidata_id="P856"],
                  out flag_image: Array(Entity(tt:picture))
                  #_[canonical={
                    default="property",
                    base=["flag images", "image flags", "image of flags"]
                  }]
                  #[wikidata_id="P41"],
                  out number_of_households: Number
                  #_[canonical={
                    default="property",
                    base=["number of households", "dwellings", "households"]
                  }]
                  #[wikidata_id="P1538"],
                  out image: Array(Entity(tt:picture))
                  #_[canonical={
                    default="property",
                    base=["images", "graphs", "illustrations", "screen capture", "still", "portraits", "photos", "pictures", "commons images", "image capture", "image of exterior", "image on commons", "image on wikimedia commons"],
                    passive_verb=["screenshot", "drawing", "img"]
                  }]
                  #[wikidata_id="P18"],
                  out highest_point: String
                  #_[canonical={
                    default="property",
                    base=["highest point", "summit", "pinnacle", "highest peak", "zenith", "elevation of highest point"],
                    passive_verb=["extreme point highest"]
                  }]
                  #[wikidata_id="P610"]
                  #[string_values="org.wikidata:city_highest_point"],
                  out language_used: Entity(tt:iso_lang_code)
                  #_[canonical={
                    default="property",
                    base=["language used", "languages used"],
                    passive_verb=["working language", "working languages"]
                  }]
                  #[wikidata_id="P2936"])
  #_[canonical="city"]
  #_[confirmation="city"]
  #[wikidata_subject="Q515"]
  #[required_properties=[]]
  #[handle_thingtalk=true]
  #[minimal_projection=["id"]];
}

class @org.schema {
  list query thing(out name: String,
                   out description: String,
                   out image: Entity(tt:picture));

  list query organization extends thing(out address: {
                                          addressCountry: Entity(tt:country) #_[canonical="country"],
                                          addressRegion: Entity(tt:us_state) #_[canonical="state"],
                                          postalCode: String #[genie=false],
                                          streetAddress: String #_[canonical="street"],
                                          addressLocality: String #_[canonical="city"] #[string_values="org.schema:cities"]
                                        },
                                        out aggregateRating: {
                                          ratingValue: Number #_[canonical="rating"],
                                          reviewCount: Number #_[canonical="number of review"]
                                        },
                                        out review: Array({
                                          reviewRating: {
                                            ratingValue: Number #_[canonical="rating"]
                                          },
                                          datePublished: Date,
                                          description: String,
                                          author: String
                                        }),
                                        out telephone: Entity(tt:phone_number),
                                        out brand: {
                                           name: String #_[canonical="brand"]
                                        });

  list query place extends thing(out address: {
                                   addressCountry: Entity(tt:country) #_[canonical="country"],
                                   addressRegion: Entity(tt:us_state) #_[canonical="state"],
                                   postalCode: String #[genie=false],
                                   streetAddress: String #_[canonical="street"],
                                   addressLocality: String #_[canonical="city"] #[string_values="org.schema:cities"]
                                 },
                                 out geo: Location #[genie=false])
  #_[confirmation="places"];

  list query localBusiness extends organization, place(out priceRange: String #[genie=false],
                                                       out openingHours: String #[genie=false]);

  list query foodEstablishment extends localBusiness(out serveCuisine: String #[string_values="org.schema:cuisine"]);
  list query restaurant extends foodEstablishment(out name: String #[string_values="com.yelp:restaurants"]);

  list query lodgingBusiness extends localBusiness(out amenityFeature: Array({
                                                     name: String #_[canonical="amenity"] #[string_values="org.schema:hotel_amenity"]
                                                   }),
                                                   out checkinTime: Time,
                                                   out checkoutTime: Time);
  list query hotel extends lodgingBusiness();

}

class @org.schema.full {
  list query Thing(out id: Entity(org.schema:Thing),
                   out sameAs: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website."],
                   out url: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="URL of the item."],
                   out alternateName: Array(String) #[org_schema_type="Text"] #[org_schema_comment="An alias for the item."],
                   out image: Array(Entity(tt:url)) #[org_schema_type="URL"] #[org_schema_comment="An image of the item. This can be a <a class=\"localLink\" href=\"http://schema.org/URL\">URL</a> or a fully described <a class=\"localLink\" href=\"http://schema.org/ImageObject\">ImageObject</a>."],
                   out additionalType: Array(Entity(tt:url)) #[org_schema_type="URL"] #[org_schema_comment="An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the 'typeof' attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally."],
                   out name: String #[org_schema_type="Text"] #[org_schema_comment="The name of the item."],
                   out identifier: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="The identifier property represents any kind of identifier for any kind of <a class=\"localLink\" href=\"http://schema.org/Thing\">Thing</a>, such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See <a href=\"/docs/datamodel.html#identifierBg\">background notes</a> for more details."],
                   out subjectOf: Array(Entity(org.schema:CreativeWork)) #[org_schema_type="CreativeWork"] #[org_schema_comment="A CreativeWork or Event about this Thing."],
                   out mainEntityOfPage: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See <a href=\"/docs/datamodel.html#mainEntityBackground\">background notes</a> for details."],
                   out potentialAction: Entity(org.schema:Action) #[org_schema_type="Action"] #[org_schema_comment="Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role."],
                   out description: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A description of the item."],
                   out disambiguatingDescription: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation."])
  #[org_schema_comment="The most generic type of item."];

  list query CreativeWork(out id: Entity(org.schema:CreativeWork),
                          out about: Entity(org.schema:Thing) #[org_schema_type="Thing"] #[org_schema_comment="The subject matter of the content."],
                          out educationalAlignment: Array(Entity(org.schema:AlignmentObject)) #[org_schema_type="AlignmentObject"] #[org_schema_comment="An alignment to an established educational framework."],
                          out associatedMedia: Array(Entity(org.schema:MediaObject)) #[org_schema_type="MediaObject"] #[org_schema_comment="A media object that encodes this CreativeWork. This property is a synonym for encoding."],
                          out funder: Array(Entity(org.schema:Organization)) #[org_schema_type="Organization"] #[org_schema_comment="A person or organization that supports (sponsors) something through some kind of financial contribution."],
                          out audio: Array(Entity(org.schema:Clip)) #[org_schema_type="Clip"] #[org_schema_comment="An embedded audio object."],
                          out workExample: Entity(org.schema:CreativeWork) #[org_schema_type="CreativeWork"] #[org_schema_comment="Example/instance/realization/derivation of the concept of this creative work. eg. The paperback edition, first edition, or eBook."],
                          out provider: Entity(org.schema:Person) #[org_schema_type="Person"] #[org_schema_comment="The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller."],
                          out encoding: Array(Entity(org.schema:MediaObject)) #[org_schema_type="MediaObject"] #[org_schema_comment="A media object that encodes this CreativeWork. This property is a synonym for associatedMedia."],
                          out interactivityType: String #[org_schema_type="Text"] #[org_schema_comment="The predominant mode of learning supported by the learning resource. Acceptable values are 'active', 'expositive', or 'mixed'."],
                          out character: Entity(org.schema:Person) #[org_schema_type="Person"] #[org_schema_comment="Fictional person connected with a creative work."],
                          out audience: Enum(Researcher) #[org_schema_type="Audience"] #[org_schema_comment="An intended audience, i.e. a group for whom something was created."],
                          out sourceOrganization: Entity(org.schema:Organization) #[org_schema_type="Organization"] #[org_schema_comment="The Organization on whose behalf the creator was working."],
                          out isPartOf: Entity(org.schema:CreativeWork) #[org_schema_type="CreativeWork"] #[org_schema_comment="Indicates an item or CreativeWork that this item, or CreativeWork (in some sense), is part of."],
                          out video: Array(Entity(org.schema:Clip)) #[org_schema_type="Clip"] #[org_schema_comment="An embedded video object."],
                          out publication: Array(Entity(org.schema:PublicationEvent)) #[org_schema_type="PublicationEvent"] #[org_schema_comment="A publication event associated with the item."],
                          out text: String #[org_schema_type="Text"] #[org_schema_comment="The textual content of this CreativeWork."],
                          out expires: Date #[org_schema_type="Date"] #[org_schema_comment="Date the content expires and is no longer useful or available. For example a <a class=\"localLink\" href=\"http://schema.org/VideoObject\">VideoObject</a> or <a class=\"localLink\" href=\"http://schema.org/NewsArticle\">NewsArticle</a> whose availability or relevance is time-limited, or a <a class=\"localLink\" href=\"http://schema.org/ClaimReview\">ClaimReview</a> fact check whose publisher wants to indicate that it may no longer be relevant (or helpful to highlight) after some date."],
                          out contributor: Array(Entity(org.schema:Organization)) #[org_schema_type="Organization"] #[org_schema_comment="A secondary contributor to the CreativeWork or Event."],
                          out publisher: Entity(org.schema:Person) #[org_schema_type="Person"] #[org_schema_comment="The publisher of the creative work."],
                          out typicalAgeRange: String #[org_schema_type="Text"] #[org_schema_comment="The typical expected age range, e.g. '7-9', '11-'."],
                          out releasedEvent: Entity(org.schema:PublicationEvent) #[org_schema_type="PublicationEvent"] #[org_schema_comment="The place and time the release was issued, expressed as a PublicationEvent."],
                          out contentLocation: Entity(org.schema:Place) #[org_schema_type="Place"] #[org_schema_comment="The location depicted or described in the content. For example, the location in a photograph or painting."],
                          out schemaVersion: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="Indicates (by URL or string) a particular version of a schema used in some CreativeWork. For example, a document could declare a schemaVersion using an URL such as http://schema.org/version/2.0/ if precise indication of schema version was required by some application."],
                          out accessibilityFeature: String #[org_schema_type="Text"] #[org_schema_comment="Content features of the resource, such as accessible media, alternatives and supported enhancements for accessibility (<a href=\"http://www.w3.org/wiki/WebSchemas/Accessibility\">WebSchemas wiki lists possible values</a>)."],
                          out aggregateRating: {
                            itemReviewed: Entity(org.schema:Thing),
                            ratingValue: Number,
                            bestRating: Number,
                            author: Entity(org.schema:Person),
                            worstRating: Number,
                            reviewAspect: String
                          } #[org_schema_type="AggregateRating"] #[org_schema_comment="The overall rating, based on a collection of reviews or ratings, of the item."],
                          out alternativeHeadline: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A secondary title of the CreativeWork."],
                          out locationCreated: Entity(org.schema:Place) #[org_schema_type="Place"] #[org_schema_comment="The location where the CreativeWork was created, which may not be the same as the location depicted in the CreativeWork."],
                          out accessModeSufficient: Array(Entity(org.schema:ItemList)) #[org_schema_type="ItemList"] #[org_schema_comment="A list of single or combined accessModes that are sufficient to understand all the intellectual content of a resource. Expected values include:  auditory, tactile, textual, visual."],
                          out temporalCoverage: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="The temporalCoverage of a CreativeWork indicates the period that the content applies to, i.e. that it describes, either as a DateTime or as a textual string indicating a time period in <a href=\"https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\">ISO 8601 time interval format</a>. In\n      the case of a Dataset it will typically indicate the relevant time period in a precise notation (e.g. for a 2011 census dataset, the year 2011 would be written \"2011/2012\"). Other forms of content e.g. ScholarlyArticle, Book, TVSeries or TVEpisode may indicate their temporalCoverage in broader terms - textually or via well-known URL.\n      Written works such as books may sometimes have precise temporal coverage too, e.g. a work set in 1939 - 1945 can be indicated in ISO 8601 interval format format via \"1939/1945\".<br/><br/>\n\nOpen-ended date ranges can be written with \"..\" in place of the end date. For example, \"2015-11/..\" indicates a range beginning in November 2015 and with no specified final date. This is tentative and might be updated in future when ISO 8601 is officially updated."],
                          out accountablePerson: Entity(org.schema:Person) #[org_schema_type="Person"] #[org_schema_comment="Specifies the Person that is legally accountable for the CreativeWork."],
                          out spatialCoverage: Entity(org.schema:Place) #[org_schema_type="Place"] #[org_schema_comment="The spatialCoverage of a CreativeWork indicates the place(s) which are the focus of the content. It is a subproperty of\n      contentLocation intended primarily for more technical and detailed materials. For example with a Dataset, it indicates\n      areas that the dataset describes: a dataset of New York weather would have spatialCoverage which was the place: the state of New York."],
                          out accessibilitySummary: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A human-readable summary of specific accessibility features or deficiencies, consistent with the other accessibility metadata but expressing subtleties such as \"short descriptions are present but long descriptions will be needed for non-visual users\" or \"short descriptions are present and no long descriptions are needed.\""],
                          out offers: Array(Entity(org.schema:Offer)) #[org_schema_type="Offer"] #[org_schema_comment="An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event."],
                          out editor: Entity(org.schema:Person) #[org_schema_type="Person"] #[org_schema_comment="Specifies the Person who edited the CreativeWork."],
                          out discussionUrl: Array(Entity(tt:url)) #[org_schema_type="URL"] #[org_schema_comment="A link to the page containing the comments of the CreativeWork."],
                          out award: Array(String) #[org_schema_type="Text"] #[org_schema_comment="An award won by or for this item."],
                          out copyrightHolder: Entity(org.schema:Person) #[org_schema_type="Person"] #[org_schema_comment="The party holding the legal copyright to the CreativeWork."],
                          out accessibilityHazard: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A characteristic of the described resource that is physiologically dangerous to some users. Related to WCAG 2.0 guideline 2.3 (<a href=\"http://www.w3.org/wiki/WebSchemas/Accessibility\">WebSchemas wiki lists possible values</a>)."],
                          out copyrightYear: Number #[org_schema_type="Number"] #[org_schema_comment="The year during which the claimed copyright for the CreativeWork was first asserted."],
                          out recordedAt: Entity(org.schema:Event) #[org_schema_type="Event"] #[org_schema_comment="The Event where the CreativeWork was recorded. The CreativeWork may capture all or part of the event."],
                          out spatial: Entity(org.schema:Place) #[org_schema_type="Place"] #[org_schema_comment="The \"spatial\" property can be used in cases when more specific properties\n(e.g. <a class=\"localLink\" href=\"http://schema.org/locationCreated\">locationCreated</a>, <a class=\"localLink\" href=\"http://schema.org/spatialCoverage\">spatialCoverage</a>, <a class=\"localLink\" href=\"http://schema.org/contentLocation\">contentLocation</a>) are not known to be appropriate."],
                          out inLanguage: String #[org_schema_type="Text"] #[org_schema_comment="The language of the content or performance or used in an action. Please use one of the language codes from the <a href=\"http://tools.ietf.org/html/bcp47\">IETF BCP 47 standard</a>. See also <a class=\"localLink\" href=\"http://schema.org/availableLanguage\">availableLanguage</a>."],
                          out temporal: Date #[org_schema_type="DateTime"] #[org_schema_comment="The \"temporal\" property can be used in cases where more specific properties\n(e.g. <a class=\"localLink\" href=\"http://schema.org/temporalCoverage\">temporalCoverage</a>, <a class=\"localLink\" href=\"http://schema.org/dateCreated\">dateCreated</a>, <a class=\"localLink\" href=\"http://schema.org/dateModified\">dateModified</a>, <a class=\"localLink\" href=\"http://schema.org/datePublished\">datePublished</a>) are not known to be appropriate."],
                          out accessibilityAPI: String #[org_schema_type="Text"] #[org_schema_comment="Indicates that the resource is compatible with the referenced accessibility API (<a href=\"http://www.w3.org/wiki/WebSchemas/Accessibility\">WebSchemas wiki lists possible values</a>)."],
                          out interactionStatistic: {
                            interactionService: Entity(org.schema:SoftwareApplication),
                            interactionType: Entity(org.schema:Action)
                          } #[org_schema_type="InteractionCounter"] #[org_schema_comment="The number of interactions for the CreativeWork using the WebSite or SoftwareApplication. The most specific child type of InteractionCounter should be used."],
                          out contentRating: {
                            ratingValue: Number,
                            bestRating: Number,
                            author: Entity(org.schema:Person),
                            worstRating: Number,
                            reviewAspect: String
                          } #[org_schema_type="Rating"] #[org_schema_comment="Official rating of a piece of content&#x2014;for example,'MPAA PG-13'."],
                          out learningResourceType: String #[org_schema_type="Text"] #[org_schema_comment="The predominant type or kind characterizing the learning resource. For example, 'presentation', 'handout'."],
                          out accessMode: String #[org_schema_type="Text"] #[org_schema_comment="The human sensory perceptual system or cognitive faculty through which a person may process or perceive information. Expected values include: auditory, tactile, textual, visual, colorDependent, chartOnVisual, chemOnVisual, diagramOnVisual, mathOnVisual, musicOnVisual, textOnVisual."],
                          out material: Array(Entity(tt:url)) #[org_schema_type="URL"] #[org_schema_comment="A material that something is made from, e.g. leather, wool, cotton, paper."],
                          out isFamilyFriendly: Boolean #[org_schema_type="Boolean"] #[org_schema_comment="Indicates whether this content is family friendly."],
                          out exampleOfWork: Array(Entity(org.schema:CreativeWork)) #[org_schema_type="CreativeWork"] #[org_schema_comment="A creative work that this work is an example/instance/realization/derivation of."],
                          out version: Number #[org_schema_type="Number"] #[org_schema_comment="The version of the CreativeWork embodied by a specified resource."],
                          out dateModified: Date #[org_schema_type="DateTime"] #[org_schema_comment="The date on which the CreativeWork was most recently modified or when the item's entry was modified within a DataFeed."],
                          out keywords: String #[org_schema_type="Text"] #[org_schema_comment="Keywords or tags used to describe this content. Multiple entries in a keywords list are typically delimited by commas."],
                          out genre: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="Genre of the creative work, broadcast channel or group."],
                          out mainEntity: Entity(org.schema:Thing) #[org_schema_type="Thing"] #[org_schema_comment="Indicates the primary entity described in some page or other CreativeWork."],
                          out author: Entity(org.schema:Person) #[org_schema_type="Person"] #[org_schema_comment="The author of this content or rating. Please note that author is special in that HTML 5 provides a special mechanism for indicating authorship via the rel tag. That is equivalent to this and may be used interchangeably."],
                          out timeRequired: Measure(ms) #[org_schema_type="Duration"] #[org_schema_comment="Approximate or typical time it takes to work with or through this learning resource for the typical intended target audience, e.g. 'PT30M', 'PT1H25M'."],
                          out translator: Entity(org.schema:Person) #[org_schema_type="Person"] #[org_schema_comment="Organization or person who adapts a creative work to different languages, regional differences and technical requirements of a target market, or that translates during some event."],
                          out thumbnailUrl: Array(Entity(tt:url)) #[org_schema_type="URL"] #[org_schema_comment="A thumbnail image relevant to the Thing."],
                          out hasPart: Entity(org.schema:CreativeWork) #[org_schema_type="CreativeWork"] #[org_schema_comment="Indicates an item or CreativeWork that is part of this item, or CreativeWork (in some sense)."],
                          out comment: Entity(org.schema:Comment) #[org_schema_type="Comment"] #[org_schema_comment="Comments, typically from users."],
                          out encodingFormat: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="Media type typically expressed using a MIME format (see <a href=\"http://www.iana.org/assignments/media-types/media-types.xhtml\">IANA site</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MDN reference</a>) e.g. application/zip for a SoftwareApplication binary, audio/mpeg for .mp3 etc.).<br/><br/>\n\nIn cases where a <a class=\"localLink\" href=\"http://schema.org/CreativeWork\">CreativeWork</a> has several media type representations, <a class=\"localLink\" href=\"http://schema.org/encoding\">encoding</a> can be used to indicate each <a class=\"localLink\" href=\"http://schema.org/MediaObject\">MediaObject</a> alongside particular <a class=\"localLink\" href=\"http://schema.org/encodingFormat\">encodingFormat</a> information.<br/><br/>\n\nUnregistered or niche encoding and file formats can be indicated instead via the most appropriate URL, e.g. defining Web page or a Wikipedia/Wikidata entry."],
                          out review: Array(Entity(org.schema:Review)) #[org_schema_type="Review"] #[org_schema_comment="A review of the item."],
                          out license: Array(Entity(tt:url)) #[org_schema_type="URL"] #[org_schema_comment="A license document that applies to this content, typically indicated by URL."],
                          out accessibilityControl: String #[org_schema_type="Text"] #[org_schema_comment="Identifies input methods that are sufficient to fully control the described resource (<a href=\"http://www.w3.org/wiki/WebSchemas/Accessibility\">WebSchemas wiki lists possible values</a>)."],
                          out isBasedOn: Array(Entity(tt:url)) #[org_schema_type="URL"] #[org_schema_comment="A resource from which this work is derived or from which it is a modification or adaption."],
                          out creator: Entity(org.schema:Organization) #[org_schema_type="Organization"] #[org_schema_comment="The creator/author of this CreativeWork. This is the same as the Author property for CreativeWork."],
                          out publishingPrinciples: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="The publishingPrinciples property indicates (typically via <a class=\"localLink\" href=\"http://schema.org/URL\">URL</a>) a document describing the editorial principles of an <a class=\"localLink\" href=\"http://schema.org/Organization\">Organization</a> (or individual e.g. a <a class=\"localLink\" href=\"http://schema.org/Person\">Person</a> writing a blog) that relate to their activities as a publisher, e.g. ethics or diversity policies. When applied to a <a class=\"localLink\" href=\"http://schema.org/CreativeWork\">CreativeWork</a> (e.g. <a class=\"localLink\" href=\"http://schema.org/NewsArticle\">NewsArticle</a>) the principles are those of the party primarily responsible for the creation of the <a class=\"localLink\" href=\"http://schema.org/CreativeWork\">CreativeWork</a>.<br/><br/>\n\nWhile such policies are most typically expressed in natural language, sometimes related information (e.g. indicating a <a class=\"localLink\" href=\"http://schema.org/funder\">funder</a>) can be expressed using schema.org terminology."],
                          out sponsor: Array(Entity(org.schema:Person)) #[org_schema_type="Person"] #[org_schema_comment="A person or organization that supports a thing through a pledge, promise, or financial contribution. e.g. a sponsor of a Medical Study or a corporate sponsor of an event."],
                          out producer: Entity(org.schema:Organization) #[org_schema_type="Organization"] #[org_schema_comment="The person or organization who produced the work (e.g. music album, movie, tv/radio series etc.)."],
                          out mentions: Entity(org.schema:Thing) #[org_schema_type="Thing"] #[org_schema_comment="Indicates that the CreativeWork contains a reference to, but is not necessarily about a concept."],
                          out dateCreated: Date #[org_schema_type="DateTime"] #[org_schema_comment="The date on which the CreativeWork was created or the item was added to a DataFeed."],
                          out educationalUse: String #[org_schema_type="Text"] #[org_schema_comment="The purpose of a work in the context of education; for example, 'assignment', 'group work'."],
                          out datePublished: Date #[org_schema_type="Date"] #[org_schema_comment="Date of first broadcast/publication."],
                          out isAccessibleForFree: Boolean #[org_schema_type="Boolean"] #[org_schema_comment="A flag to signal that the item, event, or place is accessible for free."],
                          out headline: String #[org_schema_type="Text"] #[org_schema_comment="Headline of the article."],
                          out citation: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A citation or reference to another creative work, such as another publication, web page, scholarly article, etc."])
  #[org_schema_comment="The most generic kind of creative work, including books, movies, photographs, software programs, etc."];

  list query SoftwareApplication(out id: Entity(org.schema:SoftwareApplication),
                                 out downloadUrl: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="If the file can be downloaded, URL to download the binary."],
                                 out softwareRequirements: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="Component dependency requirements for application. This includes runtime environments and shared libraries that are not included in the application distribution package, but required to run the application (Examples: DirectX, Java or .NET runtime)."],
                                 out permissions: String #[org_schema_type="Text"] #[org_schema_comment="Permission(s) required to run the app (for example, a mobile app may require full internet access or may run only on wifi)."],
                                 out processorRequirements: String #[org_schema_type="Text"] #[org_schema_comment="Processor architecture required to run the application (e.g. IA64)."],
                                 out availableOnDevice: String #[org_schema_type="Text"] #[org_schema_comment="Device required to run the application. Used in cases where a specific make/model is required to run the application."],
                                 out featureList: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="Features or modules provided by this application (and possibly required by other applications)."],
                                 out applicationSubCategory: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="Subcategory of the application, e.g. 'Arcade Game'."],
                                 out applicationCategory: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="Type of software application, e.g. 'Game, Multimedia'."],
                                 out softwareVersion: String #[org_schema_type="Text"] #[org_schema_comment="Version of the software instance."],
                                 out storageRequirements: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="Storage requirements (free space required)."],
                                 out applicationSuite: String #[org_schema_type="Text"] #[org_schema_comment="The name of the application suite to which the application belongs (e.g. Excel belongs to Office)."],
                                 out memoryRequirements: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="Minimum memory requirements."],
                                 out screenshot: Array(Entity(tt:url)) #[org_schema_type="URL"] #[org_schema_comment="A link to a screenshot image of the app."],
                                 out countriesSupported: String #[org_schema_type="Text"] #[org_schema_comment="Countries for which the application is supported. You can also provide the two-letter ISO 3166-1 alpha-2 country code."],
                                 out softwareHelp: Entity(org.schema:CreativeWork) #[org_schema_type="CreativeWork"] #[org_schema_comment="Software application help."],
                                 out softwareAddOn: Entity(org.schema:SoftwareApplication) #[org_schema_type="SoftwareApplication"] #[org_schema_comment="Additional content for a software application."],
                                 out releaseNotes: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="Description of what changed in this version."],
                                 out supportingData: Entity(org.schema:DataFeed) #[org_schema_type="DataFeed"] #[org_schema_comment="Supporting data for a SoftwareApplication."],
                                 out countriesNotSupported: String #[org_schema_type="Text"] #[org_schema_comment="Countries for which the application is not supported. You can also provide the two-letter ISO 3166-1 alpha-2 country code."],
                                 out operatingSystem: String #[org_schema_type="Text"] #[org_schema_comment="Operating systems supported (Windows 7, OSX 10.6, Android 1.6)."],
                                 out fileSize: String #[org_schema_type="Text"] #[org_schema_comment="Size of the application / package (e.g. 18MB). In the absence of a unit (MB, KB etc.), KB will be assumed."],
                                 out installUrl: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="URL at which the app may be installed, if different from the URL of the item."])
  #[org_schema_comment="A software application."];

  list query Event(out id: Entity(org.schema:Event),
                   out about: Entity(org.schema:Thing) #[org_schema_type="Thing"] #[org_schema_comment="The subject matter of the content."],
                   out funder: Array(Entity(org.schema:Organization)) #[org_schema_type="Organization"] #[org_schema_comment="A person or organization that supports (sponsors) something through some kind of financial contribution."],
                   out subEvent: Array(Entity(org.schema:Event)) #[org_schema_type="Event"] #[org_schema_comment="An Event that is part of this event. For example, a conference event includes many presentations, each of which is a subEvent of the conference."],
                   out workFeatured: Array(Entity(org.schema:CreativeWork)) #[org_schema_type="CreativeWork"] #[org_schema_comment="A work featured in some event, e.g. exhibited in an ExhibitionEvent.\n       Specific subproperties are available for workPerformed (e.g. a play), or a workPresented (a Movie at a ScreeningEvent)."],
                   out audience: Enum(Researcher) #[org_schema_type="Audience"] #[org_schema_comment="An intended audience, i.e. a group for whom something was created."],
                   out actor: Array(Entity(org.schema:Person)) #[org_schema_type="Person"] #[org_schema_comment="An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip."],
                   out endDate: Date #[org_schema_type="DateTime"] #[org_schema_comment="The end date and time of the item (in <a href=\"http://en.wikipedia.org/wiki/ISO_8601\">ISO 8601 date format</a>)."],
                   out doorTime: Date #[org_schema_type="DateTime"] #[org_schema_comment="The time admission will commence."],
                   out contributor: Array(Entity(org.schema:Organization)) #[org_schema_type="Organization"] #[org_schema_comment="A secondary contributor to the CreativeWork or Event."],
                   out typicalAgeRange: String #[org_schema_type="Text"] #[org_schema_comment="The typical expected age range, e.g. '7-9', '11-'."],
                   out organizer: Array(Entity(org.schema:Organization)) #[org_schema_type="Organization"] #[org_schema_comment="An organizer of an Event."],
                   out aggregateRating: {
                     itemReviewed: Entity(org.schema:Thing),
                     ratingValue: Number,
                     bestRating: Number,
                     author: Entity(org.schema:Person),
                     worstRating: Number,
                     reviewAspect: String
                   } #[org_schema_type="AggregateRating"] #[org_schema_comment="The overall rating, based on a collection of reviews or ratings, of the item."],
                   out offers: Array(Entity(org.schema:Offer)) #[org_schema_type="Offer"] #[org_schema_comment="An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event."],
                   out inLanguage: String #[org_schema_type="Text"] #[org_schema_comment="The language of the content or performance or used in an action. Please use one of the language codes from the <a href=\"http://tools.ietf.org/html/bcp47\">IETF BCP 47 standard</a>. See also <a class=\"localLink\" href=\"http://schema.org/availableLanguage\">availableLanguage</a>."],
                   out attendee: Array(Entity(org.schema:Organization)) #[org_schema_type="Organization"] #[org_schema_comment="A person or organization attending the event."],
                   out workPerformed: Array(Entity(org.schema:CreativeWork)) #[org_schema_type="CreativeWork"] #[org_schema_comment="A work performed in some event, for example a play performed in a TheaterEvent."],
                   out eventStatus: Enum(EventPostponed,EventRescheduled,EventScheduled,EventCancelled) #[org_schema_type="EventStatusType"] #[org_schema_comment="An eventStatus of an event represents its status; particularly useful when an event is cancelled or rescheduled."],
                   out startDate: Date #[org_schema_type="DateTime"] #[org_schema_comment="The start date and time of the item (in <a href=\"http://en.wikipedia.org/wiki/ISO_8601\">ISO 8601 date format</a>)."],
                   out director: Array(Entity(org.schema:Person)) #[org_schema_type="Person"] #[org_schema_comment="A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip."],
                   out superEvent: Array(Entity(org.schema:Event)) #[org_schema_type="Event"] #[org_schema_comment="An event that this event is a part of. For example, a collection of individual music performances might each have a music festival as their superEvent."],
                   out duration: Measure(ms) #[org_schema_type="Duration"] #[org_schema_comment="The duration of the item (movie, audio recording, event, etc.) in <a href=\"http://en.wikipedia.org/wiki/ISO_8601\">ISO 8601 date format</a>."],
                   out translator: Entity(org.schema:Person) #[org_schema_type="Person"] #[org_schema_comment="Organization or person who adapts a creative work to different languages, regional differences and technical requirements of a target market, or that translates during some event."],
                   out previousStartDate: Date #[org_schema_type="Date"] #[org_schema_comment="Used in conjunction with eventStatus for rescheduled or cancelled events. This property contains the previously scheduled start date. For rescheduled events, the startDate property should be used for the newly scheduled start date. In the (rare) case of an event that has been postponed and rescheduled multiple times, this field may be repeated."],
                   out review: Array(Entity(org.schema:Review)) #[org_schema_type="Review"] #[org_schema_comment="A review of the item."],
                   out sponsor: Array(Entity(org.schema:Person)) #[org_schema_type="Person"] #[org_schema_comment="A person or organization that supports a thing through a pledge, promise, or financial contribution. e.g. a sponsor of a Medical Study or a corporate sponsor of an event."],
                   out location: {
                     postOfficeBoxNumber: String,
                     streetAddress: String,
                     addressCountry: String,
                     addressRegion: String,
                     postalCode: String,
                     addressLocality: String,
                     areaServed: String,
                     faxNumber: String,
                     hoursAvailable: {
                       validFrom: Date,
                       validThrough: Date,
                       opens: Time,
                       closes: Time,
                       dayOfWeek: Enum(Wednesday,Sunday,PublicHolidays,Monday,Friday,Tuesday,Saturday,Thursday)
                     },
                     contactOption: Enum(HearingImpairedSupported,TollFree),
                     availableLanguage: Array(String),
                     telephone: Entity(tt:phone_number),
                     email: String,
                     contactType: Array(String),
                     productSupported: String
                   } #[org_schema_type="PostalAddress"] #[org_schema_comment="The location of for example where the event is happening, an organization is located, or where an action takes place."],
                   out recordedIn: Entity(org.schema:CreativeWork) #[org_schema_type="CreativeWork"] #[org_schema_comment="The CreativeWork that captured all or part of this Event."],
                   out composer: Entity(org.schema:Organization) #[org_schema_type="Organization"] #[org_schema_comment="The person or organization who wrote a composition, or who is the composer of a work performed at some event."],
                   out isAccessibleForFree: Boolean #[org_schema_type="Boolean"] #[org_schema_comment="A flag to signal that the item, event, or place is accessible for free."],
                   out performer: Array(Entity(org.schema:Organization)) #[org_schema_type="Organization"] #[org_schema_comment="A performer at the event&#x2014;for example, a presenter, musician, musical group or actor."])
  #[org_schema_comment="An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the <a class=\"localLink\" href=\"http://schema.org/offers\">offers</a> property. Repeated events may be structured as separate Event objects."];

  list query UserInteraction(out id: Entity(org.schema:UserInteraction))
  #[org_schema_comment="UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use <a class=\"localLink\" href=\"http://schema.org/Action\">Action</a>-based vocabulary, alongside types such as <a class=\"localLink\" href=\"http://schema.org/Comment\">Comment</a>."];

  list query UserLikes(out id: Entity(org.schema:UserLikes))
  #[org_schema_comment="UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use <a class=\"localLink\" href=\"http://schema.org/Action\">Action</a>-based vocabulary, alongside types such as <a class=\"localLink\" href=\"http://schema.org/Comment\">Comment</a>."];

  list query Place(out id: Entity(org.schema:Place),
                   out geoWithin: Entity(org.schema:GeospatialGeometry) #[org_schema_type="GeospatialGeometry"] #[org_schema_comment="Represents a relationship between two geometries (or the places they represent), relating a geometry to one that contains it, i.e. it is inside (i.e. within) its interior. As defined in <a href=\"https://en.wikipedia.org/wiki/DE-9IM\">DE-9IM</a>."],
                   out geoContains: Entity(org.schema:Place) #[org_schema_type="Place"] #[org_schema_comment="Represents a relationship between two geometries (or the places they represent), relating a containing geometry to a contained geometry. \"a contains b iff no points of b lie in the exterior of a, and at least one point of the interior of b lies in the interior of a\". As defined in <a href=\"https://en.wikipedia.org/wiki/DE-9IM\">DE-9IM</a>."],
                   out address: {
                     postOfficeBoxNumber: String,
                     streetAddress: String,
                     addressCountry: String,
                     addressRegion: String,
                     postalCode: String,
                     addressLocality: String,
                     areaServed: String,
                     faxNumber: String,
                     hoursAvailable: {
                       validFrom: Date,
                       validThrough: Date,
                       opens: Time,
                       closes: Time,
                       dayOfWeek: Enum(Wednesday,Sunday,PublicHolidays,Monday,Friday,Tuesday,Saturday,Thursday)
                     },
                     contactOption: Enum(HearingImpairedSupported,TollFree),
                     availableLanguage: Array(String),
                     telephone: Entity(tt:phone_number),
                     email: String,
                     contactType: Array(String),
                     productSupported: String
                   } #[org_schema_type="PostalAddress"] #[org_schema_comment="Physical address of the item."],
                   out openingHoursSpecification: {
                     validFrom: Date,
                     validThrough: Date,
                     opens: Time,
                     closes: Time,
                     dayOfWeek: Enum(Wednesday,Sunday,PublicHolidays,Monday,Friday,Tuesday,Saturday,Thursday)
                   } #[org_schema_type="OpeningHoursSpecification"] #[org_schema_comment="The opening hours of a certain place."],
                   out faxNumber: String #[org_schema_type="Text"] #[org_schema_comment="The fax number."],
                   out photo: Array(Entity(org.schema:Photograph)) #[org_schema_type="Photograph"] #[org_schema_comment="A photograph of this place."],
                   out containedInPlace: Entity(org.schema:Place) #[org_schema_type="Place"] #[org_schema_comment="The basic containment relation between a place and one that contains it."],
                   out geoOverlaps: Entity(org.schema:GeospatialGeometry) #[org_schema_type="GeospatialGeometry"] #[org_schema_comment="Represents a relationship between two geometries (or the places they represent), relating a geometry to another that geospatially overlaps it, i.e. they have some but not all points in common. As defined in <a href=\"https://en.wikipedia.org/wiki/DE-9IM\">DE-9IM</a>."],
                   out smokingAllowed: Boolean #[org_schema_type="Boolean"] #[org_schema_comment="Indicates whether it is allowed to smoke in the place, e.g. in the restaurant, hotel or hotel room."],
                   out globalLocationNumber: String #[org_schema_type="Text"] #[org_schema_comment="The <a href=\"http://www.gs1.org/gln\">Global Location Number</a> (GLN, sometimes also referred to as International Location Number or ILN) of the respective organization, person, or place. The GLN is a 13-digit number used to identify parties and physical locations."],
                   out geoCrosses: Entity(org.schema:Place) #[org_schema_type="Place"] #[org_schema_comment="Represents a relationship between two geometries (or the places they represent), relating a geometry to another that crosses it: \"a crosses b: they have some but not all interior points in common, and the dimension of the intersection is less than that of at least one of them\". As defined in <a href=\"https://en.wikipedia.org/wiki/DE-9IM\">DE-9IM</a>."],
                   out aggregateRating: {
                     itemReviewed: Entity(org.schema:Thing),
                     ratingValue: Number,
                     bestRating: Number,
                     author: Entity(org.schema:Person),
                     worstRating: Number,
                     reviewAspect: String
                   } #[org_schema_type="AggregateRating"] #[org_schema_comment="The overall rating, based on a collection of reviews or ratings, of the item."],
                   out branchCode: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A short textual code (also called \"store code\") that uniquely identifies a place of business. The code is typically assigned by the parentOrganization and used in structured URLs.<br/><br/>\n\nFor example, in the URL http://www.starbucks.co.uk/store-locator/etc/detail/3047 the code \"3047\" is a branchCode for a particular branch."],
                   out hasMap: Array(Entity(tt:url)) #[org_schema_type="URL"] #[org_schema_comment="A URL to a map of the place."],
                   out specialOpeningHoursSpecification: {
                     validFrom: Date,
                     validThrough: Date,
                     opens: Time,
                     closes: Time,
                     dayOfWeek: Enum(Wednesday,Sunday,PublicHolidays,Monday,Friday,Tuesday,Saturday,Thursday)
                   } #[org_schema_type="OpeningHoursSpecification"] #[org_schema_comment="The special opening hours of a certain place.<br/><br/>\n\nUse this to explicitly override general opening hours brought in scope by <a class=\"localLink\" href=\"http://schema.org/openingHoursSpecification\">openingHoursSpecification</a> or <a class=\"localLink\" href=\"http://schema.org/openingHours\">openingHours</a>."],
                   out amenityFeature: Array(Entity(org.schema:LocationFeatureSpecification)) #[org_schema_type="LocationFeatureSpecification"] #[org_schema_comment="An amenity feature (e.g. a characteristic or service) of the Accommodation. This generic property does not make a statement about whether the feature is included in an offer for the main accommodation or available at extra costs."],
                   out logo: Array(Entity(tt:url)) #[org_schema_type="URL"] #[org_schema_comment="An associated logo."],
                   out telephone: Entity(tt:phone_number) #[org_schema_type="Text"] #[org_schema_comment="The telephone number."],
                   out geo: Location #[org_schema_type="GeoCoordinates"] #[org_schema_comment="The geo coordinates of the place."],
                   out geoCovers: Entity(org.schema:Place) #[org_schema_type="Place"] #[org_schema_comment="Represents a relationship between two geometries (or the places they represent), relating a covering geometry to a covered geometry. \"Every point of b is a point of (the interior or boundary of) a\". As defined in <a href=\"https://en.wikipedia.org/wiki/DE-9IM\">DE-9IM</a>."],
                   out geoEquals: Entity(org.schema:Place) #[org_schema_type="Place"] #[org_schema_comment="Represents spatial relations in which two geometries (or the places they represent) are topologically equal, as defined in <a href=\"https://en.wikipedia.org/wiki/DE-9IM\">DE-9IM</a>. \"Two geometries are topologically equal if their interiors intersect and no part of the interior or boundary of one geometry intersects the exterior of the other\" (a symmetric relationship)"],
                   out review: Array(Entity(org.schema:Review)) #[org_schema_type="Review"] #[org_schema_comment="A review of the item."],
                   out event: Entity(org.schema:Event) #[org_schema_type="Event"] #[org_schema_comment="Upcoming or past event associated with this place, organization, or action."],
                   out geoTouches: Entity(org.schema:Place) #[org_schema_type="Place"] #[org_schema_comment="Represents spatial relations in which two geometries (or the places they represent) touch: they have at least one boundary point in common, but no interior points.\" (a symmetric relationship, as defined in <a href=\"https://en.wikipedia.org/wiki/DE-9IM\">DE-9IM</a> )"],
                   out containsPlace: Entity(org.schema:Place) #[org_schema_type="Place"] #[org_schema_comment="The basic containment relation between a place and another that it contains."],
                   out geoDisjoint: Entity(org.schema:GeospatialGeometry) #[org_schema_type="GeospatialGeometry"] #[org_schema_comment="Represents spatial relations in which two geometries (or the places they represent) are topologically disjoint: they have no point in common. They form a set of disconnected geometries.\" (a symmetric relationship, as defined in <a href=\"https://en.wikipedia.org/wiki/DE-9IM\">DE-9IM</a>)"],
                   out isicV4: String #[org_schema_type="Text"] #[org_schema_comment="The International Standard of Industrial Classification of All Economic Activities (ISIC), Revision 4 code for a particular organization, business person, or place."],
                   out slogan: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A slogan or motto associated with the item."],
                   out geoIntersects: Entity(org.schema:GeospatialGeometry) #[org_schema_type="GeospatialGeometry"] #[org_schema_comment="Represents spatial relations in which two geometries (or the places they represent) have at least one point in common. As defined in <a href=\"https://en.wikipedia.org/wiki/DE-9IM\">DE-9IM</a>."],
                   out isAccessibleForFree: Boolean #[org_schema_type="Boolean"] #[org_schema_comment="A flag to signal that the item, event, or place is accessible for free."],
                   out geoCoveredBy: Entity(org.schema:GeospatialGeometry) #[org_schema_type="GeospatialGeometry"] #[org_schema_comment="Represents a relationship between two geometries (or the places they represent), relating a geometry to another that covers it. As defined in <a href=\"https://en.wikipedia.org/wiki/DE-9IM\">DE-9IM</a>."],
                   out publicAccess: Boolean #[org_schema_type="Boolean"] #[org_schema_comment="A flag to signal that the <a class=\"localLink\" href=\"http://schema.org/Place\">Place</a> is open to public visitors.  If this property is omitted there is no assumed default boolean value"])
  #[org_schema_comment="Entities that have a somewhat fixed, physical extension."];

  list query Organization(out id: Entity(org.schema:Organization),
                          out memberOf: Array(Entity(org.schema:ProgramMembership)) #[org_schema_type="ProgramMembership"] #[org_schema_comment="An Organization (or ProgramMembership) to which this Person or Organization belongs."],
                          out address: {
                            postOfficeBoxNumber: String,
                            streetAddress: String,
                            addressCountry: String,
                            addressRegion: String,
                            postalCode: String,
                            addressLocality: String,
                            areaServed: String,
                            faxNumber: String,
                            hoursAvailable: {
                              validFrom: Date,
                              validThrough: Date,
                              opens: Time,
                              closes: Time,
                              dayOfWeek: Enum(Wednesday,Sunday,PublicHolidays,Monday,Friday,Tuesday,Saturday,Thursday)
                            },
                            contactOption: Enum(HearingImpairedSupported,TollFree),
                            availableLanguage: Array(String),
                            telephone: Entity(tt:phone_number),
                            email: String,
                            contactType: Array(String),
                            productSupported: String
                          } #[org_schema_type="PostalAddress"] #[org_schema_comment="Physical address of the item."],
                          out funder: Array(Entity(org.schema:Organization)) #[org_schema_type="Organization"] #[org_schema_comment="A person or organization that supports (sponsors) something through some kind of financial contribution."],
                          out areaServed: String #[org_schema_type="Text"] #[org_schema_comment="The geographic area where a service or offered item is provided."],
                          out faxNumber: String #[org_schema_type="Text"] #[org_schema_comment="The fax number."],
                          out subOrganization: Array(Entity(org.schema:Organization)) #[org_schema_type="Organization"] #[org_schema_comment="A relationship between two organizations where the first includes the second, e.g., as a subsidiary. See also: the more specific 'department' property."],
                          out hasOfferCatalog: Array(Entity(org.schema:Offer)) #[org_schema_type="OfferCatalog"] #[org_schema_comment="Indicates an OfferCatalog listing for this Organization, Person, or Service."],
                          out globalLocationNumber: String #[org_schema_type="Text"] #[org_schema_comment="The <a href=\"http://www.gs1.org/gln\">Global Location Number</a> (GLN, sometimes also referred to as International Location Number or ILN) of the respective organization, person, or place. The GLN is a 13-digit number used to identify parties and physical locations."],
                          out aggregateRating: {
                            itemReviewed: Entity(org.schema:Thing),
                            ratingValue: Number,
                            bestRating: Number,
                            author: Entity(org.schema:Person),
                            worstRating: Number,
                            reviewAspect: String
                          } #[org_schema_type="AggregateRating"] #[org_schema_comment="The overall rating, based on a collection of reviews or ratings, of the item."],
                          out duns: String #[org_schema_type="Text"] #[org_schema_comment="The Dun &amp; Bradstreet DUNS number for identifying an organization or business person."],
                          out taxID: String #[org_schema_type="Text"] #[org_schema_comment="The Tax / Fiscal ID of the organization or person, e.g. the TIN in the US or the CIF/NIF in Spain."],
                          out award: Array(String) #[org_schema_type="Text"] #[org_schema_comment="An award won by or for this item."],
                          out makesOffer: Array(Entity(org.schema:Offer)) #[org_schema_type="Offer"] #[org_schema_comment="A pointer to products or services offered by the organization or person."],
                          out foundingDate: Date #[org_schema_type="Date"] #[org_schema_comment="The date that this organization was founded."],
                          out seeks: Array(Entity(org.schema:Demand)) #[org_schema_type="Demand"] #[org_schema_comment="A pointer to products or services sought by the organization or person (demand)."],
                          out member: Array(Entity(org.schema:Organization)) #[org_schema_type="Organization"] #[org_schema_comment="A member of an Organization or a ProgramMembership. Organizations can be members of organizations; ProgramMembership is typically for individuals."],
                          out alumni: Entity(org.schema:Person) #[org_schema_type="Person"] #[org_schema_comment="Alumni of an organization."],
                          out dissolutionDate: Date #[org_schema_type="Date"] #[org_schema_comment="The date that this organization was dissolved."],
                          out logo: Array(Entity(tt:url)) #[org_schema_type="URL"] #[org_schema_comment="An associated logo."],
                          out telephone: Entity(tt:phone_number) #[org_schema_type="Text"] #[org_schema_comment="The telephone number."],
                          out email: String #[org_schema_type="Text"] #[org_schema_comment="Email address."],
                          out department: Array(Entity(org.schema:Organization)) #[org_schema_type="Organization"] #[org_schema_comment="A relationship between an organization and a department of that organization, also described as an organization (allowing different urls, logos, opening hours). For example: a store with a pharmacy, or a bakery with a cafe."],
                          out contactPoint: Array({
  areaServed: String,
  faxNumber: String,
  hoursAvailable: {
    validFrom: Date,
    validThrough: Date,
    opens: Time,
    closes: Time,
    dayOfWeek: Enum(Wednesday,Sunday,PublicHolidays,Monday,Friday,Tuesday,Saturday,Thursday)
  },
  contactOption: Enum(HearingImpairedSupported,TollFree),
  availableLanguage: Array(String),
  telephone: Entity(tt:phone_number),
  email: String,
  contactType: Array(String),
  productSupported: String
}) #[org_schema_type="ContactPoint"] #[org_schema_comment="A contact point for a person or organization."],
                          out parentOrganization: Entity(org.schema:Organization) #[org_schema_type="Organization"] #[org_schema_comment="The larger organization that this organization is a <a class=\"localLink\" href=\"http://schema.org/subOrganization\">subOrganization</a> of, if any."],
                          out legalName: String #[org_schema_type="Text"] #[org_schema_comment="The official name of the organization, e.g. the registered company name."],
                          out employee: Entity(org.schema:Person) #[org_schema_type="Person"] #[org_schema_comment="Someone working for this organization."],
                          out numberOfEmployees: Number #[org_schema_type="QuantitativeValue"] #[org_schema_comment="The number of employees in an organization e.g. business."],
                          out naics: String #[org_schema_type="Text"] #[org_schema_comment="The North American Industry Classification System (NAICS) code for a particular organization or business person."],
                          out hasPOS: Entity(org.schema:Place) #[org_schema_type="Place"] #[org_schema_comment="Points-of-Sales operated by the organization or person."],
                          out review: Array(Entity(org.schema:Review)) #[org_schema_type="Review"] #[org_schema_comment="A review of the item."],
                          out foundingLocation: Entity(org.schema:Place) #[org_schema_type="Place"] #[org_schema_comment="The place where the Organization was founded."],
                          out owns: {
                            typeOfGood: Entity(org.schema:Product),
                            ownedFrom: Date,
                            ownedThrough: Date,
                            acquiredFrom: Entity(org.schema:Person)
                          } #[org_schema_type="OwnershipInfo"] #[org_schema_comment="Products owned by the organization or person."],
                          out event: Entity(org.schema:Event) #[org_schema_type="Event"] #[org_schema_comment="Upcoming or past event associated with this place, organization, or action."],
                          out founder: Array(Entity(org.schema:Person)) #[org_schema_type="Person"] #[org_schema_comment="A person who founded this organization."],
                          out publishingPrinciples: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="The publishingPrinciples property indicates (typically via <a class=\"localLink\" href=\"http://schema.org/URL\">URL</a>) a document describing the editorial principles of an <a class=\"localLink\" href=\"http://schema.org/Organization\">Organization</a> (or individual e.g. a <a class=\"localLink\" href=\"http://schema.org/Person\">Person</a> writing a blog) that relate to their activities as a publisher, e.g. ethics or diversity policies. When applied to a <a class=\"localLink\" href=\"http://schema.org/CreativeWork\">CreativeWork</a> (e.g. <a class=\"localLink\" href=\"http://schema.org/NewsArticle\">NewsArticle</a>) the principles are those of the party primarily responsible for the creation of the <a class=\"localLink\" href=\"http://schema.org/CreativeWork\">CreativeWork</a>.<br/><br/>\n\nWhile such policies are most typically expressed in natural language, sometimes related information (e.g. indicating a <a class=\"localLink\" href=\"http://schema.org/funder\">funder</a>) can be expressed using schema.org terminology."],
                          out sponsor: Array(Entity(org.schema:Person)) #[org_schema_type="Person"] #[org_schema_comment="A person or organization that supports a thing through a pledge, promise, or financial contribution. e.g. a sponsor of a Medical Study or a corporate sponsor of an event."],
                          out isicV4: String #[org_schema_type="Text"] #[org_schema_comment="The International Standard of Industrial Classification of All Economic Activities (ISIC), Revision 4 code for a particular organization, business person, or place."],
                          out slogan: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A slogan or motto associated with the item."],
                          out location: {
                            postOfficeBoxNumber: String,
                            streetAddress: String,
                            addressCountry: String,
                            addressRegion: String,
                            postalCode: String,
                            addressLocality: String,
                            areaServed: String,
                            faxNumber: String,
                            hoursAvailable: {
                              validFrom: Date,
                              validThrough: Date,
                              opens: Time,
                              closes: Time,
                              dayOfWeek: Enum(Wednesday,Sunday,PublicHolidays,Monday,Friday,Tuesday,Saturday,Thursday)
                            },
                            contactOption: Enum(HearingImpairedSupported,TollFree),
                            availableLanguage: Array(String),
                            telephone: Entity(tt:phone_number),
                            email: String,
                            contactType: Array(String),
                            productSupported: String
                          } #[org_schema_type="PostalAddress"] #[org_schema_comment="The location of for example where the event is happening, an organization is located, or where an action takes place."],
                          out brand: Entity(org.schema:Brand) #[org_schema_type="Brand"] #[org_schema_comment="The brand(s) associated with a product or service, or the brand(s) maintained by an organization or business person."],
                          out vatID: String #[org_schema_type="Text"] #[org_schema_comment="The Value-added Tax ID of the organization or person."],
                          out leiCode: Array(String) #[org_schema_type="Text"] #[org_schema_comment="An organization identifier that uniquely identifies a legal entity as defined in ISO 17442."])
  #[org_schema_comment="An organization such as a school, NGO, corporation, club, etc."];

  list query LocalBusiness(out id: Entity(org.schema:LocalBusiness),
                           out priceRange: String #[org_schema_type="Text"] #[org_schema_comment="The price range of the business, for example <code>$$$</code>."],
                           out paymentAccepted: String #[org_schema_type="Text"] #[org_schema_comment="Cash, Credit Card, Cryptocurrency, Local Exchange Tradings System, etc."],
                           out openingHours: String #[org_schema_type="Text"] #[org_schema_comment="The general opening hours for a business. Opening hours can be specified as a weekly time range, starting with days, then times per day. Multiple days can be listed with commas ',' separating each day. Day or time ranges are specified using a hyphen '-'.<br/><br/>\n\n<ul>\n<li>Days are specified using the following two-letter combinations: <code>Mo</code>, <code>Tu</code>, <code>We</code>, <code>Th</code>, <code>Fr</code>, <code>Sa</code>, <code>Su</code>.</li>\n<li>Times are specified using 24:00 time. For example, 3pm is specified as <code>15:00</code>. </li>\n<li>Here is an example: <code>&lt;time itemprop=\"openingHours\" datetime=&quot;Tu,Th 16:00-20:00&quot;&gt;Tuesdays and Thursdays 4-8pm&lt;/time&gt;</code>.</li>\n<li>If a business is open 7 days a week, then it can be specified as <code>&lt;time itemprop=&quot;openingHours&quot; datetime=&quot;Mo-Su&quot;&gt;Monday through Sunday, all day&lt;/time&gt;</code>.</li>\n</ul>\n"],
                           out currenciesAccepted: String #[org_schema_type="Text"] #[org_schema_comment="The currency accepted.<br/><br/>\n\nUse standard formats: <a href=\"http://en.wikipedia.org/wiki/ISO_4217\">ISO 4217 currency format</a> e.g. \"USD\"; <a href=\"https://en.wikipedia.org/wiki/List_of_cryptocurrencies\">Ticker symbol</a> for cryptocurrencies e.g. \"BTC\"; well known names for <a href=\"https://en.wikipedia.org/wiki/Local_exchange_trading_system\">Local Exchange Tradings Systems</a> (LETS) and other currency types e.g. \"Ithaca HOUR\"."])
  #[org_schema_comment="A particular physical business or branch of an organization. Examples of LocalBusiness include a restaurant, a particular branch of a restaurant chain, a branch of a bank, a medical practice, a club, a bowling alley, etc."];

  list query FoodEstablishment(out id: Entity(org.schema:FoodEstablishment),
                               out servesCuisine: String #[org_schema_type="Text"] #[org_schema_comment="The cuisine of the restaurant."],
                               out hasMenu: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="Either the actual menu as a structured representation, as text, or a URL of the menu."],
                               out starRating: Array({
  ratingValue: Number,
  bestRating: Number,
  author: Entity(org.schema:Person),
  worstRating: Number,
  reviewAspect: String
}) #[org_schema_type="Rating"] #[org_schema_comment="An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars)."],
                               out acceptsReservations: Boolean #[org_schema_type="Boolean"] #[org_schema_comment="Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings <code>Yes</code> or <code>No</code>."])
  #[org_schema_comment="A food-related business."];

  list query CafeOrCoffeeShop(out id: Entity(org.schema:CafeOrCoffeeShop))
  #[org_schema_comment="A cafe or coffee shop."];

  list query Article(out id: Entity(org.schema:Article),
                     out pagination: String #[org_schema_type="Text"] #[org_schema_comment="Any description of pages that is not separated into pageStart and pageEnd; for example, \"1-6, 9, 55\" or \"10-12, 46-49\"."],
                     out speakable: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="Indicates sections of a Web page that are particularly 'speakable' in the sense of being highlighted as being especially appropriate for text-to-speech conversion. Other sections of a page may also be usefully spoken in particular circumstances; the 'speakable' property serves to indicate the parts most likely to be generally useful for speech.<br/><br/>\n\nThe <em>speakable</em> property can be repeated an arbitrary number of times, with three kinds of possible 'content-locator' values:<br/><br/>\n\n1.) <em>id-value</em> URL references - uses <em>id-value</em> of an element in the page being annotated. The simplest use of <em>speakable</em> has (potentially relative) URL values, referencing identified sections of the document concerned.<br/><br/>\n\n2.) CSS Selectors - addresses content in the annotated page, eg. via class attribute. Use the <a class=\"localLink\" href=\"http://schema.org/cssSelector\">cssSelector</a> property.<br/><br/>\n\n3.)  XPaths - addresses content via XPaths (assuming an XML view of the content). Use the <a class=\"localLink\" href=\"http://schema.org/xpath\">xpath</a> property.<br/><br/>\n\nFor more sophisticated markup of speakable sections beyond simple ID references, either CSS selectors or XPath expressions to pick out document section(s) as speakable. For this\nwe define a supporting type, <a class=\"localLink\" href=\"http://schema.org/SpeakableSpecification\">SpeakableSpecification</a>  which is defined to be a possible value of the <em>speakable</em> property."],
                     out articleSection: String #[org_schema_type="Text"] #[org_schema_comment="Articles may belong to one or more 'sections' in a magazine or newspaper, such as Sports, Lifestyle, etc."],
                     out articleBody: String #[org_schema_type="Text"] #[org_schema_comment="The actual body of the article."])
  #[org_schema_comment="An article, such as a news article or piece of investigative report. Newspapers and magazines have articles of many different types and this is intended to cover them all.<br/><br/>\n\nSee also <a href=\"http://blog.schema.org/2014/09/schemaorg-support-for-bibliographic_2.html\">blog post</a>."];

  list query Chapter(out id: Entity(org.schema:Chapter),
                     out pagination: String #[org_schema_type="Text"] #[org_schema_comment="Any description of pages that is not separated into pageStart and pageEnd; for example, \"1-6, 9, 55\" or \"10-12, 46-49\"."]);

  list query PublicationIssue(out id: Entity(org.schema:PublicationIssue),
                              out pagination: String #[org_schema_type="Text"] #[org_schema_comment="Any description of pages that is not separated into pageStart and pageEnd; for example, \"1-6, 9, 55\" or \"10-12, 46-49\"."])
  #[org_schema_comment="A part of a successively published publication such as a periodical or publication volume, often numbered, usually containing a grouping of works such as articles.<br/><br/>\n\nSee also <a href=\"http://blog.schema.org/2014/09/schemaorg-support-for-bibliographic_2.html\">blog post</a>."];

  list query PublicationVolume(out id: Entity(org.schema:PublicationVolume),
                               out pagination: String #[org_schema_type="Text"] #[org_schema_comment="Any description of pages that is not separated into pageStart and pageEnd; for example, \"1-6, 9, 55\" or \"10-12, 46-49\"."])
  #[org_schema_comment="A part of a successively published publication such as a periodical or multi-volume work, often numbered. It may represent a time span, such as a year.<br/><br/>\n\nSee also <a href=\"http://blog.schema.org/2014/09/schemaorg-support-for-bibliographic_2.html\">blog post</a>."];

  list query Intangible(out id: Entity(org.schema:Intangible))
  #[org_schema_comment="A utility class that serves as the umbrella for a number of 'intangible' things such as quantities, structured values, etc."];

  list query Service(out id: Entity(org.schema:Service),
                     out provider: Entity(org.schema:Person) #[org_schema_type="Person"] #[org_schema_comment="The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller."],
                     out areaServed: String #[org_schema_type="Text"] #[org_schema_comment="The geographic area where a service or offered item is provided."],
                     out audience: Enum(Researcher) #[org_schema_type="Audience"] #[org_schema_comment="An intended audience, i.e. a group for whom something was created."],
                     out hasOfferCatalog: Array(Entity(org.schema:Offer)) #[org_schema_type="OfferCatalog"] #[org_schema_comment="Indicates an OfferCatalog listing for this Organization, Person, or Service."],
                     out hoursAvailable: {
                       validFrom: Date,
                       validThrough: Date,
                       opens: Time,
                       closes: Time,
                       dayOfWeek: Enum(Wednesday,Sunday,PublicHolidays,Monday,Friday,Tuesday,Saturday,Thursday)
                     } #[org_schema_type="OpeningHoursSpecification"] #[org_schema_comment="The hours during which this service or contact is available."],
                     out providerMobility: String #[org_schema_type="Text"] #[org_schema_comment="Indicates the mobility of a provided service (e.g. 'static', 'dynamic')."],
                     out aggregateRating: {
                       itemReviewed: Entity(org.schema:Thing),
                       ratingValue: Number,
                       bestRating: Number,
                       author: Entity(org.schema:Person),
                       worstRating: Number,
                       reviewAspect: String
                     } #[org_schema_type="AggregateRating"] #[org_schema_comment="The overall rating, based on a collection of reviews or ratings, of the item."],
                     out offers: Array(Entity(org.schema:Offer)) #[org_schema_type="Offer"] #[org_schema_comment="An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event."],
                     out award: Array(String) #[org_schema_type="Text"] #[org_schema_comment="An award won by or for this item."],
                     out category: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy."],
                     out broker: Array(Entity(org.schema:Person)) #[org_schema_type="Person"] #[org_schema_comment="An entity that arranges for an exchange between a buyer and a seller.  In most cases a broker never acquires or releases ownership of a product or service involved in an exchange.  If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred."],
                     out serviceOutput: Entity(org.schema:Thing) #[org_schema_type="Thing"] #[org_schema_comment="The tangible thing generated by the service, e.g. a passport, permit, etc."],
                     out logo: Array(Entity(tt:url)) #[org_schema_type="URL"] #[org_schema_comment="An associated logo."],
                     out isSimilarTo: Array(Entity(org.schema:Product)) #[org_schema_type="Product"] #[org_schema_comment="A pointer to another, functionally similar product (or multiple products)."],
                     out isRelatedTo: Array(Entity(org.schema:Product)) #[org_schema_type="Product"] #[org_schema_comment="A pointer to another, somehow related product (or multiple products)."],
                     out availableChannel: Array(Entity(org.schema:ServiceChannel)) #[org_schema_type="ServiceChannel"] #[org_schema_comment="A means of accessing the service (e.g. a phone bank, a web site, a location, etc.)."],
                     out review: Array(Entity(org.schema:Review)) #[org_schema_type="Review"] #[org_schema_comment="A review of the item."],
                     out serviceType: String #[org_schema_type="Text"] #[org_schema_comment="The type of service being offered, e.g. veterans' benefits, emergency relief, etc."],
                     out slogan: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A slogan or motto associated with the item."],
                     out brand: Entity(org.schema:Brand) #[org_schema_type="Brand"] #[org_schema_comment="The brand(s) associated with a product or service, or the brand(s) maintained by an organization or business person."])
  #[org_schema_comment="A service provided by an organization, e.g. delivery service, print services, etc."];

  list query FoodService(out id: Entity(org.schema:FoodService))
  #[org_schema_comment="A food service, like breakfast, lunch, or dinner."];

  list query HowTo(out id: Entity(org.schema:HowTo),
                   out prepTime: Measure(ms) #[org_schema_type="Duration"] #[org_schema_comment="The length of time it takes to prepare the items to be used in instructions or a direction, in <a href=\"http://en.wikipedia.org/wiki/ISO_8601\">ISO 8601 duration format</a>."],
                   out step: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A single step item (as HowToStep, text, document, video, etc.) or a HowToSection."],
                   out tool: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A sub property of instrument. An object used (but not consumed) when performing instructions or a direction."],
                   out performTime: Measure(ms) #[org_schema_type="Duration"] #[org_schema_comment="The length of time it takes to perform instructions or a direction (not including time to prepare the supplies), in <a href=\"http://en.wikipedia.org/wiki/ISO_8601\">ISO 8601 duration format</a>."],
                   out estimatedCost: Currency #[org_schema_type="MonetaryAmount"] #[org_schema_comment="The estimated cost of the supply or supplies consumed when performing instructions."],
                   out totalTime: Measure(ms) #[org_schema_type="Duration"] #[org_schema_comment="The total time required to perform instructions or a direction (including time to prepare the supplies), in <a href=\"http://en.wikipedia.org/wiki/ISO_8601\">ISO 8601 duration format</a>."],
                   out supply: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A sub-property of instrument. A supply consumed when performing instructions or a direction."],
                   out yield_: Number #[org_schema_type="QuantitativeValue"] #[org_schema_comment="The quantity that results by performing instructions. For example, a paper airplane, 10 personalized candles."])
  #[org_schema_comment="Instructions that explain how to achieve a result by performing a sequence of steps."];

  list query Recipe(out id: Entity(org.schema:Recipe),
                    out recipeYield: Number #[org_schema_type="QuantitativeValue"] #[org_schema_comment="The quantity produced by the recipe (for example, number of people served, number of servings, etc)."],
                    out recipeCategory: Array(String) #[org_schema_type="Text"] #[org_schema_comment="The category of the recipe—for example, appetizer, entree, etc."],
                    out recipeIngredient: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A single ingredient used in the recipe, e.g. sugar, flour or garlic."],
                    out recipeInstructions: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A step in making the recipe, in the form of a single item (document, video, etc.) or an ordered list with HowToStep and/or HowToSection items."],
                    out nutrition: {
                      saturatedFatContent: Measure(kg),
                      fatContent: Measure(kg),
                      unsaturatedFatContent: Measure(kg),
                      sugarContent: Measure(kg),
                      cholesterolContent: Measure(kg),
                      carbohydrateContent: Measure(kg),
                      proteinContent: Measure(kg),
                      sodiumContent: Measure(kg),
                      transFatContent: Measure(kg),
                      fiberContent: Measure(kg),
                      calories: Measure(kcal),
                      servingSize: String
                    } #[org_schema_type="NutritionInformation"] #[org_schema_comment="Nutrition information about the recipe or menu item."],
                    out suitableForDiet: Enum(KosherDiet,VeganDiet,DiabeticDiet,LowFatDiet,HinduDiet,GlutenFreeDiet,HalalDiet,LowLactoseDiet,VegetarianDiet,LowCalorieDiet,LowSaltDiet) #[org_schema_type="RestrictedDiet"] #[org_schema_comment="Indicates a dietary restriction or guideline for which this recipe or menu item is suitable, e.g. diabetic, halal etc."],
                    out recipeCuisine: String #[org_schema_type="Text"] #[org_schema_comment="The cuisine of the recipe (for example, French or Ethiopian)."],
                    out cookTime: Measure(ms) #[org_schema_type="Duration"] #[org_schema_comment="The time it takes to actually cook the dish, in <a href=\"http://en.wikipedia.org/wiki/ISO_8601\">ISO 8601 duration format</a>."],
                    out cookingMethod: String #[org_schema_type="Text"] #[org_schema_comment="The method of cooking, such as Frying, Steaming, ..."])
  #[org_schema_comment="A recipe. For dietary restrictions covered by the recipe, a few common restrictions are enumerated via <a class=\"localLink\" href=\"http://schema.org/suitableForDiet\">suitableForDiet</a>. The <a class=\"localLink\" href=\"http://schema.org/keywords\">keywords</a> property can also be used to add more detail."];

  list query Game(out id: Entity(org.schema:Game),
                  out gameItem: Array(Entity(org.schema:Thing)) #[org_schema_type="Thing"] #[org_schema_comment="An item is an object within the game world that can be collected by a player or, occasionally, a non-player character."],
                  out characterAttribute: Array(Entity(org.schema:Thing)) #[org_schema_type="Thing"] #[org_schema_comment="A piece of data that represents a particular aspect of a fictional character (skill, power, character points, advantage, disadvantage)."],
                  out gameLocation: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="Real or fictional location of the game (or part of game)."],
                  out quest: Entity(org.schema:Thing) #[org_schema_type="Thing"] #[org_schema_comment="The task that a player-controlled character, or group of characters may complete in order to gain a reward."],
                  out numberOfPlayers: Number #[org_schema_type="QuantitativeValue"] #[org_schema_comment="Indicate how many people can play this game (minimum, maximum, or range)."])
  #[org_schema_comment="The Game type represents things which are games. These are typically rule-governed recreational activities, e.g. role-playing games in which players assume the role of characters in a fictional setting."];

  list query Series(out id: Entity(org.schema:Series))
  #[org_schema_comment="A Series in schema.org is a group of related items, typically but not necessarily of the same kind. See also <a class=\"localLink\" href=\"http://schema.org/CreativeWorkSeries\">CreativeWorkSeries</a>, <a class=\"localLink\" href=\"http://schema.org/EventSeries\">EventSeries</a>."];

  list query CreativeWorkSeries(out id: Entity(org.schema:CreativeWorkSeries),
                                out endDate: Date #[org_schema_type="DateTime"] #[org_schema_comment="The end date and time of the item (in <a href=\"http://en.wikipedia.org/wiki/ISO_8601\">ISO 8601 date format</a>)."],
                                out issn: String #[org_schema_type="Text"] #[org_schema_comment="The International Standard Serial Number (ISSN) that identifies this serial publication. You can repeat this property to identify different formats of, or the linking ISSN (ISSN-L) for, this serial publication."],
                                out startDate: Date #[org_schema_type="DateTime"] #[org_schema_comment="The start date and time of the item (in <a href=\"http://en.wikipedia.org/wiki/ISO_8601\">ISO 8601 date format</a>)."])
  #[org_schema_comment="A CreativeWorkSeries in schema.org is a group of related items, typically but not necessarily of the same kind. CreativeWorkSeries are usually organized into some order, often chronological. Unlike <a class=\"localLink\" href=\"http://schema.org/ItemList\">ItemList</a> which is a general purpose data structure for lists of things, the emphasis with CreativeWorkSeries is on published materials (written e.g. books and periodicals, or media such as tv, radio and games).<br/><br/>\n\nSpecific subtypes are available for describing <a class=\"localLink\" href=\"http://schema.org/TVSeries\">TVSeries</a>, <a class=\"localLink\" href=\"http://schema.org/RadioSeries\">RadioSeries</a>, <a class=\"localLink\" href=\"http://schema.org/MovieSeries\">MovieSeries</a>, <a class=\"localLink\" href=\"http://schema.org/BookSeries\">BookSeries</a>, <a class=\"localLink\" href=\"http://schema.org/Periodical\">Periodical</a> and <a class=\"localLink\" href=\"http://schema.org/VideoGameSeries\">VideoGameSeries</a>. In each case, the <a class=\"localLink\" href=\"http://schema.org/hasPart\">hasPart</a> / <a class=\"localLink\" href=\"http://schema.org/isPartOf\">isPartOf</a> properties can be used to relate the CreativeWorkSeries to its parts. The general CreativeWorkSeries type serves largely just to organize these more specific and practical subtypes.<br/><br/>\n\nIt is common for properties applicable to an item from the series to be usefully applied to the containing group. Schema.org attempts to anticipate some of these cases, but publishers should be free to apply properties of the series parts to the series as a whole wherever they seem appropriate."];

  list query VideoGameSeries(out id: Entity(org.schema:VideoGameSeries),
                             out gameItem: Array(Entity(org.schema:Thing)) #[org_schema_type="Thing"] #[org_schema_comment="An item is an object within the game world that can be collected by a player or, occasionally, a non-player character."],
                             out gamePlatform: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="The electronic systems used to play <a href=\"http://en.wikipedia.org/wiki/Category:Video_game_platforms\">video games</a>."],
                             out actor: Array(Entity(org.schema:Person)) #[org_schema_type="Person"] #[org_schema_comment="An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip."],
                             out trailer: Entity(org.schema:VideoObject) #[org_schema_type="VideoObject"] #[org_schema_comment="The trailer of a movie or tv/radio series, season, episode, etc."],
                             out cheatCode: Entity(org.schema:CreativeWork) #[org_schema_type="CreativeWork"] #[org_schema_comment="Cheat codes to the game."],
                             out characterAttribute: Array(Entity(org.schema:Thing)) #[org_schema_type="Thing"] #[org_schema_comment="A piece of data that represents a particular aspect of a fictional character (skill, power, character points, advantage, disadvantage)."],
                             out gameLocation: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="Real or fictional location of the game (or part of game)."],
                             out musicBy: Entity(org.schema:MusicGroup) #[org_schema_type="MusicGroup"] #[org_schema_comment="The composer of the soundtrack."],
                             out containsSeason: Array(Entity(org.schema:CreativeWorkSeason)) #[org_schema_type="CreativeWorkSeason"] #[org_schema_comment="A season that is part of the media series."],
                             out playMode: Enum(MultiPlayer,CoOp,SinglePlayer) #[org_schema_type="GamePlayMode"] #[org_schema_comment="Indicates whether this game is multi-player, co-op or single-player.  The game can be marked as multi-player, co-op and single-player at the same time."],
                             out director: Array(Entity(org.schema:Person)) #[org_schema_type="Person"] #[org_schema_comment="A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip."],
                             out productionCompany: Entity(org.schema:Organization) #[org_schema_type="Organization"] #[org_schema_comment="The production company or studio responsible for the item e.g. series, video game, episode etc."],
                             out quest: Entity(org.schema:Thing) #[org_schema_type="Thing"] #[org_schema_comment="The task that a player-controlled character, or group of characters may complete in order to gain a reward."],
                             out numberOfPlayers: Number #[org_schema_type="QuantitativeValue"] #[org_schema_comment="Indicate how many people can play this game (minimum, maximum, or range)."],
                             out episode: Array(Entity(org.schema:Episode)) #[org_schema_type="Episode"] #[org_schema_comment="An episode of a tv, radio or game media within a series or season."])
  #[org_schema_comment="A video game series."];

  list query ListItem(out id: Entity(org.schema:ListItem),
                      out nextItem: Array(Entity(org.schema:ListItem)) #[org_schema_type="ListItem"] #[org_schema_comment="A link to the ListItem that follows the current one."],
                      out previousItem: Array(Entity(org.schema:ListItem)) #[org_schema_type="ListItem"] #[org_schema_comment="A link to the ListItem that preceeds the current one."],
                      out item: Array(Entity(org.schema:Thing)) #[org_schema_type="Thing"] #[org_schema_comment="An entity represented by an entry in a list or data feed (e.g. an 'artist' in a list of 'artists')’."])
  #[org_schema_comment="An list item, e.g. a step in a checklist or how-to description."];

  list query HowToDirection(out id: Entity(org.schema:HowToDirection),
                            out duringMedia: Array(Entity(tt:url)) #[org_schema_type="URL"] #[org_schema_comment="A media object representing the circumstances while performing this direction."],
                            out beforeMedia: Array(Entity(tt:url)) #[org_schema_type="URL"] #[org_schema_comment="A media object representing the circumstances before performing this direction."],
                            out prepTime: Measure(ms) #[org_schema_type="Duration"] #[org_schema_comment="The length of time it takes to prepare the items to be used in instructions or a direction, in <a href=\"http://en.wikipedia.org/wiki/ISO_8601\">ISO 8601 duration format</a>."],
                            out tool: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A sub property of instrument. An object used (but not consumed) when performing instructions or a direction."],
                            out performTime: Measure(ms) #[org_schema_type="Duration"] #[org_schema_comment="The length of time it takes to perform instructions or a direction (not including time to prepare the supplies), in <a href=\"http://en.wikipedia.org/wiki/ISO_8601\">ISO 8601 duration format</a>."],
                            out totalTime: Measure(ms) #[org_schema_type="Duration"] #[org_schema_comment="The total time required to perform instructions or a direction (including time to prepare the supplies), in <a href=\"http://en.wikipedia.org/wiki/ISO_8601\">ISO 8601 duration format</a>."],
                            out supply: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A sub-property of instrument. A supply consumed when performing instructions or a direction."],
                            out afterMedia: Array(Entity(tt:url)) #[org_schema_type="URL"] #[org_schema_comment="A media object representing the circumstances after performing this direction."])
  #[org_schema_comment="A direction indicating a single action to do in the instructions for how to achieve a result."];

  list query Landform(out id: Entity(org.schema:Landform))
  #[org_schema_comment="A landform or physical feature.  Landform elements include mountains, plains, lakes, rivers, seascape and oceanic waterbody interface features such as bays, peninsulas, seas and so forth, including sub-aqueous terrain features such as submersed mountain ranges, volcanoes, and the great ocean basins."];

  list query Volcano(out id: Entity(org.schema:Volcano))
  #[org_schema_comment="A volcano, like Fuji san."];

  list query Trip(out id: Entity(org.schema:Trip),
                  out provider: Entity(org.schema:Person) #[org_schema_type="Person"] #[org_schema_comment="The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller."],
                  out offers: Array(Entity(org.schema:Offer)) #[org_schema_type="Offer"] #[org_schema_comment="An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event."],
                  out arrivalTime: Time #[org_schema_type="Time"] #[org_schema_comment="The expected arrival time."],
                  out departureTime: Date #[org_schema_type="DateTime"] #[org_schema_comment="The expected departure time."])
  #[org_schema_comment="A trip or journey. An itinerary of visits to one or more places."];

  list query TrainTrip(out id: Entity(org.schema:TrainTrip),
                       out departureStation: Entity(org.schema:TrainStation) #[org_schema_type="TrainStation"] #[org_schema_comment="The station from which the train departs."],
                       out departurePlatform: String #[org_schema_type="Text"] #[org_schema_comment="The platform from which the train departs."],
                       out trainName: String #[org_schema_type="Text"] #[org_schema_comment="The name of the train (e.g. The Orient Express)."],
                       out trainNumber: String #[org_schema_type="Text"] #[org_schema_comment="The unique identifier for the train."],
                       out arrivalStation: Entity(org.schema:TrainStation) #[org_schema_type="TrainStation"] #[org_schema_comment="The station where the train trip ends."],
                       out arrivalPlatform: String #[org_schema_type="Text"] #[org_schema_comment="The platform where the train arrives."])
  #[org_schema_comment="A trip on a commercial train line."];

  list query SportsOrganization(out id: Entity(org.schema:SportsOrganization),
                                out sport: Array(Entity(tt:url)) #[org_schema_type="URL"] #[org_schema_comment="A type of sport (e.g. Baseball)."])
  #[org_schema_comment="Represents the collection of all sports organizations, including sports teams, governing bodies, and sports associations."];

  list query SportsTeam(out id: Entity(org.schema:SportsTeam),
                        out athlete: Array(Entity(org.schema:Person)) #[org_schema_type="Person"] #[org_schema_comment="A person that acts as performing member of a sports team; a player as opposed to a coach."],
                        out coach: Array(Entity(org.schema:Person)) #[org_schema_type="Person"] #[org_schema_comment="A person that acts in a coaching role for a sports team."])
  #[org_schema_comment="Organization: Sports team."];

  list query Store(out id: Entity(org.schema:Store))
  #[org_schema_comment="A retail good store."];

  list query GroceryStore(out id: Entity(org.schema:GroceryStore))
  #[org_schema_comment="A grocery store."];

  list query Demand(out id: Entity(org.schema:Demand),
                    out sku: String #[org_schema_type="Text"] #[org_schema_comment="The Stock Keeping Unit (SKU), i.e. a merchant-specific identifier for a product or service, or the product to which the offer refers."],
                    out availabilityStarts: Time #[org_schema_type="Time"] #[org_schema_comment="The beginning of the availability of the product or service included in the offer."],
                    out availableDeliveryMethod: Enum(OnSitePickup) #[org_schema_type="DeliveryMethod"] #[org_schema_comment="The delivery method(s) available for this offer."],
                    out areaServed: String #[org_schema_type="Text"] #[org_schema_comment="The geographic area where a service or offered item is provided."],
                    out mpn: String #[org_schema_type="Text"] #[org_schema_comment="The Manufacturer Part Number (MPN) of the product, or the product to which the offer refers."],
                    out advanceBookingRequirement: Number #[org_schema_type="QuantitativeValue"] #[org_schema_comment="The amount of time that is required between accepting the offer and the actual usage of the resource or service."],
                    out serialNumber: String #[org_schema_type="Text"] #[org_schema_comment="The serial number or any alphanumeric identifier of a particular product. When attached to an offer, it is a shortcut for the serial number of the product included in the offer."],
                    out ineligibleRegion: String #[org_schema_type="Text"] #[org_schema_comment="The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for the geo-political region(s) for which the offer or delivery charge specification is not valid, e.g. a region where the transaction is not allowed.<br/><br/>\n\nSee also <a class=\"localLink\" href=\"http://schema.org/eligibleRegion\">eligibleRegion</a>."],
                    out gtin8: String #[org_schema_type="Text"] #[org_schema_comment="The <a href=\"http://apps.gs1.org/GDD/glossary/Pages/GTIN-8.aspx\">GTIN-8</a> code of the product, or the product to which the offer refers. This code is also known as EAN/UCC-8 or 8-digit EAN. See <a href=\"http://www.gs1.org/barcodes/technical/idkeys/gtin\">GS1 GTIN Summary</a> for more details."],
                    out availability: Enum(SoldOut,PreOrder,OutOfStock,PreSale,InStock,LimitedAvailability,Discontinued,OnlineOnly,InStoreOnly) #[org_schema_type="ItemAvailability"] #[org_schema_comment="The availability of this item&#x2014;for example In stock, Out of stock, Pre-order, etc."],
                    out priceSpecification: Entity(org.schema:PriceSpecification) #[org_schema_type="PriceSpecification"] #[org_schema_comment="One or more detailed price specifications, indicating the unit price and delivery or payment charges."],
                    out inventoryLevel: Number #[org_schema_type="QuantitativeValue"] #[org_schema_comment="The current approximate inventory level for the item or items."],
                    out eligibleTransactionVolume: Entity(org.schema:PriceSpecification) #[org_schema_type="PriceSpecification"] #[org_schema_comment="The transaction volume, in a monetary unit, for which the offer or price specification is valid, e.g. for indicating a minimal purchasing volume, to express free shipping above a certain order volume, or to limit the acceptance of credit cards to purchases to a certain minimal amount."],
                    out availableAtOrFrom: Entity(org.schema:Place) #[org_schema_type="Place"] #[org_schema_comment="The place(s) from which the offer can be obtained (e.g. store locations)."],
                    out warranty: {
                      durationOfWarranty: Measure(ms),
                      warrantyScope: Entity(org.schema:WarrantyScope)
                    } #[org_schema_type="WarrantyPromise"] #[org_schema_comment="The warranty promise(s) included in the offer."],
                    out eligibleQuantity: Number #[org_schema_type="QuantitativeValue"] #[org_schema_comment="The interval and unit of measurement of ordering quantities for which the offer or price specification is valid. This allows e.g. specifying that a certain freight charge is valid only for a certain quantity."],
                    out validFrom: Date #[org_schema_type="Date"] #[org_schema_comment="The date when the item becomes valid."],
                    out validThrough: Date #[org_schema_type="DateTime"] #[org_schema_comment="The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours."],
                    out gtin14: String #[org_schema_type="Text"] #[org_schema_comment="The GTIN-14 code of the product, or the product to which the offer refers. See <a href=\"http://www.gs1.org/barcodes/technical/idkeys/gtin\">GS1 GTIN Summary</a> for more details."],
                    out gtin13: String #[org_schema_type="Text"] #[org_schema_comment="The GTIN-13 code of the product, or the product to which the offer refers. This is equivalent to 13-digit ISBN codes and EAN UCC-13. Former 12-digit UPC codes can be converted into a GTIN-13 code by simply adding a preceeding zero. See <a href=\"http://www.gs1.org/barcodes/technical/idkeys/gtin\">GS1 GTIN Summary</a> for more details."],
                    out gtin12: String #[org_schema_type="Text"] #[org_schema_comment="The GTIN-12 code of the product, or the product to which the offer refers. The GTIN-12 is the 12-digit GS1 Identification Key composed of a U.P.C. Company Prefix, Item Reference, and Check Digit used to identify trade items. See <a href=\"http://www.gs1.org/barcodes/technical/idkeys/gtin\">GS1 GTIN Summary</a> for more details."],
                    out seller: Array(Entity(org.schema:Organization)) #[org_schema_type="Organization"] #[org_schema_comment="An entity which offers (sells / leases / lends / loans) the services / goods.  A seller may also be a provider."],
                    out deliveryLeadTime: Number #[org_schema_type="QuantitativeValue"] #[org_schema_comment="The typical delay between the receipt of the order and the goods either leaving the warehouse or being prepared for pickup, in case the delivery method is on site pickup."],
                    out availabilityEnds: Time #[org_schema_type="Time"] #[org_schema_comment="The end of the availability of the product or service included in the offer."],
                    out includesObject: {
                      unitCode: Entity(tt:url),
                      typeOfGood: Entity(org.schema:Product),
                      amountOfThisGood: Number,
                      unitText: Array(String),
                      businessFunction: Entity(org.schema:BusinessFunction)
                    } #[org_schema_type="TypeAndQuantityNode"] #[org_schema_comment="This links to a node or nodes indicating the exact quantity of the products included in the offer."],
                    out eligibleCustomerType: Entity(org.schema:BusinessEntityType) #[org_schema_type="BusinessEntityType"] #[org_schema_comment="The type(s) of customers for which the given offer is valid."],
                    out itemCondition: Enum(DamagedCondition,RefurbishedCondition,UsedCondition,NewCondition) #[org_schema_type="OfferItemCondition"] #[org_schema_comment="A predefined value from OfferItemCondition or a textual description of the condition of the product or service, or the products or services included in the offer."],
                    out itemOffered: Entity(org.schema:Product) #[org_schema_type="Product"] #[org_schema_comment="The item being offered."],
                    out eligibleDuration: Measure(ms) #[org_schema_type="QuantitativeValue"] #[org_schema_comment="The duration for which the given offer is valid."],
                    out acceptedPaymentMethod: Entity(org.schema:PaymentMethod) #[org_schema_type="PaymentMethod"] #[org_schema_comment="The payment method(s) accepted by seller for this offer."],
                    out businessFunction: Entity(org.schema:BusinessFunction) #[org_schema_type="BusinessFunction"] #[org_schema_comment="The business function (e.g. sell, lease, repair, dispose) of the offer or component of a bundle (TypeAndQuantityNode). The default is http://purl.org/goodrelations/v1#Sell."],
                    out eligibleRegion: String #[org_schema_type="Text"] #[org_schema_comment="The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for the geo-political region(s) for which the offer or delivery charge specification is valid.<br/><br/>\n\nSee also <a class=\"localLink\" href=\"http://schema.org/ineligibleRegion\">ineligibleRegion</a>."])
  #[org_schema_comment="A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply."];

  list query MusicComposition(out id: Entity(org.schema:MusicComposition),
                              out musicCompositionForm: String #[org_schema_type="Text"] #[org_schema_comment="The type of composition (e.g. overture, sonata, symphony, etc.)."],
                              out lyrics: Entity(org.schema:CreativeWork) #[org_schema_type="CreativeWork"] #[org_schema_comment="The words in the song."],
                              out includedComposition: Entity(org.schema:MusicComposition) #[org_schema_type="MusicComposition"] #[org_schema_comment="Smaller compositions included in this work (e.g. a movement in a symphony)."],
                              out lyricist: Entity(org.schema:Person) #[org_schema_type="Person"] #[org_schema_comment="The person who wrote the words."],
                              out recordedAs: Array(Entity(org.schema:MusicRecording)) #[org_schema_type="MusicRecording"] #[org_schema_comment="An audio recording of the work."],
                              out firstPerformance: Entity(org.schema:Event) #[org_schema_type="Event"] #[org_schema_comment="The date and place the work was first performed."],
                              out musicArrangement: Array(Entity(org.schema:MusicComposition)) #[org_schema_type="MusicComposition"] #[org_schema_comment="An arrangement derived from the composition."],
                              out iswcCode: String #[org_schema_type="Text"] #[org_schema_comment="The International Standard Musical Work Code for the composition."],
                              out composer: Entity(org.schema:Organization) #[org_schema_type="Organization"] #[org_schema_comment="The person or organization who wrote a composition, or who is the composer of a work performed at some event."],
                              out musicalKey: String #[org_schema_type="Text"] #[org_schema_comment="The key, mode, or scale this composition uses."])
  #[org_schema_comment="A musical composition."];

  list query WebPage(out id: Entity(org.schema:WebPage),
                     out lastReviewed: Date #[org_schema_type="Date"] #[org_schema_comment="Date on which the content on this web page was last reviewed for accuracy and/or completeness."],
                     out speakable: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="Indicates sections of a Web page that are particularly 'speakable' in the sense of being highlighted as being especially appropriate for text-to-speech conversion. Other sections of a page may also be usefully spoken in particular circumstances; the 'speakable' property serves to indicate the parts most likely to be generally useful for speech.<br/><br/>\n\nThe <em>speakable</em> property can be repeated an arbitrary number of times, with three kinds of possible 'content-locator' values:<br/><br/>\n\n1.) <em>id-value</em> URL references - uses <em>id-value</em> of an element in the page being annotated. The simplest use of <em>speakable</em> has (potentially relative) URL values, referencing identified sections of the document concerned.<br/><br/>\n\n2.) CSS Selectors - addresses content in the annotated page, eg. via class attribute. Use the <a class=\"localLink\" href=\"http://schema.org/cssSelector\">cssSelector</a> property.<br/><br/>\n\n3.)  XPaths - addresses content via XPaths (assuming an XML view of the content). Use the <a class=\"localLink\" href=\"http://schema.org/xpath\">xpath</a> property.<br/><br/>\n\nFor more sophisticated markup of speakable sections beyond simple ID references, either CSS selectors or XPath expressions to pick out document section(s) as speakable. For this\nwe define a supporting type, <a class=\"localLink\" href=\"http://schema.org/SpeakableSpecification\">SpeakableSpecification</a>  which is defined to be a possible value of the <em>speakable</em> property."],
                     out breadcrumb: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A set of links that can help a user understand and navigate a website hierarchy."],
                     out significantLink: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="One of the more significant URLs on the page. Typically, these are the non-navigation links that are clicked on the most."],
                     out relatedLink: Array(Entity(tt:url)) #[org_schema_type="URL"] #[org_schema_comment="A link related to this web page, for example to other related web pages."],
                     out mainContentOfPage: Entity(org.schema:WebPageElement) #[org_schema_type="WebPageElement"] #[org_schema_comment="Indicates if this web page element is the main subject of the page."],
                     out reviewedBy: Entity(org.schema:Organization) #[org_schema_type="Organization"] #[org_schema_comment="People or organizations that have reviewed the content on this web page for accuracy and/or completeness."],
                     out primaryImageOfPage: Entity(org.schema:ImageObject) #[org_schema_type="ImageObject"] #[org_schema_comment="Indicates the main image on the page."],
                     out specialty: Entity(org.schema:Specialty) #[org_schema_type="Specialty"] #[org_schema_comment="One of the domain specialities to which this web page's content applies."])
  #[org_schema_comment="A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so the various properties about that webpage, such as <code>breadcrumb</code> may be used. We recommend explicit declaration if these properties are specified, but if they are found outside of an itemscope, they will be assumed to be about the page."];

  list query AboutPage(out id: Entity(org.schema:AboutPage))
  #[org_schema_comment="Web page type: About page."];

  list query Action(out id: Entity(org.schema:Action),
                    out result: Entity(org.schema:Thing) #[org_schema_type="Thing"] #[org_schema_comment="The result produced in the action. e.g. John wrote <em>a book</em>."],
                    out startTime: Time #[org_schema_type="Time"] #[org_schema_comment="The startTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to start. For actions that span a period of time, when the action was performed. e.g. John wrote a book from <em>January</em> to December. For media, including audio and video, it's the time offset of the start of a clip within a larger file.<br/><br/>\n\nNote that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions."],
                    out actionStatus: Enum(PotentialActionStatus,FailedActionStatus,CompletedActionStatus,ActiveActionStatus) #[org_schema_type="ActionStatusType"] #[org_schema_comment="Indicates the current disposition of the Action."],
                    out target: Entity(org.schema:EntryPoint) #[org_schema_type="EntryPoint"] #[org_schema_comment="Indicates a target EntryPoint for an Action."],
                    out agent: Entity(org.schema:Organization) #[org_schema_type="Organization"] #[org_schema_comment="The direct performer or driver of the action (animate or inanimate). e.g. <em>John</em> wrote a book."],
                    out endTime: Date #[org_schema_type="DateTime"] #[org_schema_comment="The endTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to end. For actions that span a period of time, when the action was performed. e.g. John wrote a book from January to <em>December</em>. For media, including audio and video, it's the time offset of the end of a clip within a larger file.<br/><br/>\n\nNote that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions."],
                    out participant: Entity(org.schema:Person) #[org_schema_type="Person"] #[org_schema_comment="Other co-agents that participated in the action indirectly. e.g. John wrote a book with <em>Steve</em>."],
                    out instrument: Entity(org.schema:Thing) #[org_schema_type="Thing"] #[org_schema_comment="The object that helped the agent perform the action. e.g. John wrote a book with <em>a pen</em>."],
                    out object: Entity(org.schema:Thing) #[org_schema_type="Thing"] #[org_schema_comment="The object upon which the action is carried out, whose state is kept intact or changed. Also known as the semantic roles patient, affected or undergoer (which change their state) or theme (which doesn't). e.g. John read <em>a book</em>."],
                    out error: Entity(org.schema:Thing) #[org_schema_type="Thing"] #[org_schema_comment="For failed actions, more information on the cause of the failure."],
                    out location: {
                      postOfficeBoxNumber: String,
                      streetAddress: String,
                      addressCountry: String,
                      addressRegion: String,
                      postalCode: String,
                      addressLocality: String,
                      areaServed: String,
                      faxNumber: String,
                      hoursAvailable: {
                        validFrom: Date,
                        validThrough: Date,
                        opens: Time,
                        closes: Time,
                        dayOfWeek: Enum(Wednesday,Sunday,PublicHolidays,Monday,Friday,Tuesday,Saturday,Thursday)
                      },
                      contactOption: Enum(HearingImpairedSupported,TollFree),
                      availableLanguage: Array(String),
                      telephone: Entity(tt:phone_number),
                      email: String,
                      contactType: Array(String),
                      productSupported: String
                    } #[org_schema_type="PostalAddress"] #[org_schema_comment="The location of for example where the event is happening, an organization is located, or where an action takes place."])
  #[org_schema_comment="An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.<br/><br/>\n\nSee also <a href=\"http://blog.schema.org/2014/04/announcing-schemaorg-actions.html\">blog post</a> and <a href=\"http://schema.org/docs/actions.html\">Actions overview document</a>."];

  list query Book(out id: Entity(org.schema:Book),
                  out isbn: String #[org_schema_type="Text"] #[org_schema_comment="The ISBN of the book."],
                  out bookEdition: String #[org_schema_type="Text"] #[org_schema_comment="The edition of the book."],
                  out bookFormat: Enum(EBook,AudiobookFormat,Hardcover,Paperback) #[org_schema_type="BookFormatType"] #[org_schema_comment="The format of the book."],
                  out illustrator: Entity(org.schema:Person) #[org_schema_type="Person"] #[org_schema_comment="The illustrator of the book."])
  #[org_schema_comment="A book."];

  list query UserPlays(out id: Entity(org.schema:UserPlays))
  #[org_schema_comment="UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use <a class=\"localLink\" href=\"http://schema.org/Action\">Action</a>-based vocabulary, alongside types such as <a class=\"localLink\" href=\"http://schema.org/Comment\">Comment</a>."];

  list query Occupation(out id: Entity(org.schema:Occupation),
                        out occupationLocation: Entity(org.schema:AdministrativeArea) #[org_schema_type="AdministrativeArea"] #[org_schema_comment="The region/country for which this occupational description is appropriate. Note that educational requirements and qualifications can vary between jurisdictions."],
                        out skills: String #[org_schema_type="Text"] #[org_schema_comment="Skills required to fulfill this role or in this Occupation."],
                        out responsibilities: String #[org_schema_type="Text"] #[org_schema_comment="Responsibilities associated with this role or Occupation."],
                        out occupationalCategory: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A category describing the job, preferably using a term from a taxonomy such as <a href=\"http://www.onetcenter.org/taxonomy.html\">BLS O*NET-SOC</a>, <a href=\"https://www.ilo.org/public/english/bureau/stat/isco/isco08/\">ISCO-08</a> or similar, with the property repeated for each applicable value. Ideally the taxonomy should be identified, and both the textual label and formal code for the category should be provided.<br/><br/>\n\nNote: for historical reasons, any textual label and formal code provided as a literal may be assumed to be from O*NET-SOC."],
                        out experienceRequirements: String #[org_schema_type="Text"] #[org_schema_comment="Description of skills and experience needed for the position or Occupation."],
                        out estimatedSalary: Array(Currency) #[org_schema_type="MonetaryAmount"] #[org_schema_comment="An estimated salary for a job posting or occupation, based on a variety of variables including, but not limited to industry, job title, and location. Estimated salaries  are often computed by outside organizations rather than the hiring organization, who may not have committed to the estimated value."])
  #[org_schema_comment="A profession, may involve prolonged training and/or a formal qualification."];

  list query SportsActivityLocation(out id: Entity(org.schema:SportsActivityLocation))
  #[org_schema_comment="A sports location, such as a playing field."];

  list query CivicStructure(out id: Entity(org.schema:CivicStructure),
                            out openingHours: String #[org_schema_type="Text"] #[org_schema_comment="The general opening hours for a business. Opening hours can be specified as a weekly time range, starting with days, then times per day. Multiple days can be listed with commas ',' separating each day. Day or time ranges are specified using a hyphen '-'.<br/><br/>\n\n<ul>\n<li>Days are specified using the following two-letter combinations: <code>Mo</code>, <code>Tu</code>, <code>We</code>, <code>Th</code>, <code>Fr</code>, <code>Sa</code>, <code>Su</code>.</li>\n<li>Times are specified using 24:00 time. For example, 3pm is specified as <code>15:00</code>. </li>\n<li>Here is an example: <code>&lt;time itemprop=\"openingHours\" datetime=&quot;Tu,Th 16:00-20:00&quot;&gt;Tuesdays and Thursdays 4-8pm&lt;/time&gt;</code>.</li>\n<li>If a business is open 7 days a week, then it can be specified as <code>&lt;time itemprop=&quot;openingHours&quot; datetime=&quot;Mo-Su&quot;&gt;Monday through Sunday, all day&lt;/time&gt;</code>.</li>\n</ul>\n"])
  #[org_schema_comment="A public structure, such as a town hall or concert hall."];

  list query StadiumOrArena(out id: Entity(org.schema:StadiumOrArena))
  #[org_schema_comment="A stadium."];

  list query ConvenienceStore(out id: Entity(org.schema:ConvenienceStore))
  #[org_schema_comment="A convenience store."];

  list query Order(out id: Entity(org.schema:Order),
                   out orderDate: Date #[org_schema_type="Date"] #[org_schema_comment="Date order was placed."],
                   out orderNumber: String #[org_schema_type="Text"] #[org_schema_comment="The identifier of the transaction."],
                   out paymentUrl: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="The URL for sending a payment."],
                   out orderStatus: Enum(OrderReturned,OrderProcessing,OrderPickupAvailable,OrderProblem,OrderDelivered,OrderInTransit,OrderCancelled,OrderPaymentDue) #[org_schema_type="OrderStatus"] #[org_schema_comment="The current status of the order."],
                   out billingAddress: {
                     postOfficeBoxNumber: String,
                     streetAddress: String,
                     addressCountry: String,
                     addressRegion: String,
                     postalCode: String,
                     addressLocality: String,
                     areaServed: String,
                     faxNumber: String,
                     hoursAvailable: {
                       validFrom: Date,
                       validThrough: Date,
                       opens: Time,
                       closes: Time,
                       dayOfWeek: Enum(Wednesday,Sunday,PublicHolidays,Monday,Friday,Tuesday,Saturday,Thursday)
                     },
                     contactOption: Enum(HearingImpairedSupported,TollFree),
                     availableLanguage: Array(String),
                     telephone: Entity(tt:phone_number),
                     email: String,
                     contactType: Array(String),
                     productSupported: String
                   } #[org_schema_type="PostalAddress"] #[org_schema_comment="The billing address for the order."],
                   out partOfInvoice: Entity(org.schema:Invoice) #[org_schema_type="Invoice"] #[org_schema_comment="The order is being paid as part of the referenced Invoice."],
                   out confirmationNumber: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A number that confirms the given order or payment has been received."],
                   out customer: Entity(org.schema:Person) #[org_schema_type="Person"] #[org_schema_comment="Party placing the order or paying the invoice."],
                   out broker: Array(Entity(org.schema:Person)) #[org_schema_type="Person"] #[org_schema_comment="An entity that arranges for an exchange between a buyer and a seller.  In most cases a broker never acquires or releases ownership of a product or service involved in an exchange.  If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred."],
                   out isGift: Boolean #[org_schema_type="Boolean"] #[org_schema_comment="Was the offer accepted as a gift for someone other than the buyer."],
                   out paymentMethod: Entity(org.schema:PaymentMethod) #[org_schema_type="PaymentMethod"] #[org_schema_comment="The name of the credit card or other method of payment for the order."],
                   out seller: Array(Entity(org.schema:Organization)) #[org_schema_type="Organization"] #[org_schema_comment="An entity which offers (sells / leases / lends / loans) the services / goods.  A seller may also be a provider."],
                   out paymentMethodId: Array(String) #[org_schema_type="Text"] #[org_schema_comment="An identifier for the method of payment used (e.g. the last 4 digits of the credit card)."],
                   out discount: Number #[org_schema_type="Number"] #[org_schema_comment="Any discount applied (to an Order)."],
                   out orderDelivery: Entity(org.schema:ParcelDelivery) #[org_schema_type="ParcelDelivery"] #[org_schema_comment="The delivery of the parcel related to this order or order item."],
                   out orderedItem: Entity(org.schema:Service) #[org_schema_type="Service"] #[org_schema_comment="The item ordered."],
                   out acceptedOffer: Entity(org.schema:Offer) #[org_schema_type="Offer"] #[org_schema_comment="The offer(s) -- e.g., product, quantity and price combinations -- included in the order."],
                   out discountCurrency: String #[org_schema_type="Text"] #[org_schema_comment="The currency of the discount.<br/><br/>\n\nUse standard formats: <a href=\"http://en.wikipedia.org/wiki/ISO_4217\">ISO 4217 currency format</a> e.g. \"USD\"; <a href=\"https://en.wikipedia.org/wiki/List_of_cryptocurrencies\">Ticker symbol</a> for cryptocurrencies e.g. \"BTC\"; well known names for <a href=\"https://en.wikipedia.org/wiki/Local_exchange_trading_system\">Local Exchange Tradings Systems</a> (LETS) and other currency types e.g. \"Ithaca HOUR\"."],
                   out paymentDueDate: Date #[org_schema_type="DateTime"] #[org_schema_comment="The date that payment is due."],
                   out discountCode: String #[org_schema_type="Text"] #[org_schema_comment="Code used to redeem a discount."])
  #[org_schema_comment="An order is a confirmation of a transaction (a receipt), which can contain multiple line items, each represented by an Offer that has been accepted by the customer."];

  list query Dataset(out id: Entity(org.schema:Dataset),
                     out includedInDataCatalog: Array(Entity(org.schema:DataCatalog)) #[org_schema_type="DataCatalog"] #[org_schema_comment="A data catalog which contains this dataset."],
                     out issn: String #[org_schema_type="Text"] #[org_schema_comment="The International Standard Serial Number (ISSN) that identifies this serial publication. You can repeat this property to identify different formats of, or the linking ISSN (ISSN-L) for, this serial publication."],
                     out distribution: Array(Entity(org.schema:DataDownload)) #[org_schema_type="DataDownload"] #[org_schema_comment="A downloadable form of this dataset, at a specific location, in a specific format."])
  #[org_schema_comment="A body of structured information describing some topic(s) of interest."];

  list query Person(out id: Entity(org.schema:Person),
                    out memberOf: Array(Entity(org.schema:ProgramMembership)) #[org_schema_type="ProgramMembership"] #[org_schema_comment="An Organization (or ProgramMembership) to which this Person or Organization belongs."],
                    out address: {
                      postOfficeBoxNumber: String,
                      streetAddress: String,
                      addressCountry: String,
                      addressRegion: String,
                      postalCode: String,
                      addressLocality: String,
                      areaServed: String,
                      faxNumber: String,
                      hoursAvailable: {
                        validFrom: Date,
                        validThrough: Date,
                        opens: Time,
                        closes: Time,
                        dayOfWeek: Enum(Wednesday,Sunday,PublicHolidays,Monday,Friday,Tuesday,Saturday,Thursday)
                      },
                      contactOption: Enum(HearingImpairedSupported,TollFree),
                      availableLanguage: Array(String),
                      telephone: Entity(tt:phone_number),
                      email: String,
                      contactType: Array(String),
                      productSupported: String
                    } #[org_schema_type="PostalAddress"] #[org_schema_comment="Physical address of the item."],
                    out spouse: Entity(org.schema:Person) #[org_schema_type="Person"] #[org_schema_comment="The person's spouse."],
                    out funder: Array(Entity(org.schema:Organization)) #[org_schema_type="Organization"] #[org_schema_comment="A person or organization that supports (sponsors) something through some kind of financial contribution."],
                    out deathDate: Date #[org_schema_type="Date"] #[org_schema_comment="Date of death."],
                    out height: Measure(m) #[org_schema_type="Distance"] #[org_schema_comment="The height of the item."],
                    out workLocation: Array({
  areaServed: String,
  faxNumber: String,
  hoursAvailable: {
    validFrom: Date,
    validThrough: Date,
    opens: Time,
    closes: Time,
    dayOfWeek: Enum(Wednesday,Sunday,PublicHolidays,Monday,Friday,Tuesday,Saturday,Thursday)
  },
  contactOption: Enum(HearingImpairedSupported,TollFree),
  availableLanguage: Array(String),
  telephone: Entity(tt:phone_number),
  email: String,
  contactType: Array(String),
  productSupported: String
}) #[org_schema_type="ContactPoint"] #[org_schema_comment="A contact location for a person's place of work."],
                    out netWorth: Currency #[org_schema_type="MonetaryAmount"] #[org_schema_comment="The total financial value of the person as calculated by subtracting assets from liabilities."],
                    out faxNumber: String #[org_schema_type="Text"] #[org_schema_comment="The fax number."],
                    out children: Array(Entity(org.schema:Person)) #[org_schema_type="Person"] #[org_schema_comment="A child of the person."],
                    out hasOccupation: Entity(org.schema:Occupation) #[org_schema_type="Occupation"] #[org_schema_comment="The Person's occupation. For past professions, use Role for expressing dates."],
                    out hasOfferCatalog: Array(Entity(org.schema:Offer)) #[org_schema_type="OfferCatalog"] #[org_schema_comment="Indicates an OfferCatalog listing for this Organization, Person, or Service."],
                    out deathPlace: Entity(org.schema:Place) #[org_schema_type="Place"] #[org_schema_comment="The place where the person died."],
                    out globalLocationNumber: String #[org_schema_type="Text"] #[org_schema_comment="The <a href=\"http://www.gs1.org/gln\">Global Location Number</a> (GLN, sometimes also referred to as International Location Number or ILN) of the respective organization, person, or place. The GLN is a 13-digit number used to identify parties and physical locations."],
                    out birthPlace: Entity(org.schema:Place) #[org_schema_type="Place"] #[org_schema_comment="The place where the person was born."],
                    out gender: Enum(Male,Female) #[org_schema_type="GenderType"] #[org_schema_comment="Gender of the person. While http://schema.org/Male and http://schema.org/Female may be used, text strings are also acceptable for people who do not identify as a binary gender."],
                    out alumniOf: Array(Entity(org.schema:Organization)) #[org_schema_type="Organization"] #[org_schema_comment="An organization that the person is an alumni of."],
                    out homeLocation: Array({
  areaServed: String,
  faxNumber: String,
  hoursAvailable: {
    validFrom: Date,
    validThrough: Date,
    opens: Time,
    closes: Time,
    dayOfWeek: Enum(Wednesday,Sunday,PublicHolidays,Monday,Friday,Tuesday,Saturday,Thursday)
  },
  contactOption: Enum(HearingImpairedSupported,TollFree),
  availableLanguage: Array(String),
  telephone: Entity(tt:phone_number),
  email: String,
  contactType: Array(String),
  productSupported: String
}) #[org_schema_type="ContactPoint"] #[org_schema_comment="A contact location for a person's residence."],
                    out duns: String #[org_schema_type="Text"] #[org_schema_comment="The Dun &amp; Bradstreet DUNS number for identifying an organization or business person."],
                    out taxID: String #[org_schema_type="Text"] #[org_schema_comment="The Tax / Fiscal ID of the organization or person, e.g. the TIN in the US or the CIF/NIF in Spain."],
                    out award: Array(String) #[org_schema_type="Text"] #[org_schema_comment="An award won by or for this item."],
                    out birthDate: Date #[org_schema_type="Date"] #[org_schema_comment="Date of birth."],
                    out makesOffer: Array(Entity(org.schema:Offer)) #[org_schema_type="Offer"] #[org_schema_comment="A pointer to products or services offered by the organization or person."],
                    out familyName: String #[org_schema_type="Text"] #[org_schema_comment="Family name. In the U.S., the last name of an Person. This can be used along with givenName instead of the name property."],
                    out seeks: Array(Entity(org.schema:Demand)) #[org_schema_type="Demand"] #[org_schema_comment="A pointer to products or services sought by the organization or person (demand)."],
                    out sibling: Array(Entity(org.schema:Person)) #[org_schema_type="Person"] #[org_schema_comment="A sibling of the person."],
                    out performerIn: Entity(org.schema:Event) #[org_schema_type="Event"] #[org_schema_comment="Event that this person is a performer or participant in."],
                    out honorificPrefix: Array(String) #[org_schema_type="Text"] #[org_schema_comment="An honorific prefix preceding a Person's name such as Dr/Mrs/Mr."],
                    out additionalName: Array(String) #[org_schema_type="Text"] #[org_schema_comment="An additional name for a Person, can be used for a middle name."],
                    out telephone: Entity(tt:phone_number) #[org_schema_type="Text"] #[org_schema_comment="The telephone number."],
                    out email: String #[org_schema_type="Text"] #[org_schema_comment="Email address."],
                    out weight: Measure(ms) #[org_schema_type="QuantitativeValue"] #[org_schema_comment="The weight of the product or person."],
                    out contactPoint: Array({
  areaServed: String,
  faxNumber: String,
  hoursAvailable: {
    validFrom: Date,
    validThrough: Date,
    opens: Time,
    closes: Time,
    dayOfWeek: Enum(Wednesday,Sunday,PublicHolidays,Monday,Friday,Tuesday,Saturday,Thursday)
  },
  contactOption: Enum(HearingImpairedSupported,TollFree),
  availableLanguage: Array(String),
  telephone: Entity(tt:phone_number),
  email: String,
  contactType: Array(String),
  productSupported: String
}) #[org_schema_type="ContactPoint"] #[org_schema_comment="A contact point for a person or organization."],
                    out colleague: Array(Entity(tt:url)) #[org_schema_type="URL"] #[org_schema_comment="A colleague of the person."],
                    out givenName: String #[org_schema_type="Text"] #[org_schema_comment="Given name. In the U.S., the first name of a Person. This can be used along with familyName instead of the name property."],
                    out naics: String #[org_schema_type="Text"] #[org_schema_comment="The North American Industry Classification System (NAICS) code for a particular organization or business person."],
                    out hasPOS: Entity(org.schema:Place) #[org_schema_type="Place"] #[org_schema_comment="Points-of-Sales operated by the organization or person."],
                    out parent: Array(Entity(org.schema:Person)) #[org_schema_type="Person"] #[org_schema_comment="A parent of this person."],
                    out owns: {
                      typeOfGood: Entity(org.schema:Product),
                      ownedFrom: Date,
                      ownedThrough: Date,
                      acquiredFrom: Entity(org.schema:Person)
                    } #[org_schema_type="OwnershipInfo"] #[org_schema_comment="Products owned by the organization or person."],
                    out affiliation: Array(Entity(org.schema:Organization)) #[org_schema_type="Organization"] #[org_schema_comment="An organization that this person is affiliated with. For example, a school/university, a club, or a team."],
                    out publishingPrinciples: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="The publishingPrinciples property indicates (typically via <a class=\"localLink\" href=\"http://schema.org/URL\">URL</a>) a document describing the editorial principles of an <a class=\"localLink\" href=\"http://schema.org/Organization\">Organization</a> (or individual e.g. a <a class=\"localLink\" href=\"http://schema.org/Person\">Person</a> writing a blog) that relate to their activities as a publisher, e.g. ethics or diversity policies. When applied to a <a class=\"localLink\" href=\"http://schema.org/CreativeWork\">CreativeWork</a> (e.g. <a class=\"localLink\" href=\"http://schema.org/NewsArticle\">NewsArticle</a>) the principles are those of the party primarily responsible for the creation of the <a class=\"localLink\" href=\"http://schema.org/CreativeWork\">CreativeWork</a>.<br/><br/>\n\nWhile such policies are most typically expressed in natural language, sometimes related information (e.g. indicating a <a class=\"localLink\" href=\"http://schema.org/funder\">funder</a>) can be expressed using schema.org terminology."],
                    out sponsor: Array(Entity(org.schema:Person)) #[org_schema_type="Person"] #[org_schema_comment="A person or organization that supports a thing through a pledge, promise, or financial contribution. e.g. a sponsor of a Medical Study or a corporate sponsor of an event."],
                    out isicV4: String #[org_schema_type="Text"] #[org_schema_comment="The International Standard of Industrial Classification of All Economic Activities (ISIC), Revision 4 code for a particular organization, business person, or place."],
                    out brand: Entity(org.schema:Brand) #[org_schema_type="Brand"] #[org_schema_comment="The brand(s) associated with a product or service, or the brand(s) maintained by an organization or business person."],
                    out honorificSuffix: Array(String) #[org_schema_type="Text"] #[org_schema_comment="An honorific suffix preceding a Person's name such as M.D. /PhD/MSCSW."],
                    out vatID: String #[org_schema_type="Text"] #[org_schema_comment="The Value-added Tax ID of the organization or person."],
                    out nationality: Entity(org.schema:Country) #[org_schema_type="Country"] #[org_schema_comment="Nationality of the person."],
                    out relatedTo: Entity(org.schema:Person) #[org_schema_type="Person"] #[org_schema_comment="The most generic familial relation."],
                    out follows: Entity(org.schema:Person) #[org_schema_type="Person"] #[org_schema_comment="The most generic uni-directional social relation."],
                    out knows: Entity(org.schema:Person) #[org_schema_type="Person"] #[org_schema_comment="The most generic bi-directional social/work relation."],
                    out worksFor: Entity(org.schema:Organization) #[org_schema_type="Organization"] #[org_schema_comment="Organizations that the person works for."])
  #[org_schema_comment="A person (alive, dead, undead, or fictional)."];

  list query FinancialService(out id: Entity(org.schema:FinancialService),
                              out feesAndCommissionsSpecification: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="Description of fees, commissions, and other terms applied either to a class of financial product, or by a financial service organization."])
  #[org_schema_comment="Financial services business."];

  list query InsuranceAgency(out id: Entity(org.schema:InsuranceAgency))
  #[org_schema_comment="An Insurance agency."];

  list query MediaObject(out id: Entity(org.schema:MediaObject),
                         out startTime: Time #[org_schema_type="Time"] #[org_schema_comment="The startTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to start. For actions that span a period of time, when the action was performed. e.g. John wrote a book from <em>January</em> to December. For media, including audio and video, it's the time offset of the start of a clip within a larger file.<br/><br/>\n\nNote that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions."],
                         out uploadDate: Date #[org_schema_type="Date"] #[org_schema_comment="Date when this media object was uploaded to this site."],
                         out playerType: String #[org_schema_type="Text"] #[org_schema_comment="Player type required&#x2014;for example, Flash or Silverlight."],
                         out height: Measure(m) #[org_schema_type="Distance"] #[org_schema_comment="The height of the item."],
                         out bitrate: String #[org_schema_type="Text"] #[org_schema_comment="The bitrate of the media object."],
                         out requiresSubscription: Boolean #[org_schema_type="Boolean"] #[org_schema_comment="Indicates if use of the media require a subscription  (either paid or free). Allowed values are <code>true</code> or <code>false</code> (note that an earlier version had 'yes', 'no')."],
                         out regionsAllowed: Entity(org.schema:Place) #[org_schema_type="Place"] #[org_schema_comment="The regions where the media is allowed. If not specified, then it's assumed to be allowed everywhere. Specify the countries in <a href=\"http://en.wikipedia.org/wiki/ISO_3166\">ISO 3166 format</a>."],
                         out endTime: Date #[org_schema_type="DateTime"] #[org_schema_comment="The endTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to end. For actions that span a period of time, when the action was performed. e.g. John wrote a book from January to <em>December</em>. For media, including audio and video, it's the time offset of the end of a clip within a larger file.<br/><br/>\n\nNote that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions."],
                         out contentSize: String #[org_schema_type="Text"] #[org_schema_comment="File size in (mega/kilo) bytes."],
                         out embedUrl: Array(Entity(tt:url)) #[org_schema_type="URL"] #[org_schema_comment="A URL pointing to a player for a specific video. In general, this is the information in the <code>src</code> element of an <code>embed</code> tag and should not be the same as the content of the <code>loc</code> tag."],
                         out width: Measure(m) #[org_schema_type="Distance"] #[org_schema_comment="The width of the item."],
                         out contentUrl: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="Actual bytes of the media object, for example the image file or video file."],
                         out associatedArticle: Array(Entity(org.schema:NewsArticle)) #[org_schema_type="NewsArticle"] #[org_schema_comment="A NewsArticle associated with the Media Object."],
                         out productionCompany: Entity(org.schema:Organization) #[org_schema_type="Organization"] #[org_schema_comment="The production company or studio responsible for the item e.g. series, video game, episode etc."],
                         out duration: Measure(ms) #[org_schema_type="Duration"] #[org_schema_comment="The duration of the item (movie, audio recording, event, etc.) in <a href=\"http://en.wikipedia.org/wiki/ISO_8601\">ISO 8601 date format</a>."],
                         out encodesCreativeWork: Entity(org.schema:CreativeWork) #[org_schema_type="CreativeWork"] #[org_schema_comment="The CreativeWork encoded by this media object."],
                         out encodingFormat: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="Media type typically expressed using a MIME format (see <a href=\"http://www.iana.org/assignments/media-types/media-types.xhtml\">IANA site</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MDN reference</a>) e.g. application/zip for a SoftwareApplication binary, audio/mpeg for .mp3 etc.).<br/><br/>\n\nIn cases where a <a class=\"localLink\" href=\"http://schema.org/CreativeWork\">CreativeWork</a> has several media type representations, <a class=\"localLink\" href=\"http://schema.org/encoding\">encoding</a> can be used to indicate each <a class=\"localLink\" href=\"http://schema.org/MediaObject\">MediaObject</a> alongside particular <a class=\"localLink\" href=\"http://schema.org/encodingFormat\">encodingFormat</a> information.<br/><br/>\n\nUnregistered or niche encoding and file formats can be indicated instead via the most appropriate URL, e.g. defining Web page or a Wikipedia/Wikidata entry."])
  #[org_schema_comment="A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's)."];

  list query AudioObject(out id: Entity(org.schema:AudioObject),
                         out transcript: String #[org_schema_type="Text"] #[org_schema_comment="If this MediaObject is an AudioObject or VideoObject, the transcript of that object."],
                         out caption: String #[org_schema_type="Text"] #[org_schema_comment="The caption for this object. For downloadable machine formats (closed caption, subtitles etc.) use MediaObject and indicate the <a class=\"localLink\" href=\"http://schema.org/encodingFormat\">encodingFormat</a>."])
  #[org_schema_comment="An audio file."];

  list query MusicRecording(out id: Entity(org.schema:MusicRecording),
                            out recordingOf: Entity(org.schema:MusicComposition) #[org_schema_type="MusicComposition"] #[org_schema_comment="The composition this track is a recording of."],
                            out isrcCode: String #[org_schema_type="Text"] #[org_schema_comment="The International Standard Recording Code for the recording."],
                            out inAlbum: Entity(org.schema:MusicAlbum) #[org_schema_type="MusicAlbum"] #[org_schema_comment="The album to which this recording belongs."],
                            out inPlaylist: Entity(org.schema:MusicPlaylist) #[org_schema_type="MusicPlaylist"] #[org_schema_comment="The playlist to which this recording belongs."],
                            out byArtist: Entity(org.schema:MusicGroup) #[org_schema_type="MusicGroup"] #[org_schema_comment="The artist that performed this album or recording."],
                            out duration: Measure(ms) #[org_schema_type="Duration"] #[org_schema_comment="The duration of the item (movie, audio recording, event, etc.) in <a href=\"http://en.wikipedia.org/wiki/ISO_8601\">ISO 8601 date format</a>."])
  #[org_schema_comment="A music recording (track), usually a single song."];

  list query GeospatialGeometry(out id: Entity(org.schema:GeospatialGeometry),
                                out geoWithin: Entity(org.schema:GeospatialGeometry) #[org_schema_type="GeospatialGeometry"] #[org_schema_comment="Represents a relationship between two geometries (or the places they represent), relating a geometry to one that contains it, i.e. it is inside (i.e. within) its interior. As defined in <a href=\"https://en.wikipedia.org/wiki/DE-9IM\">DE-9IM</a>."],
                                out geoContains: Entity(org.schema:Place) #[org_schema_type="Place"] #[org_schema_comment="Represents a relationship between two geometries (or the places they represent), relating a containing geometry to a contained geometry. \"a contains b iff no points of b lie in the exterior of a, and at least one point of the interior of b lies in the interior of a\". As defined in <a href=\"https://en.wikipedia.org/wiki/DE-9IM\">DE-9IM</a>."],
                                out geoOverlaps: Entity(org.schema:GeospatialGeometry) #[org_schema_type="GeospatialGeometry"] #[org_schema_comment="Represents a relationship between two geometries (or the places they represent), relating a geometry to another that geospatially overlaps it, i.e. they have some but not all points in common. As defined in <a href=\"https://en.wikipedia.org/wiki/DE-9IM\">DE-9IM</a>."],
                                out geoCrosses: Entity(org.schema:Place) #[org_schema_type="Place"] #[org_schema_comment="Represents a relationship between two geometries (or the places they represent), relating a geometry to another that crosses it: \"a crosses b: they have some but not all interior points in common, and the dimension of the intersection is less than that of at least one of them\". As defined in <a href=\"https://en.wikipedia.org/wiki/DE-9IM\">DE-9IM</a>."],
                                out geoCovers: Entity(org.schema:Place) #[org_schema_type="Place"] #[org_schema_comment="Represents a relationship between two geometries (or the places they represent), relating a covering geometry to a covered geometry. \"Every point of b is a point of (the interior or boundary of) a\". As defined in <a href=\"https://en.wikipedia.org/wiki/DE-9IM\">DE-9IM</a>."],
                                out geoEquals: Entity(org.schema:Place) #[org_schema_type="Place"] #[org_schema_comment="Represents spatial relations in which two geometries (or the places they represent) are topologically equal, as defined in <a href=\"https://en.wikipedia.org/wiki/DE-9IM\">DE-9IM</a>. \"Two geometries are topologically equal if their interiors intersect and no part of the interior or boundary of one geometry intersects the exterior of the other\" (a symmetric relationship)"],
                                out geoTouches: Entity(org.schema:Place) #[org_schema_type="Place"] #[org_schema_comment="Represents spatial relations in which two geometries (or the places they represent) touch: they have at least one boundary point in common, but no interior points.\" (a symmetric relationship, as defined in <a href=\"https://en.wikipedia.org/wiki/DE-9IM\">DE-9IM</a> )"],
                                out geoDisjoint: Entity(org.schema:GeospatialGeometry) #[org_schema_type="GeospatialGeometry"] #[org_schema_comment="Represents spatial relations in which two geometries (or the places they represent) are topologically disjoint: they have no point in common. They form a set of disconnected geometries.\" (a symmetric relationship, as defined in <a href=\"https://en.wikipedia.org/wiki/DE-9IM\">DE-9IM</a>)"],
                                out geoIntersects: Entity(org.schema:GeospatialGeometry) #[org_schema_type="GeospatialGeometry"] #[org_schema_comment="Represents spatial relations in which two geometries (or the places they represent) have at least one point in common. As defined in <a href=\"https://en.wikipedia.org/wiki/DE-9IM\">DE-9IM</a>."],
                                out geoCoveredBy: Entity(org.schema:GeospatialGeometry) #[org_schema_type="GeospatialGeometry"] #[org_schema_comment="Represents a relationship between two geometries (or the places they represent), relating a geometry to another that covers it. As defined in <a href=\"https://en.wikipedia.org/wiki/DE-9IM\">DE-9IM</a>."]);

  list query Reservation(out id: Entity(org.schema:Reservation),
                         out reservationStatus: Enum(ReservationConfirmed,ReservationPending,ReservationCancelled,ReservationHold) #[org_schema_type="ReservationStatusType"] #[org_schema_comment="The current status of the reservation."],
                         out provider: Entity(org.schema:Person) #[org_schema_type="Person"] #[org_schema_comment="The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller."],
                         out programMembershipUsed: Entity(org.schema:ProgramMembership) #[org_schema_type="ProgramMembership"] #[org_schema_comment="Any membership in a frequent flyer, hotel loyalty program, etc. being applied to the reservation."],
                         out underName: Entity(org.schema:Organization) #[org_schema_type="Organization"] #[org_schema_comment="The person or organization the reservation or ticket is for."],
                         out totalPrice: Number #[org_schema_type="Number"] #[org_schema_comment="The total price for the reservation or ticket, including applicable taxes, shipping, etc.<br/><br/>\n\nUsage guidelines:<br/><br/>\n\n<ul>\n<li>Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.</li>\n<li>Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.</li>\n</ul>\n"],
                         out reservationFor: Entity(org.schema:Thing) #[org_schema_type="Thing"] #[org_schema_comment="The thing -- flight, event, restaurant,etc. being reserved."],
                         out priceCurrency: String #[org_schema_type="Text"] #[org_schema_comment="The currency of the price, or a price component when attached to <a class=\"localLink\" href=\"http://schema.org/PriceSpecification\">PriceSpecification</a> and its subtypes.<br/><br/>\n\nUse standard formats: <a href=\"http://en.wikipedia.org/wiki/ISO_4217\">ISO 4217 currency format</a> e.g. \"USD\"; <a href=\"https://en.wikipedia.org/wiki/List_of_cryptocurrencies\">Ticker symbol</a> for cryptocurrencies e.g. \"BTC\"; well known names for <a href=\"https://en.wikipedia.org/wiki/Local_exchange_trading_system\">Local Exchange Tradings Systems</a> (LETS) and other currency types e.g. \"Ithaca HOUR\"."],
                         out broker: Array(Entity(org.schema:Person)) #[org_schema_type="Person"] #[org_schema_comment="An entity that arranges for an exchange between a buyer and a seller.  In most cases a broker never acquires or releases ownership of a product or service involved in an exchange.  If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred."],
                         out modifiedTime: Date #[org_schema_type="DateTime"] #[org_schema_comment="The date and time the reservation was modified."],
                         out bookingTime: Date #[org_schema_type="DateTime"] #[org_schema_comment="The date and time the reservation was booked."],
                         out reservationId: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A unique identifier for the reservation."],
                         out reservedTicket: Array(Entity(org.schema:Ticket)) #[org_schema_type="Ticket"] #[org_schema_comment="A ticket associated with the reservation."])
  #[org_schema_comment="Describes a reservation for travel, dining or an event. Some reservations require tickets. <br/><br/>\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, restaurant reservations, flights, or rental cars, use <a class=\"localLink\" href=\"http://schema.org/Offer\">Offer</a>."];

  list query TaxiReservation(out id: Entity(org.schema:TaxiReservation),
                             out pickupTime: Date #[org_schema_type="DateTime"] #[org_schema_comment="When a taxi will pickup a passenger or a rental car can be picked up."],
                             out partySize: Number #[org_schema_type="QuantitativeValue"] #[org_schema_comment="Number of people the reservation should accommodate."],
                             out pickupLocation: Entity(org.schema:Place) #[org_schema_type="Place"] #[org_schema_comment="Where a taxi will pick up a passenger or a rental car can be picked up."])
  #[org_schema_comment="A reservation for a taxi.<br/><br/>\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use <a class=\"localLink\" href=\"http://schema.org/Offer\">Offer</a>."];

  list query BroadcastChannel(out id: Entity(org.schema:BroadcastChannel),
                              out broadcastFrequency: String #[org_schema_type="Text"] #[org_schema_comment="The frequency used for over-the-air broadcasts. Numeric values or simple ranges e.g. 87-99. In addition a shortcut idiom is supported for frequences of AM and FM radio channels, e.g. \"87 FM\"."],
                              out broadcastChannelId: String #[org_schema_type="Text"] #[org_schema_comment="The unique address by which the BroadcastService can be identified in a provider lineup. In US, this is typically a number."],
                              out broadcastServiceTier: String #[org_schema_type="Text"] #[org_schema_comment="The type of service required to have access to the channel (e.g. Standard or Premium)."],
                              out inBroadcastLineup: Entity(org.schema:CableOrSatelliteService) #[org_schema_type="CableOrSatelliteService"] #[org_schema_comment="The CableOrSatelliteService offering the channel."],
                              out providesBroadcastService: Entity(org.schema:BroadcastService) #[org_schema_type="BroadcastService"] #[org_schema_comment="The BroadcastService offered on this channel."],
                              out genre: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="Genre of the creative work, broadcast channel or group."])
  #[org_schema_comment="A unique instance of a BroadcastService on a CableOrSatelliteService lineup."];

  list query BroadcastService(out id: Entity(org.schema:BroadcastService),
                              out broadcastFrequency: String #[org_schema_type="Text"] #[org_schema_comment="The frequency used for over-the-air broadcasts. Numeric values or simple ranges e.g. 87-99. In addition a shortcut idiom is supported for frequences of AM and FM radio channels, e.g. \"87 FM\"."],
                              out broadcastTimezone: String #[org_schema_type="Text"] #[org_schema_comment="The timezone in <a href=\"http://en.wikipedia.org/wiki/ISO_8601\">ISO 8601 format</a> for which the service bases its broadcasts"],
                              out broadcastAffiliateOf: Entity(org.schema:Organization) #[org_schema_type="Organization"] #[org_schema_comment="The media network(s) whose content is broadcast on this station."],
                              out videoFormat: String #[org_schema_type="Text"] #[org_schema_comment="The type of screening or video broadcast used (e.g. IMAX, 3D, SD, HD, etc.)."],
                              out parentService: Array(Entity(org.schema:BroadcastService)) #[org_schema_type="BroadcastService"] #[org_schema_comment="A broadcast service to which the broadcast service may belong to such as regional variations of a national channel."],
                              out broadcastDisplayName: String #[org_schema_type="Text"] #[org_schema_comment="The name displayed in the channel guide. For many US affiliates, it is the network name."],
                              out hasBroadcastChannel: Array(Entity(org.schema:BroadcastChannel)) #[org_schema_type="BroadcastChannel"] #[org_schema_comment="A broadcast channel of a broadcast service."],
                              out broadcaster: Entity(org.schema:Organization) #[org_schema_type="Organization"] #[org_schema_comment="The organization owning or operating the broadcast service."])
  #[org_schema_comment="A delivery service through which content is provided via broadcast over the air or online."];

  list query AlignmentObject(out id: Entity(org.schema:AlignmentObject),
                             out targetDescription: String #[org_schema_type="Text"] #[org_schema_comment="The description of a node in an established educational framework."],
                             out alignmentType: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A category of alignment between the learning resource and the framework node. Recommended values include: 'assesses', 'teaches', 'requires', 'textComplexity', 'readingLevel', 'educationalSubject', and 'educationalLevel'."],
                             out targetUrl: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="The URL of a node in an established educational framework."],
                             out targetName: String #[org_schema_type="Text"] #[org_schema_comment="The name of a node in an established educational framework."],
                             out educationalFramework: String #[org_schema_type="Text"] #[org_schema_comment="The framework to which the resource being described is aligned."])
  #[org_schema_comment="An intangible item that describes an alignment between a learning resource and a node in an educational framework."];

  list query Product(out id: Entity(org.schema:Product),
                     out manufacturer: Entity(org.schema:Organization) #[org_schema_type="Organization"] #[org_schema_comment="The manufacturer of the product."],
                     out sku: String #[org_schema_type="Text"] #[org_schema_comment="The Stock Keeping Unit (SKU), i.e. a merchant-specific identifier for a product or service, or the product to which the offer refers."],
                     out audience: Enum(Researcher) #[org_schema_type="Audience"] #[org_schema_comment="An intended audience, i.e. a group for whom something was created."],
                     out mpn: String #[org_schema_type="Text"] #[org_schema_comment="The Manufacturer Part Number (MPN) of the product, or the product to which the offer refers."],
                     out height: Measure(m) #[org_schema_type="Distance"] #[org_schema_comment="The height of the item."],
                     out gtin8: String #[org_schema_type="Text"] #[org_schema_comment="The <a href=\"http://apps.gs1.org/GDD/glossary/Pages/GTIN-8.aspx\">GTIN-8</a> code of the product, or the product to which the offer refers. This code is also known as EAN/UCC-8 or 8-digit EAN. See <a href=\"http://www.gs1.org/barcodes/technical/idkeys/gtin\">GS1 GTIN Summary</a> for more details."],
                     out aggregateRating: {
                       itemReviewed: Entity(org.schema:Thing),
                       ratingValue: Number,
                       bestRating: Number,
                       author: Entity(org.schema:Person),
                       worstRating: Number,
                       reviewAspect: String
                     } #[org_schema_type="AggregateRating"] #[org_schema_comment="The overall rating, based on a collection of reviews or ratings, of the item."],
                     out isConsumableFor: Array(Entity(org.schema:Product)) #[org_schema_type="Product"] #[org_schema_comment="A pointer to another product (or multiple products) for which this product is a consumable."],
                     out offers: Array(Entity(org.schema:Offer)) #[org_schema_type="Offer"] #[org_schema_comment="An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event."],
                     out award: Array(String) #[org_schema_type="Text"] #[org_schema_comment="An award won by or for this item."],
                     out category: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy."],
                     out width: Measure(m) #[org_schema_type="Distance"] #[org_schema_comment="The width of the item."],
                     out isAccessoryOrSparePartFor: Array(Entity(org.schema:Product)) #[org_schema_type="Product"] #[org_schema_comment="A pointer to another product (or multiple products) for which this product is an accessory or spare part."],
                     out logo: Array(Entity(tt:url)) #[org_schema_type="URL"] #[org_schema_comment="An associated logo."],
                     out gtin14: String #[org_schema_type="Text"] #[org_schema_comment="The GTIN-14 code of the product, or the product to which the offer refers. See <a href=\"http://www.gs1.org/barcodes/technical/idkeys/gtin\">GS1 GTIN Summary</a> for more details."],
                     out gtin13: String #[org_schema_type="Text"] #[org_schema_comment="The GTIN-13 code of the product, or the product to which the offer refers. This is equivalent to 13-digit ISBN codes and EAN UCC-13. Former 12-digit UPC codes can be converted into a GTIN-13 code by simply adding a preceeding zero. See <a href=\"http://www.gs1.org/barcodes/technical/idkeys/gtin\">GS1 GTIN Summary</a> for more details."],
                     out gtin12: String #[org_schema_type="Text"] #[org_schema_comment="The GTIN-12 code of the product, or the product to which the offer refers. The GTIN-12 is the 12-digit GS1 Identification Key composed of a U.P.C. Company Prefix, Item Reference, and Check Digit used to identify trade items. See <a href=\"http://www.gs1.org/barcodes/technical/idkeys/gtin\">GS1 GTIN Summary</a> for more details."],
                     out material: Array(Entity(tt:url)) #[org_schema_type="URL"] #[org_schema_comment="A material that something is made from, e.g. leather, wool, cotton, paper."],
                     out weight: Measure(ms) #[org_schema_type="QuantitativeValue"] #[org_schema_comment="The weight of the product or person."],
                     out depth: Measure(m) #[org_schema_type="QuantitativeValue"] #[org_schema_comment="The depth of the item."],
                     out isSimilarTo: Array(Entity(org.schema:Product)) #[org_schema_type="Product"] #[org_schema_comment="A pointer to another, functionally similar product (or multiple products)."],
                     out model: String #[org_schema_type="Text"] #[org_schema_comment="The model of the product. Use with the URL of a ProductModel or a textual representation of the model identifier. The URL of the ProductModel can be from an external source. It is recommended to additionally provide strong product identifiers via the gtin8/gtin13/gtin14 and mpn properties."],
                     out color: String #[org_schema_type="Text"] #[org_schema_comment="The color of the product."],
                     out isRelatedTo: Array(Entity(org.schema:Product)) #[org_schema_type="Product"] #[org_schema_comment="A pointer to another, somehow related product (or multiple products)."],
                     out productID: String #[org_schema_type="Text"] #[org_schema_comment="The product identifier, such as ISBN. For example: <code>meta itemprop=\"productID\" content=\"isbn:123-456-789\"</code>."],
                     out review: Array(Entity(org.schema:Review)) #[org_schema_type="Review"] #[org_schema_comment="A review of the item."],
                     out purchaseDate: Date #[org_schema_type="Date"] #[org_schema_comment="The date the item e.g. vehicle was purchased by the current owner."],
                     out itemCondition: Enum(DamagedCondition,RefurbishedCondition,UsedCondition,NewCondition) #[org_schema_type="OfferItemCondition"] #[org_schema_comment="A predefined value from OfferItemCondition or a textual description of the condition of the product or service, or the products or services included in the offer."],
                     out productionDate: Date #[org_schema_type="Date"] #[org_schema_comment="The date of production of the item, e.g. vehicle."],
                     out slogan: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A slogan or motto associated with the item."],
                     out brand: Entity(org.schema:Brand) #[org_schema_type="Brand"] #[org_schema_comment="The brand(s) associated with a product or service, or the brand(s) maintained by an organization or business person."],
                     out releaseDate: Date #[org_schema_type="Date"] #[org_schema_comment="The release date of a product or product model. This can be used to distinguish the exact variant of a product."])
  #[org_schema_comment="Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online."];

  list query Vehicle(out id: Entity(org.schema:Vehicle),
                     out numberOfForwardGears: Number #[org_schema_type="Number"] #[org_schema_comment="The total number of forward gears available for the transmission system of the vehicle.<br/><br/>\n\nTypical unit code(s): C62"],
                     out mileageFromOdometer: Number #[org_schema_type="QuantitativeValue"] #[org_schema_comment="The total distance travelled by the particular vehicle since its initial production, as read from its odometer.<br/><br/>\n\nTypical unit code(s): KMT for kilometers, SMI for statute miles"],
                     out vehicleInteriorColor: String #[org_schema_type="Text"] #[org_schema_comment="The color or color combination of the interior of the vehicle."],
                     out vehicleSeatingCapacity: Number #[org_schema_type="QuantitativeValue"] #[org_schema_comment="The number of passengers that can be seated in the vehicle, both in terms of the physical space available, and in terms of limitations set by law.<br/><br/>\n\nTypical unit code(s): C62 for persons."],
                     out vehicleEngine: {
                       fuelType: Entity(tt:url)
                     } #[org_schema_type="EngineSpecification"] #[org_schema_comment="Information about the engine or engines of the vehicle."],
                     out vehicleModelDate: Date #[org_schema_type="Date"] #[org_schema_comment="The release date of a vehicle model (often used to differentiate versions of the same make and model)."],
                     out numberOfDoors: Number #[org_schema_type="Number"] #[org_schema_comment="The number of doors.<br/><br/>\n\nTypical unit code(s): C62"],
                     out vehicleConfiguration: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A short text indicating the configuration of the vehicle, e.g. '5dr hatchback ST 2.5 MT 225 hp' or 'limited edition'."],
                     out fuelType: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="The type of fuel suitable for the engine or engines of the vehicle. If the vehicle has only one engine, this property can be attached directly to the vehicle."],
                     out vehicleIdentificationNumber: String #[org_schema_type="Text"] #[org_schema_comment="The Vehicle Identification Number (VIN) is a unique serial number used by the automotive industry to identify individual motor vehicles."],
                     out fuelConsumption: Number #[org_schema_type="QuantitativeValue"] #[org_schema_comment="The amount of fuel consumed for traveling a particular distance or temporal duration with the given vehicle (e.g. liters per 100 km).<br/><br/>\n\n<ul>\n<li>Note 1: There are unfortunately no standard unit codes for liters per 100 km.  Use <a class=\"localLink\" href=\"http://schema.org/unitText\">unitText</a> to indicate the unit of measurement, e.g. L/100 km.</li>\n<li>Note 2: There are two ways of indicating the fuel consumption, <a class=\"localLink\" href=\"http://schema.org/fuelConsumption\">fuelConsumption</a> (e.g. 8 liters per 100 km) and <a class=\"localLink\" href=\"http://schema.org/fuelEfficiency\">fuelEfficiency</a> (e.g. 30 miles per gallon). They are reciprocal.</li>\n<li>Note 3: Often, the absolute value is useful only when related to driving speed (\"at 80 km/h\") or usage pattern (\"city traffic\"). You can use <a class=\"localLink\" href=\"http://schema.org/valueReference\">valueReference</a> to link the value for the fuel consumption to another value.</li>\n</ul>\n"],
                     out numberOfPreviousOwners: Number #[org_schema_type="QuantitativeValue"] #[org_schema_comment="The number of owners of the vehicle, including the current one.<br/><br/>\n\nTypical unit code(s): C62"],
                     out numberOfAxles: Number #[org_schema_type="Number"] #[org_schema_comment="The number of axles.<br/><br/>\n\nTypical unit code(s): C62"],
                     out vehicleInteriorType: String #[org_schema_type="Text"] #[org_schema_comment="The type or material of the interior of the vehicle (e.g. synthetic fabric, leather, wood, etc.). While most interior types are characterized by the material used, an interior type can also be based on vehicle usage or target audience."],
                     out knownVehicleDamages: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A textual description of known damages, both repaired and unrepaired."],
                     out numberOfAirbags: Number #[org_schema_type="Number"] #[org_schema_comment="The number or type of airbags in the vehicle."],
                     out cargoVolume: Number #[org_schema_type="QuantitativeValue"] #[org_schema_comment="The available volume for cargo or luggage. For automobiles, this is usually the trunk volume.<br/><br/>\n\nTypical unit code(s): LTR for liters, FTQ for cubic foot/feet<br/><br/>\n\nNote: You can use <a class=\"localLink\" href=\"http://schema.org/minValue\">minValue</a> and <a class=\"localLink\" href=\"http://schema.org/maxValue\">maxValue</a> to indicate ranges."],
                     out vehicleTransmission: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="The type of component used for transmitting the power from a rotating power source to the wheels or other relevant component(s) (\"gearbox\" for cars)."],
                     out dateVehicleFirstRegistered: Date #[org_schema_type="Date"] #[org_schema_comment="The date of the first registration of the vehicle with the respective public authorities."],
                     out purchaseDate: Date #[org_schema_type="Date"] #[org_schema_comment="The date the item e.g. vehicle was purchased by the current owner."],
                     out productionDate: Date #[org_schema_type="Date"] #[org_schema_comment="The date of production of the item, e.g. vehicle."],
                     out steeringPosition: Enum(LeftHandDriving,RightHandDriving) #[org_schema_type="SteeringPositionValue"] #[org_schema_comment="The position of the steering wheel or similar device (mostly for cars)."],
                     out fuelEfficiency: Number #[org_schema_type="QuantitativeValue"] #[org_schema_comment="The distance traveled per unit of fuel used; most commonly miles per gallon (mpg) or kilometers per liter (km/L).<br/><br/>\n\n<ul>\n<li>Note 1: There are unfortunately no standard unit codes for miles per gallon or kilometers per liter. Use <a class=\"localLink\" href=\"http://schema.org/unitText\">unitText</a> to indicate the unit of measurement, e.g. mpg or km/L.</li>\n<li>Note 2: There are two ways of indicating the fuel consumption, <a class=\"localLink\" href=\"http://schema.org/fuelConsumption\">fuelConsumption</a> (e.g. 8 liters per 100 km) and <a class=\"localLink\" href=\"http://schema.org/fuelEfficiency\">fuelEfficiency</a> (e.g. 30 miles per gallon). They are reciprocal.</li>\n<li>Note 3: Often, the absolute value is useful only when related to driving speed (\"at 80 km/h\") or usage pattern (\"city traffic\"). You can use <a class=\"localLink\" href=\"http://schema.org/valueReference\">valueReference</a> to link the value for the fuel economy to another value.</li>\n</ul>\n"],
                     out driveWheelConfiguration: Enum(FrontWheelDriveConfiguration,FourWheelDriveConfiguration,AllWheelDriveConfiguration,RearWheelDriveConfiguration) #[org_schema_type="DriveWheelConfigurationValue"] #[org_schema_comment="The drive wheel configuration, i.e. which roadwheels will receive torque from the vehicle's engine via the drivetrain."])
  #[org_schema_comment="A vehicle is a device that is designed or used to transport people or cargo over land, water, air, or through space."];

  list query StructuredValue(out id: Entity(org.schema:StructuredValue))
  #[org_schema_comment="Structured values are used when the value of a property has a more complex structure than simply being a textual value or a reference to another thing."];

  list query GeoShape(out id: Entity(org.schema:GeoShape),
                      out address: {
                        postOfficeBoxNumber: String,
                        streetAddress: String,
                        addressCountry: String,
                        addressRegion: String,
                        postalCode: String,
                        addressLocality: String,
                        areaServed: String,
                        faxNumber: String,
                        hoursAvailable: {
                          validFrom: Date,
                          validThrough: Date,
                          opens: Time,
                          closes: Time,
                          dayOfWeek: Enum(Wednesday,Sunday,PublicHolidays,Monday,Friday,Tuesday,Saturday,Thursday)
                        },
                        contactOption: Enum(HearingImpairedSupported,TollFree),
                        availableLanguage: Array(String),
                        telephone: Entity(tt:phone_number),
                        email: String,
                        contactType: Array(String),
                        productSupported: String
                      } #[org_schema_type="PostalAddress"] #[org_schema_comment="Physical address of the item."],
                      out circle: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A circle is the circular region of a specified radius centered at a specified latitude and longitude. A circle is expressed as a pair followed by a radius in meters."],
                      out box: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A box is the area enclosed by the rectangle formed by two points. The first point is the lower corner, the second point is the upper corner. A box is expressed as two points separated by a space character."],
                      out addressCountry: String #[org_schema_type="Text"] #[org_schema_comment="The country. For example, USA. You can also provide the two-letter <a href=\"http://en.wikipedia.org/wiki/ISO_3166-1\">ISO 3166-1 alpha-2 country code</a>."],
                      out postalCode: String #[org_schema_type="Text"] #[org_schema_comment="The postal code. For example, 94043."],
                      out elevation: Number #[org_schema_type="Number"] #[org_schema_comment="The elevation of a location (<a href=\"https://en.wikipedia.org/wiki/World_Geodetic_System\">WGS 84</a>). Values may be of the form 'NUMBER UNIT<em>OF</em>MEASUREMENT' (e.g., '1,000 m', '3,200 ft') while numbers alone should be assumed to be a value in meters."],
                      out polygon: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A polygon is the area enclosed by a point-to-point path for which the starting and ending points are the same. A polygon is expressed as a series of four or more space delimited points where the first and final points are identical."],
                      out line: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A line is a point-to-point path consisting of two or more points. A line is expressed as a series of two or more point objects separated by space."])
  #[org_schema_comment="The geographic shape of a place. A GeoShape can be described using several properties whose values are based on latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace should be used when writing a list of several such points."];

  list query FoodEstablishmentReservation(out id: Entity(org.schema:FoodEstablishmentReservation),
                                          out startTime: Time #[org_schema_type="Time"] #[org_schema_comment="The startTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to start. For actions that span a period of time, when the action was performed. e.g. John wrote a book from <em>January</em> to December. For media, including audio and video, it's the time offset of the start of a clip within a larger file.<br/><br/>\n\nNote that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions."],
                                          out endTime: Date #[org_schema_type="DateTime"] #[org_schema_comment="The endTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to end. For actions that span a period of time, when the action was performed. e.g. John wrote a book from January to <em>December</em>. For media, including audio and video, it's the time offset of the end of a clip within a larger file.<br/><br/>\n\nNote that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions."],
                                          out partySize: Number #[org_schema_type="QuantitativeValue"] #[org_schema_comment="Number of people the reservation should accommodate."])
  #[org_schema_comment="A reservation to dine at a food-related business.<br/><br/>\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations."];

  list query AutomotiveBusiness(out id: Entity(org.schema:AutomotiveBusiness))
  #[org_schema_comment="Car repair, sales, or parts."];

  list query AutoPartsStore(out id: Entity(org.schema:AutoPartsStore))
  #[org_schema_comment="An auto parts store."];

  list query DietarySupplement(out id: Entity(org.schema:DietarySupplement),
                               out manufacturer: Entity(org.schema:Organization) #[org_schema_type="Organization"] #[org_schema_comment="The manufacturer of the product."]);

  list query Drug(out id: Entity(org.schema:Drug),
                  out manufacturer: Entity(org.schema:Organization) #[org_schema_type="Organization"] #[org_schema_comment="The manufacturer of the product."]);

  list query Painting(out id: Entity(org.schema:Painting))
  #[org_schema_comment="A painting."];

  list query SomeProducts(out id: Entity(org.schema:SomeProducts),
                          out inventoryLevel: Number #[org_schema_type="QuantitativeValue"] #[org_schema_comment="The current approximate inventory level for the item or items."])
  #[org_schema_comment="A placeholder for multiple similar products of the same kind."];

  list query EntryPoint(out id: Entity(org.schema:EntryPoint),
                        out urlTemplate: Array(String) #[org_schema_type="Text"] #[org_schema_comment="An url template (RFC6570) that will be used to construct the target of the execution of the action."],
                        out actionApplication: Array(Entity(org.schema:SoftwareApplication)) #[org_schema_type="SoftwareApplication"] #[org_schema_comment="An application that can complete the request."],
                        out actionPlatform: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="The high level platform(s) where the Action can be performed for the given URL. To specify a specific application or operating system instance, use actionApplication."],
                        out httpMethod: Array(String) #[org_schema_type="Text"] #[org_schema_comment="An HTTP method that specifies the appropriate HTTP method for a request to an HTTP EntryPoint. Values are capitalized strings as used in HTTP."],
                        out encodingType: String #[org_schema_type="Text"] #[org_schema_comment="The supported encoding type(s) for an EntryPoint request."],
                        out contentType: String #[org_schema_type="Text"] #[org_schema_comment="The supported content type(s) for an EntryPoint response."])
  #[org_schema_comment="An entry point, within some Web-based protocol."];

  list query Question(out id: Entity(org.schema:Question),
                      out acceptedAnswer: Entity(org.schema:Answer) #[org_schema_type="Answer"] #[org_schema_comment="The answer(s) that has been accepted as best, typically on a Question/Answer site. Sites vary in their selection mechanisms, e.g. drawing on community opinion and/or the view of the Question author."],
                      out suggestedAnswer: Array(Entity(org.schema:Answer)) #[org_schema_type="Answer"] #[org_schema_comment="An answer (possibly one of several, possibly incorrect) to a Question, e.g. on a Question/Answer site."])
  #[org_schema_comment="A specific question - e.g. from a user seeking answers online, or collected in a Frequently Asked Questions (FAQ) document."];

  list query Comment(out id: Entity(org.schema:Comment),
                     out parentItem: Entity(org.schema:Question) #[org_schema_type="Question"] #[org_schema_comment="The parent of a question, answer or item in general."])
  #[org_schema_comment="A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the <a class=\"localLink\" href=\"http://schema.org/text\">text</a> property, and its topic via <a class=\"localLink\" href=\"http://schema.org/about\">about</a>, properties shared with all CreativeWorks."];

  list query Offer(out id: Entity(org.schema:Offer),
                   out sku: String #[org_schema_type="Text"] #[org_schema_comment="The Stock Keeping Unit (SKU), i.e. a merchant-specific identifier for a product or service, or the product to which the offer refers."],
                   out availabilityStarts: Time #[org_schema_type="Time"] #[org_schema_comment="The beginning of the availability of the product or service included in the offer."],
                   out availableDeliveryMethod: Enum(OnSitePickup) #[org_schema_type="DeliveryMethod"] #[org_schema_comment="The delivery method(s) available for this offer."],
                   out areaServed: String #[org_schema_type="Text"] #[org_schema_comment="The geographic area where a service or offered item is provided."],
                   out mpn: String #[org_schema_type="Text"] #[org_schema_comment="The Manufacturer Part Number (MPN) of the product, or the product to which the offer refers."],
                   out advanceBookingRequirement: Number #[org_schema_type="QuantitativeValue"] #[org_schema_comment="The amount of time that is required between accepting the offer and the actual usage of the resource or service."],
                   out serialNumber: String #[org_schema_type="Text"] #[org_schema_comment="The serial number or any alphanumeric identifier of a particular product. When attached to an offer, it is a shortcut for the serial number of the product included in the offer."],
                   out ineligibleRegion: String #[org_schema_type="Text"] #[org_schema_comment="The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for the geo-political region(s) for which the offer or delivery charge specification is not valid, e.g. a region where the transaction is not allowed.<br/><br/>\n\nSee also <a class=\"localLink\" href=\"http://schema.org/eligibleRegion\">eligibleRegion</a>."],
                   out gtin8: String #[org_schema_type="Text"] #[org_schema_comment="The <a href=\"http://apps.gs1.org/GDD/glossary/Pages/GTIN-8.aspx\">GTIN-8</a> code of the product, or the product to which the offer refers. This code is also known as EAN/UCC-8 or 8-digit EAN. See <a href=\"http://www.gs1.org/barcodes/technical/idkeys/gtin\">GS1 GTIN Summary</a> for more details."],
                   out availability: Enum(SoldOut,PreOrder,OutOfStock,PreSale,InStock,LimitedAvailability,Discontinued,OnlineOnly,InStoreOnly) #[org_schema_type="ItemAvailability"] #[org_schema_comment="The availability of this item&#x2014;for example In stock, Out of stock, Pre-order, etc."],
                   out priceSpecification: Entity(org.schema:PriceSpecification) #[org_schema_type="PriceSpecification"] #[org_schema_comment="One or more detailed price specifications, indicating the unit price and delivery or payment charges."],
                   out inventoryLevel: Number #[org_schema_type="QuantitativeValue"] #[org_schema_comment="The current approximate inventory level for the item or items."],
                   out aggregateRating: {
                     itemReviewed: Entity(org.schema:Thing),
                     ratingValue: Number,
                     bestRating: Number,
                     author: Entity(org.schema:Person),
                     worstRating: Number,
                     reviewAspect: String
                   } #[org_schema_type="AggregateRating"] #[org_schema_comment="The overall rating, based on a collection of reviews or ratings, of the item."],
                   out eligibleTransactionVolume: Entity(org.schema:PriceSpecification) #[org_schema_type="PriceSpecification"] #[org_schema_comment="The transaction volume, in a monetary unit, for which the offer or price specification is valid, e.g. for indicating a minimal purchasing volume, to express free shipping above a certain order volume, or to limit the acceptance of credit cards to purchases to a certain minimal amount."],
                   out availableAtOrFrom: Entity(org.schema:Place) #[org_schema_type="Place"] #[org_schema_comment="The place(s) from which the offer can be obtained (e.g. store locations)."],
                   out priceCurrency: String #[org_schema_type="Text"] #[org_schema_comment="The currency of the price, or a price component when attached to <a class=\"localLink\" href=\"http://schema.org/PriceSpecification\">PriceSpecification</a> and its subtypes.<br/><br/>\n\nUse standard formats: <a href=\"http://en.wikipedia.org/wiki/ISO_4217\">ISO 4217 currency format</a> e.g. \"USD\"; <a href=\"https://en.wikipedia.org/wiki/List_of_cryptocurrencies\">Ticker symbol</a> for cryptocurrencies e.g. \"BTC\"; well known names for <a href=\"https://en.wikipedia.org/wiki/Local_exchange_trading_system\">Local Exchange Tradings Systems</a> (LETS) and other currency types e.g. \"Ithaca HOUR\"."],
                   out category: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy."],
                   out priceValidUntil: Date #[org_schema_type="Date"] #[org_schema_comment="The date after which the price is no longer available."],
                   out addOn: Array(Entity(org.schema:Offer)) #[org_schema_type="Offer"] #[org_schema_comment="An additional offer that can only be obtained in combination with the first base offer (e.g. supplements and extensions that are available for a surcharge)."],
                   out warranty: {
                     durationOfWarranty: Measure(ms),
                     warrantyScope: Entity(org.schema:WarrantyScope)
                   } #[org_schema_type="WarrantyPromise"] #[org_schema_comment="The warranty promise(s) included in the offer."],
                   out eligibleQuantity: Number #[org_schema_type="QuantitativeValue"] #[org_schema_comment="The interval and unit of measurement of ordering quantities for which the offer or price specification is valid. This allows e.g. specifying that a certain freight charge is valid only for a certain quantity."],
                   out validFrom: Date #[org_schema_type="Date"] #[org_schema_comment="The date when the item becomes valid."],
                   out validThrough: Date #[org_schema_type="DateTime"] #[org_schema_comment="The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours."],
                   out price: Number #[org_schema_type="Number"] #[org_schema_comment="The offer price of a product, or of a price component when attached to PriceSpecification and its subtypes.<br/><br/>\n\nUsage guidelines:<br/><br/>\n\n<ul>\n<li>Use the <a class=\"localLink\" href=\"http://schema.org/priceCurrency\">priceCurrency</a> property (with standard formats: <a href=\"http://en.wikipedia.org/wiki/ISO_4217\">ISO 4217 currency format</a> e.g. \"USD\"; <a href=\"https://en.wikipedia.org/wiki/List_of_cryptocurrencies\">Ticker symbol</a> for cryptocurrencies e.g. \"BTC\"; well known names for <a href=\"https://en.wikipedia.org/wiki/Local_exchange_trading_system\">Local Exchange Tradings Systems</a> (LETS) and other currency types e.g. \"Ithaca HOUR\") instead of including <a href=\"http://en.wikipedia.org/wiki/Dollar_sign#Currencies_that_use_the_dollar_or_peso_sign\">ambiguous symbols</a> such as '$' in the value.</li>\n<li>Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.</li>\n<li>Note that both <a href=\"http://www.w3.org/TR/xhtml-rdfa-primer/#using-the-content-attribute\">RDFa</a> and Microdata syntax allow the use of a \"content=\" attribute for publishing simple machine-readable values alongside more human-friendly formatting.</li>\n<li>Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.</li>\n</ul>\n"],
                   out gtin14: String #[org_schema_type="Text"] #[org_schema_comment="The GTIN-14 code of the product, or the product to which the offer refers. See <a href=\"http://www.gs1.org/barcodes/technical/idkeys/gtin\">GS1 GTIN Summary</a> for more details."],
                   out gtin13: String #[org_schema_type="Text"] #[org_schema_comment="The GTIN-13 code of the product, or the product to which the offer refers. This is equivalent to 13-digit ISBN codes and EAN UCC-13. Former 12-digit UPC codes can be converted into a GTIN-13 code by simply adding a preceeding zero. See <a href=\"http://www.gs1.org/barcodes/technical/idkeys/gtin\">GS1 GTIN Summary</a> for more details."],
                   out gtin12: String #[org_schema_type="Text"] #[org_schema_comment="The GTIN-12 code of the product, or the product to which the offer refers. The GTIN-12 is the 12-digit GS1 Identification Key composed of a U.P.C. Company Prefix, Item Reference, and Check Digit used to identify trade items. See <a href=\"http://www.gs1.org/barcodes/technical/idkeys/gtin\">GS1 GTIN Summary</a> for more details."],
                   out seller: Array(Entity(org.schema:Organization)) #[org_schema_type="Organization"] #[org_schema_comment="An entity which offers (sells / leases / lends / loans) the services / goods.  A seller may also be a provider."],
                   out deliveryLeadTime: Number #[org_schema_type="QuantitativeValue"] #[org_schema_comment="The typical delay between the receipt of the order and the goods either leaving the warehouse or being prepared for pickup, in case the delivery method is on site pickup."],
                   out availabilityEnds: Time #[org_schema_type="Time"] #[org_schema_comment="The end of the availability of the product or service included in the offer."],
                   out includesObject: {
                     unitCode: Entity(tt:url),
                     typeOfGood: Entity(org.schema:Product),
                     amountOfThisGood: Number,
                     unitText: Array(String),
                     businessFunction: Entity(org.schema:BusinessFunction)
                   } #[org_schema_type="TypeAndQuantityNode"] #[org_schema_comment="This links to a node or nodes indicating the exact quantity of the products included in the offer."],
                   out review: Array(Entity(org.schema:Review)) #[org_schema_type="Review"] #[org_schema_comment="A review of the item."],
                   out eligibleCustomerType: Entity(org.schema:BusinessEntityType) #[org_schema_type="BusinessEntityType"] #[org_schema_comment="The type(s) of customers for which the given offer is valid."],
                   out itemCondition: Enum(DamagedCondition,RefurbishedCondition,UsedCondition,NewCondition) #[org_schema_type="OfferItemCondition"] #[org_schema_comment="A predefined value from OfferItemCondition or a textual description of the condition of the product or service, or the products or services included in the offer."],
                   out itemOffered: Entity(org.schema:Product) #[org_schema_type="Product"] #[org_schema_comment="The item being offered."],
                   out offeredBy: Array(Entity(org.schema:Organization)) #[org_schema_type="Organization"] #[org_schema_comment="A pointer to the organization or person making the offer."],
                   out eligibleDuration: Measure(ms) #[org_schema_type="QuantitativeValue"] #[org_schema_comment="The duration for which the given offer is valid."],
                   out acceptedPaymentMethod: Entity(org.schema:PaymentMethod) #[org_schema_type="PaymentMethod"] #[org_schema_comment="The payment method(s) accepted by seller for this offer."],
                   out businessFunction: Entity(org.schema:BusinessFunction) #[org_schema_type="BusinessFunction"] #[org_schema_comment="The business function (e.g. sell, lease, repair, dispose) of the offer or component of a bundle (TypeAndQuantityNode). The default is http://purl.org/goodrelations/v1#Sell."],
                   out eligibleRegion: String #[org_schema_type="Text"] #[org_schema_comment="The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for the geo-political region(s) for which the offer or delivery charge specification is valid.<br/><br/>\n\nSee also <a class=\"localLink\" href=\"http://schema.org/ineligibleRegion\">ineligibleRegion</a>."])
  #[org_schema_comment="An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.<br/><br/>\n\nFor <a href=\"http://www.gs1.org/barcodes/technical/idkeys/gtin\">GTIN</a>-related fields, see <a href=\"http://www.gs1.org/barcodes/support/check_digit_calculator\">Check Digit calculator</a> and <a href=\"http://www.gs1us.org/resources/standards/gtin-validation-guide\">validation guide</a> from <a href=\"http://www.gs1.org/\">GS1</a>."];

  list query JewelryStore(out id: Entity(org.schema:JewelryStore))
  #[org_schema_comment="A jewelry store."];

  list query WebPageElement(out id: Entity(org.schema:WebPageElement))
  #[org_schema_comment="A web page element, like a table or an image."];

  list query WPFooter(out id: Entity(org.schema:WPFooter))
  #[org_schema_comment="The footer section of the page."];

  list query QAPage(out id: Entity(org.schema:QAPage))
  #[org_schema_comment="A QAPage is a WebPage focussed on a specific Question and its Answer(s), e.g. in a question answering site or documenting Frequently Asked Questions (FAQs)."];

  list query HomeGoodsStore(out id: Entity(org.schema:HomeGoodsStore))
  #[org_schema_comment="A home goods store."];

  list query MonetaryGrant(out id: Entity(org.schema:MonetaryGrant),
                           out funder: Array(Entity(org.schema:Organization)) #[org_schema_type="Organization"] #[org_schema_comment="A person or organization that supports (sponsors) something through some kind of financial contribution."],
                           out amount: Currency #[org_schema_type="MonetaryAmount"] #[org_schema_comment="The amount of money."]);

  list query PublicationEvent(out id: Entity(org.schema:PublicationEvent),
                              out publishedOn: Array(Entity(org.schema:BroadcastService)) #[org_schema_type="BroadcastService"] #[org_schema_comment="A broadcast service associated with the publication event."],
                              out isAccessibleForFree: Boolean #[org_schema_type="Boolean"] #[org_schema_comment="A flag to signal that the item, event, or place is accessible for free."])
  #[org_schema_comment="A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media."];

  list query Course(out id: Entity(org.schema:Course),
                    out coursePrerequisites: String #[org_schema_type="Text"] #[org_schema_comment="Requirements for taking the Course. May be completion of another <a class=\"localLink\" href=\"http://schema.org/Course\">Course</a> or a textual description like \"permission of instructor\". Requirements may be a pre-requisite competency, referenced using <a class=\"localLink\" href=\"http://schema.org/AlignmentObject\">AlignmentObject</a>."],
                    out educationalCredentialAwarded: Array(Entity(tt:url)) #[org_schema_type="URL"] #[org_schema_comment="A description of the qualification, award, certificate, diploma or other educational credential awarded as a consequence of successful completion of this course or program."],
                    out courseCode: String #[org_schema_type="Text"] #[org_schema_comment="The identifier for the <a class=\"localLink\" href=\"http://schema.org/Course\">Course</a> used by the course <a class=\"localLink\" href=\"http://schema.org/provider\">provider</a> (e.g. CS101 or 6.001)."],
                    out hasCourseInstance: Array(Entity(org.schema:CourseInstance)) #[org_schema_type="CourseInstance"] #[org_schema_comment="An offering of the course at a specific time and place or through specific media or mode of study or to a specific section of students."])
  #[org_schema_comment="A description of an educational course which may be offered as distinct instances at which take place at different times or take place at different locations, or be offered through different media or modes of study. An educational course is a sequence of one or more educational events and/or creative works which aims to build knowledge, competence or ability of learners."];

  list query EmergencyService(out id: Entity(org.schema:EmergencyService))
  #[org_schema_comment="An emergency service, such as a fire station or ER."];

  list query PoliceStation(out id: Entity(org.schema:PoliceStation))
  #[org_schema_comment="A police station."];

  list query Flight(out id: Entity(org.schema:Flight),
                    out arrivalAirport: Entity(org.schema:Airport) #[org_schema_type="Airport"] #[org_schema_comment="The airport where the flight terminates."],
                    out arrivalGate: String #[org_schema_type="Text"] #[org_schema_comment="Identifier of the flight's arrival gate."],
                    out flightNumber: String #[org_schema_type="Text"] #[org_schema_comment="The unique identifier for a flight including the airline IATA code. For example, if describing United flight 110, where the IATA code for United is 'UA', the flightNumber is 'UA110'."],
                    out departureAirport: Entity(org.schema:Airport) #[org_schema_type="Airport"] #[org_schema_comment="The airport where the flight originates."],
                    out boardingPolicy: Enum(ZoneBoardingPolicy,GroupBoardingPolicy) #[org_schema_type="BoardingPolicyType"] #[org_schema_comment="The type of boarding policy used by the airline (e.g. zone-based or group-based)."],
                    out aircraft: String #[org_schema_type="Text"] #[org_schema_comment="The kind of aircraft (e.g., \"Boeing 747\")."],
                    out seller: Array(Entity(org.schema:Organization)) #[org_schema_type="Organization"] #[org_schema_comment="An entity which offers (sells / leases / lends / loans) the services / goods.  A seller may also be a provider."],
                    out webCheckinTime: Date #[org_schema_type="DateTime"] #[org_schema_comment="The time when a passenger can check into the flight online."],
                    out mealService: String #[org_schema_type="Text"] #[org_schema_comment="Description of the meals that will be provided or available for purchase."],
                    out departureGate: String #[org_schema_type="Text"] #[org_schema_comment="Identifier of the flight's departure gate."],
                    out departureTerminal: String #[org_schema_type="Text"] #[org_schema_comment="Identifier of the flight's departure terminal."],
                    out estimatedFlightDuration: Measure(ms) #[org_schema_type="Duration"] #[org_schema_comment="The estimated time the flight will take."],
                    out flightDistance: Measure(m) #[org_schema_type="Distance"] #[org_schema_comment="The distance of the flight."],
                    out arrivalTerminal: String #[org_schema_type="Text"] #[org_schema_comment="Identifier of the flight's arrival terminal."])
  #[org_schema_comment="An airline flight."];

  list query DigitalDocument(out id: Entity(org.schema:DigitalDocument),
                             out hasDigitalDocumentPermission: Array(Entity(org.schema:DigitalDocumentPermission)) #[org_schema_type="DigitalDocumentPermission"] #[org_schema_comment="A permission related to the access to this document (e.g. permission to read or write an electronic document). For a public document, specify a grantee with an Audience with audienceType equal to \"public\"."])
  #[org_schema_comment="An electronic file or document."];

  list query HealthAndBeautyBusiness(out id: Entity(org.schema:HealthAndBeautyBusiness))
  #[org_schema_comment="Health and beauty."];

  list query HealthClub(out id: Entity(org.schema:HealthClub))
  #[org_schema_comment="A health club."];

  list query TireShop(out id: Entity(org.schema:TireShop))
  #[org_schema_comment="A tire shop."];

  list query PlaceOfWorship(out id: Entity(org.schema:PlaceOfWorship))
  #[org_schema_comment="Place of worship, such as a church, synagogue, or mosque."];

  list query Synagogue(out id: Entity(org.schema:Synagogue))
  #[org_schema_comment="A synagogue."];

  list query AnimalShelter(out id: Entity(org.schema:AnimalShelter))
  #[org_schema_comment="Animal shelter."];

  list query WorkersUnion(out id: Entity(org.schema:WorkersUnion))
  #[org_schema_comment="A Workers Union (also known as a Labor Union, Labour Union, or Trade Union) is an organization that promotes the interests of its worker members by collectively bargaining with management, organizing, and political lobbying."];

  list query JobPosting(out id: Entity(org.schema:JobPosting),
                        out jobLocation: Array(Entity(org.schema:Place)) #[org_schema_type="Place"] #[org_schema_comment="A (typically single) geographic location associated with the job position."],
                        out incentiveCompensation: String #[org_schema_type="Text"] #[org_schema_comment="Description of bonus and commission compensation aspects of the job."],
                        out workHours: String #[org_schema_type="Text"] #[org_schema_comment="The typical working hours for this job (e.g. 1st shift, night shift, 8am-5pm)."],
                        out salaryCurrency: String #[org_schema_type="Text"] #[org_schema_comment="The currency (coded using <a href=\"http://en.wikipedia.org/wiki/ISO_4217\">ISO 4217</a> ) used for the main salary information in this job posting or for this employee."],
                        out jobBenefits: String #[org_schema_type="Text"] #[org_schema_comment="Description of benefits associated with the job."],
                        out datePosted: Date #[org_schema_type="Date"] #[org_schema_comment="Publication date for the job posting."],
                        out skills: String #[org_schema_type="Text"] #[org_schema_comment="Skills required to fulfill this role or in this Occupation."],
                        out responsibilities: String #[org_schema_type="Text"] #[org_schema_comment="Responsibilities associated with this role or Occupation."],
                        out baseSalary: Number #[org_schema_type="Number"] #[org_schema_comment="The base salary of the job or of an employee in an EmployeeRole."],
                        out validThrough: Date #[org_schema_type="DateTime"] #[org_schema_comment="The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours."],
                        out hiringOrganization: Entity(org.schema:Organization) #[org_schema_type="Organization"] #[org_schema_comment="Organization offering the job position."],
                        out relevantOccupation: Entity(org.schema:Occupation) #[org_schema_type="Occupation"] #[org_schema_comment="The Occupation for the JobPosting."],
                        out specialCommitments: String #[org_schema_type="Text"] #[org_schema_comment="Any special commitments associated with this job posting. Valid entries include VeteranCommit, MilitarySpouseCommit, etc."],
                        out occupationalCategory: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A category describing the job, preferably using a term from a taxonomy such as <a href=\"http://www.onetcenter.org/taxonomy.html\">BLS O*NET-SOC</a>, <a href=\"https://www.ilo.org/public/english/bureau/stat/isco/isco08/\">ISCO-08</a> or similar, with the property repeated for each applicable value. Ideally the taxonomy should be identified, and both the textual label and formal code for the category should be provided.<br/><br/>\n\nNote: for historical reasons, any textual label and formal code provided as a literal may be assumed to be from O*NET-SOC."],
                        out experienceRequirements: String #[org_schema_type="Text"] #[org_schema_comment="Description of skills and experience needed for the position or Occupation."],
                        out employmentType: String #[org_schema_type="Text"] #[org_schema_comment="Type of employment (e.g. full-time, part-time, contract, temporary, seasonal, internship)."],
                        out estimatedSalary: Array(Currency) #[org_schema_type="MonetaryAmount"] #[org_schema_comment="An estimated salary for a job posting or occupation, based on a variety of variables including, but not limited to industry, job title, and location. Estimated salaries  are often computed by outside organizations rather than the hiring organization, who may not have committed to the estimated value."],
                        out title: String #[org_schema_type="Text"] #[org_schema_comment="The title of the job."],
                        out industry: String #[org_schema_type="Text"] #[org_schema_comment="The industry associated with the job position."])
  #[org_schema_comment="A listing that describes a job opening in a certain organization."];

  list query ItemList(out id: Entity(org.schema:ItemList),
                      out itemListElement: String #[org_schema_type="Text"] #[org_schema_comment="For itemListElement values, you can use simple strings (e.g. \"Peter\", \"Paul\", \"Mary\"), existing entities, or use ListItem.<br/><br/>\n\nText values are best if the elements in the list are plain strings. Existing entities are best for a simple, unordered list of existing things in your data. ListItem is used with ordered lists when you want to provide additional context about the element in that list or when the same item might be in different places in different lists.<br/><br/>\n\nNote: The order of elements in your mark-up is not sufficient for indicating the order or elements.  Use ListItem with a 'position' property in such cases."],
                      out itemListOrder: Enum(ItemListOrderDescending,ItemListUnordered,ItemListOrderAscending) #[org_schema_type="ItemListOrderType"] #[org_schema_comment="Type of ordering (e.g. Ascending, Descending, Unordered)."])
  #[org_schema_comment="A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting."];

  list query HowToSection(out id: Entity(org.schema:HowToSection))
  #[org_schema_comment="A sub-grouping of steps in the instructions for how to achieve a result (e.g. steps for making a pie crust within a pie recipe)."];

  list query MusicPlaylist(out id: Entity(org.schema:MusicPlaylist),
                           out track: Array(Entity(org.schema:ItemList)) #[org_schema_type="ItemList"] #[org_schema_comment="A music recording (track)&#x2014;usually a single song. If an ItemList is given, the list should contain items of type MusicRecording."])
  #[org_schema_comment="A collection of music tracks in playlist form."];

  list query MusicAlbum(out id: Entity(org.schema:MusicAlbum),
                        out albumProductionType: Enum(SoundtrackAlbum,RemixAlbum,LiveAlbum,DemoAlbum,SpokenWordAlbum,CompilationAlbum,StudioAlbum,DJMixAlbum,MixtapeAlbum) #[org_schema_type="MusicAlbumProductionType"] #[org_schema_comment="Classification of the album by it's type of content: soundtrack, live album, studio album, etc."],
                        out albumReleaseType: Enum(AlbumRelease,EPRelease,BroadcastRelease,SingleRelease) #[org_schema_type="MusicAlbumReleaseType"] #[org_schema_comment="The kind of release which this album is: single, EP or album."],
                        out byArtist: Entity(org.schema:MusicGroup) #[org_schema_type="MusicGroup"] #[org_schema_comment="The artist that performed this album or recording."],
                        out albumRelease: Array(Entity(org.schema:MusicRelease)) #[org_schema_type="MusicRelease"] #[org_schema_comment="A release of this album."])
  #[org_schema_comment="A collection of music tracks."];

  list query ParcelDelivery(out id: Entity(org.schema:ParcelDelivery),
                            out provider: Entity(org.schema:Person) #[org_schema_type="Person"] #[org_schema_comment="The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller."],
                            out trackingUrl: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="Tracking url for the parcel delivery."],
                            out deliveryAddress: {
                              postOfficeBoxNumber: String,
                              streetAddress: String,
                              addressCountry: String,
                              addressRegion: String,
                              postalCode: String,
                              addressLocality: String,
                              areaServed: String,
                              faxNumber: String,
                              hoursAvailable: {
                                validFrom: Date,
                                validThrough: Date,
                                opens: Time,
                                closes: Time,
                                dayOfWeek: Enum(Wednesday,Sunday,PublicHolidays,Monday,Friday,Tuesday,Saturday,Thursday)
                              },
                              contactOption: Enum(HearingImpairedSupported,TollFree),
                              availableLanguage: Array(String),
                              telephone: Entity(tt:phone_number),
                              email: String,
                              contactType: Array(String),
                              productSupported: String
                            } #[org_schema_type="PostalAddress"] #[org_schema_comment="Destination address."],
                            out trackingNumber: String #[org_schema_type="Text"] #[org_schema_comment="Shipper tracking number."],
                            out hasDeliveryMethod: Enum(OnSitePickup) #[org_schema_type="DeliveryMethod"] #[org_schema_comment="Method used for delivery or shipping."],
                            out deliveryStatus: Entity(org.schema:DeliveryEvent) #[org_schema_type="DeliveryEvent"] #[org_schema_comment="New entry added as the package passes through each leg of its journey (from shipment to final delivery)."],
                            out originAddress: {
                              postOfficeBoxNumber: String,
                              streetAddress: String,
                              addressCountry: String,
                              addressRegion: String,
                              postalCode: String,
                              addressLocality: String,
                              areaServed: String,
                              faxNumber: String,
                              hoursAvailable: {
                                validFrom: Date,
                                validThrough: Date,
                                opens: Time,
                                closes: Time,
                                dayOfWeek: Enum(Wednesday,Sunday,PublicHolidays,Monday,Friday,Tuesday,Saturday,Thursday)
                              },
                              contactOption: Enum(HearingImpairedSupported,TollFree),
                              availableLanguage: Array(String),
                              telephone: Entity(tt:phone_number),
                              email: String,
                              contactType: Array(String),
                              productSupported: String
                            } #[org_schema_type="PostalAddress"] #[org_schema_comment="Shipper's address."],
                            out itemShipped: Entity(org.schema:Product) #[org_schema_type="Product"] #[org_schema_comment="Item(s) being shipped."],
                            out partOfOrder: Entity(org.schema:Order) #[org_schema_type="Order"] #[org_schema_comment="The overall order the items in this delivery were included in."],
                            out expectedArrivalFrom: Date #[org_schema_type="DateTime"] #[org_schema_comment="The earliest date the package may arrive."],
                            out expectedArrivalUntil: Date #[org_schema_type="DateTime"] #[org_schema_comment="The latest date the package may arrive."])
  #[org_schema_comment="The delivery of a parcel either via the postal service or a commercial service."];

  list query EducationalOccupationalProgram(out id: Entity(org.schema:EducationalOccupationalProgram),
                                            out provider: Entity(org.schema:Person) #[org_schema_type="Person"] #[org_schema_comment="The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller."],
                                            out offers: Array(Entity(org.schema:Offer)) #[org_schema_type="Offer"] #[org_schema_comment="An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event."],
                                            out educationalCredentialAwarded: Array(Entity(tt:url)) #[org_schema_type="URL"] #[org_schema_comment="A description of the qualification, award, certificate, diploma or other educational credential awarded as a consequence of successful completion of this course or program."]);

  list query Invoice(out id: Entity(org.schema:Invoice),
                     out provider: Entity(org.schema:Person) #[org_schema_type="Person"] #[org_schema_comment="The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller."],
                     out billingPeriod: Measure(ms) #[org_schema_type="Duration"] #[org_schema_comment="The time interval used to compute the invoice."],
                     out confirmationNumber: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A number that confirms the given order or payment has been received."],
                     out accountId: String #[org_schema_type="Text"] #[org_schema_comment="The identifier for the account the payment will be applied to."],
                     out scheduledPaymentDate: Date #[org_schema_type="Date"] #[org_schema_comment="The date the invoice is scheduled to be paid."],
                     out customer: Entity(org.schema:Person) #[org_schema_type="Person"] #[org_schema_comment="Party placing the order or paying the invoice."],
                     out category: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy."],
                     out paymentStatus: Enum(PaymentComplete,PaymentPastDue,PaymentDue,PaymentDeclined,PaymentAutomaticallyApplied) #[org_schema_type="PaymentStatusType"] #[org_schema_comment="The status of payment; whether the invoice has been paid or not."],
                     out broker: Array(Entity(org.schema:Person)) #[org_schema_type="Person"] #[org_schema_comment="An entity that arranges for an exchange between a buyer and a seller.  In most cases a broker never acquires or releases ownership of a product or service involved in an exchange.  If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred."],
                     out referencesOrder: Entity(org.schema:Order) #[org_schema_type="Order"] #[org_schema_comment="The Order(s) related to this Invoice. One or more Orders may be combined into a single Invoice."],
                     out paymentMethod: Entity(org.schema:PaymentMethod) #[org_schema_type="PaymentMethod"] #[org_schema_comment="The name of the credit card or other method of payment for the order."],
                     out paymentMethodId: Array(String) #[org_schema_type="Text"] #[org_schema_comment="An identifier for the method of payment used (e.g. the last 4 digits of the credit card)."],
                     out minimumPaymentDue: Currency #[org_schema_type="MonetaryAmount"] #[org_schema_comment="The minimum payment required at this time."],
                     out totalPaymentDue: Currency #[org_schema_type="MonetaryAmount"] #[org_schema_comment="The total amount due."],
                     out paymentDueDate: Date #[org_schema_type="DateTime"] #[org_schema_comment="The date that payment is due."])
  #[org_schema_comment="A statement of the money due for goods or services; a bill."];

  list query EntertainmentBusiness(out id: Entity(org.schema:EntertainmentBusiness))
  #[org_schema_comment="A business providing entertainment."];

  list query MovieTheater(out id: Entity(org.schema:MovieTheater),
                          out screenCount: Number #[org_schema_type="Number"] #[org_schema_comment="The number of screens in the movie theater."])
  #[org_schema_comment="A movie theater."];

  list query Accommodation(out id: Entity(org.schema:Accommodation),
                           out floorSize: Number #[org_schema_type="QuantitativeValue"] #[org_schema_comment="The size of the accommodation, e.g. in square meter or squarefoot.\nTypical unit code(s): MTK for square meter, FTK for square foot, or YDK for square yard"],
                           out petsAllowed: Boolean #[org_schema_type="Boolean"] #[org_schema_comment="Indicates whether pets are allowed to enter the accommodation or lodging business. More detailed information can be put in a text value."],
                           out amenityFeature: Array(Entity(org.schema:LocationFeatureSpecification)) #[org_schema_type="LocationFeatureSpecification"] #[org_schema_comment="An amenity feature (e.g. a characteristic or service) of the Accommodation. This generic property does not make a statement about whether the feature is included in an offer for the main accommodation or available at extra costs."],
                           out numberOfRooms: Number #[org_schema_type="Number"] #[org_schema_comment="The number of rooms (excluding bathrooms and closets) of the accommodation or lodging business.\nTypical unit code(s): ROM for room or C62 for no unit. The type of room can be put in the unitText property of the QuantitativeValue."],
                           out permittedUsage: String #[org_schema_type="Text"] #[org_schema_comment="Indications regarding the permitted usage of the accommodation."])
  #[org_schema_comment="An accommodation is a place that can accommodate human beings, e.g. a hotel room, a camping pitch, or a meeting room. Many accommodations are for overnight stays, but this is not a mandatory requirement.\nFor more specific types of accommodations not defined in schema.org, one can use additionalType with external vocabularies.\n<br /><br />\nSee also the <a href=\"/docs/hotels.html\">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>."];

  list query Suite(out id: Entity(org.schema:Suite),
                   out occupancy: Number #[org_schema_type="QuantitativeValue"] #[org_schema_comment="The allowed total occupancy for the accommodation in persons (including infants etc). For individual accommodations, this is not necessarily the legal maximum but defines the permitted usage as per the contractual agreement (e.g. a double room used by a single person).\nTypical unit code(s): C62 for person"],
                   out bed: String #[org_schema_type="Text"] #[org_schema_comment="The type of bed or beds included in the accommodation. For the single case of just one bed of a certain type, you use bed directly with a text.\n      If you want to indicate the quantity of a certain kind of bed, use an instance of BedDetails. For more detailed information, use the amenityFeature property."],
                   out numberOfRooms: Number #[org_schema_type="Number"] #[org_schema_comment="The number of rooms (excluding bathrooms and closets) of the accommodation or lodging business.\nTypical unit code(s): ROM for room or C62 for no unit. The type of room can be put in the unitText property of the QuantitativeValue."])
  #[org_schema_comment="A suite in a hotel or other public accommodation, denotes a class of luxury accommodations, the key feature of which is multiple rooms (Source: Wikipedia, the free encyclopedia, see <a href=\"http://en.wikipedia.org/wiki/Suite_(hotel)\">http://en.wikipedia.org/wiki/Suite_(hotel)</a>).\n<br /><br />\nSee also the <a href=\"/docs/hotels.html\">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>."];

  list query Room(out id: Entity(org.schema:Room))
  #[org_schema_comment="A room is a distinguishable space within a structure, usually separated from other spaces by interior walls. (Source: Wikipedia, the free encyclopedia, see <a href=\"http://en.wikipedia.org/wiki/Room\">http://en.wikipedia.org/wiki/Room</a>).\n<br /><br />\nSee also the <a href=\"/docs/hotels.html\">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>."];

  list query HotelRoom(out id: Entity(org.schema:HotelRoom),
                       out occupancy: Number #[org_schema_type="QuantitativeValue"] #[org_schema_comment="The allowed total occupancy for the accommodation in persons (including infants etc). For individual accommodations, this is not necessarily the legal maximum but defines the permitted usage as per the contractual agreement (e.g. a double room used by a single person).\nTypical unit code(s): C62 for person"],
                       out bed: String #[org_schema_type="Text"] #[org_schema_comment="The type of bed or beds included in the accommodation. For the single case of just one bed of a certain type, you use bed directly with a text.\n      If you want to indicate the quantity of a certain kind of bed, use an instance of BedDetails. For more detailed information, use the amenityFeature property."])
  #[org_schema_comment="A hotel room is a single room in a hotel.\n<br /><br />\nSee also the <a href=\"/docs/hotels.html\">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>."];

  list query Apartment(out id: Entity(org.schema:Apartment),
                       out occupancy: Number #[org_schema_type="QuantitativeValue"] #[org_schema_comment="The allowed total occupancy for the accommodation in persons (including infants etc). For individual accommodations, this is not necessarily the legal maximum but defines the permitted usage as per the contractual agreement (e.g. a double room used by a single person).\nTypical unit code(s): C62 for person"],
                       out numberOfRooms: Number #[org_schema_type="Number"] #[org_schema_comment="The number of rooms (excluding bathrooms and closets) of the accommodation or lodging business.\nTypical unit code(s): ROM for room or C62 for no unit. The type of room can be put in the unitText property of the QuantitativeValue."])
  #[org_schema_comment="An apartment (in American English) or flat (in British English) is a self-contained housing unit (a type of residential real estate) that occupies only part of a building (Source: Wikipedia, the free encyclopedia, see <a href=\"http://en.wikipedia.org/wiki/Apartment\">http://en.wikipedia.org/wiki/Apartment</a>)."];

  list query House(out id: Entity(org.schema:House),
                   out numberOfRooms: Number #[org_schema_type="Number"] #[org_schema_comment="The number of rooms (excluding bathrooms and closets) of the accommodation or lodging business.\nTypical unit code(s): ROM for room or C62 for no unit. The type of room can be put in the unitText property of the QuantitativeValue."])
  #[org_schema_comment="A house is a building or structure that has the ability to be occupied for habitation by humans or other creatures (Source: Wikipedia, the free encyclopedia, see <a href=\"http://en.wikipedia.org/wiki/House\">http://en.wikipedia.org/wiki/House</a>)."];

  list query SingleFamilyResidence(out id: Entity(org.schema:SingleFamilyResidence),
                                   out occupancy: Number #[org_schema_type="QuantitativeValue"] #[org_schema_comment="The allowed total occupancy for the accommodation in persons (including infants etc). For individual accommodations, this is not necessarily the legal maximum but defines the permitted usage as per the contractual agreement (e.g. a double room used by a single person).\nTypical unit code(s): C62 for person"],
                                   out numberOfRooms: Number #[org_schema_type="Number"] #[org_schema_comment="The number of rooms (excluding bathrooms and closets) of the accommodation or lodging business.\nTypical unit code(s): ROM for room or C62 for no unit. The type of room can be put in the unitText property of the QuantitativeValue."])
  #[org_schema_comment="Residence type: Single-family home."];

  list query ActionAccessSpecification(out id: Entity(org.schema:ActionAccessSpecification),
                                       out availabilityStarts: Time #[org_schema_type="Time"] #[org_schema_comment="The beginning of the availability of the product or service included in the offer."],
                                       out requiresSubscription: Boolean #[org_schema_type="Boolean"] #[org_schema_comment="Indicates if use of the media require a subscription  (either paid or free). Allowed values are <code>true</code> or <code>false</code> (note that an earlier version had 'yes', 'no')."],
                                       out category: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy."],
                                       out availabilityEnds: Time #[org_schema_type="Time"] #[org_schema_comment="The end of the availability of the product or service included in the offer."],
                                       out expectsAcceptanceOf: Array(Entity(org.schema:Offer)) #[org_schema_type="Offer"] #[org_schema_comment="An Offer which must be accepted before the user can perform the Action. For example, the user may need to buy a movie before being able to watch it."],
                                       out eligibleRegion: String #[org_schema_type="Text"] #[org_schema_comment="The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for the geo-political region(s) for which the offer or delivery charge specification is valid.<br/><br/>\n\nSee also <a class=\"localLink\" href=\"http://schema.org/ineligibleRegion\">ineligibleRegion</a>."])
  #[org_schema_comment="A set of requirements that a must be fulfilled in order to perform an Action."];

  list query SiteNavigationElement(out id: Entity(org.schema:SiteNavigationElement))
  #[org_schema_comment="A navigation element of the page."];

  list query MediaSubscription(out id: Entity(org.schema:MediaSubscription),
                               out authenticator: Entity(org.schema:Organization) #[org_schema_type="Organization"] #[org_schema_comment="The Organization responsible for authenticating the user's subscription. For example, many media apps require a cable/satellite provider to authenticate your subscription before playing media."],
                               out expectsAcceptanceOf: Array(Entity(org.schema:Offer)) #[org_schema_type="Offer"] #[org_schema_comment="An Offer which must be accepted before the user can perform the Action. For example, the user may need to buy a movie before being able to watch it."])
  #[org_schema_comment="A subscription which allows a user to access media including audio, video, books, etc."];

  list query VideoGame(out id: Entity(org.schema:VideoGame),
                       out gamePlatform: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="The electronic systems used to play <a href=\"http://en.wikipedia.org/wiki/Category:Video_game_platforms\">video games</a>."],
                       out gameServer: Entity(org.schema:GameServer) #[org_schema_type="GameServer"] #[org_schema_comment="The server on which  it is possible to play the game."],
                       out actor: Array(Entity(org.schema:Person)) #[org_schema_type="Person"] #[org_schema_comment="An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip."],
                       out trailer: Entity(org.schema:VideoObject) #[org_schema_type="VideoObject"] #[org_schema_comment="The trailer of a movie or tv/radio series, season, episode, etc."],
                       out cheatCode: Entity(org.schema:CreativeWork) #[org_schema_type="CreativeWork"] #[org_schema_comment="Cheat codes to the game."],
                       out gameTip: Entity(org.schema:CreativeWork) #[org_schema_type="CreativeWork"] #[org_schema_comment="Links to tips, tactics, etc."],
                       out musicBy: Entity(org.schema:MusicGroup) #[org_schema_type="MusicGroup"] #[org_schema_comment="The composer of the soundtrack."],
                       out playMode: Enum(MultiPlayer,CoOp,SinglePlayer) #[org_schema_type="GamePlayMode"] #[org_schema_comment="Indicates whether this game is multi-player, co-op or single-player.  The game can be marked as multi-player, co-op and single-player at the same time."],
                       out director: Array(Entity(org.schema:Person)) #[org_schema_type="Person"] #[org_schema_comment="A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip."])
  #[org_schema_comment="A video game is an electronic game that involves human interaction with a user interface to generate visual feedback on a video device."];

  list query OrderItem(out id: Entity(org.schema:OrderItem),
                       out orderItemStatus: Enum(OrderReturned,OrderProcessing,OrderPickupAvailable,OrderProblem,OrderDelivered,OrderInTransit,OrderCancelled,OrderPaymentDue) #[org_schema_type="OrderStatus"] #[org_schema_comment="The current status of the order item."],
                       out orderQuantity: Number #[org_schema_type="Number"] #[org_schema_comment="The number of the item ordered. If the property is not set, assume the quantity is one."],
                       out orderDelivery: Entity(org.schema:ParcelDelivery) #[org_schema_type="ParcelDelivery"] #[org_schema_comment="The delivery of the parcel related to this order or order item."],
                       out orderedItem: Entity(org.schema:Service) #[org_schema_type="Service"] #[org_schema_comment="The item ordered."],
                       out orderItemNumber: String #[org_schema_type="Text"] #[org_schema_comment="The identifier of the order item."])
  #[org_schema_comment="An order item is a line of an order. It includes the quantity and shipping details of a bought offer."];

  list query LegalService(out id: Entity(org.schema:LegalService))
  #[org_schema_comment="A LegalService is a business that provides legally-oriented services, advice and representation, e.g. law firms.<br/><br/>\n\nAs a <a class=\"localLink\" href=\"http://schema.org/LocalBusiness\">LocalBusiness</a> it can be described as a <a class=\"localLink\" href=\"http://schema.org/provider\">provider</a> of one or more <a class=\"localLink\" href=\"http://schema.org/Service\">Service</a>(s)."];

  list query DigitalDocumentPermission(out id: Entity(org.schema:DigitalDocumentPermission),
                                       out grantee: Enum(Researcher) #[org_schema_type="Audience"] #[org_schema_comment="The person, organization, contact point, or audience that has been granted this permission."],
                                       out permissionType: Enum(ReadPermission,WritePermission,CommentPermission) #[org_schema_type="DigitalDocumentPermissionType"] #[org_schema_comment="The type of permission granted the person, organization, or audience."])
  #[org_schema_comment="A permission for a particular person or group to access a particular file."];

  list query ProgramMembership(out id: Entity(org.schema:ProgramMembership),
                               out membershipNumber: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A unique identifier for the membership."],
                               out member: Array(Entity(org.schema:Organization)) #[org_schema_type="Organization"] #[org_schema_comment="A member of an Organization or a ProgramMembership. Organizations can be members of organizations; ProgramMembership is typically for individuals."],
                               out programName: String #[org_schema_type="Text"] #[org_schema_comment="The program providing the membership."],
                               out hostingOrganization: Entity(org.schema:Organization) #[org_schema_type="Organization"] #[org_schema_comment="The organization (airline, travelers' club, etc.) the membership is made with."])
  #[org_schema_comment="Used to describe membership in a loyalty programs (e.g. \"StarAliance\"), traveler clubs (e.g. \"AAA\"), purchase clubs (\"Safeway Club\"), etc."];

  list query VisualArtwork(out id: Entity(org.schema:VisualArtwork),
                           out height: Measure(m) #[org_schema_type="Distance"] #[org_schema_comment="The height of the item."],
                           out artMedium: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="The material used. (e.g. Oil, Watercolour, Acrylic, Linoprint, Marble, Cyanotype, Digital, Lithograph, DryPoint, Intaglio, Pastel, Woodcut, Pencil, Mixed Media, etc.)"],
                           out artform: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="e.g. Painting, Drawing, Sculpture, Print, Photograph, Assemblage, Collage, etc."],
                           out artworkSurface: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="The supporting materials for the artwork, e.g. Canvas, Paper, Wood, Board, etc."],
                           out width: Measure(m) #[org_schema_type="Distance"] #[org_schema_comment="The width of the item."],
                           out depth: Measure(m) #[org_schema_type="QuantitativeValue"] #[org_schema_comment="The depth of the item."])
  #[org_schema_comment="A work of art that is primarily visual in character."];

  list query BodyOfWater(out id: Entity(org.schema:BodyOfWater))
  #[org_schema_comment="A body of water, such as a sea, ocean, or lake."];

  list query SeaBodyOfWater(out id: Entity(org.schema:SeaBodyOfWater))
  #[org_schema_comment="A sea (for example, the Caspian sea)."];

  list query Attorney(out id: Entity(org.schema:Attorney))
  #[org_schema_comment="Professional service: Attorney. <br/><br/>\n\nThis type is deprecated - <a class=\"localLink\" href=\"http://schema.org/LegalService\">LegalService</a> is more inclusive and less ambiguous."];

  list query Residence(out id: Entity(org.schema:Residence))
  #[org_schema_comment="The place where a person lives."];

  list query ApartmentComplex(out id: Entity(org.schema:ApartmentComplex))
  #[org_schema_comment="Residence type: Apartment complex."];

  list query HomeAndConstructionBusiness(out id: Entity(org.schema:HomeAndConstructionBusiness))
  #[org_schema_comment="A construction business.<br/><br/>\n\nA HomeAndConstructionBusiness is a <a class=\"localLink\" href=\"http://schema.org/LocalBusiness\">LocalBusiness</a> that provides services around homes and buildings.<br/><br/>\n\nAs a <a class=\"localLink\" href=\"http://schema.org/LocalBusiness\">LocalBusiness</a> it can be described as a <a class=\"localLink\" href=\"http://schema.org/provider\">provider</a> of one or more <a class=\"localLink\" href=\"http://schema.org/Service\">Service</a>(s)."];

  list query HousePainter(out id: Entity(org.schema:HousePainter))
  #[org_schema_comment="A house painting service."];

  list query MovieRentalStore(out id: Entity(org.schema:MovieRentalStore))
  #[org_schema_comment="A movie rental store."];

  list query PropertyValueSpecification(out id: Entity(org.schema:PropertyValueSpecification),
                                        out defaultValue: String #[org_schema_type="Text"] #[org_schema_comment="The default value of the input.  For properties that expect a literal, the default is a literal value, for properties that expect an object, it's an ID reference to one of the current values."],
                                        out valuePattern: String #[org_schema_type="Text"] #[org_schema_comment="Specifies a regular expression for testing literal values according to the HTML spec."],
                                        out stepValue: Number #[org_schema_type="Number"] #[org_schema_comment="The stepValue attribute indicates the granularity that is expected (and required) of the value in a PropertyValueSpecification."],
                                        out valueMaxLength: Number #[org_schema_type="Number"] #[org_schema_comment="Specifies the allowed range for number of characters in a literal value."],
                                        out readonlyValue: Boolean #[org_schema_type="Boolean"] #[org_schema_comment="Whether or not a property is mutable.  Default is false. Specifying this for a property that also has a value makes it act similar to a \"hidden\" input in an HTML form."],
                                        out valueMinLength: Number #[org_schema_type="Number"] #[org_schema_comment="Specifies the minimum allowed range for number of characters in a literal value."],
                                        out maxValue: Number #[org_schema_type="Number"] #[org_schema_comment="The upper value of some characteristic or property."],
                                        out valueName: String #[org_schema_type="Text"] #[org_schema_comment="Indicates the name of the PropertyValueSpecification to be used in URL templates and form encoding in a manner analogous to HTML's input@name."],
                                        out multipleValues: Boolean #[org_schema_type="Boolean"] #[org_schema_comment="Whether multiple values are allowed for the property.  Default is false."],
                                        out minValue: Number #[org_schema_type="Number"] #[org_schema_comment="The lower value of some characteristic or property."],
                                        out valueRequired: Boolean #[org_schema_type="Boolean"] #[org_schema_comment="Whether the property must be filled in to complete the action.  Default is false."])
  #[org_schema_comment="A Property value specification."];

  list query EducationEvent(out id: Entity(org.schema:EducationEvent))
  #[org_schema_comment="Event type: Education event."];

  list query ToyStore(out id: Entity(org.schema:ToyStore))
  #[org_schema_comment="A toy store."];

  list query LodgingBusiness(out id: Entity(org.schema:LodgingBusiness),
                             out audience: Enum(Researcher) #[org_schema_type="Audience"] #[org_schema_comment="An intended audience, i.e. a group for whom something was created."],
                             out checkinTime: Time #[org_schema_type="DateTime"] #[org_schema_comment="The earliest someone may check into a lodging establishment."],
                             out petsAllowed: Boolean #[org_schema_type="Boolean"] #[org_schema_comment="Indicates whether pets are allowed to enter the accommodation or lodging business. More detailed information can be put in a text value."],
                             out availableLanguage: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A language someone may use with or at the item, service or place. Please use one of the language codes from the <a href=\"http://tools.ietf.org/html/bcp47\">IETF BCP 47 standard</a>. See also <a class=\"localLink\" href=\"http://schema.org/inLanguage\">inLanguage</a>"],
                             out amenityFeature: Array(Entity(org.schema:LocationFeatureSpecification)) #[org_schema_type="LocationFeatureSpecification"] #[org_schema_comment="An amenity feature (e.g. a characteristic or service) of the Accommodation. This generic property does not make a statement about whether the feature is included in an offer for the main accommodation or available at extra costs."],
                             out starRating: Array({
  ratingValue: Number,
  bestRating: Number,
  author: Entity(org.schema:Person),
  worstRating: Number,
  reviewAspect: String
}) #[org_schema_type="Rating"] #[org_schema_comment="An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars)."],
                             out checkoutTime: Time #[org_schema_type="Time"] #[org_schema_comment="The latest someone may check out of a lodging establishment."],
                             out numberOfRooms: Number #[org_schema_type="Number"] #[org_schema_comment="The number of rooms (excluding bathrooms and closets) of the accommodation or lodging business.\nTypical unit code(s): ROM for room or C62 for no unit. The type of room can be put in the unitText property of the QuantitativeValue."])
  #[org_schema_comment="A lodging business, such as a motel, hotel, or inn."];

  list query BedAndBreakfast(out id: Entity(org.schema:BedAndBreakfast))
  #[org_schema_comment="Bed and breakfast.\n<br /><br />\nSee also the <a href=\"/docs/hotels.html\">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>."];

  list query SportsEvent(out id: Entity(org.schema:SportsEvent),
                         out awayTeam: Entity(org.schema:Person) #[org_schema_type="Person"] #[org_schema_comment="The away team in a sports event."],
                         out homeTeam: Entity(org.schema:SportsTeam) #[org_schema_type="SportsTeam"] #[org_schema_comment="The home team in a sports event."],
                         out competitor: Array(Entity(org.schema:Person)) #[org_schema_type="Person"] #[org_schema_comment="A competitor in a sports event."])
  #[org_schema_comment="Event type: Sports event."];

  list query Reservoir(out id: Entity(org.schema:Reservoir))
  #[org_schema_comment="A reservoir of water, typically an artificially created lake, like the Lake Kariba reservoir."];

  list query Distillery(out id: Entity(org.schema:Distillery))
  #[org_schema_comment="A distillery."];

  list query ServiceChannel(out id: Entity(org.schema:ServiceChannel),
                            out providesService: Entity(org.schema:Service) #[org_schema_type="Service"] #[org_schema_comment="The service provided by this channel."],
                            out serviceLocation: Entity(org.schema:Place) #[org_schema_type="Place"] #[org_schema_comment="The location (e.g. civic structure, local business, etc.) where a person can go to access the service."],
                            out servicePostalAddress: {
                              postOfficeBoxNumber: String,
                              streetAddress: String,
                              addressCountry: String,
                              addressRegion: String,
                              postalCode: String,
                              addressLocality: String,
                              areaServed: String,
                              faxNumber: String,
                              hoursAvailable: {
                                validFrom: Date,
                                validThrough: Date,
                                opens: Time,
                                closes: Time,
                                dayOfWeek: Enum(Wednesday,Sunday,PublicHolidays,Monday,Friday,Tuesday,Saturday,Thursday)
                              },
                              contactOption: Enum(HearingImpairedSupported,TollFree),
                              availableLanguage: Array(String),
                              telephone: Entity(tt:phone_number),
                              email: String,
                              contactType: Array(String),
                              productSupported: String
                            } #[org_schema_type="PostalAddress"] #[org_schema_comment="The address for accessing the service by mail."],
                            out availableLanguage: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A language someone may use with or at the item, service or place. Please use one of the language codes from the <a href=\"http://tools.ietf.org/html/bcp47\">IETF BCP 47 standard</a>. See also <a class=\"localLink\" href=\"http://schema.org/inLanguage\">inLanguage</a>"],
                            out serviceSmsNumber: {
                              areaServed: String,
                              faxNumber: String,
                              hoursAvailable: {
                                validFrom: Date,
                                validThrough: Date,
                                opens: Time,
                                closes: Time,
                                dayOfWeek: Enum(Wednesday,Sunday,PublicHolidays,Monday,Friday,Tuesday,Saturday,Thursday)
                              },
                              contactOption: Enum(HearingImpairedSupported,TollFree),
                              availableLanguage: Array(String),
                              telephone: Entity(tt:phone_number),
                              email: String,
                              contactType: Array(String),
                              productSupported: String
                            } #[org_schema_type="ContactPoint"] #[org_schema_comment="The number to access the service by text message."],
                            out serviceUrl: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="The website to access the service."],
                            out servicePhone: {
                              areaServed: String,
                              faxNumber: String,
                              hoursAvailable: {
                                validFrom: Date,
                                validThrough: Date,
                                opens: Time,
                                closes: Time,
                                dayOfWeek: Enum(Wednesday,Sunday,PublicHolidays,Monday,Friday,Tuesday,Saturday,Thursday)
                              },
                              contactOption: Enum(HearingImpairedSupported,TollFree),
                              availableLanguage: Array(String),
                              telephone: Entity(tt:phone_number),
                              email: String,
                              contactType: Array(String),
                              productSupported: String
                            } #[org_schema_type="ContactPoint"] #[org_schema_comment="The phone number to use to access the service."],
                            out processingTime: Measure(ms) #[org_schema_type="Duration"] #[org_schema_comment="Estimated processing time for the service using this channel."])
  #[org_schema_comment="A means for accessing a service, e.g. a government office location, web site, or phone number."];

  list query CourseInstance(out id: Entity(org.schema:CourseInstance),
                            out instructor: Array(Entity(org.schema:Person)) #[org_schema_type="Person"] #[org_schema_comment="A person assigned to instruct or provide instructional assistance for the <a class=\"localLink\" href=\"http://schema.org/CourseInstance\">CourseInstance</a>."],
                            out courseMode: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="The medium or means of delivery of the course instance or the mode of study, either as a text label (e.g. \"online\", \"onsite\" or \"blended\"; \"synchronous\" or \"asynchronous\"; \"full-time\" or \"part-time\") or as a URL reference to a term from a controlled vocabulary (e.g. https://ceds.ed.gov/element/001311#Asynchronous )."])
  #[org_schema_comment="An instance of a <a class=\"localLink\" href=\"http://schema.org/Course\">Course</a> which is distinct from other instances because it is offered at a different time or location or through different media or modes of study or to a specific section of students."];

  list query GovernmentOffice(out id: Entity(org.schema:GovernmentOffice))
  #[org_schema_comment="A government office&#x2014;for example, an IRS or DMV office."];

  list query PostOffice(out id: Entity(org.schema:PostOffice))
  #[org_schema_comment="A post office."];

  list query CheckoutPage(out id: Entity(org.schema:CheckoutPage))
  #[org_schema_comment="Web page type: Checkout page."];

  list query Episode(out id: Entity(org.schema:Episode),
                     out actor: Array(Entity(org.schema:Person)) #[org_schema_type="Person"] #[org_schema_comment="An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip."],
                     out trailer: Entity(org.schema:VideoObject) #[org_schema_type="VideoObject"] #[org_schema_comment="The trailer of a movie or tv/radio series, season, episode, etc."],
                     out partOfSeries: Entity(org.schema:CreativeWorkSeries) #[org_schema_type="CreativeWorkSeries"] #[org_schema_comment="The series to which this episode or season belongs."],
                     out partOfSeason: Entity(org.schema:CreativeWorkSeason) #[org_schema_type="CreativeWorkSeason"] #[org_schema_comment="The season to which this episode belongs."],
                     out musicBy: Entity(org.schema:MusicGroup) #[org_schema_type="MusicGroup"] #[org_schema_comment="The composer of the soundtrack."],
                     out director: Array(Entity(org.schema:Person)) #[org_schema_type="Person"] #[org_schema_comment="A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip."],
                     out productionCompany: Entity(org.schema:Organization) #[org_schema_type="Organization"] #[org_schema_comment="The production company or studio responsible for the item e.g. series, video game, episode etc."])
  #[org_schema_comment="A media episode (e.g. TV, radio, video game) which can be part of a series or season."];

  list query MovieSeries(out id: Entity(org.schema:MovieSeries),
                         out actor: Array(Entity(org.schema:Person)) #[org_schema_type="Person"] #[org_schema_comment="An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip."],
                         out trailer: Entity(org.schema:VideoObject) #[org_schema_type="VideoObject"] #[org_schema_comment="The trailer of a movie or tv/radio series, season, episode, etc."],
                         out musicBy: Entity(org.schema:MusicGroup) #[org_schema_type="MusicGroup"] #[org_schema_comment="The composer of the soundtrack."],
                         out director: Array(Entity(org.schema:Person)) #[org_schema_type="Person"] #[org_schema_comment="A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip."],
                         out productionCompany: Entity(org.schema:Organization) #[org_schema_type="Organization"] #[org_schema_comment="The production company or studio responsible for the item e.g. series, video game, episode etc."])
  #[org_schema_comment="A series of movies. Included movies can be indicated with the hasPart property."];

  list query VideoObject(out id: Entity(org.schema:VideoObject),
                         out actor: Array(Entity(org.schema:Person)) #[org_schema_type="Person"] #[org_schema_comment="An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip."],
                         out videoFrameSize: String #[org_schema_type="Text"] #[org_schema_comment="The frame size of the video."],
                         out musicBy: Entity(org.schema:MusicGroup) #[org_schema_type="MusicGroup"] #[org_schema_comment="The composer of the soundtrack."],
                         out videoQuality: String #[org_schema_type="Text"] #[org_schema_comment="The quality of the video."],
                         out director: Array(Entity(org.schema:Person)) #[org_schema_type="Person"] #[org_schema_comment="A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip."],
                         out transcript: String #[org_schema_type="Text"] #[org_schema_comment="If this MediaObject is an AudioObject or VideoObject, the transcript of that object."],
                         out thumbnail: Entity(org.schema:ImageObject) #[org_schema_type="ImageObject"] #[org_schema_comment="Thumbnail image for an image or video."],
                         out caption: String #[org_schema_type="Text"] #[org_schema_comment="The caption for this object. For downloadable machine formats (closed caption, subtitles etc.) use MediaObject and indicate the <a class=\"localLink\" href=\"http://schema.org/encodingFormat\">encodingFormat</a>."])
  #[org_schema_comment="A video file."];

  list query CreativeWorkSeason(out id: Entity(org.schema:CreativeWorkSeason),
                                out actor: Array(Entity(org.schema:Person)) #[org_schema_type="Person"] #[org_schema_comment="An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip."],
                                out trailer: Entity(org.schema:VideoObject) #[org_schema_type="VideoObject"] #[org_schema_comment="The trailer of a movie or tv/radio series, season, episode, etc."],
                                out endDate: Date #[org_schema_type="DateTime"] #[org_schema_comment="The end date and time of the item (in <a href=\"http://en.wikipedia.org/wiki/ISO_8601\">ISO 8601 date format</a>)."],
                                out partOfSeries: Entity(org.schema:CreativeWorkSeries) #[org_schema_type="CreativeWorkSeries"] #[org_schema_comment="The series to which this episode or season belongs."],
                                out startDate: Date #[org_schema_type="DateTime"] #[org_schema_comment="The start date and time of the item (in <a href=\"http://en.wikipedia.org/wiki/ISO_8601\">ISO 8601 date format</a>)."],
                                out director: Array(Entity(org.schema:Person)) #[org_schema_type="Person"] #[org_schema_comment="A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip."],
                                out productionCompany: Entity(org.schema:Organization) #[org_schema_type="Organization"] #[org_schema_comment="The production company or studio responsible for the item e.g. series, video game, episode etc."],
                                out episode: Array(Entity(org.schema:Episode)) #[org_schema_type="Episode"] #[org_schema_comment="An episode of a tv, radio or game media within a series or season."])
  #[org_schema_comment="A media season e.g. tv, radio, video game etc."];

  list query RadioSeries(out id: Entity(org.schema:RadioSeries),
                         out actor: Array(Entity(org.schema:Person)) #[org_schema_type="Person"] #[org_schema_comment="An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip."],
                         out trailer: Entity(org.schema:VideoObject) #[org_schema_type="VideoObject"] #[org_schema_comment="The trailer of a movie or tv/radio series, season, episode, etc."],
                         out musicBy: Entity(org.schema:MusicGroup) #[org_schema_type="MusicGroup"] #[org_schema_comment="The composer of the soundtrack."],
                         out containsSeason: Array(Entity(org.schema:CreativeWorkSeason)) #[org_schema_type="CreativeWorkSeason"] #[org_schema_comment="A season that is part of the media series."],
                         out director: Array(Entity(org.schema:Person)) #[org_schema_type="Person"] #[org_schema_comment="A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip."],
                         out productionCompany: Entity(org.schema:Organization) #[org_schema_type="Organization"] #[org_schema_comment="The production company or studio responsible for the item e.g. series, video game, episode etc."],
                         out episode: Array(Entity(org.schema:Episode)) #[org_schema_type="Episode"] #[org_schema_comment="An episode of a tv, radio or game media within a series or season."])
  #[org_schema_comment="CreativeWorkSeries dedicated to radio broadcast and associated online delivery."];

  list query Clip(out id: Entity(org.schema:Clip),
                  out actor: Array(Entity(org.schema:Person)) #[org_schema_type="Person"] #[org_schema_comment="An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip."],
                  out partOfEpisode: Entity(org.schema:Episode) #[org_schema_type="Episode"] #[org_schema_comment="The episode to which this clip belongs."],
                  out partOfSeries: Entity(org.schema:CreativeWorkSeries) #[org_schema_type="CreativeWorkSeries"] #[org_schema_comment="The series to which this episode or season belongs."],
                  out partOfSeason: Entity(org.schema:CreativeWorkSeason) #[org_schema_type="CreativeWorkSeason"] #[org_schema_comment="The season to which this episode belongs."],
                  out musicBy: Entity(org.schema:MusicGroup) #[org_schema_type="MusicGroup"] #[org_schema_comment="The composer of the soundtrack."],
                  out director: Array(Entity(org.schema:Person)) #[org_schema_type="Person"] #[org_schema_comment="A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip."])
  #[org_schema_comment="A short TV or radio program or a segment/part of a program."];

  list query TVSeries(out id: Entity(org.schema:TVSeries),
                      out actor: Array(Entity(org.schema:Person)) #[org_schema_type="Person"] #[org_schema_comment="An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip."],
                      out trailer: Entity(org.schema:VideoObject) #[org_schema_type="VideoObject"] #[org_schema_comment="The trailer of a movie or tv/radio series, season, episode, etc."],
                      out countryOfOrigin: Entity(org.schema:Country) #[org_schema_type="Country"] #[org_schema_comment="The country of the principal offices of the production company or individual responsible for the movie or program."],
                      out musicBy: Entity(org.schema:MusicGroup) #[org_schema_type="MusicGroup"] #[org_schema_comment="The composer of the soundtrack."],
                      out containsSeason: Array(Entity(org.schema:CreativeWorkSeason)) #[org_schema_type="CreativeWorkSeason"] #[org_schema_comment="A season that is part of the media series."],
                      out director: Array(Entity(org.schema:Person)) #[org_schema_type="Person"] #[org_schema_comment="A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip."],
                      out productionCompany: Entity(org.schema:Organization) #[org_schema_type="Organization"] #[org_schema_comment="The production company or studio responsible for the item e.g. series, video game, episode etc."],
                      out episode: Array(Entity(org.schema:Episode)) #[org_schema_type="Episode"] #[org_schema_comment="An episode of a tv, radio or game media within a series or season."])
  #[org_schema_comment="CreativeWorkSeries dedicated to TV broadcast and associated online delivery."];

  list query Movie(out id: Entity(org.schema:Movie),
                   out actor: Array(Entity(org.schema:Person)) #[org_schema_type="Person"] #[org_schema_comment="An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip."],
                   out trailer: Entity(org.schema:VideoObject) #[org_schema_type="VideoObject"] #[org_schema_comment="The trailer of a movie or tv/radio series, season, episode, etc."],
                   out subtitleLanguage: String #[org_schema_type="Text"] #[org_schema_comment="Languages in which subtitles/captions are available, in <a href=\"http://tools.ietf.org/html/bcp47\">IETF BCP 47 standard format</a>."],
                   out countryOfOrigin: Entity(org.schema:Country) #[org_schema_type="Country"] #[org_schema_comment="The country of the principal offices of the production company or individual responsible for the movie or program."],
                   out musicBy: Entity(org.schema:MusicGroup) #[org_schema_type="MusicGroup"] #[org_schema_comment="The composer of the soundtrack."],
                   out director: Array(Entity(org.schema:Person)) #[org_schema_type="Person"] #[org_schema_comment="A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip."],
                   out productionCompany: Entity(org.schema:Organization) #[org_schema_type="Organization"] #[org_schema_comment="The production company or studio responsible for the item e.g. series, video game, episode etc."],
                   out duration: Measure(ms) #[org_schema_type="Duration"] #[org_schema_comment="The duration of the item (movie, audio recording, event, etc.) in <a href=\"http://en.wikipedia.org/wiki/ISO_8601\">ISO 8601 date format</a>."])
  #[org_schema_comment="A movie."];

  list query PerformingArtsTheater(out id: Entity(org.schema:PerformingArtsTheater))
  #[org_schema_comment="A theater or other performing art center."];

  list query AggregateOffer(out id: Entity(org.schema:AggregateOffer),
                            out offers: Array(Entity(org.schema:Offer)) #[org_schema_type="Offer"] #[org_schema_comment="An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event."],
                            out lowPrice: Number #[org_schema_type="Number"] #[org_schema_comment="The lowest price of all offers available.<br/><br/>\n\nUsage guidelines:<br/><br/>\n\n<ul>\n<li>Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.</li>\n<li>Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.</li>\n</ul>\n"],
                            out highPrice: Number #[org_schema_type="Number"] #[org_schema_comment="The highest price of all offers available.<br/><br/>\n\nUsage guidelines:<br/><br/>\n\n<ul>\n<li>Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.</li>\n<li>Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.</li>\n</ul>\n"])
  #[org_schema_comment="When a single product is associated with multiple offers (for example, the same pair of shoes is offered by different merchants), then AggregateOffer can be used."];

  list query Museum(out id: Entity(org.schema:Museum))
  #[org_schema_comment="A museum."];

  list query HowToItem(out id: Entity(org.schema:HowToItem),
                       out requiredQuantity: Number #[org_schema_type="Number"] #[org_schema_comment="The required quantity of the item(s)."])
  #[org_schema_comment="An item used as either a tool or supply when performing the instructions for how to to achieve a result."];

  list query HowToSupply(out id: Entity(org.schema:HowToSupply),
                         out estimatedCost: Currency #[org_schema_type="MonetaryAmount"] #[org_schema_comment="The estimated cost of the supply or supplies consumed when performing instructions."])
  #[org_schema_comment="A supply consumed when performing the instructions for how to achieve a result."];

  list query IndividualProduct(out id: Entity(org.schema:IndividualProduct),
                               out serialNumber: String #[org_schema_type="Text"] #[org_schema_comment="The serial number or any alphanumeric identifier of a particular product. When attached to an offer, it is a shortcut for the serial number of the product included in the offer."])
  #[org_schema_comment="A single, identifiable product instance (e.g. a laptop with a particular serial number)."];

  list query AutoRepair(out id: Entity(org.schema:AutoRepair))
  #[org_schema_comment="Car repair business."];

  list query ExerciseGym(out id: Entity(org.schema:ExerciseGym))
  #[org_schema_comment="A gym."];

  list query GovernmentBuilding(out id: Entity(org.schema:GovernmentBuilding))
  #[org_schema_comment="A government building."];

  list query Embassy(out id: Entity(org.schema:Embassy))
  #[org_schema_comment="An embassy."];

  list query ProfilePage(out id: Entity(org.schema:ProfilePage))
  #[org_schema_comment="Web page type: Profile page."];

  list query PeopleAudience(out id: Entity(org.schema:PeopleAudience),
                            out suggestedMaxAge: Number #[org_schema_type="Number"] #[org_schema_comment="Maximal age recommended for viewing content."],
                            out requiredGender: String #[org_schema_type="Text"] #[org_schema_comment="Audiences defined by a person's gender."],
                            out suggestedGender: String #[org_schema_type="Text"] #[org_schema_comment="The gender of the person or audience."],
                            out suggestedMinAge: Number #[org_schema_type="Number"] #[org_schema_comment="Minimal age recommended for viewing content."])
  #[org_schema_comment="A set of characteristics belonging to people, e.g. who compose an item's target audience."];

  list query ParentAudience(out id: Entity(org.schema:ParentAudience),
                            out childMaxAge: Number #[org_schema_type="Number"] #[org_schema_comment="Maximal age of the child."],
                            out childMinAge: Number #[org_schema_type="Number"] #[org_schema_comment="Minimal age of the child."])
  #[org_schema_comment="A set of characteristics describing parents, who can be interested in viewing some content."];

  list query ImageObject(out id: Entity(org.schema:ImageObject),
                         out exifData: String #[org_schema_type="Text"] #[org_schema_comment="exif data for this object."],
                         out representativeOfPage: Boolean #[org_schema_type="Boolean"] #[org_schema_comment="Indicates whether this image is representative of the content of the page."],
                         out thumbnail: Entity(org.schema:ImageObject) #[org_schema_type="ImageObject"] #[org_schema_comment="Thumbnail image for an image or video."],
                         out caption: String #[org_schema_type="Text"] #[org_schema_comment="The caption for this object. For downloadable machine formats (closed caption, subtitles etc.) use MediaObject and indicate the <a class=\"localLink\" href=\"http://schema.org/encodingFormat\">encodingFormat</a>."])
  #[org_schema_comment="An image file."];

  list query ReservationPackage(out id: Entity(org.schema:ReservationPackage),
                                out subReservation: Entity(org.schema:Reservation) #[org_schema_type="Reservation"] #[org_schema_comment="The individual reservations included in the package. Typically a repeated property."])
  #[org_schema_comment="A group of multiple reservations with common values for all sub-reservations."];

  list query FinancialProduct(out id: Entity(org.schema:FinancialProduct),
                              out interestRate: Number #[org_schema_type="QuantitativeValue"] #[org_schema_comment="The interest rate, charged or paid, applicable to the financial product. Note: This is different from the calculated annualPercentageRate."],
                              out feesAndCommissionsSpecification: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="Description of fees, commissions, and other terms applied either to a class of financial product, or by a financial service organization."],
                              out annualPercentageRate: Number #[org_schema_type="Number"] #[org_schema_comment="The annual rate that is charged for borrowing (or made by investing), expressed as a single percentage number that represents the actual yearly cost of funds over the term of a loan. This includes any fees or additional costs associated with the transaction."])
  #[org_schema_comment="A product provided to consumers and businesses by financial institutions such as banks, insurance companies, brokerage firms, consumer finance companies, and investment companies which comprise the financial services industry."];

  list query SocialMediaPosting(out id: Entity(org.schema:SocialMediaPosting),
                                out sharedContent: Array(Entity(org.schema:CreativeWork)) #[org_schema_type="CreativeWork"] #[org_schema_comment="A CreativeWork such as an image, video, or audio clip shared as part of this posting."])
  #[org_schema_comment="A post to a social media platform, including blog posts, tweets, Facebook posts, etc."];

  list query BlogPosting(out id: Entity(org.schema:BlogPosting))
  #[org_schema_comment="A blog post."];

  list query LiveBlogPosting(out id: Entity(org.schema:LiveBlogPosting),
                             out coverageStartTime: Date #[org_schema_type="DateTime"] #[org_schema_comment="The time when the live blog will begin covering the Event. Note that coverage may begin before the Event's start time. The LiveBlogPosting may also be created before coverage begins."],
                             out coverageEndTime: Date #[org_schema_type="DateTime"] #[org_schema_comment="The time when the live blog will stop covering the Event. Note that coverage may continue after the Event concludes."],
                             out liveBlogUpdate: Array(Entity(org.schema:BlogPosting)) #[org_schema_type="BlogPosting"] #[org_schema_comment="An update to the LiveBlog."])
  #[org_schema_comment="A blog post intended to provide a rolling textual coverage of an ongoing event through continuous updates."];

  list query BusTrip(out id: Entity(org.schema:BusTrip),
                     out busName: String #[org_schema_type="Text"] #[org_schema_comment="The name of the bus (e.g. Bolt Express)."],
                     out departureBusStop: Entity(org.schema:BusStation) #[org_schema_type="BusStation"] #[org_schema_comment="The stop or station from which the bus departs."],
                     out arrivalBusStop: Entity(org.schema:BusStop) #[org_schema_type="BusStop"] #[org_schema_comment="The stop or station from which the bus arrives."],
                     out busNumber: String #[org_schema_type="Text"] #[org_schema_comment="The unique identifier for the bus."])
  #[org_schema_comment="A trip on a commercial bus line."];

  list query WebApplication(out id: Entity(org.schema:WebApplication),
                            out browserRequirements: String #[org_schema_type="Text"] #[org_schema_comment="Specifies browser requirements in human-readable text. For example, 'requires HTML5 support'."])
  #[org_schema_comment="Web applications."];

  list query DiscussionForumPosting(out id: Entity(org.schema:DiscussionForumPosting))
  #[org_schema_comment="A posting to a discussion forum."];

  list query IceCreamShop(out id: Entity(org.schema:IceCreamShop))
  #[org_schema_comment="An ice cream shop."];

  list query TouristAttraction(out id: Entity(org.schema:TouristAttraction),
                               out touristType: Enum(Researcher) #[org_schema_type="Audience"] #[org_schema_comment="Attraction suitable for type(s) of tourist. eg. Children, visitors from a particular country, etc."],
                               out availableLanguage: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A language someone may use with or at the item, service or place. Please use one of the language codes from the <a href=\"http://tools.ietf.org/html/bcp47\">IETF BCP 47 standard</a>. See also <a class=\"localLink\" href=\"http://schema.org/inLanguage\">inLanguage</a>"])
  #[org_schema_comment="A tourist attraction.  In principle any Thing can be a <a class=\"localLink\" href=\"http://schema.org/TouristAttraction\">TouristAttraction</a>, from a <a class=\"localLink\" href=\"http://schema.org/Mountain\">Mountain</a> and <a class=\"localLink\" href=\"http://schema.org/LandmarksOrHistoricalBuildings\">LandmarksOrHistoricalBuildings</a> to a <a class=\"localLink\" href=\"http://schema.org/LocalBusiness\">LocalBusiness</a>.  This Type can be used on its own to describe a general <a class=\"localLink\" href=\"http://schema.org/TouristAttraction\">TouristAttraction</a>, or be used as an <a class=\"localLink\" href=\"http://schema.org/additionalType\">additionalType</a> to add tourist attraction properties to any other type.  (See examples below)"];

  list query Car(out id: Entity(org.schema:Car))
  #[org_schema_comment="A car is a wheeled, self-powered motor vehicle used for transportation."];

  list query PriceSpecification(out id: Entity(org.schema:PriceSpecification),
                                out minPrice: Number #[org_schema_type="Number"] #[org_schema_comment="The lowest price if the price is a range."],
                                out eligibleTransactionVolume: Entity(org.schema:PriceSpecification) #[org_schema_type="PriceSpecification"] #[org_schema_comment="The transaction volume, in a monetary unit, for which the offer or price specification is valid, e.g. for indicating a minimal purchasing volume, to express free shipping above a certain order volume, or to limit the acceptance of credit cards to purchases to a certain minimal amount."],
                                out maxPrice: Number #[org_schema_type="Number"] #[org_schema_comment="The highest price if the price is a range."],
                                out priceCurrency: String #[org_schema_type="Text"] #[org_schema_comment="The currency of the price, or a price component when attached to <a class=\"localLink\" href=\"http://schema.org/PriceSpecification\">PriceSpecification</a> and its subtypes.<br/><br/>\n\nUse standard formats: <a href=\"http://en.wikipedia.org/wiki/ISO_4217\">ISO 4217 currency format</a> e.g. \"USD\"; <a href=\"https://en.wikipedia.org/wiki/List_of_cryptocurrencies\">Ticker symbol</a> for cryptocurrencies e.g. \"BTC\"; well known names for <a href=\"https://en.wikipedia.org/wiki/Local_exchange_trading_system\">Local Exchange Tradings Systems</a> (LETS) and other currency types e.g. \"Ithaca HOUR\"."],
                                out eligibleQuantity: Number #[org_schema_type="QuantitativeValue"] #[org_schema_comment="The interval and unit of measurement of ordering quantities for which the offer or price specification is valid. This allows e.g. specifying that a certain freight charge is valid only for a certain quantity."],
                                out validFrom: Date #[org_schema_type="Date"] #[org_schema_comment="The date when the item becomes valid."],
                                out validThrough: Date #[org_schema_type="DateTime"] #[org_schema_comment="The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours."],
                                out price: Number #[org_schema_type="Number"] #[org_schema_comment="The offer price of a product, or of a price component when attached to PriceSpecification and its subtypes.<br/><br/>\n\nUsage guidelines:<br/><br/>\n\n<ul>\n<li>Use the <a class=\"localLink\" href=\"http://schema.org/priceCurrency\">priceCurrency</a> property (with standard formats: <a href=\"http://en.wikipedia.org/wiki/ISO_4217\">ISO 4217 currency format</a> e.g. \"USD\"; <a href=\"https://en.wikipedia.org/wiki/List_of_cryptocurrencies\">Ticker symbol</a> for cryptocurrencies e.g. \"BTC\"; well known names for <a href=\"https://en.wikipedia.org/wiki/Local_exchange_trading_system\">Local Exchange Tradings Systems</a> (LETS) and other currency types e.g. \"Ithaca HOUR\") instead of including <a href=\"http://en.wikipedia.org/wiki/Dollar_sign#Currencies_that_use_the_dollar_or_peso_sign\">ambiguous symbols</a> such as '$' in the value.</li>\n<li>Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.</li>\n<li>Note that both <a href=\"http://www.w3.org/TR/xhtml-rdfa-primer/#using-the-content-attribute\">RDFa</a> and Microdata syntax allow the use of a \"content=\" attribute for publishing simple machine-readable values alongside more human-friendly formatting.</li>\n<li>Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.</li>\n</ul>\n"],
                                out valueAddedTaxIncluded: Boolean #[org_schema_type="Boolean"] #[org_schema_comment="Specifies whether the applicable value-added tax (VAT) is included in the price specification or not."])
  #[org_schema_comment="A structured value representing a price or price range. Typically, only the subclasses of this type are used for markup. It is recommended to use <a class=\"localLink\" href=\"http://schema.org/MonetaryAmount\">MonetaryAmount</a> to describe independent amounts of money such as a salary, credit card limits, etc."];

  list query ScreeningEvent(out id: Entity(org.schema:ScreeningEvent),
                            out videoFormat: String #[org_schema_type="Text"] #[org_schema_comment="The type of screening or video broadcast used (e.g. IMAX, 3D, SD, HD, etc.)."],
                            out subtitleLanguage: String #[org_schema_type="Text"] #[org_schema_comment="Languages in which subtitles/captions are available, in <a href=\"http://tools.ietf.org/html/bcp47\">IETF BCP 47 standard format</a>."],
                            out workPresented: Entity(org.schema:Movie) #[org_schema_type="Movie"] #[org_schema_comment="The movie presented during this event."])
  #[org_schema_comment="A screening of a movie or other video."];

  list query BroadcastEvent(out id: Entity(org.schema:BroadcastEvent),
                            out videoFormat: String #[org_schema_type="Text"] #[org_schema_comment="The type of screening or video broadcast used (e.g. IMAX, 3D, SD, HD, etc.)."],
                            out isLiveBroadcast: Boolean #[org_schema_type="Boolean"] #[org_schema_comment="True is the broadcast is of a live event."],
                            out broadcastOfEvent: Entity(org.schema:Event) #[org_schema_type="Event"] #[org_schema_comment="The event being broadcast such as a sporting event or awards ceremony."])
  #[org_schema_comment="An over the air or online broadcast event."];

  list query Season(out id: Entity(org.schema:Season))
  #[org_schema_comment="A media season e.g. tv, radio, video game etc."];

  list query LoanOrCredit(out id: Entity(org.schema:LoanOrCredit),
                          out loanTerm: Number #[org_schema_type="QuantitativeValue"] #[org_schema_comment="The duration of the loan or credit agreement."],
                          out amount: Currency #[org_schema_type="MonetaryAmount"] #[org_schema_comment="The amount of money."],
                          out requiredCollateral: String #[org_schema_type="Text"] #[org_schema_comment="Assets required to secure loan or credit repayments. It may take form of third party pledge, goods, financial instruments (cash, securities, etc.)"],
                          out currency: String #[org_schema_type="Text"] #[org_schema_comment="The currency in which the monetary amount is expressed.<br/><br/>\n\nUse standard formats: <a href=\"http://en.wikipedia.org/wiki/ISO_4217\">ISO 4217 currency format</a> e.g. \"USD\"; <a href=\"https://en.wikipedia.org/wiki/List_of_cryptocurrencies\">Ticker symbol</a> for cryptocurrencies e.g. \"BTC\"; well known names for <a href=\"https://en.wikipedia.org/wiki/Local_exchange_trading_system\">Local Exchange Tradings Systems</a> (LETS) and other currency types e.g. \"Ithaca HOUR\"."])
  #[org_schema_comment="A financial product for the loaning of an amount of money under agreed terms and charges."];

  list query MotorcycleDealer(out id: Entity(org.schema:MotorcycleDealer))
  #[org_schema_comment="A motorcycle dealer."];

  list query BankAccount(out id: Entity(org.schema:BankAccount))
  #[org_schema_comment="A product or service offered by a bank whereby one may deposit, withdraw or transfer money and in some cases be paid interest."];

  list query RealEstateAgent(out id: Entity(org.schema:RealEstateAgent))
  #[org_schema_comment="A real-estate agent."];

  list query TechArticle(out id: Entity(org.schema:TechArticle),
                         out proficiencyLevel: String #[org_schema_type="Text"] #[org_schema_comment="Proficiency needed for this content; expected values: 'Beginner', 'Expert'."],
                         out dependencies: String #[org_schema_type="Text"] #[org_schema_comment="Prerequisites needed to fulfill steps in article."])
  #[org_schema_comment="A technical article - Example: How-to (task) topics, step-by-step, procedural troubleshooting, specifications, etc."];

  list query APIReference(out id: Entity(org.schema:APIReference),
                          out programmingModel: String #[org_schema_type="Text"] #[org_schema_comment="Indicates whether API is managed or unmanaged."],
                          out executableLibraryName: String #[org_schema_type="Text"] #[org_schema_comment="Library file name e.g., mscorlib.dll, system.web.dll."],
                          out assemblyVersion: String #[org_schema_type="Text"] #[org_schema_comment="Associated product/technology version. e.g., .NET Framework 4.5."],
                          out targetPlatform: String #[org_schema_type="Text"] #[org_schema_comment="Type of app development: phone, Metro style, desktop, XBox, etc."])
  #[org_schema_comment="Reference documentation for application programming interfaces (APIs)."];

  list query EducationalOrganization(out id: Entity(org.schema:EducationalOrganization),
                                     out alumni: Entity(org.schema:Person) #[org_schema_type="Person"] #[org_schema_comment="Alumni of an organization."])
  #[org_schema_comment="An educational organization."];

  list query CableOrSatelliteService(out id: Entity(org.schema:CableOrSatelliteService))
  #[org_schema_comment="A service which provides access to media programming like TV or radio. Access may be via cable or satellite."];

  list query Role(out id: Entity(org.schema:Role),
                  out endDate: Date #[org_schema_type="DateTime"] #[org_schema_comment="The end date and time of the item (in <a href=\"http://en.wikipedia.org/wiki/ISO_8601\">ISO 8601 date format</a>)."],
                  out startDate: Date #[org_schema_type="DateTime"] #[org_schema_comment="The start date and time of the item (in <a href=\"http://en.wikipedia.org/wiki/ISO_8601\">ISO 8601 date format</a>)."],
                  out roleName: Array(Entity(tt:url)) #[org_schema_type="URL"] #[org_schema_comment="A role played, performed or filled by a person or organization. For example, the team of creators for a comic book might fill the roles named 'inker', 'penciller', and 'letterer'; or an athlete in a SportsTeam might play in the position named 'Quarterback'."])
  #[org_schema_comment="Represents additional information about a relationship or property. For example a Role can be used to say that a 'member' role linking some SportsTeam to a player occurred during a particular time period. Or that a Person's 'actor' role in a Movie was for some particular characterName. Such properties can be attached to a Role entity, which is then associated with the main entities using ordinary properties like 'member' or 'actor'.<br/><br/>\n\nSee also <a href=\"http://blog.schema.org/2014/06/introducing-role.html\">blog post</a>."];

  list query CurrencyConversionService(out id: Entity(org.schema:CurrencyConversionService))
  #[org_schema_comment="A service to convert funds from one currency to another currency."];

  list query HinduTemple(out id: Entity(org.schema:HinduTemple))
  #[org_schema_comment="A Hindu temple."];

  list query TVSeason(out id: Entity(org.schema:TVSeason),
                      out countryOfOrigin: Entity(org.schema:Country) #[org_schema_type="Country"] #[org_schema_comment="The country of the principal offices of the production company or individual responsible for the movie or program."])
  #[org_schema_comment="Season dedicated to TV broadcast and associated online delivery."];

  list query SearchResultsPage(out id: Entity(org.schema:SearchResultsPage))
  #[org_schema_comment="Web page type: Search results page."];

  list query UserBlocks(out id: Entity(org.schema:UserBlocks))
  #[org_schema_comment="UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use <a class=\"localLink\" href=\"http://schema.org/Action\">Action</a>-based vocabulary, alongside types such as <a class=\"localLink\" href=\"http://schema.org/Comment\">Comment</a>."];

  list query DeliveryEvent(out id: Entity(org.schema:DeliveryEvent),
                           out hasDeliveryMethod: Enum(OnSitePickup) #[org_schema_type="DeliveryMethod"] #[org_schema_comment="Method used for delivery or shipping."],
                           out availableThrough: Date #[org_schema_type="DateTime"] #[org_schema_comment="After this date, the item will no longer be available for pickup."],
                           out availableFrom: Date #[org_schema_type="DateTime"] #[org_schema_comment="When the item is available for pickup from the store, locker, etc."],
                           out accessCode: String #[org_schema_type="Text"] #[org_schema_comment="Password, PIN, or access code needed for delivery (e.g. from a locker)."])
  #[org_schema_comment="An event involving the delivery of an item."];

  list query DanceEvent(out id: Entity(org.schema:DanceEvent))
  #[org_schema_comment="Event type: A social dance."];

  list query BookStore(out id: Entity(org.schema:BookStore))
  #[org_schema_comment="A bookstore."];

  list query MusicRelease(out id: Entity(org.schema:MusicRelease),
                          out recordLabel: Entity(org.schema:Organization) #[org_schema_type="Organization"] #[org_schema_comment="The label that issued the release."],
                          out catalogNumber: String #[org_schema_type="Text"] #[org_schema_comment="The catalog number for the release."],
                          out creditedTo: Entity(org.schema:Person) #[org_schema_type="Person"] #[org_schema_comment="The group the release is credited to if different than the byArtist. For example, Red and Blue is credited to \"Stefani Germanotta Band\", but by Lady Gaga."],
                          out releaseOf: Entity(org.schema:MusicAlbum) #[org_schema_type="MusicAlbum"] #[org_schema_comment="The album this is a release of."],
                          out duration: Measure(ms) #[org_schema_type="Duration"] #[org_schema_comment="The duration of the item (movie, audio recording, event, etc.) in <a href=\"http://en.wikipedia.org/wiki/ISO_8601\">ISO 8601 date format</a>."],
                          out musicReleaseFormat: Enum(DigitalAudioTapeFormat,VinylFormat,CassetteFormat,LaserDiscFormat,DigitalFormat,CDFormat,DVDFormat) #[org_schema_type="MusicReleaseFormatType"] #[org_schema_comment="Format of this release (the type of recording media used, ie. compact disc, digital media, LP, etc.)."])
  #[org_schema_comment="A MusicRelease is a specific release of a music album."];

  list query Permit(out id: Entity(org.schema:Permit),
                    out validFor: Measure(ms) #[org_schema_type="Duration"] #[org_schema_comment="The duration of validity of a permit or similar thing."],
                    out validUntil: Date #[org_schema_type="Date"] #[org_schema_comment="The date when the item is no longer valid."],
                    out validFrom: Date #[org_schema_type="Date"] #[org_schema_comment="The date when the item becomes valid."],
                    out issuedBy: Entity(org.schema:Organization) #[org_schema_type="Organization"] #[org_schema_comment="The organization issuing the ticket or permit."],
                    out issuedThrough: Entity(org.schema:Service) #[org_schema_type="Service"] #[org_schema_comment="The service through with the permit was granted."],
                    out permitAudience: Enum(Researcher) #[org_schema_type="Audience"] #[org_schema_comment="The target audience for this permit."],
                    out validIn: Entity(org.schema:AdministrativeArea) #[org_schema_type="AdministrativeArea"] #[org_schema_comment="The geographic area where a permit or similar thing is valid."])
  #[org_schema_comment="A permit issued by an organization, e.g. a parking pass."];

  list query EducationalOccupationalCredential(out id: Entity(org.schema:EducationalOccupationalCredential),
                                               out validFor: Measure(ms) #[org_schema_type="Duration"] #[org_schema_comment="The duration of validity of a permit or similar thing."],
                                               out validIn: Entity(org.schema:AdministrativeArea) #[org_schema_type="AdministrativeArea"] #[org_schema_comment="The geographic area where a permit or similar thing is valid."]);

  list query SaleEvent(out id: Entity(org.schema:SaleEvent))
  #[org_schema_comment="Event type: Sales event."];

  list query FoodEvent(out id: Entity(org.schema:FoodEvent))
  #[org_schema_comment="Event type: Food event."];

  list query Corporation(out id: Entity(org.schema:Corporation),
                         out tickerSymbol: String #[org_schema_type="Text"] #[org_schema_comment="The exchange traded instrument associated with a Corporation object. The tickerSymbol is expressed as an exchange and an instrument name separated by a space character. For the exchange component of the tickerSymbol attribute, we recommend using the controlled vocabulary of Market Identifier Codes (MIC) specified in ISO15022."])
  #[org_schema_comment="Organization: A business corporation."];

  list query OutletStore(out id: Entity(org.schema:OutletStore))
  #[org_schema_comment="An outlet store."];

  list query Review(out id: Entity(org.schema:Review),
                    out reviewRating: {
                      ratingValue: Number,
                      bestRating: Number,
                      author: Entity(org.schema:Person),
                      worstRating: Number,
                      reviewAspect: String
                    } #[org_schema_type="Rating"] #[org_schema_comment="The rating given in this review. Note that reviews can themselves be rated. The <code>reviewRating</code> applies to rating given by the review. The <a class=\"localLink\" href=\"http://schema.org/aggregateRating\">aggregateRating</a> property applies to the review itself, as a creative work."],
                    out itemReviewed: Entity(org.schema:Thing) #[org_schema_type="Thing"] #[org_schema_comment="The item that is being reviewed/rated."],
                    out reviewBody: String #[org_schema_type="Text"] #[org_schema_comment="The actual body of the review."],
                    out reviewAspect: String #[org_schema_type="Text"] #[org_schema_comment="This Review or Rating is relevant to this part or facet of the itemReviewed."])
  #[org_schema_comment="A review of an item - for example, of a restaurant, movie, or store."];

  list query SoftwareSourceCode(out id: Entity(org.schema:SoftwareSourceCode),
                                out targetProduct: Entity(org.schema:SoftwareApplication) #[org_schema_type="SoftwareApplication"] #[org_schema_comment="Target Operating System / Product to which the code applies.  If applies to several versions, just the product name can be used."],
                                out codeRepository: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="Link to the repository where the un-compiled, human readable code and related code is located (SVN, github, CodePlex)."],
                                out programmingLanguage: String #[org_schema_type="Text"] #[org_schema_comment="The computer programming language."],
                                out codeSampleType: String #[org_schema_type="Text"] #[org_schema_comment="What type of code sample: full (compile ready) solution, code snippet, inline code, scripts, template."],
                                out runtimePlatform: String #[org_schema_type="Text"] #[org_schema_comment="Runtime platform or script interpreter dependencies (Example - Java v1, Python2.3, .Net Framework 3.0)."])
  #[org_schema_comment="Computer programming source code. Example: Full (compile ready) solutions, code snippet samples, scripts, templates."];

  list query TVEpisode(out id: Entity(org.schema:TVEpisode),
                       out subtitleLanguage: String #[org_schema_type="Text"] #[org_schema_comment="Languages in which subtitles/captions are available, in <a href=\"http://tools.ietf.org/html/bcp47\">IETF BCP 47 standard format</a>."],
                       out countryOfOrigin: Entity(org.schema:Country) #[org_schema_type="Country"] #[org_schema_comment="The country of the principal offices of the production company or individual responsible for the movie or program."])
  #[org_schema_comment="A TV episode which can be part of a series or season."];

  list query PerformingGroup(out id: Entity(org.schema:PerformingGroup))
  #[org_schema_comment="A performance group, such as a band, an orchestra, or a circus."];

  list query MusicGroup(out id: Entity(org.schema:MusicGroup),
                        out track: Array(Entity(org.schema:ItemList)) #[org_schema_type="ItemList"] #[org_schema_comment="A music recording (track)&#x2014;usually a single song. If an ItemList is given, the list should contain items of type MusicRecording."],
                        out genre: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="Genre of the creative work, broadcast channel or group."],
                        out album: Array(Entity(org.schema:MusicAlbum)) #[org_schema_type="MusicAlbum"] #[org_schema_comment="A music album."])
  #[org_schema_comment="A musical group, such as a band, an orchestra, or a choir. Can also be a solo musician."];

  list query AmusementPark(out id: Entity(org.schema:AmusementPark))
  #[org_schema_comment="An amusement park."];

  list query Message(out id: Entity(org.schema:Message),
                     out dateRead: Date #[org_schema_type="DateTime"] #[org_schema_comment="The date/time at which the message has been read by the recipient if a single recipient exists."],
                     out bccRecipient: Array({
  areaServed: String,
  faxNumber: String,
  hoursAvailable: {
    validFrom: Date,
    validThrough: Date,
    opens: Time,
    closes: Time,
    dayOfWeek: Enum(Wednesday,Sunday,PublicHolidays,Monday,Friday,Tuesday,Saturday,Thursday)
  },
  contactOption: Enum(HearingImpairedSupported,TollFree),
  availableLanguage: Array(String),
  telephone: Entity(tt:phone_number),
  email: String,
  contactType: Array(String),
  productSupported: String
}) #[org_schema_type="ContactPoint"] #[org_schema_comment="A sub property of recipient. The recipient blind copied on a message."],
                     out dateSent: Date #[org_schema_type="DateTime"] #[org_schema_comment="The date/time at which the message was sent."],
                     out ccRecipient: Array({
  areaServed: String,
  faxNumber: String,
  hoursAvailable: {
    validFrom: Date,
    validThrough: Date,
    opens: Time,
    closes: Time,
    dayOfWeek: Enum(Wednesday,Sunday,PublicHolidays,Monday,Friday,Tuesday,Saturday,Thursday)
  },
  contactOption: Enum(HearingImpairedSupported,TollFree),
  availableLanguage: Array(String),
  telephone: Entity(tt:phone_number),
  email: String,
  contactType: Array(String),
  productSupported: String
}) #[org_schema_type="ContactPoint"] #[org_schema_comment="A sub property of recipient. The recipient copied on a message."],
                     out recipient: Enum(Researcher) #[org_schema_type="Audience"] #[org_schema_comment="A sub property of participant. The participant who is at the receiving end of the action."],
                     out sender: Enum(Researcher) #[org_schema_type="Audience"] #[org_schema_comment="A sub property of participant. The participant who is at the sending end of the action."],
                     out messageAttachment: Array(Entity(org.schema:CreativeWork)) #[org_schema_type="CreativeWork"] #[org_schema_comment="A CreativeWork attached to the message."],
                     out dateReceived: Date #[org_schema_type="DateTime"] #[org_schema_comment="The date/time the message was received if a single recipient exists."],
                     out toRecipient: Enum(Researcher) #[org_schema_type="Audience"] #[org_schema_comment="A sub property of recipient. The recipient who was directly sent the message."])
  #[org_schema_comment="A single message from a sender to one or more organizations or people."];

  list query MobilePhoneStore(out id: Entity(org.schema:MobilePhoneStore))
  #[org_schema_comment="A store that sells mobile phones and related accessories."];

  list query Casino(out id: Entity(org.schema:Casino))
  #[org_schema_comment="A casino."];

  list query Ticket(out id: Entity(org.schema:Ticket),
                    out underName: Entity(org.schema:Organization) #[org_schema_type="Organization"] #[org_schema_comment="The person or organization the reservation or ticket is for."],
                    out totalPrice: Number #[org_schema_type="Number"] #[org_schema_comment="The total price for the reservation or ticket, including applicable taxes, shipping, etc.<br/><br/>\n\nUsage guidelines:<br/><br/>\n\n<ul>\n<li>Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.</li>\n<li>Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.</li>\n</ul>\n"],
                    out priceCurrency: String #[org_schema_type="Text"] #[org_schema_comment="The currency of the price, or a price component when attached to <a class=\"localLink\" href=\"http://schema.org/PriceSpecification\">PriceSpecification</a> and its subtypes.<br/><br/>\n\nUse standard formats: <a href=\"http://en.wikipedia.org/wiki/ISO_4217\">ISO 4217 currency format</a> e.g. \"USD\"; <a href=\"https://en.wikipedia.org/wiki/List_of_cryptocurrencies\">Ticker symbol</a> for cryptocurrencies e.g. \"BTC\"; well known names for <a href=\"https://en.wikipedia.org/wiki/Local_exchange_trading_system\">Local Exchange Tradings Systems</a> (LETS) and other currency types e.g. \"Ithaca HOUR\"."],
                    out ticketNumber: String #[org_schema_type="Text"] #[org_schema_comment="The unique identifier for the ticket."],
                    out issuedBy: Entity(org.schema:Organization) #[org_schema_type="Organization"] #[org_schema_comment="The organization issuing the ticket or permit."],
                    out ticketToken: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="Reference to an asset (e.g., Barcode, QR code image or PDF) usable for entrance."],
                    out ticketedSeat: Entity(org.schema:Seat) #[org_schema_type="Seat"] #[org_schema_comment="The seat associated with the ticket."],
                    out dateIssued: Date #[org_schema_type="Date"] #[org_schema_comment="The date the ticket was issued."])
  #[org_schema_comment="Used to describe a ticket to an event, a flight, a bus ride, etc."];

  list query BusinessEvent(out id: Entity(org.schema:BusinessEvent))
  #[org_schema_comment="Event type: Business event."];

  list query CampingPitch(out id: Entity(org.schema:CampingPitch))
  #[org_schema_comment="A <a class=\"localLink\" href=\"http://schema.org/CampingPitch\">CampingPitch</a> is an individual place for overnight stay in the outdoors, typically being part of a larger camping site, or <a class=\"localLink\" href=\"http://schema.org/Campground\">Campground</a>.<br/><br/>\n\nIn British English a campsite, or campground, is an area, usually divided into a number of pitches, where people can camp overnight using tents or camper vans or caravans; this British English use of the word is synonymous with the American English expression campground. In American English the term campsite generally means an area where an individual, family, group, or military unit can pitch a tent or park a camper; a campground may contain many campsites.\n(Source: Wikipedia see <a href=\"https://en.wikipedia.org/wiki/Campsite\">https://en.wikipedia.org/wiki/Campsite</a>).<br/><br/>\n\nSee also the dedicated <a href=\"/docs/hotels.html\">document on the use of schema.org for marking up hotels and other forms of accommodations</a>."];

  list query GameServer(out id: Entity(org.schema:GameServer),
                        out game: Entity(org.schema:VideoGame) #[org_schema_type="VideoGame"] #[org_schema_comment="Video game which is played on this server."],
                        out serverStatus: Enum(OfflinePermanently,OfflineTemporarily,Online,OnlineFull) #[org_schema_type="GameServerStatus"] #[org_schema_comment="Status of a game server."])
  #[org_schema_comment="Server that provides game interaction in a multiplayer game."];

  list query InvestmentOrDeposit(out id: Entity(org.schema:InvestmentOrDeposit),
                                 out amount: Currency #[org_schema_type="MonetaryAmount"] #[org_schema_comment="The amount of money."])
  #[org_schema_comment="A type of financial product that typically requires the client to transfer funds to a financial service in return for potential beneficial financial return."];

  list query DepositAccount(out id: Entity(org.schema:DepositAccount))
  #[org_schema_comment="A type of Bank Account with a main purpose of depositing funds to gain interest or other benefits."];

  list query Motel(out id: Entity(org.schema:Motel))
  #[org_schema_comment="A motel.\n<br /><br />\nSee also the <a href=\"/docs/hotels.html\">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>."];

  list query WPAdBlock(out id: Entity(org.schema:WPAdBlock))
  #[org_schema_comment="An advertising section of the page."];

  list query ChildCare(out id: Entity(org.schema:ChildCare))
  #[org_schema_comment="A Childcare center."];

  list query InternetCafe(out id: Entity(org.schema:InternetCafe))
  #[org_schema_comment="An internet cafe."];

  list query MedicalOrganization(out id: Entity(org.schema:MedicalOrganization))
  #[org_schema_comment="A medical organization (physical or not), such as hospital, institution or clinic."];

  list query Pharmacy(out id: Entity(org.schema:Pharmacy))
  #[org_schema_comment="A pharmacy or drugstore."];

  list query DefenceEstablishment(out id: Entity(org.schema:DefenceEstablishment))
  #[org_schema_comment="A defence establishment, such as an army or navy base."];

  list query BreadcrumbList(out id: Entity(org.schema:BreadcrumbList))
  #[org_schema_comment="A BreadcrumbList is an ItemList consisting of a chain of linked Web pages, typically described using at least their URL and their name, and typically ending with the current page.<br/><br/>\n\nThe <a class=\"localLink\" href=\"http://schema.org/position\">position</a> property is used to reconstruct the order of the items in a BreadcrumbList The convention is that a breadcrumb list has an <a class=\"localLink\" href=\"http://schema.org/itemListOrder\">itemListOrder</a> of <a class=\"localLink\" href=\"http://schema.org/ItemListOrderAscending\">ItemListOrderAscending</a> (lower values listed first), and that the first items in this list correspond to the \"top\" or beginning of the breadcrumb trail, e.g. with a site or section homepage. The specific values of 'position' are not assigned meaning for a BreadcrumbList, but they should be integers, e.g. beginning with '1' for the first item in the list."];

  list query Church(out id: Entity(org.schema:Church))
  #[org_schema_comment="A church."];

  list query LiquorStore(out id: Entity(org.schema:LiquorStore))
  #[org_schema_comment="A shop that sells alcoholic drinks such as wine, beer, whisky and other spirits."];

  list query UserTweets(out id: Entity(org.schema:UserTweets))
  #[org_schema_comment="UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use <a class=\"localLink\" href=\"http://schema.org/Action\">Action</a>-based vocabulary, alongside types such as <a class=\"localLink\" href=\"http://schema.org/Comment\">Comment</a>."];

  list query BusinessAudience(out id: Entity(org.schema:BusinessAudience),
                              out yearsInOperation: Number #[org_schema_type="QuantitativeValue"] #[org_schema_comment="The age of the business."],
                              out yearlyRevenue: Number #[org_schema_type="QuantitativeValue"] #[org_schema_comment="The size of the business in annual revenue."],
                              out numberOfEmployees: Number #[org_schema_type="QuantitativeValue"] #[org_schema_comment="The number of employees in an organization e.g. business."])
  #[org_schema_comment="A set of characteristics belonging to businesses, e.g. who compose an item's target audience."];

  list query LodgingReservation(out id: Entity(org.schema:LodgingReservation),
                                out checkinTime: Time #[org_schema_type="DateTime"] #[org_schema_comment="The earliest someone may check into a lodging establishment."],
                                out lodgingUnitDescription: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A full description of the lodging unit."],
                                out checkoutTime: Time #[org_schema_type="Time"] #[org_schema_comment="The latest someone may check out of a lodging establishment."],
                                out lodgingUnitType: String #[org_schema_type="Text"] #[org_schema_comment="Textual description of the unit type (including suite vs. room, size of bed, etc.)."])
  #[org_schema_comment="A reservation for lodging at a hotel, motel, inn, etc.<br/><br/>\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations."];

  list query OrganizationRole(out id: Entity(org.schema:OrganizationRole),
                              out numberedPosition: Array(Number) #[org_schema_type="Number"] #[org_schema_comment="A number associated with a role in an organization, for example, the number on an athlete's jersey."])
  #[org_schema_comment="A subclass of Role used to describe roles within organizations."];

  list query Airline(out id: Entity(org.schema:Airline),
                     out iataCode: String #[org_schema_type="Text"] #[org_schema_comment="IATA identifier for an airline or airport."],
                     out boardingPolicy: Enum(ZoneBoardingPolicy,GroupBoardingPolicy) #[org_schema_type="BoardingPolicyType"] #[org_schema_comment="The type of boarding policy used by the airline (e.g. zone-based or group-based)."])
  #[org_schema_comment="An organization that provides flights for passengers."];

  list query MenuItem(out id: Entity(org.schema:MenuItem),
                      out menuAddOn: Entity(org.schema:MenuSection) #[org_schema_type="MenuSection"] #[org_schema_comment="Additional menu item(s) such as a side dish of salad or side order of fries that can be added to this menu item. Additionally it can be a menu section containing allowed add-on menu items for this menu item."],
                      out nutrition: {
                        saturatedFatContent: Measure(kg),
                        fatContent: Measure(kg),
                        unsaturatedFatContent: Measure(kg),
                        sugarContent: Measure(kg),
                        cholesterolContent: Measure(kg),
                        carbohydrateContent: Measure(kg),
                        proteinContent: Measure(kg),
                        sodiumContent: Measure(kg),
                        transFatContent: Measure(kg),
                        fiberContent: Measure(kg),
                        calories: Measure(kcal),
                        servingSize: String
                      } #[org_schema_type="NutritionInformation"] #[org_schema_comment="Nutrition information about the recipe or menu item."],
                      out offers: Array(Entity(org.schema:Offer)) #[org_schema_type="Offer"] #[org_schema_comment="An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event."],
                      out suitableForDiet: Enum(KosherDiet,VeganDiet,DiabeticDiet,LowFatDiet,HinduDiet,GlutenFreeDiet,HalalDiet,LowLactoseDiet,VegetarianDiet,LowCalorieDiet,LowSaltDiet) #[org_schema_type="RestrictedDiet"] #[org_schema_comment="Indicates a dietary restriction or guideline for which this recipe or menu item is suitable, e.g. diabetic, halal etc."])
  #[org_schema_comment="A food or drink item listed in a menu or menu section."];

  list query BikeStore(out id: Entity(org.schema:BikeStore))
  #[org_schema_comment="A bike store."];

  list query BuddhistTemple(out id: Entity(org.schema:BuddhistTemple))
  #[org_schema_comment="A Buddhist temple."];

  list query LocationFeatureSpecification(out id: Entity(org.schema:LocationFeatureSpecification),
                                          out hoursAvailable: {
                                            validFrom: Date,
                                            validThrough: Date,
                                            opens: Time,
                                            closes: Time,
                                            dayOfWeek: Enum(Wednesday,Sunday,PublicHolidays,Monday,Friday,Tuesday,Saturday,Thursday)
                                          } #[org_schema_type="OpeningHoursSpecification"] #[org_schema_comment="The hours during which this service or contact is available."],
                                          out validFrom: Date #[org_schema_type="Date"] #[org_schema_comment="The date when the item becomes valid."],
                                          out validThrough: Date #[org_schema_type="DateTime"] #[org_schema_comment="The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours."])
  #[org_schema_comment="Specifies a location feature by providing a structured value representing a feature of an accommodation as a property-value pair of varying degrees of formality."];

  list query MenuSection(out id: Entity(org.schema:MenuSection),
                         out hasMenuItem: Array(Entity(org.schema:MenuItem)) #[org_schema_type="MenuItem"] #[org_schema_comment="A food or drink item contained in a menu or menu section."],
                         out hasMenuSection: Array(Entity(org.schema:MenuSection)) #[org_schema_type="MenuSection"] #[org_schema_comment="A subgrouping of the menu (by dishes, course, serving time period, etc.)."])
  #[org_schema_comment="A sub-grouping of food or drink items in a menu. E.g. courses (such as 'Dinner', 'Breakfast', etc.), specific type of dishes (such as 'Meat', 'Vegan', 'Drinks', etc.), or some other classification made by the menu provider."];

  list query Airport(out id: Entity(org.schema:Airport),
                     out iataCode: String #[org_schema_type="Text"] #[org_schema_comment="IATA identifier for an airline or airport."],
                     out icaoCode: String #[org_schema_type="Text"] #[org_schema_comment="ICAO identifier for an airport."])
  #[org_schema_comment="An airport."];

  list query AutoRental(out id: Entity(org.schema:AutoRental))
  #[org_schema_comment="A car rental business."];

  list query ProductModel(out id: Entity(org.schema:ProductModel),
                          out predecessorOf: Array(Entity(org.schema:ProductModel)) #[org_schema_type="ProductModel"] #[org_schema_comment="A pointer from a previous, often discontinued variant of the product to its newer variant."],
                          out successorOf: Array(Entity(org.schema:ProductModel)) #[org_schema_type="ProductModel"] #[org_schema_comment="A pointer from a newer variant of a product  to its previous, often discontinued predecessor."],
                          out isVariantOf: Array(Entity(org.schema:ProductModel)) #[org_schema_type="ProductModel"] #[org_schema_comment="A pointer to a base product from which this product is a variant. It is safe to infer that the variant inherits all product features from the base model, unless defined locally. This is not transitive."])
  #[org_schema_comment="A datasheet or vendor specification of a product (in the sense of a prototypical description)."];

  list query RentalCarReservation(out id: Entity(org.schema:RentalCarReservation),
                                  out pickupTime: Date #[org_schema_type="DateTime"] #[org_schema_comment="When a taxi will pickup a passenger or a rental car can be picked up."],
                                  out dropoffTime: Date #[org_schema_type="DateTime"] #[org_schema_comment="When a rental car can be dropped off."],
                                  out dropoffLocation: Entity(org.schema:Place) #[org_schema_type="Place"] #[org_schema_comment="Where a rental car can be dropped off."],
                                  out pickupLocation: Entity(org.schema:Place) #[org_schema_type="Place"] #[org_schema_comment="Where a taxi will pick up a passenger or a rental car can be picked up."])
  #[org_schema_comment="A reservation for a rental car.<br/><br/>\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations."];

  list query BroadcastFrequencySpecification(out id: Entity(org.schema:BroadcastFrequencySpecification),
                                             out broadcastFrequencyValue: Number #[org_schema_type="QuantitativeValue"] #[org_schema_comment="The frequency in MHz for a particular broadcast."])
  #[org_schema_comment="The frequency in MHz and the modulation used for a particular BroadcastService."];

  list query WebSite(out id: Entity(org.schema:WebSite),
                     out issn: String #[org_schema_type="Text"] #[org_schema_comment="The International Standard Serial Number (ISSN) that identifies this serial publication. You can repeat this property to identify different formats of, or the linking ISSN (ISSN-L) for, this serial publication."])
  #[org_schema_comment="A WebSite is a set of related web pages and other items typically served from a single web domain and accessible via URLs."];

  list query EventReservation(out id: Entity(org.schema:EventReservation))
  #[org_schema_comment="A reservation for an event like a concert, sporting event, or lecture.<br/><br/>\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use <a class=\"localLink\" href=\"http://schema.org/Offer\">Offer</a>."];

  list query NewsArticle(out id: Entity(org.schema:NewsArticle),
                         out printColumn: String #[org_schema_type="Text"] #[org_schema_comment="The number of the column in which the NewsArticle appears in the print edition."],
                         out printEdition: String #[org_schema_type="Text"] #[org_schema_comment="The edition of the print product in which the NewsArticle appears."],
                         out printSection: String #[org_schema_type="Text"] #[org_schema_comment="If this NewsArticle appears in print, this field indicates the print section in which the article appeared."],
                         out printPage: String #[org_schema_type="Text"] #[org_schema_comment="If this NewsArticle appears in print, this field indicates the name of the page on which the article is found. Please note that this field is intended for the exact page name (e.g. A5, B18)."],
                         out dateline: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A <a href=\"https://en.wikipedia.org/wiki/Dateline\">dateline</a> is a brief piece of text included in news articles that describes where and when the story was written or filed though the date is often omitted. Sometimes only a placename is provided.<br/><br/>\n\nStructured representations of dateline-related information can also be expressed more explicitly using <a class=\"localLink\" href=\"http://schema.org/locationCreated\">locationCreated</a> (which represents where a work was created e.g. where a news report was written).  For location depicted or described in the content, use <a class=\"localLink\" href=\"http://schema.org/contentLocation\">contentLocation</a>.<br/><br/>\n\nDateline summaries are oriented more towards human readers than towards automated processing, and can vary substantially. Some examples: \"BEIRUT, Lebanon, June 2.\", \"Paris, France\", \"December 19, 2017 11:43AM Reporting from Washington\", \"Beijing/Moscow\", \"QUEZON CITY, Philippines\"."])
  #[org_schema_comment="A NewsArticle is an article whose content reports news, or provides background context and supporting materials for understanding the news.<br/><br/>\n\nA more detailed overview of <a href=\"/docs/news.html\">schema.org News markup</a> is also available."];

  list query Restaurant(out id: Entity(org.schema:Restaurant))
  #[org_schema_comment="A restaurant."];

  list query MobileApplication(out id: Entity(org.schema:MobileApplication),
                               out carrierRequirements: String #[org_schema_type="Text"] #[org_schema_comment="Specifies specific carrier(s) requirements for the application (e.g. an application may only work on a specific carrier network)."])
  #[org_schema_comment="A software application designed specifically to work well on a mobile device such as a telephone."];

  list query Code(out id: Entity(org.schema:Code))
  #[org_schema_comment="Computer programming source code. Example: Full (compile ready) solutions, code snippet samples, scripts, templates."];

  list query SportingGoodsStore(out id: Entity(org.schema:SportingGoodsStore))
  #[org_schema_comment="A sporting goods store."];

  list query TextDigitalDocument(out id: Entity(org.schema:TextDigitalDocument))
  #[org_schema_comment="A file composed primarily of text."];

  list query Waterfall(out id: Entity(org.schema:Waterfall))
  #[org_schema_comment="A waterfall, like Niagara."];

  list query OfficeEquipmentStore(out id: Entity(org.schema:OfficeEquipmentStore))
  #[org_schema_comment="An office equipment store."];

  list query EmployeeRole(out id: Entity(org.schema:EmployeeRole),
                          out salaryCurrency: String #[org_schema_type="Text"] #[org_schema_comment="The currency (coded using <a href=\"http://en.wikipedia.org/wiki/ISO_4217\">ISO 4217</a> ) used for the main salary information in this job posting or for this employee."],
                          out baseSalary: Number #[org_schema_type="Number"] #[org_schema_comment="The base salary of the job or of an employee in an EmployeeRole."])
  #[org_schema_comment="A subclass of OrganizationRole used to describe employee relationships."];

  list query UserComments(out id: Entity(org.schema:UserComments),
                          out commentText: String #[org_schema_type="Text"] #[org_schema_comment="The text of the UserComment."],
                          out discusses: Entity(org.schema:CreativeWork) #[org_schema_type="CreativeWork"] #[org_schema_comment="Specifies the CreativeWork associated with the UserComment."],
                          out commentTime: Date #[org_schema_type="Date"] #[org_schema_comment="The time at which the UserComment was made."],
                          out creator: Entity(org.schema:Organization) #[org_schema_type="Organization"] #[org_schema_comment="The creator/author of this CreativeWork. This is the same as the Author property for CreativeWork."],
                          out replyToUrl: Entity(tt:url) #[org_schema_type="URL"] #[org_schema_comment="The URL at which a reply may be posted to the specified UserComment."])
  #[org_schema_comment="UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use <a class=\"localLink\" href=\"http://schema.org/Action\">Action</a>-based vocabulary, alongside types such as <a class=\"localLink\" href=\"http://schema.org/Comment\">Comment</a>."];

  list query GatedResidenceCommunity(out id: Entity(org.schema:GatedResidenceCommunity))
  #[org_schema_comment="Residence type: Gated community."];

  list query AdministrativeArea(out id: Entity(org.schema:AdministrativeArea))
  #[org_schema_comment="A geographical region, typically under the jurisdiction of a particular government."];

  list query Country(out id: Entity(org.schema:Country))
  #[org_schema_comment="A country."];

  list query HowToTip(out id: Entity(org.schema:HowToTip))
  #[org_schema_comment="An explanation in the instructions for how to achieve a result. It provides supplementary information about a technique, supply, author's preference, etc. It can explain what could be done, or what should not be done, but doesn't specify what should be done (see HowToDirection)."];

  list query ComputerLanguage(out id: Entity(org.schema:ComputerLanguage))
  #[org_schema_comment="This type covers computer programming languages such as Scheme and Lisp, as well as other language-like computer representations. Natural languages are best represented with the <a class=\"localLink\" href=\"http://schema.org/Language\">Language</a> type."];

  list query PerformanceRole(out id: Entity(org.schema:PerformanceRole),
                             out characterName: String #[org_schema_type="Text"] #[org_schema_comment="The name of a character played in some acting or performing role, i.e. in a PerformanceRole."])
  #[org_schema_comment="A PerformanceRole is a Role that some entity places with regard to a theatrical performance, e.g. in a Movie, TVSeries etc."];

  list query Brand(out id: Entity(org.schema:Brand),
                   out aggregateRating: {
                     itemReviewed: Entity(org.schema:Thing),
                     ratingValue: Number,
                     bestRating: Number,
                     author: Entity(org.schema:Person),
                     worstRating: Number,
                     reviewAspect: String
                   } #[org_schema_type="AggregateRating"] #[org_schema_comment="The overall rating, based on a collection of reviews or ratings, of the item."],
                   out logo: Array(Entity(tt:url)) #[org_schema_type="URL"] #[org_schema_comment="An associated logo."],
                   out review: Array(Entity(org.schema:Review)) #[org_schema_type="Review"] #[org_schema_comment="A review of the item."],
                   out slogan: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A slogan or motto associated with the item."])
  #[org_schema_comment="A brand is a name used by an organization or business person for labeling a product, product group, or similar."];

  list query Mountain(out id: Entity(org.schema:Mountain))
  #[org_schema_comment="A mountain, like Mount Whitney or Mount Everest."];

  list query VideoGameClip(out id: Entity(org.schema:VideoGameClip))
  #[org_schema_comment="A short segment/part of a video game."];

  list query MusicStore(out id: Entity(org.schema:MusicStore))
  #[org_schema_comment="A music store."];

  list query Crematorium(out id: Entity(org.schema:Crematorium))
  #[org_schema_comment="A crematorium."];

  list query ContactPage(out id: Entity(org.schema:ContactPage))
  #[org_schema_comment="Web page type: Contact page."];

  list query PresentationDigitalDocument(out id: Entity(org.schema:PresentationDigitalDocument))
  #[org_schema_comment="A file containing slides or used for a presentation."];

  list query Blog(out id: Entity(org.schema:Blog),
                  out blogPost: Array(Entity(org.schema:BlogPosting)) #[org_schema_type="BlogPosting"] #[org_schema_comment="A posting that is part of this blog."],
                  out issn: String #[org_schema_type="Text"] #[org_schema_comment="The International Standard Serial Number (ISSN) that identifies this serial publication. You can repeat this property to identify different formats of, or the linking ISSN (ISSN-L) for, this serial publication."])
  #[org_schema_comment="A blog."];

  list query Report(out id: Entity(org.schema:Report),
                    out reportNumber: String #[org_schema_type="Text"] #[org_schema_comment="The number or other unique designator assigned to a Report by the publishing organization."])
  #[org_schema_comment="A Report generated by governmental or non-governmental organization."];

  list query Seat(out id: Entity(org.schema:Seat),
                  out seatRow: String #[org_schema_type="Text"] #[org_schema_comment="The row location of the reserved seat (e.g., B)."],
                  out seatingType: String #[org_schema_type="Text"] #[org_schema_comment="The type/class of the seat."],
                  out seatSection: String #[org_schema_type="Text"] #[org_schema_comment="The section location of the reserved seat (e.g. Orchestra)."],
                  out seatNumber: String #[org_schema_type="Text"] #[org_schema_comment="The location of the reserved seat (e.g., 27)."])
  #[org_schema_comment="Used to describe a seat, such as a reserved seat in an event reservation."];

  list query Sculpture(out id: Entity(org.schema:Sculpture))
  #[org_schema_comment="A piece of sculpture."];

  list query ComputerStore(out id: Entity(org.schema:ComputerStore))
  #[org_schema_comment="A computer store."];

  list query RadioStation(out id: Entity(org.schema:RadioStation))
  #[org_schema_comment="A radio station."];

  list query Map(out id: Entity(org.schema:Map),
                 out mapType: Enum(ParkingMap,SeatingMap,VenueMap,TransitMap) #[org_schema_type="MapCategoryType"] #[org_schema_comment="Indicates the kind of Map, from the MapCategoryType Enumeration."])
  #[org_schema_comment="A map."];

  list query GolfCourse(out id: Entity(org.schema:GolfCourse))
  #[org_schema_comment="A golf course."];

  list query MoneyTransfer(out id: Entity(org.schema:MoneyTransfer),
                           out amount: Currency #[org_schema_type="MonetaryAmount"] #[org_schema_comment="The amount of money."]);

  list query ShoeStore(out id: Entity(org.schema:ShoeStore))
  #[org_schema_comment="A shoe store."];

  list query WPSideBar(out id: Entity(org.schema:WPSideBar))
  #[org_schema_comment="A sidebar section of the page."];

  list query FlightReservation(out id: Entity(org.schema:FlightReservation),
                               out passengerSequenceNumber: String #[org_schema_type="Text"] #[org_schema_comment="The passenger's sequence number as assigned by the airline."],
                               out securityScreening: String #[org_schema_type="Text"] #[org_schema_comment="The type of security screening the passenger is subject to."],
                               out passengerPriorityStatus: String #[org_schema_type="Text"] #[org_schema_comment="The priority status assigned to a passenger for security or boarding (e.g. FastTrack or Priority)."],
                               out boardingGroup: String #[org_schema_type="Text"] #[org_schema_comment="The airline-specific indicator of boarding order / preference."])
  #[org_schema_comment="A reservation for air travel.<br/><br/>\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use <a class=\"localLink\" href=\"http://schema.org/Offer\">Offer</a>."];

  list query PetStore(out id: Entity(org.schema:PetStore))
  #[org_schema_comment="A pet store."];

  list query OnDemandEvent(out id: Entity(org.schema:OnDemandEvent))
  #[org_schema_comment="A publication event e.g. catch-up TV or radio podcast, during which a program is available on-demand."];

  list query AutoDealer(out id: Entity(org.schema:AutoDealer))
  #[org_schema_comment="An car dealership."];

  list query PhysicalActivity(out id: Entity(org.schema:PhysicalActivity),
                              out category: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy."]);

  list query ClaimReview(out id: Entity(org.schema:ClaimReview),
                         out claimReviewed: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A short summary of the specific claims reviewed in a ClaimReview."])
  #[org_schema_comment="A fact-checking review of claims made (or reported) in some creative work (referenced via itemReviewed)."];

  list query GasStation(out id: Entity(org.schema:GasStation))
  #[org_schema_comment="A gas station."];

  list query Library(out id: Entity(org.schema:Library))
  #[org_schema_comment="A library."];

  list query TouristInformationCenter(out id: Entity(org.schema:TouristInformationCenter))
  #[org_schema_comment="A tourist information center."];

  list query ProfessionalService(out id: Entity(org.schema:ProfessionalService))
  #[org_schema_comment="Original definition: \"provider of professional services.\"<br/><br/>\n\nThe general <a class=\"localLink\" href=\"http://schema.org/ProfessionalService\">ProfessionalService</a> type for local businesses was deprecated due to confusion with <a class=\"localLink\" href=\"http://schema.org/Service\">Service</a>. For reference, the types that it included were: <a class=\"localLink\" href=\"http://schema.org/Dentist\">Dentist</a>,\n        <a class=\"localLink\" href=\"http://schema.org/AccountingService\">AccountingService</a>, <a class=\"localLink\" href=\"http://schema.org/Attorney\">Attorney</a>, <a class=\"localLink\" href=\"http://schema.org/Notary\">Notary</a>, as well as types for several kinds of <a class=\"localLink\" href=\"http://schema.org/HomeAndConstructionBusiness\">HomeAndConstructionBusiness</a>: <a class=\"localLink\" href=\"http://schema.org/Electrician\">Electrician</a>, <a class=\"localLink\" href=\"http://schema.org/GeneralContractor\">GeneralContractor</a>,\n        <a class=\"localLink\" href=\"http://schema.org/HousePainter\">HousePainter</a>, <a class=\"localLink\" href=\"http://schema.org/Locksmith\">Locksmith</a>, <a class=\"localLink\" href=\"http://schema.org/Plumber\">Plumber</a>, <a class=\"localLink\" href=\"http://schema.org/RoofingContractor\">RoofingContractor</a>. <a class=\"localLink\" href=\"http://schema.org/LegalService\">LegalService</a> was introduced as a more inclusive supertype of <a class=\"localLink\" href=\"http://schema.org/Attorney\">Attorney</a>."];

  list query Aquarium(out id: Entity(org.schema:Aquarium))
  #[org_schema_comment="Aquarium."];

  list query SelfStorage(out id: Entity(org.schema:SelfStorage))
  #[org_schema_comment="A self-storage facility."];

  list query Florist(out id: Entity(org.schema:Florist))
  #[org_schema_comment="A florist."];

  list query HowToTool(out id: Entity(org.schema:HowToTool))
  #[org_schema_comment="A tool used (but not consumed) when performing instructions for how to achieve a result."];

  list query UserPlusOnes(out id: Entity(org.schema:UserPlusOnes))
  #[org_schema_comment="UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use <a class=\"localLink\" href=\"http://schema.org/Action\">Action</a>-based vocabulary, alongside types such as <a class=\"localLink\" href=\"http://schema.org/Comment\">Comment</a>."];

  list query UserPageVisits(out id: Entity(org.schema:UserPageVisits))
  #[org_schema_comment="UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use <a class=\"localLink\" href=\"http://schema.org/Action\">Action</a>-based vocabulary, alongside types such as <a class=\"localLink\" href=\"http://schema.org/Comment\">Comment</a>."];

  list query Mosque(out id: Entity(org.schema:Mosque))
  #[org_schema_comment="A mosque."];

  list query DataFeed(out id: Entity(org.schema:DataFeed),
                      out dataFeedElement: Array(String) #[org_schema_type="Text"] #[org_schema_comment="An item within in a data feed. Data feeds may have many elements."])
  #[org_schema_comment="A single feed providing structured information about one or more entities or topics."];

  list query Continent(out id: Entity(org.schema:Continent))
  #[org_schema_comment="One of the continents (for example, Europe or Africa)."];

  list query ShoppingCenter(out id: Entity(org.schema:ShoppingCenter))
  #[org_schema_comment="A shopping center or mall."];

  list query HowToStep(out id: Entity(org.schema:HowToStep))
  #[org_schema_comment="A step in the instructions for how to achieve a result. It is an ordered list with HowToDirection and/or HowToTip items."];

  list query OfferCatalog(out id: Entity(org.schema:OfferCatalog))
  #[org_schema_comment="An OfferCatalog is an ItemList that contains related Offers and/or further OfferCatalogs that are offeredBy the same provider."];

  list query NightClub(out id: Entity(org.schema:NightClub))
  #[org_schema_comment="A nightclub or discotheque."];

  list query State(out id: Entity(org.schema:State))
  #[org_schema_comment="A state or province of a country."];

  list query Playground(out id: Entity(org.schema:Playground))
  #[org_schema_comment="A playground."];

  list query ParkingFacility(out id: Entity(org.schema:ParkingFacility))
  #[org_schema_comment="A parking lot or other parking facility."];

  list query BookSeries(out id: Entity(org.schema:BookSeries))
  #[org_schema_comment="A series of books. Included books can be indicated with the hasPart property."];

  list query BeautySalon(out id: Entity(org.schema:BeautySalon))
  #[org_schema_comment="Beauty salon."];

  list query UserDownloads(out id: Entity(org.schema:UserDownloads))
  #[org_schema_comment="UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use <a class=\"localLink\" href=\"http://schema.org/Action\">Action</a>-based vocabulary, alongside types such as <a class=\"localLink\" href=\"http://schema.org/Comment\">Comment</a>."];

  list query PawnShop(out id: Entity(org.schema:PawnShop))
  #[org_schema_comment="A shop that will buy, or lend money against the security of, personal possessions."];

  list query HighSchool(out id: Entity(org.schema:HighSchool))
  #[org_schema_comment="A high school."];

  list query SportsClub(out id: Entity(org.schema:SportsClub))
  #[org_schema_comment="A sports club."];

  list query Bridge(out id: Entity(org.schema:Bridge))
  #[org_schema_comment="A bridge."];

  list query TrainStation(out id: Entity(org.schema:TrainStation))
  #[org_schema_comment="A train station."];

  list query Conversation(out id: Entity(org.schema:Conversation))
  #[org_schema_comment="One or more messages between organizations or people on a particular topic. Individual messages can be linked to the conversation with isPartOf or hasPart properties."];

  list query LinkRole(out id: Entity(org.schema:LinkRole),
                      out inLanguage: String #[org_schema_type="Text"] #[org_schema_comment="The language of the content or performance or used in an action. Please use one of the language codes from the <a href=\"http://tools.ietf.org/html/bcp47\">IETF BCP 47 standard</a>. See also <a class=\"localLink\" href=\"http://schema.org/availableLanguage\">availableLanguage</a>."]);

  list query TouristDestination(out id: Entity(org.schema:TouristDestination),
                                out touristType: Enum(Researcher) #[org_schema_type="Audience"] #[org_schema_comment="Attraction suitable for type(s) of tourist. eg. Children, visitors from a particular country, etc."]);

  list query TouristTrip(out id: Entity(org.schema:TouristTrip),
                         out touristType: Enum(Researcher) #[org_schema_type="Audience"] #[org_schema_comment="Attraction suitable for type(s) of tourist. eg. Children, visitors from a particular country, etc."]);

  list query PaymentService(out id: Entity(org.schema:PaymentService))
  #[org_schema_comment="A Service to transfer funds from a person or organization to a beneficiary person or organization."];

  list query SpeakableSpecification(out id: Entity(org.schema:SpeakableSpecification))
  #[org_schema_comment="A SpeakableSpecification indicates (typically via <a class=\"localLink\" href=\"http://schema.org/xpath\">xpath</a> or <a class=\"localLink\" href=\"http://schema.org/cssSelector\">cssSelector</a>) sections of a document that are highlighted as particularly <a class=\"localLink\" href=\"http://schema.org/speakable\">speakable</a>. Instances of this type are expected to be used primarily as values of the <a class=\"localLink\" href=\"http://schema.org/speakable\">speakable</a> property."];

  list query RadioChannel(out id: Entity(org.schema:RadioChannel))
  #[org_schema_comment="A unique instance of a radio BroadcastService on a CableOrSatelliteService lineup."];

  list query AMRadioChannel(out id: Entity(org.schema:AMRadioChannel))
  #[org_schema_comment="A radio channel that uses AM."];

  list query AutoBodyShop(out id: Entity(org.schema:AutoBodyShop))
  #[org_schema_comment="Auto body shop."];

  list query School(out id: Entity(org.schema:School))
  #[org_schema_comment="A school."];

  list query TelevisionStation(out id: Entity(org.schema:TelevisionStation))
  #[org_schema_comment="A television station."];

  list query LakeBodyOfWater(out id: Entity(org.schema:LakeBodyOfWater))
  #[org_schema_comment="A lake (for example, Lake Pontrachain)."];

  list query MusicVideoObject(out id: Entity(org.schema:MusicVideoObject))
  #[org_schema_comment="A music video file."];

  list query HobbyShop(out id: Entity(org.schema:HobbyShop))
  #[org_schema_comment="A store that sells materials useful or necessary for various hobbies."];

  list query Beach(out id: Entity(org.schema:Beach))
  #[org_schema_comment="Beach."];

  list query SpreadsheetDigitalDocument(out id: Entity(org.schema:SpreadsheetDigitalDocument))
  #[org_schema_comment="A spreadsheet file."];

  list query WPHeader(out id: Entity(org.schema:WPHeader))
  #[org_schema_comment="The header section of the page."];

  list query LandmarksOrHistoricalBuildings(out id: Entity(org.schema:LandmarksOrHistoricalBuildings))
  #[org_schema_comment="An historical landmark or building."];

  list query Notary(out id: Entity(org.schema:Notary))
  #[org_schema_comment="A notary."];

  list query DryCleaningOrLaundry(out id: Entity(org.schema:DryCleaningOrLaundry))
  #[org_schema_comment="A dry-cleaning business."];

  list query FastFoodRestaurant(out id: Entity(org.schema:FastFoodRestaurant))
  #[org_schema_comment="A fast-food restaurant."];

  list query DataFeedItem(out id: Entity(org.schema:DataFeedItem),
                          out dateModified: Date #[org_schema_type="DateTime"] #[org_schema_comment="The date on which the CreativeWork was most recently modified or when the item's entry was modified within a DataFeed."],
                          out dateDeleted: Date #[org_schema_type="Date"] #[org_schema_comment="The datetime the item was removed from the DataFeed."],
                          out dateCreated: Date #[org_schema_type="DateTime"] #[org_schema_comment="The date on which the CreativeWork was created or the item was added to a DataFeed."],
                          out item: Array(Entity(org.schema:Thing)) #[org_schema_type="Thing"] #[org_schema_comment="An entity represented by an entry in a list or data feed (e.g. an 'artist' in a list of 'artists')’."])
  #[org_schema_comment="A single item within a larger data feed."];

  list query Park(out id: Entity(org.schema:Park))
  #[org_schema_comment="A park."];

  list query Zoo(out id: Entity(org.schema:Zoo))
  #[org_schema_comment="A zoo."];

  list query ComedyClub(out id: Entity(org.schema:ComedyClub))
  #[org_schema_comment="A comedy club."];

  list query ExhibitionEvent(out id: Entity(org.schema:ExhibitionEvent))
  #[org_schema_comment="Event type: Exhibition event, e.g. at a museum, library, archive, tradeshow, ..."];

  list query EmploymentAgency(out id: Entity(org.schema:EmploymentAgency))
  #[org_schema_comment="An employment agency."];

  list query FireStation(out id: Entity(org.schema:FireStation))
  #[org_schema_comment="A fire station. With firemen."];

  list query Hotel(out id: Entity(org.schema:Hotel))
  #[org_schema_comment="A hotel is an establishment that provides lodging paid on a short-term basis (Source: Wikipedia, the free encyclopedia, see http://en.wikipedia.org/wiki/Hotel).\n<br /><br />\nSee also the <a href=\"/docs/hotels.html\">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>."];

  list query RadioClip(out id: Entity(org.schema:RadioClip))
  #[org_schema_comment="A short radio program or a segment/part of a radio program."];

  list query ElectronicsStore(out id: Entity(org.schema:ElectronicsStore))
  #[org_schema_comment="An electronics store."];

  list query TVClip(out id: Entity(org.schema:TVClip))
  #[org_schema_comment="A short TV program or a segment/part of a TV program."];

  list query NailSalon(out id: Entity(org.schema:NailSalon))
  #[org_schema_comment="A nail salon."];

  list query GeneralContractor(out id: Entity(org.schema:GeneralContractor))
  #[org_schema_comment="A general contractor."];

  list query TelevisionChannel(out id: Entity(org.schema:TelevisionChannel))
  #[org_schema_comment="A unique instance of a television BroadcastService on a CableOrSatelliteService lineup."];

  list query CollectionPage(out id: Entity(org.schema:CollectionPage))
  #[org_schema_comment="Web page type: Collection page."];

  list query Menu(out id: Entity(org.schema:Menu),
                  out hasMenuItem: Array(Entity(org.schema:MenuItem)) #[org_schema_type="MenuItem"] #[org_schema_comment="A food or drink item contained in a menu or menu section."],
                  out hasMenuSection: Array(Entity(org.schema:MenuSection)) #[org_schema_type="MenuSection"] #[org_schema_comment="A subgrouping of the menu (by dishes, course, serving time period, etc.)."])
  #[org_schema_comment="A structured representation of food or drink items available from a FoodEstablishment."];

  list query Periodical(out id: Entity(org.schema:Periodical))
  #[org_schema_comment="A publication in any medium issued in successive parts bearing numerical or chronological designations and intended, such as a magazine, scholarly journal, or newspaper to continue indefinitely.<br/><br/>\n\nSee also <a href=\"http://blog.schema.org/2014/09/schemaorg-support-for-bibliographic_2.html\">blog post</a>."];

  list query BedDetails(out id: Entity(org.schema:BedDetails),
                        out numberOfBeds: Number #[org_schema_type="Number"] #[org_schema_comment="The quantity of the given bed type available in the HotelRoom, Suite, House, or Apartment."],
                        out typeOfBed: String #[org_schema_type="Text"] #[org_schema_comment="The type of bed to which the BedDetail refers, i.e. the type of bed available in the quantity indicated by quantity."])
  #[org_schema_comment="An entity holding detailed information about the available bed types, e.g. the quantity of twin beds for a hotel room. For the single case of just one bed of a certain type, you can use bed directly with a text. See also <a class=\"localLink\" href=\"http://schema.org/BedType\">BedType</a> (under development)."];

  list query Electrician(out id: Entity(org.schema:Electrician))
  #[org_schema_comment="An electrician."];

  list query LegislativeBuilding(out id: Entity(org.schema:LegislativeBuilding))
  #[org_schema_comment="A legislative building&#x2014;for example, the state capitol."];

  list query UserCheckins(out id: Entity(org.schema:UserCheckins))
  #[org_schema_comment="UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use <a class=\"localLink\" href=\"http://schema.org/Action\">Action</a>-based vocabulary, alongside types such as <a class=\"localLink\" href=\"http://schema.org/Comment\">Comment</a>."];

  list query TravelAgency(out id: Entity(org.schema:TravelAgency))
  #[org_schema_comment="A travel agency."];

  list query Hostel(out id: Entity(org.schema:Hostel))
  #[org_schema_comment="A hostel - cheap accommodation, often in shared dormitories.\n<br /><br />\nSee also the <a href=\"/docs/hotels.html\">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>."];

  list query Quantity(out id: Entity(org.schema:Quantity))
  #[org_schema_comment="Quantities such as distance, time, mass, weight, etc. Particular instances of say Mass are entities like '3 Kg' or '4 milligrams'."];

  list query VideoGallery(out id: Entity(org.schema:VideoGallery))
  #[org_schema_comment="Web page type: Video gallery page."];

  list query EducationalAudience(out id: Entity(org.schema:EducationalAudience),
                                 out educationalRole: Array(String) #[org_schema_type="Text"] #[org_schema_comment="An educationalRole of an EducationalAudience."])
  #[org_schema_comment="An EducationalAudience."];

  list query CityHall(out id: Entity(org.schema:CityHall))
  #[org_schema_comment="A city hall."];

  list query ComedyEvent(out id: Entity(org.schema:ComedyEvent))
  #[org_schema_comment="Event type: Comedy event."];

  list query ItemPage(out id: Entity(org.schema:ItemPage))
  #[org_schema_comment="A page devoted to a single item, such as a particular product or hotel."];

  list query MovingCompany(out id: Entity(org.schema:MovingCompany))
  #[org_schema_comment="A moving company."];

  list query GardenStore(out id: Entity(org.schema:GardenStore))
  #[org_schema_comment="A garden store."];

  list query HealthInsurancePlan(out id: Entity(org.schema:HealthInsurancePlan),
                                 out contactPoint: Array({
  areaServed: String,
  faxNumber: String,
  hoursAvailable: {
    validFrom: Date,
    validThrough: Date,
    opens: Time,
    closes: Time,
    dayOfWeek: Enum(Wednesday,Sunday,PublicHolidays,Monday,Friday,Tuesday,Saturday,Thursday)
  },
  contactOption: Enum(HearingImpairedSupported,TollFree),
  availableLanguage: Array(String),
  telephone: Entity(tt:phone_number),
  email: String,
  contactType: Array(String),
  productSupported: String
}) #[org_schema_type="ContactPoint"] #[org_schema_comment="A contact point for a person or organization."]);

  list query Audiobook(out id: Entity(org.schema:Audiobook),
                       out duration: Measure(ms) #[org_schema_type="Duration"] #[org_schema_comment="The duration of the item (movie, audio recording, event, etc.) in <a href=\"http://en.wikipedia.org/wiki/ISO_8601\">ISO 8601 date format</a>."]);

  list query Dentist(out id: Entity(org.schema:Dentist))
  #[org_schema_comment="A dentist."];

  list query AdultEntertainment(out id: Entity(org.schema:AdultEntertainment))
  #[org_schema_comment="An adult entertainment establishment."];

  list query DataCatalog(out id: Entity(org.schema:DataCatalog),
                         out _dataset: Array(Entity(org.schema:Dataset)) #[org_schema_type="Dataset"] #[org_schema_comment="A dataset contained in this catalog."])
  #[org_schema_comment="A collection of datasets."];

  list query City(out id: Entity(org.schema:City))
  #[org_schema_comment="A city or town."];

  list query WorkBasedProgram(out id: Entity(org.schema:WorkBasedProgram),
                              out occupationalCategory: Array(String) #[org_schema_type="Text"] #[org_schema_comment="A category describing the job, preferably using a term from a taxonomy such as <a href=\"http://www.onetcenter.org/taxonomy.html\">BLS O*NET-SOC</a>, <a href=\"https://www.ilo.org/public/english/bureau/stat/isco/isco08/\">ISCO-08</a> or similar, with the property repeated for each applicable value. Ideally the taxonomy should be identified, and both the textual label and formal code for the category should be provided.<br/><br/>\n\nNote: for historical reasons, any textual label and formal code provided as a literal may be assumed to be from O*NET-SOC."]);

  list query MusicEvent(out id: Entity(org.schema:MusicEvent))
  #[org_schema_comment="Event type: Music event."];

  list query HairSalon(out id: Entity(org.schema:HairSalon))
  #[org_schema_comment="A hair salon."];

  list query DaySpa(out id: Entity(org.schema:DaySpa))
  #[org_schema_comment="A day spa."];

  list query EventVenue(out id: Entity(org.schema:EventVenue))
  #[org_schema_comment="An event venue."];

  list query RadioEpisode(out id: Entity(org.schema:RadioEpisode))
  #[org_schema_comment="A radio episode which can be part of a series or season."];

  list query ElementarySchool(out id: Entity(org.schema:ElementarySchool))
  #[org_schema_comment="An elementary school."];

  list query BankOrCreditUnion(out id: Entity(org.schema:BankOrCreditUnion))
  #[org_schema_comment="Bank or credit union."];

  list query FAQPage(out id: Entity(org.schema:FAQPage))
  #[org_schema_comment="A <a class=\"localLink\" href=\"http://schema.org/FAQPage\">FAQPage</a> is a <a class=\"localLink\" href=\"http://schema.org/WebPage\">WebPage</a> presenting one or more \"<a href=\"https://en.wikipedia.org/wiki/FAQ\">Frequently asked questions</a>\" (see also <a class=\"localLink\" href=\"http://schema.org/QAPage\">QAPage</a>)."];

  list query Winery(out id: Entity(org.schema:Winery))
  #[org_schema_comment="A winery."];

  list query MeetingRoom(out id: Entity(org.schema:MeetingRoom))
  #[org_schema_comment="A meeting room, conference room, or conference hall is a room provided for singular events such as business conferences and meetings (Source: Wikipedia, the free encyclopedia, see <a href=\"http://en.wikipedia.org/wiki/Conference_hall\">http://en.wikipedia.org/wiki/Conference_hall</a>).\n<br /><br />\nSee also the <a href=\"/docs/hotels.html\">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>."];

  list query RiverBodyOfWater(out id: Entity(org.schema:RiverBodyOfWater))
  #[org_schema_comment="A river (for example, the broad majestic Shannon)."];

  list query HVACBusiness(out id: Entity(org.schema:HVACBusiness))
  #[org_schema_comment="A business that provide Heating, Ventilation and Air Conditioning services."];

  list query TaxiStand(out id: Entity(org.schema:TaxiStand))
  #[org_schema_comment="A taxi stand."];

  list query CatholicChurch(out id: Entity(org.schema:CatholicChurch))
  #[org_schema_comment="A Catholic church."];

  list query GovernmentService(out id: Entity(org.schema:GovernmentService),
                               out serviceOperator: Entity(org.schema:Organization) #[org_schema_type="Organization"] #[org_schema_comment="The operating organization, if different from the provider.  This enables the representation of services that are provided by an organization, but operated by another organization like a subcontractor."])
  #[org_schema_comment="A service provided by a government organization, e.g. food stamps, veterans benefits, etc."];

  list query MovieClip(out id: Entity(org.schema:MovieClip))
  #[org_schema_comment="A short segment/part of a movie."];

  list query Locksmith(out id: Entity(org.schema:Locksmith))
  #[org_schema_comment="A locksmith."];

  list query OceanBodyOfWater(out id: Entity(org.schema:OceanBodyOfWater))
  #[org_schema_comment="An ocean (for example, the Pacific)."];

  list query TrainReservation(out id: Entity(org.schema:TrainReservation))
  #[org_schema_comment="A reservation for train travel.<br/><br/>\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use <a class=\"localLink\" href=\"http://schema.org/Offer\">Offer</a>."];

  list query MusicVenue(out id: Entity(org.schema:MusicVenue))
  #[org_schema_comment="A music venue."];

  list query CollegeOrUniversity(out id: Entity(org.schema:CollegeOrUniversity))
  #[org_schema_comment="A college, university, or other third-level educational institution."];

  list query TaxiService(out id: Entity(org.schema:TaxiService))
  #[org_schema_comment="A service for a vehicle for hire with a driver for local travel. Fares are usually calculated based on distance traveled."];

  list query ArtGallery(out id: Entity(org.schema:ArtGallery))
  #[org_schema_comment="An art gallery."];

  list query Plumber(out id: Entity(org.schema:Plumber))
  #[org_schema_comment="A plumbing service."];

  list query Preschool(out id: Entity(org.schema:Preschool))
  #[org_schema_comment="A preschool."];

  list query TattooParlor(out id: Entity(org.schema:TattooParlor))
  #[org_schema_comment="A tattoo parlor."];

  list query FurnitureStore(out id: Entity(org.schema:FurnitureStore))
  #[org_schema_comment="A furniture store."];

  list query BusStop(out id: Entity(org.schema:BusStop))
  #[org_schema_comment="A bus stop."];

  list query MotorcycleRepair(out id: Entity(org.schema:MotorcycleRepair))
  #[org_schema_comment="A motorcycle repair shop."];

  list query GovernmentPermit(out id: Entity(org.schema:GovernmentPermit))
  #[org_schema_comment="A permit issued by a government agency."];

  list query Resort(out id: Entity(org.schema:Resort))
  #[org_schema_comment="A resort is a place used for relaxation or recreation, attracting visitors for holidays or vacations. Resorts are places, towns or sometimes commercial establishment operated by a single company (Source: Wikipedia, the free encyclopedia, see <a href=\"http://en.wikipedia.org/wiki/Resort\">http://en.wikipedia.org/wiki/Resort</a>).\n<br /><br />\nSee also the <a href=\"/docs/hotels.html\">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>."];

  list query Table(out id: Entity(org.schema:Table))
  #[org_schema_comment="A table on a Web page."];

  list query GovernmentOrganization(out id: Entity(org.schema:GovernmentOrganization))
  #[org_schema_comment="A governmental organization or agency."];

  list query BusReservation(out id: Entity(org.schema:BusReservation))
  #[org_schema_comment="A reservation for bus travel. <br/><br/>\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use <a class=\"localLink\" href=\"http://schema.org/Offer\">Offer</a>."];

  list query Taxi(out id: Entity(org.schema:Taxi))
  #[org_schema_comment="A taxi."];

  list query Physician(out id: Entity(org.schema:Physician))
  #[org_schema_comment="A doctor's office."];

  list query NoteDigitalDocument(out id: Entity(org.schema:NoteDigitalDocument))
  #[org_schema_comment="A file containing a note, primarily for the author."];

  list query Campground(out id: Entity(org.schema:Campground))
  #[org_schema_comment="A camping site, campsite, or <a class=\"localLink\" href=\"http://schema.org/Campground\">Campground</a> is a place used for overnight stay in the outdoors, typically containing individual <a class=\"localLink\" href=\"http://schema.org/CampingPitch\">CampingPitch</a> locations. <br/><br/>\n\nIn British English a campsite is an area, usually divided into a number of pitches, where people can camp overnight using tents or camper vans or caravans; this British English use of the word is synonymous with the American English expression campground. In American English the term campsite generally means an area where an individual, family, group, or military unit can pitch a tent or park a camper; a campground may contain many campsites (Source: Wikipedia see <a href=\"https://en.wikipedia.org/wiki/Campsite\">https://en.wikipedia.org/wiki/Campsite</a>).<br/><br/>\n\nSee also the dedicated <a href=\"/docs/hotels.html\">document on the use of schema.org for marking up hotels and other forms of accommodations</a>."];

  list query TennisComplex(out id: Entity(org.schema:TennisComplex))
  #[org_schema_comment="A tennis complex."];

  list query Photograph(out id: Entity(org.schema:Photograph))
  #[org_schema_comment="A photograph."];

  list query SubwayStation(out id: Entity(org.schema:SubwayStation))
  #[org_schema_comment="A subway station."];

  list query MedicalStudy(out id: Entity(org.schema:MedicalStudy),
                          out sponsor: Array(Entity(org.schema:Person)) #[org_schema_type="Person"] #[org_schema_comment="A person or organization that supports a thing through a pledge, promise, or financial contribution. e.g. a sponsor of a Medical Study or a corporate sponsor of an event."]);

  list query Grant(out id: Entity(org.schema:Grant),
                   out sponsor: Array(Entity(org.schema:Person)) #[org_schema_type="Person"] #[org_schema_comment="A person or organization that supports a thing through a pledge, promise, or financial contribution. e.g. a sponsor of a Medical Study or a corporate sponsor of an event."]);

  list query Courthouse(out id: Entity(org.schema:Courthouse))
  #[org_schema_comment="A courthouse."];

  list query AutoWash(out id: Entity(org.schema:AutoWash))
  #[org_schema_comment="A car wash business."];

  list query HardwareStore(out id: Entity(org.schema:HardwareStore))
  #[org_schema_comment="A hardware store."];

  list query Barcode(out id: Entity(org.schema:Barcode))
  #[org_schema_comment="An image of a visual machine-readable code such as a barcode or QR code."];

  list query VisualArtsEvent(out id: Entity(org.schema:VisualArtsEvent))
  #[org_schema_comment="Event type: Visual arts event."];

  list query ExchangeRateSpecification(out id: Entity(org.schema:ExchangeRateSpecification),
                                       out currency: String #[org_schema_type="Text"] #[org_schema_comment="The currency in which the monetary amount is expressed.<br/><br/>\n\nUse standard formats: <a href=\"http://en.wikipedia.org/wiki/ISO_4217\">ISO 4217 currency format</a> e.g. \"USD\"; <a href=\"https://en.wikipedia.org/wiki/List_of_cryptocurrencies\">Ticker symbol</a> for cryptocurrencies e.g. \"BTC\"; well known names for <a href=\"https://en.wikipedia.org/wiki/Local_exchange_trading_system\">Local Exchange Tradings Systems</a> (LETS) and other currency types e.g. \"Ithaca HOUR\"."]);

  list query DanceGroup(out id: Entity(org.schema:DanceGroup))
  #[org_schema_comment="A dance group&#x2014;for example, the Alvin Ailey Dance Theater or Riverdance."];

  list query RoofingContractor(out id: Entity(org.schema:RoofingContractor))
  #[org_schema_comment="A roofing contractor."];

  list query ChildrensEvent(out id: Entity(org.schema:ChildrensEvent))
  #[org_schema_comment="Event type: Children's event."];

  list query RVPark(out id: Entity(org.schema:RVPark))
  #[org_schema_comment="A place offering space for \"Recreational Vehicles\", Caravans, mobile homes and the like."];

  list query Enumeration(out id: Entity(org.schema:Enumeration))
  #[org_schema_comment="Lists or enumerations—for example, a list of cuisines or music genres, etc."];

  list query WholesaleStore(out id: Entity(org.schema:WholesaleStore))
  #[org_schema_comment="A wholesale store."];

  list query DepartmentStore(out id: Entity(org.schema:DepartmentStore))
  #[org_schema_comment="A department store."];

  list query SkiResort(out id: Entity(org.schema:SkiResort))
  #[org_schema_comment="A ski resort."];

  list query AutomatedTeller(out id: Entity(org.schema:AutomatedTeller))
  #[org_schema_comment="ATM/cash machine."];

  list query Canal(out id: Entity(org.schema:Canal))
  #[org_schema_comment="A canal, like the Panama Canal."];

  list query NGO(out id: Entity(org.schema:NGO))
  #[org_schema_comment="Organization: Non-governmental Organization."];

  list query BarOrPub(out id: Entity(org.schema:BarOrPub))
  #[org_schema_comment="A bar or pub."];

  list query FMRadioChannel(out id: Entity(org.schema:FMRadioChannel))
  #[org_schema_comment="A radio channel that uses FM."];

  list query ScholarlyArticle(out id: Entity(org.schema:ScholarlyArticle))
  #[org_schema_comment="A scholarly article."];

  list query Bakery(out id: Entity(org.schema:Bakery))
  #[org_schema_comment="A bakery."];

  list query MensClothingStore(out id: Entity(org.schema:MensClothingStore))
  #[org_schema_comment="A men's clothing store."];

  list query Language(out id: Entity(org.schema:Language))
  #[org_schema_comment="Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in <a href=\"https://en.wikipedia.org/wiki/IETF_language_tag\">BCP 47</a> can be used via the <a class=\"localLink\" href=\"http://schema.org/alternateName\">alternateName</a> property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using <a class=\"localLink\" href=\"http://schema.org/ComputerLanguage\">ComputerLanguage</a>."];

  list query TheaterGroup(out id: Entity(org.schema:TheaterGroup))
  #[org_schema_comment="A theater group or company, for example, the Royal Shakespeare Company or Druid Theatre."];

  list query Answer(out id: Entity(org.schema:Answer))
  #[org_schema_comment="An answer offered to a question; perhaps correct, perhaps opinionated or wrong."];

  list query Brewery(out id: Entity(org.schema:Brewery))
  #[org_schema_comment="Brewery."];

  list query PublicSwimmingPool(out id: Entity(org.schema:PublicSwimmingPool))
  #[org_schema_comment="A public swimming pool."];

  list query Cemetery(out id: Entity(org.schema:Cemetery))
  #[org_schema_comment="A graveyard."];

  list query AccountingService(out id: Entity(org.schema:AccountingService))
  #[org_schema_comment="Accountancy business.<br/><br/>\n\nAs a <a class=\"localLink\" href=\"http://schema.org/LocalBusiness\">LocalBusiness</a> it can be described as a <a class=\"localLink\" href=\"http://schema.org/provider\">provider</a> of one or more <a class=\"localLink\" href=\"http://schema.org/Service\">Service</a>(s)."];

  list query RecyclingCenter(out id: Entity(org.schema:RecyclingCenter))
  #[org_schema_comment="A recycling center."];

  list query Hospital(out id: Entity(org.schema:Hospital))
  #[org_schema_comment="A hospital."];

  list query Festival(out id: Entity(org.schema:Festival))
  #[org_schema_comment="Event type: Festival."];

  list query ClothingStore(out id: Entity(org.schema:ClothingStore))
  #[org_schema_comment="A clothing store."];

  list query RadioSeason(out id: Entity(org.schema:RadioSeason))
  #[org_schema_comment="Season dedicated to radio broadcast and associated online delivery."];

  list query EmailMessage(out id: Entity(org.schema:EmailMessage))
  #[org_schema_comment="An email message."];

  list query BusStation(out id: Entity(org.schema:BusStation))
  #[org_schema_comment="A bus station."];

  list query BowlingAlley(out id: Entity(org.schema:BowlingAlley))
  #[org_schema_comment="A bowling alley."];

  list query ImageGallery(out id: Entity(org.schema:ImageGallery))
  #[org_schema_comment="Web page type: Image gallery page."];

  list query DataDownload(out id: Entity(org.schema:DataDownload))
  #[org_schema_comment="A dataset in downloadable form."];

  list query MiddleSchool(out id: Entity(org.schema:MiddleSchool))
  #[org_schema_comment="A middle school (typically for children aged around 11-14, although this varies somewhat)."];

  list query LiteraryEvent(out id: Entity(org.schema:LiteraryEvent))
  #[org_schema_comment="Event type: Literary event."];

  list query Pond(out id: Entity(org.schema:Pond))
  #[org_schema_comment="A pond."];

  list query SocialEvent(out id: Entity(org.schema:SocialEvent))
  #[org_schema_comment="Event type: Social event."];

  list query TheaterEvent(out id: Entity(org.schema:TheaterEvent))
  #[org_schema_comment="Event type: Theater performance."];
}
class @uk.ac.cam.multiwoz.Restaurant
#_[name="Cambridge Restaurants"]
#_[description="Fake data used by MultiWOZ"]
#_[canonical="cambridge restaurants"]
{
  import loader from @org.thingpedia.v2();
  import config from @org.thingpedia.config.none();

  list query Restaurant(out id : Entity(uk.ac.cam.multiwoz.Restaurant:Restaurant)
                        #[conflict_filter=['food', 'price_range']]
                        #[unique=true]
                        #[string_values="uk.ac.cam.multiwoz.Restaurant:name"]
                        #_[canonical={
                          base=["name"],
                          property=[]
                        }],
                        out food : String
                        #[string_values="uk.ac.cam.multiwoz.Restaurant:food"]
                        #[conflict_filter=['id']]
                        #_[prompt=["what would you like to eat", "what are you in the mood for"]]
                        #_[canonical={
                          default="npp", // ignored
                          base=["cuisine", "type of cuisine", "food", "type of food"],
                          property=["# food", "# cuisine"],
                          adjective=["#"],
                          verb=["serves # cuisine", "serves # food", "offer # cuisine", "offer # food", "serves", "offers"]
                        }],
                        out price_range : Enum(cheap, moderate, expensive)
                        #[conflict_filter=['id']]
                        #_[canonical={
                          default="npp",
                          base=["price range"],
                          property=[],
                          adjective=["#", "# -ly priced"]
                          // FIXME
                          /*adjective_enum={ expensive=["upscale"] }*/
                        }],
                        out area : Enum(centre, south, north, east)
                        #_[canonical={
                          default="npp",
                          base=["area", "area of the city", "part of town"],
                          property=[],
                          preposition=["in the #", "in the # area", "in the # part of town",
                                       "near the #", "near the # area", "near the # part of town",
                                       "around the #", "around the # area", "around the # part of town"]
                          // FIXME
                          /*preposition_enum={ centre=["in the city centre"] }*/
                        }])
  #_[canonical=["restaurant", "food place"]]
  #_[confirmation="restaurants"]
  #[confirm=false];

  action make_reservation(in req restaurant : Entity(uk.ac.cam.multiwoz.Restaurant:Restaurant)
                          #[string_values="uk.ac.cam.multiwoz.Restaurant:name"]
                          #_[prompt="what restaurant would you like to book?"],
                          in req book_time : Time
                          #_[prompt=["what time is your reservation for",
                                     "what time do you need your reservation for",
                                     "at what time is your reservation"]]
                          #_[canonical={
                            default="npp",
                            base=["time", "reservation time"],
                            preposition=["at #"]
                          }],
                          in req book_day : Enum(monday, tuesday, wednesday, thursday, friday, saturday, sunday)
                          #_[prompt=["what day is your reservation for",
                                     "what day do you need your reservation for",
                                     "on which day do you want your reservation"]]
                          #_[canonical={
                            default="npp",
                            base=["day", "date"],
                            preposition=["for #", "on #"]
                          }],
                          in req book_people : Number
                          #[number_min=1] #[number_max=7]
                          #_[prompt=["how many people is your reservation for",
                                     "for how many people do you need a reservation",
                                     "how many people"]]
                          #_[canonical={
                            default="npp",
                            base=["number of people"],
                            preposition=["for # people", "for #"]
                          }])
  #_[confirmation="make a reservation at ${restaurant}"]
  #[confirm=true];
}

class @uk.ac.cam.multiwoz.Train
#_[name="Cambridge Train"]
#_[description="Fake data used by MultiWOZ"]
#_[canonical="cambridge train"]
{
  import loader from @org.thingpedia.v2();
  import config from @org.thingpedia.config.none();
  list query Train(out id : Entity(uk.ac.cam.multiwoz.Train:Train)
                   #[conflict_filter=['arrive_by', 'leave_by']]
                   #[unique=true]
                   #[string_values="uk.ac.cam.multiwoz.Train:id"]
                   #_[canonical={
                     base=["name"],
                     passive_verb=["named #", "called #"]
                   }],
                   out destination : String
                   #[string_values="uk.ac.cam.multiwoz.Train:destination"]
                   #_[prompt=["what is your destination", "where to", "where will you be heading"]]
                   #_[canonical={
                     default="preposition",
                     base=["destination"],
                     preposition=["to #", "headed towards #"]
                   }],
                   out departure : String
                   #[string_values="uk.ac.cam.multiwoz.Train:departure"]
                   #_[prompt=["where will you be departing from", "where will you be leaving from"]]
                   #_[canonical={
                     default="preposition",
                     base=["departure"],
                     preposition=["from #", "leaving from #", "departing from #"]
                   }],
                   out day : Enum(friday, wednesday, monday, saturday, thursday, tuesday, sunday)
                   #[conflict_filter=['id']]
                   #_[canonical={
                     default="preposition",
                     base=["day"],
                     preposition=["on #", "leaving on #"]
                   }],
                   out arrive_by : Time
                   #[conflict_filter=['leave_at', 'id']]
                   #[slot_operator="<="]
                   #_[prompt=["when do you want to arrive", "by when do you want to arrive"]]
                   #_[canonical={
                     default="preposition",
                     base=["arrival time"],
                     preposition=["arriving by #", "arriving before #"]
                   }],
                   out leave_at : Time
                   #[conflict_filter=['arrive_by', 'id']]
                   #[slot_operator=">="]
                   #_[prompt=["when do you want to leave", "when do you want to travel"]]
                   #_[canonical={
                     default="preposition",
                     base=["departure time"],
                     preposition=["leaving at #", "leaving #", "leaving after #"]
                   }],
                   out price : Currency
                   #[filterable=false]
                   #_[canonical={
                     default="base",
                     base=["cost", "price"]
                   }],
                   out duration : Measure(ms)
                   #[filterable=false]
                   #_[canonical={
                     default="base",
                     base=["duration", "length", "travel time"]
                   }]
                   )
  #[minimal_projection=["id"]]
  #_[canonical=["train", "train ticket"]]
  #_[confirmation="train"]
  #[confirm=false];

  action make_booking(in req train : Entity(uk.ac.cam.multiwoz.Train:Train)
                      #[string_values="uk.ac.cam.multiwoz.Train:id"]
                      #_[prompt="what train would you like to book?"],
                      in req day : Enum(monday, tuesday, wednesday, thursday, friday, saturday, sunday)
                      #_[prompt=["what day is your booking for",
                                 "what day do you want to leave"]]
                      #_[canonical={
                        default="preposition",
                        base=["day", "date"],
                        preposition=["on #", "leaving on #"]
                      }],
                      in opt book_people : Number
                      #[min_number=1]
                      #[max_number=15]
                      #_[prompt=["for how many people", "how many people will be traveling"]]
                      #_[canonical={
                        default="preposition",
                        base=["people"],
                        preposition=["for # people"]
                      }],
                      out reference_number : String
                      #_[canonical={
                        default="base",
                        base=["reference number", "confirmation number"]
                      }])
  #_[confirmation="make a booking for train ${train}"]
  // multiwoz people don't ask for a confirmation before doing the booking...
  #[confirm=false]
  #_[on_error={
     no_slot_available=["there are no seats available on ${train}"]
  }];
}

class @com.test.entitysubtype1 {
  query sub(out id : Entity(tt:test_entity_subtype1));
  query parent(out id : Entity(tt:test_entity_parenttype1));
  query stuff(out stuff : Array(Entity(tt:test_entity_parenttype1)));

  action foo(in req param : Entity(tt:test_entity_parenttype1));
}

class @com.test.entitysubtype2 {
  entity parent;
  entity sub extends parent;

  query sub(out id : Entity(com.test.entitysubtype2:sub));
  query parent(out id : Entity(com.test.entitysubtype2:parent));
  query stuff(out stuff : Array(Entity(com.test.entitysubtype2:parent)));

  action foo(in req param : Entity(com.test.entitysubtype2:parent));
}

class @com.test.entitysubtype3 {
  entity thing #[has_ner_support=false];

  entity country extends thing #[has_ner_support=true];
  entity people extends thing #[has_ner_support=true];

  entity highest_point extends thing #[has_ner_support=false];
  entity place_of_birth extends thing #[has_ner_support=false];

  entity mountain extends highest_point #[has_ner_support=true];
  entity city extends highest_point, place_of_birth #[has_ner_support=true];
  entity hospital extends place_of_birth #[has_ner_support=true];

  query country(out id: Entity(com.test.entitysubtype3:country),
                out highest_point: Entity(com.test.entitysubtype3:highest_point));
  query people(out id: Entity(com.test.entitysubtype3:people),
               out place_of_birth: Entity(com.test.entitysubtype3:place_of_birth));

  action add(in req name: String,
             in opt place_of_birth : Entity(com.test.entitysubtype3:place_of_birth),
             in opt stuff: Entity(com.test.entitysubtype3:thing));
}

class @com.google.puppeteer
#_[name="Puppeteer"]
#_[description="Control the browser and do things"]
{
  import loader from @org.thingpedia.builtin();
  import config from @org.thingpedia.config.none();

  list query inject(in req values : Array(String) #_[canonical="values"],
                    out text : String #_[canonical="text"],
                    out number : Number #_[canonical="number"])
  #_[canonical="constant values"]
  #_[confirmation="the values ${values}"];

  monitorable list query select(in req frame_url : Entity(tt:url) #_[canonical="frame url"],
                                in req selector : String #_[canonical="selector"],
                                out text : String #_[canonical="text"],
                                out number : Number #_[canonical="number"])
  #_[canonical="element on screen"]
  #_[confirmation="the elements matched by ${selector}"]
  #_[formatted=["${text}"]]
  #[poll_interval=10min];

  action load(in req url : Entity(tt:url) #_[canonical="url"])
  #_[canonical="load"]
  #_[confirmation="load ${url}"];

  action set_input(in req frame_url : Entity(tt:url) #_[canonical="frame url"],
                   in req selector : String #_[canonical="selector"],
                   in req text : String #_[canonical="text"])
  #_[canonical="set input"]
  #_[confirmation="set the element ${selector} to ${text}"];

  action click(in req frame_url : Entity(tt:url) #_[canonical="frame url"],
               in req selector : String #_[canonical="selector"])
  #_[canonical="click"]
  #_[confirmation="click on the element ${selector}"];
}
abstract class @org.thingpedia.media-source
#_[thingpedia_name="Media Source"]
#_[thingpedia_description="Media Source Class."]
#_[description="Interface for extracting media."]
#[license="BSD-3-Clause"]
#[license_gplcompatible=true]
#[subcategory="home"]

{

  entity playable #_[description="Playable content"];
  entity artist #_[description="Music artists"];
  entity song extends playable #[has_ner=true] #_[description="Songs"];
  entity album extends playable #[has_ner=true] #_[description="Albums"];
  entity playlist extends playable #[has_ner=true] #_[description="Playlists"];
  entity show extends playable #[has_ner=true] #_[description="Shows"];

  monitorable list query playable(out id: Entity(org.thingpedia.media-source:playable)
                      // use song names to fill ambiguous parameters
                      // the model doesn't see the different between songs and
                      // albums anyway, and when we in doubt we should assume song
                      #[string_values="tt:song_name"]
                     #_[canonical={
                       default="base",
                       base=["name", "title", "track name"],
                       passive_verb=["named #", "called #", "titled #"],
                       property=["name #", "title #"]
                     }],
                      out artists: Array(Entity(org.thingpedia.media-source:artist))
                      #[string_values="tt:song_artist"]
                      #_[canonical={
                        default="preposition",
                        base=["artist", "author", "song writer", "band", "artist name",
                              "singer", "composer"],
                        property=["artist #", "song writer #"],
                        preposition=["by #", "from #"],
                        adjective=["#", "# 's"],
                        passive_verb=["written by #", "released by #", "produced by #",
                                      "composed by #", "recorded by #"],
                        verb = ["# wrote", "# released", "# produced", "# composed",
                                "# did", "# recorded", "# sang", "# made"],
                        base_projection=['artist', 'singer', 'band', 'composer'],
                        passive_verb_projection=['created | by', 'sang | by', 'performed | by',
                                                 'composed | by', 'recorded | by'],
                        reverse_verb_projection=['sing', 'sang', 'wrote', 'composed',
                                                 'recorded']
                      }],
                      out popularity: Number
                      #[min_number=0]
                      #[max_number=100]
                      #_[canonical={
                        default="base",
                        base=["popularity", "average popularity"],
                        passive_verb=["rated # popularity"],
                        property=["# popularity"],
                        adjective_argmin=["least popular", "most niche"],
                        adjective_argmax=["most popular", "most well-known", "best", "greatest", "top"],
                      }],
                      out release_date : Date
                      #_[canonical={
                        default="passive_verb",
                        base=["date", "release date", "release year", "release day"],
                        property=["release date #"],
                        preposition=["from #"],
                        passive_verb=["released in #", "released #", "published in #"],
                        adjective_argmin=["least recent", "oldest", "first"],
                        adjective_argmax=["most recent", "newest", "latest"],
                        passive_verb_argmax=["released most recently"],
                        passive_verb_projection=['published | on', 'released | on', 'written | on'],
                      }],
                      out genres: Array(String)
                      #[string_values="com.spotify:genre"]
                      #_[canonical={
                        default="adjective",
                        base=["genres", "type of genre", "type of music", "category"],
                        adjective=["#"],
                        preposition=["in the # genre", "in #", "of the # genre",
                                     "in the # style", "in the # category"],
                      }])
  #_[canonical=["music [plural=one]", "good music [plural=one]", "music recording"]]
  #_[canonical_short=["music [plural=one]", "recording"]]
  #_[confirmation="playable content"]
  #_[on_error={
    dailymix_error=["spotify doesn't support daily mix playlists at this time"],
    rate_limit_error=["spotify is temporarily unavailable"]
  }]
  #[minimal_projection=["id"]]
  #[poll_interval=1day]
  #[doc="search for content"];

  monitorable list query song extends playable(out id: Entity(org.thingpedia.media-source:song)
                                  #[string_values="tt:song_name"]
                                  #[unique=true]
                                  #_[canonical={
                                    default="base",
                                    base=["name", "title", "track name"],
                                    passive_verb=["named #", "called #", "titled #"],
                                    property=["name #", "title #"]
                                  }],
                                  out album: Entity(org.thingpedia.media-source:album)
                                  #[string_values="tt:song_album"]
                                  #_[canonical={
                                    default="preposition",
                                    base=["album"],
                                    property=["album #"],
                                    preposition=["in the album #",
                                                 "in #", "part of #", "from the album #",
                                                 "from #"],
                                    base_projection=['album'],
                                    verb_projection=['appear | in', 'appear | on'],
                                    reverse_verb_projection=['have', 'has', 'contain', 'contains', 'includes'],
                                    passive_verb_projection=['included | in', 'included | on'],
                                    preposition_projection=['in', 'on']
                                  }],
                                  out energy : Number
                                  #[min_number=0]
                                  #[max_number=100]
                                  #[filterable=false]
                                  #_[canonical={
                                    default="base",
                                    base=["energy"],
                                    adjective_argmin=["least energetic"],
                                    adjective_argmax=["most energetic"],
                                  }],
                                  out danceability : Number
                                  #[min_number=0]
                                  #[max_number=100]
                                  #[filterable=false]
                                  #_[canonical={
                                    default="base",
                                    base=["danceability"],
                                    adjective_argmin=["least danceable"],
                                    adjective_argmax=["most danceable"],
                                  }])
  #_[canonical=["song", "track", "sound track", "tune"]]
  #_[canonical_short=["song", "track"]]
  #_[confirmation="songs"]
  #_[on_error={
    rate_limit_error=["spotify is temporarily unavailable"]
  }]
  #[minimal_projection=["id"]]
  #[poll_interval=1day]
  #[doc="search for songs"];

  monitorable list query album extends playable (out id: Entity(org.thingpedia.media-source:album)
                                      #[string_values="tt:song_album"]
                                      #[unique=true]
                                      #_[canonical={
                                        default="base",
                                        base=["name", "title"],
                                        passive_verb=["named #", "called #", "titled #"],
                                        property=["name #", "title #"]
                                      }])
  #_[canonical=["album", "good album", "music collection"]]
  #_[confirmation="album"]
  #_[on_error={
    rate_limit_error=["spotify is temporarily unavailable"]
  }]
  #[minimal_projection=["id"]]
  #[poll_interval=1day]
  #[doc="search for albums"];

  monitorable list query playlist extends playable (out id: Entity(org.thingpedia.media-source:playlist)
                                         #[string_values="tt:song_name"]
                                         #[unique=true]
                                         #_[canonical={
                                           default="base",
                                           base=["name"],
                                           passive_verb=["named #", "called #", "titled #"],
                                           property=["name #", "title"]
                                         }])
  #_[canonical=["playlist"]]
  #_[confirmation="playlists"]
  #_[on_error={
    dailymix_error=["spotify doesn't support daily mix playlists at this time"],
    rate_limit_error=["spotify is temporarily unavailable"]
  }]
  #[minimal_projection=["id"]]
  #[poll_interval=1day]
  #[doc="search for playlists"];

  monitorable list query show extends playable(out id: Entity(org.thingpedia.media-source:show)
                                        //#[string_values="tt:show"]
                                        #[unique=true]
                                        #_[canonical={
                                          default="base",
                                          base=["name", "title"],
                                          passive_verb=["named #", "called #", "titled #"],
                                          property=["name #", "title #"]
                                        }])
  #_[canonical=["show", "podcast", "audio podcast", "episode"]]
  #_[confirmation="show"]
  #_[on_error={
    rate_limit_error=["spotify is temporarily unavailable"]
  }]
  #[minimal_projection=["id"]]
  #[poll_interval=1day]
  #[doc="search for shows"];

  list query artist(out id: Entity(org.thingpedia.media-source:artist)
                    #[string_values="tt:song_artist"]
                    #[unique=true]
                    #_[canonical={
                      default="base",
                      base=["name"],
                      passive_verb=["named #", "called #"],
                      property=["name #"]
                    }],
                    out genres: Array(String)
                    #[string_values="com.spotify:genre"]
                    #_[canonical={
                      default="adjective",
                      base=["genres", "type of genre", "type of music", "category"],
                      property=["# songs", "# music"],
                      adjective=["#"],
                      preposition=["in the # genre", "in #", "of the # genre",
                                   "in the # style", "in the # category"],
                      verb=["plays # music", "plays the # genre", "does # music",
                            "plays # songs", "does the # genre",
                            "plays the # style", "belongs to the genre #",
                            "belongs to the # genre", "plays #"],
                      base_projection=['artist', 'singer', 'band', 'composer'],
                      passive_verb_projection=['created | by', 'sang | by', 'performed | by',
                                             'composed | by', 'recorded | by'],
                      reverse_verb_projection=['sing', 'sang', 'wrote', 'composed',
                                             'recorded'],
                    }],
                    out popularity: Number
                    #[min_number=0]
                    #[max_number=100]
                    #_[canonical={
                      default="base",
                      base=["popularity", "average popularity"],
                      passive_verb=["rated # popularity"],
                      property=["# popularity"],
                      adjective_argmin=["least popular", "most niche"],
                      adjective_argmax=["most popular", "most well-known", "best", "greatest", "top"],
                    }])
    #_[canonical=["artist", "composer", "musician", "singer"]]
    #_[confirmation="artists"]
    #_[on_error={
      rate_limit_error=["spotify is temporarily unavailable"]
    }]
    #[minimal_projection=["id"]]
    #[doc="search for artists"];

    monitorable query get_currently_playing extends song()
    #_[canonical=["currently playing track", "currently playing song",
                  "song currently playing", "current song", "current track"]]
    #_[result=["currently playing ${id}", "the currently playing track is ${id}"]]
    #_[on_error={
      no_song_playing=["no song is currently playing", "nothing is currently playing"],
      rate_limit_error=["spotify is temporarily unavailable"]
    }]
    #[poll_interval=60000ms]
    #[doc="retrieve the currently playing track name"];

    list query get_song_from_library extends song()
    #_[canonical=["my favorites",
                  "my library",
                  "library",
                  "songs in my favorites",
                  "music in my favorites",
                  "tracks in my favorites",
                  "songs in my library",
                  "music in my library",
                  "tracks in my library"]]
    #_[confirmation="song"]
    #_[on_error={
      no_favorite_item=["no tracks in your favorites", "no tracks in your library"],
      rate_limit_error=["spotify is temporarily unavailable"]
    }]
    #[doc="retrieve songs from user's library or favorites"];

    list query get_album_from_library extends album()
    #_[canonical=["my favorite album",
                  "my favorite music",
                  "my favorite music collection",
                  "my favorite collection",
                  "my library collection", "my music library collection"]]
    #_[confirmation="album"]
    #_[on_error={
      no_favorite_item=["no albums in your favorites", "no albums in your library"],
      rate_limit_error=["spotify is temporarily unavailable"]
    }]
    #[doc="retrieve albums from user's library or favorite"];

    list query get_show_from_library extends show()
    #_[canonical=["my favorite shows",
                  "my favorite podcasts",
                  "my favorite episodes",
                  "my favorite audio podcasts",
                  "shows in my favorites",
                  "podcasts in my favorites",
                  "episodes in my favorites",
                  "audio podcasts in my favorites",
                  "shows in my library",
                  "podcasts in my library",
                  "episodes in my library",
                  "audio podcasts in my library"]]
    #_[confirmation="show"]
    #_[on_error={
      no_favorite_item=["no shows in your favorites", "no shows in your library"],
      rate_limit_error=["spotify is temporarily unavailable"]
    }]
    #[doc="retrieve shows or podcasts from user's library or favorite"];

    list query get_artist_from_library extends artist()
    #_[canonical=["my favorite artist",
                  "my favorite singer",
                  "my favorite musician",
                  "my favorite composer",
                  "my favorite host"]]
    #_[confirmation="artist"]
    #_[on_error={
      no_favorite_item=["no artists in your favorites", "no artists in your library"],
      rate_limit_error=["spotify is temporarily unavailable"]
    }]
    #[doc="retrieve artists from user's library or favorite"];
}

