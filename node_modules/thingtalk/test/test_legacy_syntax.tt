// -* mode: js -*-

// InvalidType
// ** typecheck: expect TypeError **
now => @org.thingpedia.invalid.get() => notify;

====

// InvalidType2
// ** typecheck: expect TypeError **
now => @org.thingpedia.invalid2.get() => notify;

====

// InvalidType3
// ** typecheck: expect TypeError **
now => @org.thingpedia.builtin.test.invalid() => notify;

====

// Array
monitor @com.twitter.home_timeline(), in_array(author, ["alice"^^tt:username, "bob"^^tt:username])  => notify;

====

// TestExternalPredicate
{
monitor @com.twitter.home_timeline(), @org.thingpedia.builtin.thingengine.builtin.get_time() { time >= makeTime(9,0) && time <= makeTime(10, 0) } => notify;
monitor @com.twitter.home_timeline(), text =~ "lol" && @org.thingpedia.builtin.thingengine.builtin.get_time() { time >= makeTime(9,0) && time <= makeTime(10, 0) } => notify;
}

====

// ** typecheck: expect TypeError **
// these should not typecheck
// TestInvalidExternalPredicate1
monitor @com.twitter.home_timeline(), @org.thingpedia.builtin.thingengine.builtin.get_time() { time =~ "lol" } => notify;

====

// ** typecheck: expect TypeError **
// TestInvalidExternalPredicate2
monitor @com.twitter.home_timeline(), @org.thingpedia.builtin.thingengine.builtin.get_time() { lol =~ "lol" } => notify;

====

// ** typecheck: expect TypeError **
// TestInvalidExternalPredicate3
monitor @com.twitter.home_timeline(), @com.twitter.post() { text =~ "lol" } => notify;

====

executor = self : { // ExplicitSelf
    now => @org.thingpedia.builtin.thingengine.builtin.say(message="lol");
}

====

executor = "matrix-account:@gcampax:matrix.org"^^tt:contact : { // WithPrincipals
    now => @org.thingpedia.builtin.thingengine.builtin.say(message="lol");
}

====

// CompareDate
{
    now => @org.thingpedia.builtin.thingengine.builtin.get_time(), time >= makeTime(10,0) => notify;
}

====

// StartsWith
{
    monitor @com.twitter.home_timeline(), starts_with(text, "foo") => notify;
}

====

// EntityNames
{
    now => @com.twitter.post_picture(caption="lol", picture_url="http://foo.com/bar.jpg"^^tt:picture("A funny picture"));
}

====

// FormatEvent
{
    monitor @com.twitter.home_timeline() => @org.thingpedia.builtin.thingengine.builtin.say(message=$event);
}

====

// ComplexFilter
{
    monitor @com.twitter.home_timeline(), text =~ "foo" || (text =~"bar" && !(text =~ "lol")) => notify;
}

====

// WithClassDef
{
    class @dyn_0 extends @org.thingpedia.builtin.thingengine.remote {
        action send(in req foo : String);
    }
    now => @dyn_0.send(foo="foo");
}

====

// ** typecheck: expect TypeError **
// WrongClassDef
{
    class @dyn_0 extends @org.thingpedia.builtin.thingengine.remote {
        action send(in req foo : Number);
    }
    now => @dyn_0.send(foo="foo");
}

====

// sub function
{
    class @foo.bar {
        query q1 (out a: Number);
        query q2 extends q1 (out b: String);
    }
    now => @foo.bar.q2(), a >= 0 && b =~ "foo" => notify;
}

====

// sub function
{
    class @foo.bar {
        query q1 (out a: Number);
        query q2 (out b: String);
        query q3 extends q1, q2 (out c: Number);
    }
    now => @foo.bar.q3(), a >= 0 && b =~ "foo" && c == 1 => notify;
}

====

// sub function with conflict parameters
class @foo.bar {
    query q0 (out a: Number);
    query q1 extends q0 (out b: Number);
    query q2 extends q0 (out c: String);
    query q3 extends q1, q2 (out d: Number);
}

====

// ** typecheck: expect TypeError **
// sub function with conflict parameters with different types
class @foo.bar {
    query q1 (out a: Number);
    query q2 (out a: String);
    query q3 extends q1, q2 (out c: Number);
}

====

// sub function with conflict parameters
class @foo.bar {
    query q1 (out a: Number);
    query q2 (out b: String);
    query q3 extends q1, q2 (out a: Number);
}

====

// sub function with conflict parameters
class @foo.bar {
    query q1 (out a: {
                b: String
              });
    query q2 (out a: {
                b: String
              });
    query q3 extends q1, q2 ();
}

====

// ** typecheck: expect TypeError **
// sub function with conflict parameters
class @foo.bar {
    query q1 (out a: {
                b: String
              });
    query q2 (out a: {
                b: Number
              });
    query q3 extends q1, q2 ();
}

====

// sub function with different types
class @foo.bar {
    query q1 (out a: Number);
    list query q2 extends q1 (out b: String);
}

====

// sub function with different types
class @foo.bar {
    monitorable query q1 (out a: Number);
    query q2 extends q1 (out b: String);
}

====

// ** typecheck: expect TypeError **
// sub function with conflict types
class @foo.bar {
    query q1 (out a: Number);
    monitorable query q2 extends q1 (out b: String);
}

====

// without wrapping it should still work

monitor @com.twitter.home_timeline() => notify;

====

// same for immediates
now => @security-camera.current_event() => notify;

====

// PrimaryKind
monitor @com.twitter.home_timeline() => notify;

====

// Contains
{
    monitor @com.twitter.home_timeline(), contains(hashtags, "lol"^^tt:hashtag) => notify;
}

====

// ParameterPassing
{
    monitor @com.xkcd(id="com.xkcd-6").get_comic()
    => @com.twitter(id="com.twitter-foo").post_picture(caption=title, picture_url=picture_url);
}

====

// SecurityCamera
    now => @security-camera.current_event() => notify;

====

// SearchYoutube
    now => @com.youtube.search_videos(query="lol"), video_url == "http://www.youtube.com"^^tt:url =>  notify;

====

// TimeTest
{
    attimer(time=makeTime(12, 30)) => notify;
}

====

// RelativeTime
{
    attimer(time=$context.time.morning) => notify;
}

====

// PhoneNumberTest
{
    now => @org.thingpedia.builtin.thingengine.phone.send_sms(to="+15555555555"^^tt:phone_number, message="");
    monitor @org.thingpedia.builtin.thingengine.phone.sms(), sender=="+15555555555"^^tt:phone_number => notify;
}

====

// ** typecheck: expect TypeError **
// InvalidPhoneNumberTest
    now => @org.thingpedia.builtin.thingengine.phone.send_sms(to="+15555555555"^^tt:email_address, message="");

====

// LocationAsTriggerParam
    monitor @org.thingpedia.weather.current(location=makeLocation(1, 3)) => notify;

====

// RelativeLocation
    monitor @org.thingpedia.weather.current(location=$context.location.current_location) => notify;

====

// LocationWithDisplayAsTriggerParam
    monitor @org.thingpedia.weather.current(location=makeLocation(1, 3, "Somewhere"))  => notify;

====

// SabrinaGeneratedMonitorcom.twitter
{
    monitor @com.twitter(id="com.twitter-foo").home_timeline(), author == "HillaryClinton"^^tt:username => notify;
}

====

// CommandTest
  now => @org.thingpedia.builtin.thingengine.builtin.say(message="test");

====

// LogQueryTest
    now => t => notify;

====

// LogQueryTestProjection
    now => [col1] of Q1 => notify;

====

// LogQueryTestSelection
    now => [col1] of (Q1, col2 >= 42) => notify;

/* select col1 as v_1 from Q1 where col2 >= 42 */

====

// LogQueryTestJoin
// ** typecheck: expect TypeError **
// No projection is allowed if there is only one output parameter
{
  now => ([col1] of Q1 join Q2), col2 >= col1 => notify;
  now => [col2] of (([col1] of Q1 join Q2), col2 >= col1) => notify;
}

====

// LogQueryAggregationTest
now => aggregate max field of Q1 => notify;

====

// LogQueryAggregationMeasureTest
// col1 has type Measure(C)
{
now => aggregate max col1 of Q3 => @thermostat.set_target_temperature(value=col1);
now => (aggregate max col1 of Q3) as tmp => @thermostat.set_target_temperature(value=tmp.col1);
}

====

// ** typecheck: expect TypeError **
// LogQueryInvalidAggregationTest
now => aggregate max nonexisting_field of Q1 => notify;

====

// ** typecheck: expect TypeError **
// LogQueryInvalidAggregation2Test
now => aggregate max str1 of Q1 => notify;

====

// LogQueryCountTest
now => aggregate count of Q1 => notify;

====

// LogQueryCountParamPassingTest
now => aggregate count str1 of Q1 join @com.xkcd.get_comic() on (number=str1) => notify;

====

// ** typecheck: expect TypeError **
// LogQueryCountInvalidParamPassingTest
now => aggregate count str1 of Q1 => @com.twitter.post(status=count);

====

// WithSave
{
let table steps    := @com.fitbit.getsteps();
let table my_table := aggregate max steps of Q1;
now => my_table => notify;
}

====

// LogTriggerTest
monitor Q1 join Q2 => notify;

====

// Another LogTriggerTest
monitor Q1 => Q2 => notify;

====

// Another LogTriggerTest
monitor Q1 => Q2 => @com.twitter.post(status="hello");

====

// LogTriggerAggregationTest
monitor (aggregate max field of Q1) => notify;

====

// LogTestAll
// ** typecheck: expect TypeError **
// Expected a query expression in argument to chain, got a stream
let stream saved := [foo] of (monitor Q0 join Q1);

====

// LogTestTableName
// ** typecheck: expect TypeError **
// Expected a query expression in argument to chain, got a stream
let stream lol := [foo] of (monitor Q0 join Q1);

====

// RelativeTime
{
now => Q1, _timestamp >= makeDate() + 2year => notify;
now => Q1, _timestamp >= makeDate() + -2year => notify;
now => Q1, _timestamp >= makeDate() - 2year => notify;
now => Q1, _timestamp >= makeDate() + 24mon => notify;
now => Q1, _timestamp >= makeDate() + (-1year + -12mon) => notify;
now => Q1, _timestamp >= start_of(mon) && _timestamp <= end_of(day) => notify;
}

====

// Lambdas
{
let table macro := \(p_number : Number) -> @com.xkcd.get_comic(number=p_number) ;
now => macro(p_number=1234) => notify;
}

====

// EdgeFilter
{
edge (monitor @thermostat.get_temperature()) on value >= 70F => notify;
}

====

// Computation
{
let table x := compute distance(location, makeLocation(1,2)) of @org.thingpedia.builtin.thingengine.builtin.get_gps();
let table y := compute distance(location, $context.location.home) of @org.thingpedia.builtin.thingengine.builtin.get_gps();
let table z := compute (col1 + col2) of Q1;
let table xx := compute (1 + col1) of aggregate sum col1 of Q1;
}

====

// Action Lambdas
let action x := \(x : String) -> @com.twitter.post(status=x);

====

// Lambdas Join
{
let table macro := \(number : Number) -> @com.xkcd.get_comic(number=number) ;
now => Q1 join macro() on (number=steps) => notify;
}

====

// Entities
{
  // allow spaces in entity types
  let table x1 := \(y : Entity(tt : hashtag)) -> @com.twitter.home_timeline(), contains(hashtags, y);

  // allow dots in entity types
  let table x2 := \(y : Entity(com.google.drive : file_id)) -> @com.google.drive.list_drive_files(), file_id == y;
  let table x3 := \(y : Entity(com.google . drive : file_id)) -> @com.google.drive.list_drive_files(), file_id == y;

  now => x1(y="foo"^^ tt : hashtag) => notify;
  now => x2(y="xxx"^^ com . google . drive : file_id ( "Some file" ) ) => notify;
}

====
// ** typecheck: expect TypeError **
// number is not a valid field in @com.xkcd.get_comic()
// Monitor on param

{
monitor @com.xkcd.get_comic() => notify;
monitor @com.xkcd.get_comic() on new [title] => notify;
monitor @com.xkcd.get_comic() on new [title, number] => notify;
}

====
// ** typecheck: expect TypeError **
// No $events
{
now => @com.twitter.post(status=$event);
}

====
// Join with parameter passing
{
((monitor @com.wsj.get()) join @com.yandex.translate.translate() on (text=$event)) => notify;
}

====
// Currencies
{
now => @com.uber.price_estimate(start=$context.location.home,end=$context.location.work) => notify;
now => @com.uber.price_estimate(start=$context.location.home,end=$context.location.work), low_estimate >= makeCurrency(50,usd) => notify;
}

====

{
now => (@com.live.onedrive.list_files() join @com.bing.web_search() on (query=description)) => notify;
(monitor (@com.live.onedrive.list_files())) join @com.bing.web_search() on (query=description) => notify;
now => (@com.live.onedrive.list_files() join @com.bing.web_search() on (query=description)) => @com.twitter.post(status=title);
(monitor (@com.live.onedrive.list_files())) join @com.bing.web_search() on (query=description) => @com.twitter.post(status=title);
now => (@com.live.onedrive.list_files() join @com.bing.web_search() on (query=description)) => @com.twitter.post(status=description);
(monitor (@com.live.onedrive.list_files())) join @com.bing.web_search() on (query=description) => @com.twitter.post(status=description);
}

====
// Bug 1
{
   now => @com.yandex.translate.translate(target_language="it"^^tt:iso_lang_code("Italian")) => notify;
}

====
// Bug 2
{
now => @com.twitter.my_tweets() join @com.bing.web_search() on (query=text) => notify ;
}

====
// Bug 3
{
let action x := \(p_status :String) -> @com.twitter.post(status=p_status);
}

====
// Bug 4
now => @security-camera.set_power(power=enum(on));

====

let action x := \(status : String) -> @com.twitter.post(status=status);

====

// ** typecheck: expect TypeError **
let action x := \(status : Number) -> @com.twitter.post(status=status);

====

now => @com.twitter.follow(user_name=null^^tt:username("donald trump"));

====

// class definitions and import stmts
{
  class @com.foo {
    import loader from @org.thingpedia.v2();
    import config from @org.thingpedia.config.discovery.bluetooth(uuids=[]);

    monitorable query get_power(out power : Enum(on, off))
    #_[canonical='power status of foo']
    #_[confirmation='status of foo']
    #[poll_interval=10min];

    action set_power(in req power : Enum(on,off) #_[prompt='do you want turn on or off?'])
    #_[canonical='set power of foo']
    #_[confirmation='turn $power foo'];
  }
}

====

{
  class @com.foo {
    list query get_random_number(out number : Number)
    #_[canonical='get random number']
    #_[confirmation='random number'];
  }
}

====

// ** typecheck: expect TypeError **
// invalid value type for poll interval
{
  class @com.foo {
    monitorable query get_power(out power : Enum(on, off))
    #_[canonical='power status of foo']
    #_[confirmation='status of foo']
    #[poll_interval=10];
  }
}

====

// prompt for output argument
{
  class @com.foo {
    list query get_random_number(out number : Number #_[prompt='what number?'])
    #_[canonical='get random number']
    #_[confirmation='random number'];
  }
}

====

// Mixins 1
{
  class @com.foo {
    import loader from @org.thingpedia.v2();
    import config from @org.thingpedia.config.custom_oauth();
  }
}

====

// Mixins 2
{
  class @com.foo {
    import loader from @org.thingpedia.generic_rest.v1();
    import config from @org.thingpedia.config.oauth2(client_id="xxx", client_secret="yyy");
  }
}

====

// ** typecheck: expect TypeError **
// invalid mixin
{
  class @com.foo {
    import loader from @org.thingpedia.v3();
  }
}

====

// ** typecheck: expect TypeError **
// invalid parameter for mixin
{
  class @com.foo {
    import loader from @org.thingpedia.v2(foo='bar');
  }
}

====

// ** typecheck: expect TypeError **
// missing required parameter for mixin
{
  class @com.foo {
    import loader from @org.thingpedia.config.discovery.bluetooth();
  }
}

====

// Map type
{
  class @com.foo {
    import loader from @org.thingpedia.config.form(params=makeArgMap(url:String, password:Password));
  }
}

====

// basic auth
{
  class @com.foo {
    import config from @org.thingpedia.config.basic_auth();
  }
}


====

// Dataset language
dataset @com.twitter language 'en' {
    stream (p_author : Entity(tt:username)) := monitor (@com.twitter.search()), author == p_author
    #_[utterances=['monitor ${p_author}\'s tweets']];

    query := @com.twitter.search()
    #_[utterances=['tweets', 'post on twitter']];

    program := {
        monitor (@com.twitter.search()) => notify;
    }
    #_[utterances=['notify me about new tweets']];
}

====

// ** typecheck: expect TypeError **
// wrong type
dataset @foo {
    stream (p_author : Number) := monitor (@com.twitter.search()), author == p_author
    #_[utterances=['monitor ${p_author}\'s tweets']];
}

====

// Meta language
class @foo {
    action send(in req bar : Number)
    #_[canonical='send a number']
    #_[confirmation='send $bar'];
}

dataset @foo {
    action := @foo.send()
    #_[utterances=['send']];

    program := {
       now => @foo.send();
   }
   #_[utterances=['send']];
}

====

// ** typecheck: expect TypeError **
// Meta language 2
class @foo {
    action send(in req bar : Number)
    #_[canonical='send a number']
    #_[confirmation='send $bar'];
}

dataset @foo {
    action := @bar.send()
    #_[utterances=['send']];
}

====

// ** typecheck: expect TypeError **
// Meta language 3
class @foo {
    action send(in req bar : Number)
    #_[canonical='send a number']
    #_[confirmation='send $bar'];
}

dataset @foo {
    action := @foo.follow()
    #_[utterances=['follow']];
}

====

// Meta language: class annotations
class @foo
#_[name='Foo']
#_[description='Bar'] {
    action send(in req bar : Number)
    #_[canonical='send a number']
    #_[confirmation='send $bar'];
}

dataset @foo {
    action := @foo.send()
    #_[utterances=['send']];
}

====

// ** typecheck: expect TypeError **
// duplicate import
class @com.foo {
    import loader from @org.thingpedia.config.discovery.bluetooth(uuids=["foo"]);
    import loader from @org.thingpedia.config.form(params=makeArgMap(url:String));
}

====

// class extends
class @com.foo extends @com.twitter {}

====

// class extends
class @com.foo extends @com.twitter, @com.facebook {}

====

// Examples with annotations
dataset @foo {
    action () := @com.twitter.follow()
    #_[utterances='follow somebody on Twitter']
    #_[preprocessed='follow somebody on twitter'];

    action (p_status : String) := @com.twitter.post(status=p_status)
    #_[utterances=['post ${p_status} on Twitter']]
    #_[preprocessed=['post ${p_status} on twitter']]
    #[id=1234];

    query := @com.twitter.home_timeline()
    #[id=1235] #[click_count=7];

    query := @com.twitter.direct_messages()
    #[id=1236] #[arbitrary='stri\ng'] #[arbitrary_number=42];
}

====

// formatted output
class @foo {
    query get(out title : String, out url : URL)
    #_[canonical='send a number']
    #_[confirmation='send $bar']
    #_[formatted=['Here is something for you', { type='rdl', displayTitle='$title', webCallback='$url' } ]];
}

====
// Generated from Thingpedia, part of the Thingpedia tests
dataset @org.thingpedia.dynamic.by_kinds.org_thingpedia_builtin_test language "en" {
    action  := @org.thingpedia.builtin.test.eat_data()
        #_[utterances=["eat some data"]]
        #_[preprocessed=["eat some data"]]
        #[id=1000] #[click_count=0];
    query (p_size :Measure(byte)) := @org.thingpedia.builtin.test.get_data(size=p_size)
        #_[utterances=["get some data"]]
        #_[preprocessed=["get some data"]]
        #[id=1001] #[click_count=0];
    program := monitor (@org.thingpedia.builtin.test.get_data()) => @org.thingpedia.builtin.test.eat_data()
        #_[utterances=["keep eating data!"]]
        #_[preprocessed=["keep eating data !"]]
        #[id=1002] #[click_count=0];
    program := monitor (@org.thingpedia.builtin.test.get_data()) => @org.thingpedia.builtin.test.eat_data()
        #_[utterances=["keep eating data! (v2)"]]
        #_[preprocessed=["keep eating data ! -lrb- v2 -rrb-"]]
        #[id=1003] #[click_count=0];
    action (p_data : String) := @org.thingpedia.builtin.test.eat_data(data=p_data)
        #_[utterances=["more data eating..."]]
        #_[preprocessed=["more data eating ..."]]
        #[id=1004] #[click_count=0];
    query  := @org.thingpedia.builtin.test.get_data()
        #_[utterances=["more data genning..."]]
        #_[preprocessed=["more data genning ..."]]
        #[id=1005] #[click_count=0];
}

dataset @org.thingpedia.dynamic.by_key.eat language "en" {
    action  := @org.thingpedia.builtin.test.eat_data()
        #_[utterances=["eat some data"]]
        #_[preprocessed=["eat some data"]]
        #[id=1000] #[click_count=0];
}

====

// ** typecheck: expect TypeError **
// Invalid type
class @foo {
  action foo (in req arg : Invalid);
}

====

// ** typecheck: expect TypeError **
// Invalid type 2
let action foo := \(arg : Invalid) -> @com.twitter.post();

====

// explicit double quotes in formatted
class @com.foo {
  list query foo(out foo : String,
                 out bar : String)
  #_[formatted=[{type="text", text="\"${foo}\": ${bar}"}]];
}

====

// abstract class
abstract class @com.foo {
  list query foo(out foo : String,
                 out bar : String);
}

====

// ** typecheck: expect TypeError **
// no loader or config for abstract class
abstract class @com.foo {
  import loader from @org.thingpedia.config.none();
  list query foo(out foo : String,
                 out bar : String);
}

====

timer(base=makeDate(), interval=30s) => @org.thingpedia.builtin.thingengine.builtin.get_random_between(low=2, high=20) => notify;

====

// multiple statements without { }
now => @com.thecatapi.get() => notify;
now => @uk.co.thedogapi.get() => notify;

====

// let hoisting
now => cat() => notify;
let query cat := @com.thecatapi.get();

====

// assignment statements
let result cat := @com.thecatapi.get();
now => cat => notify;

====

// assignment statements have output parameters
let result cat := @com.thecatapi.get();
now => cat => @com.twitter.post_picture(picture_url=picture_url, caption="cat");

====

// ** typecheck: expect TypeError **
// assignment statements do not manufacture output parameters
let result cat := @com.thecatapi.get();
now => cat => @com.twitter.post_picture(picture_url=foo, caption="cat");

====

// assignment references can be used like normal tables
let result cat := @com.thecatapi.get();
now => cat[2] => @com.twitter.post_picture(picture_url=picture_url, caption="cat");
now => cat, image_id == "1234"^^com.thecatapi:image_id =>
  @com.twitter.post_picture(picture_url=picture_url, caption="special cat");

====

// ** typecheck: expect TypeError **
// assignment statements are NOT hoisted
now => cat => notify;
let result cat := @com.thecatapi.get();

====

// assignment statements used multiple times
let result cat := @com.thecatapi.get();
now => cat => notify;
now => cat => @com.facebook.post();

====

// ** typecheck: expect TypeError **
// parameters to assignments
let result cat := @com.thecatapi.get();
now => cat(key=1) => notify;

====

// index expression
now => @com.gmail.inbox()[1] => notify;
now => @com.gmail.inbox()[-1] => notify;
now => @com.gmail.inbox()[1, 2, 3] => notify;
now => @com.gmail.inbox()[1, $undefined, 2] => notify;

// a single array value is also allowed (primarily for parameter passing)
// and then optimized away if it's a constant
now => @com.gmail.inbox()[ [1, 2, $undefined] ] => notify;

// param passing
let query q1 := \(p_index : Number) -> @com.gmail.inbox()[p_index];
let query q2 := \(p_index : Number, p_index2 : Number) -> @com.gmail.inbox()[p_index, p_index2];
let query q3 := \(p_indices : Array(Number)) -> @com.gmail.inbox()[p_indices];

====

// ** typecheck: expect TypeError **
// invalid index (not a number)
now => @com.gmail.inbox()['foo'] => notify;

====

// ** typecheck: expect TypeError **
// invalid index (array and number)
now => @com.gmail.inbox()[ [1,2], 3 ] => notify;

====

// ** typecheck: expect TypeError **
// invalid index (not a number)
let query q := \(p_index : String) -> @com.gmail.inbox()[p_index];

====

// slice expression
now => @com.gmail.inbox()[1:3] => notify;

====

// ** typecheck: expect TypeError **
// invalid slice offset (not a number)
let query q := \(p_index : String) -> @com.gmail.inbox()[p_index : 1];

====

// ** typecheck: expect TypeError **
// also invalid slice offset (not a number)
// (but this one is not optimized to an index)
let query q := \(p_index : String) -> @com.gmail.inbox()[p_index : 5];

====

// ** typecheck: expect TypeError **
// invalid slice limit (not a number)
let query q := \(p_index : String) -> @com.gmail.inbox()[1 : p_index];

====

// sort

// by measure
now => sort file_size asc of @com.dropbox.list_folder() => notify;
// by number
now => sort width asc of @com.bing.image_search() => notify;
// by string
now => sort sender_name asc of @com.gmail.inbox() => notify;

====

// ** typecheck: expect TypeError **
// cannot sort by entity
now => sort sender_address asc of @com.gmail.inbox() => notify;

====

// program declarations of various sorts

let procedure p1 := {
  now => @com.thecatapi.get() => notify;
};
let program p2 := {
  attimer(time=makeTime(7, 0)) => @com.thecatapi.get() => notify;
};
let procedure p3 := \(p_query : String) -> {
  now => @com.bing.web_search(query=p_query) => notify;
};
let procedure p4(p_query : String) := {
  now => @com.bing.web_search(query=p_query) => notify;
};

now => p1();

====

// attimer with List
attimer(time=[makeTime(9,0), makeTime(15,0)]) => @org.thingpedia.builtin.thingengine.builtin.say(message="it's 9am or 3pm");

====

// list syntax with single attimer
attimer(time=[makeTime(9,0)]) => @org.thingpedia.builtin.thingengine.builtin.say(message="it's 9am or 3pm");

====

// ** typecheck: expect TypeError **
// procedure with a monitor

let procedure p1 := {
  attimer(time=makeTime(7,0)) => @com.thecatapi.get() => notify;
};

now => p1();

====

// ** typecheck: expect TypeError **
// wrong parameter to the procedure

let procedure p1 := \(p_query : String) -> {
  now => @com.bing.web_search(query=p_query) => notify;
};

now => p1(p_query=43);

====

// ** typecheck: expect TypeError **
// procedure as query

let procedure p1 := \(p_query : String) -> {
  now => @com.bing.web_search(query=p_query) => notify;
};

now => p1(p_query="foo") => notify;

====

// annotations on declarations

let stream s := monitor(@com.bing.web_search()) #_[canonical="bing updates"];
let query q := @com.bing.web_search() #_[canonical="bing search"] #[foo=43];
let action a := \(p_value : String) -> @com.twitter.post(status=p_value) #_[canonical="roast on twitter"];

let procedure p1 := {
  now => @uk.co.thedogapi.get() => notify;
} #_[canonical="cats"];

====

// procedure with nested declarations
let procedure p1(p_foo : String) := {
    let query q1 := @com.bing.web_search(query = p_foo);
    now => q1 => notify;
    now => q1 => @com.twitter.post(status = title);
};
now => p1(p_foo = "one");
now => p1(p_foo = "two");

====

// ** typecheck: expect TypeError **
// monitor of non-monitorable query

monitor (@com.thecatapi.get()) => notify;

====

// ** typecheck: expect TypeError **
// propagating monitorable bit from table joins

monitor (@com.bing.web_search() join @com.thecatapi.get()) => notify;

====

// propagating monitorable bit from table joins, part 2

monitor (@com.bing.web_search() join @com.twitter.search()) => notify;

====
// bookkeeping statements: special
bookkeeping(yes);

====
// bookkeeping statements: special
bookkeeping(no);

====
// bookkeeping statements: choice
bookkeeping(choice(0));

====
// bookkeeping statements: answer
bookkeeping(answer(42));

====

// example program with parameters

dataset @foo {
  program (p_hashtag : Entity(tt:hashtag)) := monitor(@com.twitter.home_timeline()), contains(hashtags, p_hashtag) => @com.twitter.retweet(tweet_id=tweet_id)
  #[id=-1]
  #_[preprocessed=["autoretweet tweets with $p_hashtag", "autoretweet $p_hashtag"]];
}

====

// typechecking arrays
// ** typecheck: expect TypeError **
now => @com.spotify.play_songs(songs=[foo]);

====

// typechecking arrays
// ** typecheck: expect TypeError **
now => @com.spotify.play_songs(songs=["1", 2]);

====

// typechecking arrays
// ** typecheck: expect TypeError **
now => @com.spotify.play_songs(songs=[1, 2]);

====

// typechecking arrays
now => @com.spotify.play_songs(songs=["foo", "bar"]);

====
// genie annotations
class @foo {
    query bar(out title : String, out description: String, out url : URL #[unique=true])
    #_[canonical='foo']
    #_[confirmation='bar']
    #[require_filter=true]
    #[default_projection=["title", "description"]];
}

====
// ** typecheck: expect TypeError **
// invalid type for require_filter
class @foo {
    query bar(out title : String, out description: String, out url : URL #[unique=true])
    #_[canonical='foo']
    #_[confirmation='bar']
    #[require_filter='true']
    #[default_projection=["title", "description"]];
}

====
// ** typecheck: expect TypeError **
// invalid type for default_projection
class @foo {
    query bar(out title : String, out description: String, out url : URL #[unique=true])
    #_[canonical='foo']
    #_[confirmation='bar']
    #[require_filter=true]
    #[default_projection='foobar'];
}

====
// ** typecheck: expect TypeError **
// invalid type for default_projection
class @foo {
    query bar(out title : String, out description: String, out url : URL #[unique=true])
    #_[canonical='foo']
    #_[confirmation='bar']
    #[require_filter=true]
    #[default_projection=[123]];
}

====
// ** typecheck: expect TypeError **
// invalid parameter for default_projection
class @foo {
    query bar(out title : String, out description: String, out url : URL #[unique=true])
    #_[canonical='foo']
    #_[confirmation='bar']
    #[require_filter=true]
    #[default_projection=['foobar']];
}

====
// ** typecheck: expect TypeError **
// require filter

now => [id, image] of @org.wikidata.city() => notify;

====
// ** typecheck: expect TypeError **
// invalid output parameter
now => [id, image] of (@org.wikidata.city(), XXX =~ 'Bob') => notify;

====

now => [id, image] of (@org.wikidata.city(), id =~ 'palo alto') => notify;

====
// ** typecheck: expect TypeError **
// unique output param

now => [id, image] of (@org.wikidata.city(), (country == "Q30"^^org.wikidata:country || id =~ 'palo alto')) => notify;

====

// ** typecheck: expect TypeError **
// unique output param

now => [id, image] of ((@org.wikidata.city(), id =~ 'palo alto'), country == "Q30"^^org.wikidata:country) => notify;


====

now => [id, image] of (@org.wikidata.city(), (country == "Q30"^^org.wikidata:country || postal_code =~ "94305")) => notify;

====

// unresolved locations
now => @org.thingpedia.weather.current(location=makeLocation("stanford california")) => notify;

====

// ** typecheck: expect TypeError **
// projection on table with single output param

now => [date] of @org.thingpedia.builtin.thingengine.builtin.get_date() => notify;

====

// categories for canonical:
// npp: noun phrase for property
// npi: noun phrase for identity
// pvp: passive verb phrase
// acp: active verb phrase
// apv: adjective phrase value
// npv: noun phrase value
class @foo {
    query bar(
        out nickname: String #_[canonical={ default='npp', npp=['nickname'], pvp=['nicknamed', 'called']}],
        out owner_of: String #_[canonical={ default='npi', npi=['owner of'], avp=['own']}],
        out gender: Enum(male,female) #_[canonical={ default='apv', apv=true, npv=true, npp=['gender', 'sex'] }]
    )
    #_[canonical='foo']
    #_[confirmation='bar'];
}

====

now => @com.twitter.post(status=__const_QUOTED__STRING_0);
// note the escaping: tt:iso_lang_code becomes tt_3aiso__lang__code
// because ':' is escaped to '_3a' and '_' is escaped to __
now => @com.yandex.translate.translate(target_language=__const_GENERIC__ENTITY__tt_3aiso__lang__code_0) => notify;
now => @thermostat.get_temperature(), value >= __const_NUMBER_0__C => notify;
now => @thermostat.get_temperature(), value >= __const_MEASURE__C_0 => notify;

====

// ** typecheck: expect TypeError **
// wrong type
now => @com.twitter.post(status=__const_NUMBER_0);

====

now => @com.twitter.post(status = $context.selection : String);

====

// ** typecheck: expect TypeError **
now => @thermostat.set_target_temperature(value = $context.selection : Entity(tt:picture));

====

// compound value type
{
  class @org.schema {
    list query restaurants(out name: String,
                           out rating: {
                             value: Number,
                             count: Number
                           });
  }
  now => @org.schema.restaurants(), rating.value >= 4 => notify;
}

====

// nested compound value type
{
  class @org.schema {
    list query restaurants(out name: String,
                           out rating: {
                             value: Number,
                             count: Number,
                             author: {
                                name: String
                             }
                           });
  }
  now => @org.schema.restaurants(), rating.author.name ~= "bob" => notify;
}

====

// subfunction with compound value
{
  class @org.schema {
    list query local_business(out name: String,
                              out rating: {
                                value: Number,
                                count: Number
                              });
    list query restaurants extends local_business(out serveCuisine: String);
  }
  now => @org.schema.restaurants(), rating.value >= 4 && serveCuisine =~ "seafood" => notify;
}

====

// aggregate filter on arrays
{
  class @org.schema {
    list query restaurants(out name: String,
                           out reviews: Array(Number));
  }
  now => @org.schema.restaurants(), count(reviews) >= 1 => notify;
}

====

// aggregate filter on arrays
{
  class @org.schema {
    list query restaurants(out name: String,
                           out reviews: Array(Number));
  }
  now => @org.schema.restaurants(), count(reviews filter { value == 5 }) >= 1 => notify;
}

====

// aggregate (non-count) filter on arrays
{
  class @org.schema {
    list query restaurants(out name: String,
                           out reviews: Array(Number));
  }
  now => @org.schema.restaurants(), avg(reviews) >= 4 => notify;
}

====

// aggregate filter on arrays of compound value
{
  class @org.schema {
    list query restaurants(out name: String,
                           out reviews: Array({
                             rating: Number,
                             review: String
                           }));
  }
  now => @org.schema.restaurants(), count(reviews filter { rating >= 5 }) >= 1 => notify;
}

====

// aggregate (non-count) filter on arrays of compound value
{
  class @org.schema {
    list query restaurants(out name: String,
                           out reviews: Array({
                             rating: Number,
                             review: String
                           }));
  }
  now => @org.schema.restaurants(), avg(rating of reviews filter { rating >= 5 }) >= 1 => notify;
}

====

// ** typecheck: expect TypeError **
// aggregate filter on scalar argument
{
  class @org.schema {
    list query restaurants(out name: String,
                           out reviews: Array({
                             rating: Number,
                             review: String
                           }));
  }
  now => @org.schema.restaurants(), count(name filter { value =~ 'foo' }) >= 4 => notify;
}

====

// ** typecheck: expect TypeError **
// invalid filter inside aggregate filter
{
  class @org.schema {
    list query restaurants(out name: String,
                           out reviews: Array({
                             rating: Number,
                             review: String
                           }));
  }
  now => @org.schema.restaurants(), count(reviews filter { value == 5 }) >= 4 => notify;
}

====

// ** typecheck: expect TypeError **
// aggregate on non-numeric parameter
{
  class @org.schema {
    list query restaurants(out name: Array(String));
  }
  now => @org.schema.restaurants(), avg(name) >= 1 => notify;
}

====

// ** typecheck: expect TypeError **
// aggregate on non-numeric field
{
  class @org.schema {
    list query restaurants(out name: String,
                           out reviews: Array({
                             rating: Number,
                             review: String
                           }));
  }
  now => @org.schema.restaurants(), avg(review of reviews) >= 1 => notify;
}

====

// ** typecheck: expect TypeError **
// invalid field
{
  class @org.schema {
    list query restaurants(out name: String,
                           out reviews: Array({
                             rating: Number,
                             review: String
                           }));
  }
  now => @org.schema.restaurants(), avg(x of reviews) >= 1 => notify;
}

====

// array of compound inside compound
{
  class @org.schema {
    list query restaurants(out name: String,
                           out aggregateRating: {
                             reviews: Array({
                               rating: Number,
                               review: String
                             })
                           });
  }
  now => @org.schema.restaurants(), avg(rating of aggregateRating.reviews) >= 1 => notify;
}

====

// nested compound inside array
{
  class @org.schema {
    list query restaurants(out name: String,
                           out reviews: Array({
                             reviewRating: {
                               ratingValue: Number
                             }
                           }));
  }
  now => @org.schema.restaurants(), avg(reviewRating.ratingValue of reviews) >= 1 => notify;
}

====
// nested compound inside array inside compound
// this is the most complicated case we handle (for now), no nest arrays
{
  class @org.schema {
    list query restaurants(out name: String,
                           out aggregateRating: {
                             reviewCount: Number,
                             reviews: Array({
                               reviewRating: {
                                 ratingValue: Number
                               }
                             })
                           });
  }
  now => @org.schema.restaurants(), avg(reviewRating.ratingValue of aggregateRating.reviews) >= 1 => notify;
}

====

class @org.schema {
  list query restaurants(out name: String,
                         out aggregateRating: {
                           reviewCount: Number,
                           reviews: Array({
                             reviewRating: {
                               ratingValue: Number
                             }
                           })
                         });
}
now => compute count(aggregateRating.reviews) of @org.schema.restaurants() => notify;

====

class @org.schema {
  list query restaurants(out name: String,
                         out location : Location);
}
now => compute distance(location, $context.location.current_location) of @org.schema.restaurants() => notify;
now => (compute distance(location, $context.location.current_location) of @org.schema.restaurants()), distance <= 1km => notify;
now => sort distance desc of compute distance(location, $context.location.current_location) of @org.schema.restaurants() => notify;

====

class @org.schema {
  list query restaurants(out name: String,
                         out aggregateRating: {
                           reviewCount: Number,
                           reviews: Array({
                             author : String,
                             reviewRating: {
                               ratingValue: Number
                             }
                           })
                         });
}

//now => [aggregateRating.reviews.reviewRating] of @org.schema.restaurants() => notify;
now => compute aggregateRating.reviews filter { reviewRating.ratingValue >= 4 } of @org.schema.restaurants() => notify;

now => [aggregateRating.reviews] of compute aggregateRating.reviews filter { author == "Bob" } of @org.schema.restaurants() => notify;

====

// ** typecheck: expect TypeError **
// invalid type
class @org.schema {
  list query restaurants(out name: String,
                         out aggregateRating: {
                           reviewCount: Number,
                           reviews: Array({
                             author : String,
                             reviewRating: {
                               ratingValue: Number
                             }
                           })
                         });
}

//now => [aggregateRating.reviews.reviewRating] of @org.schema.restaurants() => notify;
now => compute aggregateRating.reviews filter { reviewRating.ratingValue >= "bob" } of @org.schema.restaurants() => notify;

now => [aggregateRating.reviews] of compute aggregateRating.reviews filter { author == "Bob" } of @org.schema.restaurants() => notify;

====

class @org.schema {
  list query restaurants(out name: String,
                         out aggregateRating: {
                           reviewCount: Number,
                           reviews: Array({
                             author : String,
                             reviewRating: {
                               ratingValue: Number
                             }
                           })
                         });
}

now => [foo] of compute aggregateRating.reviews filter { author == "Bob" } as foo of @org.schema.restaurants() => notify;

====

now => @light-bulb(name="bathroom").set_power(power=enum(on));
now => @light-bulb(name="ceiling").set_power(power=enum(on));

let action x(p_name : String) := @light-bulb(name=p_name).set_power(power=enum(on));

====

dataset @light-bulb {
  action (p_name : String) := @light-bulb(name=p_name).set_power(power=enum(on))
  #_[utterances=["turn on my $p_name lights"]];
}

====

// ** typecheck: expect TypeError **
// no param passing into a device attribute
now => @com.bing.web_search() => @light-bulb(name=title).set_power(power=enum(on));

====

// ** typecheck: expect TypeError **
// invalid enum
now => @light-bulb.set_power(power=enum(cool));

====

// ** typecheck: expect TypeError **
// invalid enum
now => @org.thingpedia.icalendar.list_events(), status==enum(off) => notify;

====

// dialogue states

$dialogue @org.thingpedia.dialogue.transaction.greet;

====

$dialogue @org.thingpedia.dialogue.transaction.execute;
now => @com.thecatapi.get() => notify;

====

$dialogue @org.thingpedia.dialogue.transaction.execute;
now => @com.thecatapi.get() => notify
#[results=[
  { image_id = "..."^^com.thecatapi:image_id, url = "..."^^tt:url, link = "..."^^tt:url }
]];

====

$dialogue @org.thingpedia.dialogue.transaction.execute;
now => @com.thecatapi.get() => notify
#[results=[
  { image_id = "..."^^com.thecatapi:image_id, url = "..."^^tt:url, link = "..."^^tt:url }
]];
now => @com.twitter.post();

====

$dialogue @org.thingpedia.dialogue.transaction.execute;
now => @com.thecatapi.get() => notify
#[results=[
  { image_id = "..."^^com.thecatapi:image_id, url = "..."^^tt:url, link = "..."^^tt:url }
]];
now => @com.twitter.post()
#[confirm=true];

====

$dialogue @org.thingpedia.dialogue.transaction.execute;
now => @com.thecatapi.get() => notify
#[results=[
  { image_id = "..."^^com.thecatapi:image_id, url = "..."^^tt:url, link = "..."^^tt:url }
]];
now => @com.twitter.post()
#[results=[
  { tweet_id = "..."^^com.twitter:tweet_id, link = "..."^^tt:url }
]];

====

$dialogue @org.thingpedia.dialogue.transaction.execute;
now => @com.thecatapi.get() => notify
#[results=[
  { image_id = "..."^^com.thecatapi:image_id, url = "..."^^tt:url, link = "..."^^tt:url }
]];
now => @com.twitter.post()
#[results=[]]
#[error="something bad happened"];

====

$dialogue @org.thingpedia.dialogue.transaction.execute;
now => @com.thecatapi.get() => notify
#[results=[
  { image_id = "..."^^com.thecatapi:image_id, url = "..."^^tt:url, link = "..."^^tt:url }
]];
now => @com.twitter.post()
#[results=[]]
#[error=enum(my_error_code)];


====

$dialogue @org.thingpedia.dialogue.transaction.execute;
now => @com.thecatapi.get() => notify
#[results=[
  { image_id = "..."^^com.thecatapi:image_id, url = "..."^^tt:url, link = "..."^^tt:url }
]]
#[count=3];

====

$dialogue @org.thingpedia.dialogue.transaction.execute;
now => @com.thecatapi.get() => notify
#[results=[
  { image_id = "..."^^com.thecatapi:image_id, url = "..."^^tt:url, link = "..."^^tt:url }
]]
#[count=3]
#[more=true];

====

$dialogue @org.thingpedia.dialogue.transaction.sys_search_question(serveCuisine);
now => @org.schema.restaurant() => notify;

====

now => @org.schema.full.Restaurant(), id =~ "starbucks" => notify;
now => @org.schema.full.Restaurant(), "starbucks" ~= id => notify;
now => @org.schema.full.Restaurant(), in_array~(id, ["starbucks", "mcdonalds"]) => notify;
//now => @com.twitter.search(), contains~(hashtags, "foo") => notify;

====

// ** typecheck: expect TypeError **
// equality of entity and string

now => @org.schema.full.Restaurant(), id == "starbucks" => notify;

====

// explicit dontcare
now => @org.schema.full.FoodEstablishment(), true(servesCuisine) => notify;

====

// regression test for bug in projection with function inheritance
// ** typecheck: expect TypeError **
// the projection is inside and masks the parameter, including inherited ones
now => compute distance(geo, $context.location.current_location) of ([address] of @org.schema.place()) => notify;

====

// procedures with actions and returned values

let procedure cat_and_twitter := {
  let result cat := @com.thecatapi.get();
  now => cat => @com.twitter.post_picture(picture_url=picture_url, caption="cat");
  now => cat => notify;
};
let result cat2 := cat_and_twitter();
now => cat2 => notify;
now => cat2 => @com.facebook.post_picture(picture_url=picture_url, caption="cat");

====

// entity declarations
class @com.example {
  entity restaurant #_[description="Restaurant"] #[has_ner=true];

  query restaurant(out id : Entity(com.example:restaurant),
                   out geo : Location);

  entity movie #_[description="Movie"] #[has_ner=true];
  entity person #_[description="Person"] #[has_ner=true];
  query movie(out id : Entity(com.example:movie),
              out actors : Array(Entity(com.example:person)),
              out director : Entity(com.example:person));

  entity email #_[description="Email Message"] #[has_ner=false];
  query email(out id : Entity(com.example:email),
              out subject : String,
              out sender : Entity(tt:email_address));
}

====

// date piece
{
    now => @org.thingpedia.builtin.thingengine.builtin.get_date(), date >= new Date(, 6, ) => notify;
}

====

// Recurrent time specification
now => @com.yelp.restaurant(), contains(openingHours, new Date()) => notify;

====

// Recurrent time specification
now => @com.yelp.restaurant(), contains(openingHours, new Time(9, 0, 0)) => notify;

====

// weekday
{
    now => @org.thingpedia.builtin.thingengine.builtin.get_date(), date >= new Date(monday) => notify;
    now => @org.thingpedia.builtin.thingengine.builtin.get_date(), date >= new Date(monday, 12, 0, 0) => notify;
}

====

now => (@com.yelp(id="com.yelp", name="com.yelp").restaurant()), distance(geo, new Location(4, 4)) <= 23mi => notify;

====

// restaurants open 24/7
now => @com.yelp.restaurant(),
  openingHours == new RecurrentTimeSpecification({ beginTime = new Time(0,0), endTime = new Time(24,0) }) => notify;

// restaurants open 24h on friday and saturday
now => @com.yelp.restaurant(),
  openingHours == new RecurrentTimeSpecification({ beginTime = new Time(0,0), endTime = new Time(24,0), dayOfWeek=enum(friday) },
                                                 { beginTime = new Time(0,0), endTime = new Time(24,0), dayOfWeek=enum(saturday) }) => notify;

====

class @org.thingpedia.weather {
  monitorable query current(in opt location: Location
                            #[default=$context.location.current_location],
                            out temperature: Measure(C)
                            #[min_number=-10C]
                            #[max_number=50C],
                            out wind_speed: Measure(mps)
                            #[min_number=0kmph]
                            #[max_number=150kmph],
                            out humidity: Number
                            #[min_number=0]
                            #[max_number=100],
                            out cloudiness: Number
                            #[min_number=0]
                            #[max_number=100],
                            out fog: Number
                            #[min_number=0]
                            #[max_number=100],
                            out status: Enum(raining,cloudy,sunny,snowy,sleety,drizzling,windy),
                            out icon: Entity(tt:picture));
}

====

// ** typecheck: expect TypeError **
class @org.thingpedia.weather {
  monitorable query current(in opt location: Location
                            #[default='foo'],
                            out temperature: Measure(C)
                            #[min_number=-10C]
                            #[max_number=50C],
                            out wind_speed: Measure(mps)
                            #[min_number=0kmph]
                            #[max_number=150kmph],
                            out humidity: Number
                            #[min_number=0]
                            #[max_number=100],
                            out cloudiness: Number
                            #[min_number=0]
                            #[max_number=100],
                            out fog: Number
                            #[min_number=0]
                            #[max_number=100],
                            out status: Enum(raining,cloudy,sunny,snowy,sleety,drizzling,windy),
                            out icon: Entity(tt:picture));
}

====

// subquery in policy
true : @security-camera.current_event, @org.thingpedia.builtin.thingengine.builtin.get_time() { time >= makeTime(19,0) } => notify
