"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Thingpedia
//
// Copyright 2019 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ThingTalk = __importStar(require("thingtalk"));
const http_client_1 = __importDefault(require("./http_client"));
/**
 * The base Almond engine class.
 *
 * This contains the only API that should be considered stable in the Engine.
 * All other APIs are a private implementation detail.
 */
class BaseEngine {
    /**
     * Construct an engine instance.
     *
     * @param platform - the platform associated with this engine
     * @param options - additional options
     * @param options.thingpediaUrl - the Thingpedia URL to use (if the platform
     *                                does not provide a {@link BaseClient})
     */
    constructor(platform, options = {}) {
        this._platform = platform;
        if (platform.hasCapability('thingpedia-client'))
            this._thingpedia = platform.getCapability('thingpedia-client');
        else
            this._thingpedia = new http_client_1.default(platform, options.thingpediaUrl);
        this._schemas = new ThingTalk.SchemaRetriever(this._thingpedia);
    }
    /**
     * The identity of the current engine of the engine.
     *
     * This is a string composed of {@link BaseDevice.Tier} and a unique identifier.
     * It should be accessed and stored by devices that need local connectivity,
     * to ensure that they are only initialized in the correct engine.
     */
    get ownTier() {
        return 'desktop';
    }
    /**
     * The platform associated with the engine.
     */
    get platform() {
        return this._platform;
    }
    /**
     * The Thingpedia Client associated with the engine.
     */
    get thingpedia() {
        return this._thingpedia;
    }
    /**
     * The ThingTalk SchemaRetriever associated with the engine.
     */
    get schemas() {
        return this._schemas;
    }
}
exports.default = BaseEngine;
//# sourceMappingURL=base_engine.js.map