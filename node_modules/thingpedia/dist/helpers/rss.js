"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Thingpedia
//
// Copyright 2017-2019 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.get = void 0;
const feedparser_1 = __importDefault(require("feedparser"));
const Http = __importStar(require("./http"));
/**
 * RSS helpers.
 *
 * @namespace
 */
/**
 * Retrieve and parse and RSS feed.
 *
 * @param {string} url - the URL of the feed
 * @param {Object} options - options to pass to the HTTP library; see {@link Helpers.Http.get} for details
 * @return {Array.<Helpers.Rss~RSSEntry>} a list of RSS entries
 */
function get(url, options) {
    return Http.getStream(url, options).then((stream) => {
        return new Promise((resolve, reject) => {
            const parser = new feedparser_1.default({ feedurl: url });
            parser.on('error', reject);
            const toEmit = [];
            parser.on('data', (entry) => {
                toEmit.push({
                    guid: entry.guid,
                    title: entry.title,
                    description: entry.description,
                    link: entry.link,
                    author: entry.author,
                    updated_time: new Date(entry.date || Date.now()),
                    // At some point, we messed up, and mixed "updated" and "updated_time" as
                    // parameter names
                    // The correct name to use is "updated_time" (parameters as noun - used by
                    // com.xkcd), but we cannot change existing
                    // devices (com.nytimes, com.washingtonpost, com.wsj) that use "updated"
                    // For compatibility, we return both, and hope for the best
                    updated: new Date(entry.date || Date.now()),
                    picture_url: entry.image ? (entry.image.url || null) : null,
                    categories: entry.categories
                });
            });
            parser.on('end', () => resolve(toEmit));
            stream.pipe(parser);
        });
    }).then((toEmit) => {
        toEmit.sort((a, b) => (+b.updated_time) - (+a.updated_time));
        return toEmit;
    });
}
exports.get = get;
//# sourceMappingURL=rss.js.map