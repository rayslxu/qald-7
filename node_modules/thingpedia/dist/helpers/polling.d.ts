/// <reference types="node" />
import * as stream from 'stream';
import type BaseDevice from '../base_device';
/**
 * A stream.Readable implementation that emits new values at specific interval.
 *
 */
declare class PollingStream<EventType extends PollingStream.EventResult> extends stream.Readable {
    private _timeout;
    readonly state: BaseDevice.TriggerState;
    readonly interval: number;
    private _callback;
    private _destroyed;
    /**
     * Construct a new polling stream.
     *
     * @param state - a state binder object
     * @param interval - polling interval, in milliseconds
     * @param callback - function to call every poll interval
     */
    constructor(state: BaseDevice.TriggerState, interval: number, callback: PollingStream.PollCallback<EventType>);
    /**
     * Destroy the current stream (stop polling).
     */
    destroy(): void;
    private _nextTick;
    private _nextTimeout;
    private _onTick;
    _read(): void;
}
declare namespace PollingStream {
    /**
     * Callback called when polling.
     *
     * The callback should poll the underlying API and return the current results.
     *
     * @return the current list of results
     */
    type PollCallback<T> = () => Iterable<T> | Promise<Iterable<T>> | AsyncIterable<T>;
    interface EventResult {
        __timestamp?: number;
        [key: string]: unknown;
    }
}
export default PollingStream;
