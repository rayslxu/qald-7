import type BaseEngine from '../base_engine';
import type BaseDevice from '../base_device';
declare namespace OAuth2Helper {
    interface OAuthHelperParams<T extends BaseDevice> {
        use_basic_client_auth?: boolean;
        custom_headers?: Record<string, string>;
        authorize: string;
        get_access_token: string;
        redirect_uri?: string;
        set_access_type?: boolean;
        set_state?: boolean;
        use_pkce?: boolean;
        scope?: string[];
        callback?: (engine: BaseEngine, accessToken: string, refreshToken: string | undefined, extraData: Record<string, unknown>) => Promise<T>;
    }
    type DeviceClass<T extends BaseDevice> = BaseDevice.DeviceClass<T> & {
        loadFromOAuth2(engine: BaseEngine, accessToken: string, refreshToken: string, extraData: Record<string, unknown>): Promise<T>;
    };
    interface HTTPRequest {
        query: Record<string, string | string[] | undefined>;
        session: Record<string, string>;
    }
    interface OAuthRunner<T extends BaseDevice> {
        (this: DeviceClass<T>, engine: BaseEngine, req: null): [string, Record<string, string>];
        (this: DeviceClass<T>, engine: BaseEngine, req: HTTPRequest): Promise<T | null>;
        install(classdef: T): void;
    }
}
declare function OAuth2Helper<T extends BaseDevice>(params: OAuth2Helper.OAuthHelperParams<T>): OAuth2Helper.OAuthRunner<T>;
export default OAuth2Helper;
