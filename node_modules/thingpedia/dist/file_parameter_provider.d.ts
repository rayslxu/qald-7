import BaseClient from './base_client';
/**
 * Load strings and entities from files.
 *
 * Strings are loaded from the TSV files generated from
 * https://almond.stanford.edu/thingpedia/strings/download/:x
 *
 * Entities are loaded from the JSON files returned from
 * https://almond.stanford.edu/thingpedia/api/v3/entities/list/:x
 */
declare class FileParameterProvider {
    private _filename;
    private _paramLocale;
    private _dirname;
    private _paths;
    private _db;
    constructor(filename: string, paramLocale: string);
    load(): Promise<void>;
    private _loadPaths;
    private _loadOrCreateSqliteCache;
    private _loadStrings;
    private _loadEntities;
    private _getStrings;
    private _getEntities;
    lookupEntity(stringType: string, term: string): Promise<BaseClient.EntityRecord[]>;
    getEntity(stringType: string): Promise<BaseClient.EntityRecord[]>;
    get(valueListType: 'string' | 'entity', valueListName: string): Promise<FileParameterProvider.ParameterRecord[]>;
    getSampler(valueListType: 'string' | 'entity', valueListName: string, mode: FileParameterProvider.SampleMode): Promise<FileParameterProvider.Sampler>;
}
declare namespace FileParameterProvider {
    interface ParameterRecord {
        preprocessed: string;
        value: string;
        weight: number;
    }
    enum SampleMode {
        SEQUENTIAL = 0,
        UNIFORM = 1,
        WEIGHTED = 2
    }
    interface Sampler {
        get size(): number;
        sample(rng: () => number): Promise<ParameterRecord>;
    }
}
export default FileParameterProvider;
