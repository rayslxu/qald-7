import './string_format';
import Messaging from './messaging';
import Preferences from './prefs';
import BaseDevice, { Availability, Tier } from './base_device';
import * as Helpers from './helpers';
import * as ObjectSet from './helpers/object_set';
import ConfigDelegate from './config_delegate';
import { OAuthError } from './errors';
import BaseClient from './base_client';
import HttpClient from './http_client';
import FileClient from './file_thingpedia_client';
import DeviceFactory from './factory';
import { ImplementationError, UnsupportedError } from './errors';
import BaseEngine from './base_engine';
import BasePlatform, { UserProfile } from './base_platform';
import * as DeviceConfigUtils from './device_factory_utils';
import * as Capabilities from './capabilities';
import DialogueHandler from './dialogue-handler';
import * as FormatObjects from './format_objects';
import * as ThingTalk from 'thingtalk';
import FileParameterProvider from './file_parameter_provider';
/**
 * Versioning information for the library.
 *
 * Use this object to check if the currently loaded Thingpedia SDK
 * is compatible with your device, and to dynamically check if a specific
 * feature is present.
 *
 * Note: you should never bundle the Thingpedia SDK with your device.
 *
 * @namespace
 */
declare const VERSION: {
    /** Major version number (incremented on incompatible changes) */
    major: number;
    /** Minor version number (incremented on feature additions) */
    minor: number;
    /** Full version string, in semantic version format */
    full: string;
    /** Convert the version number to a number (for comparisons) */
    valueOf(): number;
    toString(): string;
    /**
     * Check if the current version is compatible with the passed in version
     *
     * @param v - the version, as a number or object with `major` and minor properties
     * @return {Boolean}
     */
    compatible(v: number | {
        major: number;
        minor: number;
    }): boolean;
    /**
     * Check if the given feature is present.
     *
     * It is ok to pass invalid or unrecognized feature names to this function,
     * which will then return `false`.
     *
     * In this version of the library, the following feature names are recognized:
     * - `rss`: RSS helpers and loaders
     * - `value-types`: ThingTalk value types are re-exported
     * - `thingpedia-client`: Thingpedia Client APIs are present
     *
     * @param {String} f - a feature name
     * @return {Boolean} whether the named feature is supported.
     */
    hasFeature(f: string): boolean;
};
declare namespace Value {
    type Entity = ThingTalk.Builtin.Entity;
    type Currency = ThingTalk.Builtin.Currency;
    type Location = ThingTalk.Builtin.Location;
    type Time = ThingTalk.Builtin.Time;
    const Entity: typeof ThingTalk.Builtin.Entity;
    const Currency: typeof ThingTalk.Builtin.Currency;
    const Location: typeof ThingTalk.Builtin.Location;
    const Time: typeof ThingTalk.Builtin.Time;
}
export { VERSION as version, BaseDevice, Availability, Tier, Helpers, Value, Messaging, ConfigDelegate, Preferences, Capabilities, UserProfile, DialogueHandler, FormatObjects, ObjectSet, BaseEngine, BasePlatform, BaseClient, HttpClient, FileClient, DeviceFactory, DeviceConfigUtils, FileParameterProvider, ImplementationError, UnsupportedError, OAuthError, };
