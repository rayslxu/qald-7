import BaseClient from './base_client';
/**
 * A Thingpedia Client backed by local files.
 *
 */
export default class FileClient extends BaseClient {
    private _locale;
    private _devices;
    private _entities;
    private _dataset;
    private _examples;
    private _thingpediafilename;
    private _entityfilename;
    private _datasetfilename;
    private _loaded;
    private _entityProvider;
    /**
     * Construct a new FileClient.
     *
     * @param {Object} args - construction parameters
     * @param {string} args.locale - the locale of the user
     * @param {string} args.thingpedia - the path to the `thingpedia.tt` file
     * @param {string} args.entities - the path to the `entities.json` file
     * @param {string} args.dataset - the path to the `dataset.tt` file
     */
    constructor(args: {
        thingpedia: string;
        locale: string;
        entities?: string;
        dataset?: string;
        parameter_datasets?: string;
    });
    get locale(): string;
    getModuleLocation(id: string): Promise<string>;
    getDeviceSetup(kinds: string[]): Promise<{
        [key: string]: BaseClient.DeviceFactory | BaseClient.MultipleDeviceFactory | null;
    }>;
    getKindByDiscovery(publicData: any): Promise<string>;
    private _load;
    private _ensureLoaded;
    getDeviceList(klass?: string, page?: number, page_size?: number): Promise<BaseClient.DeviceListRecord[]>;
    searchDevice(q: string): Promise<BaseClient.DeviceListRecord[]>;
    getDeviceFactories(klass: string): Promise<BaseClient.DeviceFactory[]>;
    getSchemas(kinds: string[], useMeta?: boolean): Promise<string>;
    getDeviceCode(kind: string): Promise<string>;
    getAllExamples(): Promise<string>;
    getExamplesByKey(key: string): Promise<string>;
    getExamplesByKinds(kinds: string[]): Promise<string>;
    clickExample(exampleId: number): Promise<void>;
    getAllDeviceNames(): Promise<BaseClient.DeviceNameRecord[]>;
    getAllEntityTypes(): Promise<BaseClient.EntityTypeRecord[]>;
    private _httpRequest;
    lookupEntity(entityType: string, searchTerm: string): Promise<BaseClient.EntityLookupResult>;
    lookupLocation(searchTerm: string, around?: {
        latitude: number;
        longitude: number;
    }): Promise<BaseClient.LocationRecord[]>;
    invokeQuery(): never;
}
