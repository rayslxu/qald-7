import * as ThingTalk from 'thingtalk';
import * as ConfigMixins from '../config';
import BaseClient from '../base_client';
import type ModuleDownloader from '../downloader';
import BaseDevice from '../base_device';
import BaseLoader from './base';
export default abstract class BaseJavascriptLoader extends BaseLoader {
    protected _loader: ModuleDownloader;
    protected _config: ConfigMixins.Base | null;
    protected _client: BaseClient;
    protected _loading: Promise<BaseDevice.DeviceClass<BaseDevice>> | null;
    protected _modulePath: string | null;
    constructor(kind: string, manifest: ThingTalk.Ast.ClassDef, parents: Record<string, ThingTalk.Ast.ClassDef>, loader: ModuleDownloader);
    get config(): ConfigMixins.Base | null;
    static get [Symbol.species](): new (kind: string, manifest: ThingTalk.Ast.ClassDef, parents: Record<string, ThingTalk.Ast.ClassDef>, loader: ModuleDownloader) => BaseJavascriptLoader;
    abstract clearCache(): void;
    protected abstract _doGetDeviceClass(): Promise<BaseDevice.DeviceClass<BaseDevice>>;
    protected _createSubmodule(id: string, manifest: ThingTalk.Ast.ClassDef, parents: Record<string, ThingTalk.Ast.ClassDef>, deviceClass: BaseDevice.DeviceClass<BaseDevice>): Promise<BaseJavascriptLoader>;
    protected _completeLoading(deviceClass: BaseDevice.DeviceClass<BaseDevice>): Promise<BaseDevice.DeviceClass<BaseDevice>>;
    getDeviceClass(): Promise<BaseDevice.DeviceClass<BaseDevice>>;
}
