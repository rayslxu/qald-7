import * as ThingTalk from 'thingtalk';
import BaseClient from './base_client';
import BasePlatform from './base_platform';
/**
 * The base Almond engine class.
 *
 * This contains the only API that should be considered stable in the Engine.
 * All other APIs are a private implementation detail.
 */
export default abstract class BaseEngine {
    protected _platform: BasePlatform;
    protected _thingpedia: BaseClient;
    protected _schemas: ThingTalk.SchemaRetriever;
    /**
     * Construct an engine instance.
     *
     * @param platform - the platform associated with this engine
     * @param options - additional options
     * @param options.thingpediaUrl - the Thingpedia URL to use (if the platform
     *                                does not provide a {@link BaseClient})
     */
    constructor(platform: BasePlatform, options?: {
        thingpediaUrl?: string;
    });
    /**
     * The identity of the current engine of the engine.
     *
     * This is a string composed of {@link BaseDevice.Tier} and a unique identifier.
     * It should be accessed and stored by devices that need local connectivity,
     * to ensure that they are only initialized in the correct engine.
     */
    get ownTier(): string;
    /**
     * The platform associated with the engine.
     */
    get platform(): BasePlatform;
    /**
     * The Thingpedia Client associated with the engine.
     */
    get thingpedia(): BaseClient;
    /**
     * The ThingTalk SchemaRetriever associated with the engine.
     */
    get schemas(): ThingTalk.SchemaRetriever;
}
