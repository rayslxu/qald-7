/**
 * The base class of all the operations that a device is allowed
 * to perform to interact with the user during interactive configuration.
 *
 * This class exists mostly for documentation, it's not actually used
 * because JS does not have interfaces or multiple inheritance.
 */
export default abstract class ConfigDelegate {
    constructor();
    /**
     * Report that the device was configured successfully.
     *
     * @deprecated returning successfully from {@link BaseDevice.completeDiscovery} or
     *             {@link BaseDevice.loadInteractively} is enough to report success.
     */
    configDone(): Promise<void>;
    /**
     * Inform the user that discovery/configuration failed
     * for some reason.
     *
     * @param {Error} error - the error that occurred
     * @deprecated throwing an exception from {@link BaseDevice.completeDiscovery}
     *             {@link BaseDevice.loadInteractively} is enough to report failure.
     */
    configFailed(error: Error): Promise<void>;
    /**
     * Ask the user a yes/no question.
     *
     * @param {string} question - the question to ask
     * @return {boolean} true if the user says yes, false if the user says no, or an error
     */
    confirm(question: string): Promise<boolean>;
    /**
     * Ask the user for a PIN code/password.
     *
     * @param {string} question - the question to ask
     * @param {boolean} [secret] - true if the question is secret (the answer should be masked)
     * @return {string} the answer from the user
     */
    requestCode(question: string, secret?: boolean): Promise<string>;
}
