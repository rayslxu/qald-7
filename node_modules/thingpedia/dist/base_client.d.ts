import * as ThingTalk from 'thingtalk';
declare namespace BaseClient {
    type DeviceCategory = 'data' | 'online' | 'physical' | 'system';
    interface DeviceListRecord {
        name: string;
        description: string;
        primary_kind: string;
        website: string;
        repository: string;
        issue_tracker: string;
        license: string;
        category: DeviceCategory;
        subcategory: string;
    }
    interface NoneDeviceFactory {
        type: 'none';
        category: DeviceCategory;
        kind: string;
        text: string;
    }
    interface OAuthDeviceFactory {
        type: 'oauth2';
        category: DeviceCategory;
        kind: string;
        text: string;
    }
    interface InteractiveDeviceFactory {
        type: 'interactive';
        category: DeviceCategory;
        kind: string;
        text: string;
    }
    interface DiscoveryDeviceFactory {
        type: 'discovery';
        category: DeviceCategory;
        kind: string;
        text: string;
        discoveryType: string;
    }
    interface FormField {
        name: string;
        label: string;
        type: string;
    }
    interface FormDeviceFactory {
        type: 'form';
        category: DeviceCategory;
        kind: string;
        text: string;
        fields: FormField[];
    }
    type DeviceFactory = NoneDeviceFactory | OAuthDeviceFactory | InteractiveDeviceFactory | DiscoveryDeviceFactory | FormDeviceFactory;
    interface MultipleDeviceFactory {
        type: 'multiple';
        text: string;
        choices: DeviceFactory[];
    }
    interface EntityRecord {
        type: string;
        value: string;
        canonical: string;
        name: string;
    }
    interface EntityLookupResult {
        meta: {
            name: string;
            is_well_known: boolean | number;
            has_ner_support: boolean | number;
        };
        data: EntityRecord[];
    }
    interface EntityTypeRecord {
        type: string;
        name: string;
        is_well_known: boolean | number;
        has_ner_support: boolean | number;
        subtype_of?: string[] | null;
    }
    interface LocationRecord {
        latitude: number;
        longitude: number;
        display: string;
        canonical: string;
        full_name: string;
        rank: number;
        importance: number;
        address: any;
    }
    interface DeviceNameRecord {
        kind: string;
        kind_canonical: string;
    }
    interface MixinDeclaration {
        kind: string;
        types: string[];
        args: string[];
        required: boolean[];
        is_input: boolean[];
        facets: string[];
    }
}
/**
 * The base class of all clients to access the Thingpedia API.
 *
 * Accessing the Thingpedia API from Almond occurs in a platform-specific manner,
 * through clients that extend this class.
 */
declare abstract class BaseClient {
    constructor();
    /**
     * The locale to use when querying Thingpedia, as BCP 47 tag.
     */
    abstract get locale(): string;
    abstract getModuleLocation(id: string): Promise<string>;
    abstract getDeviceCode(id: string): Promise<string>;
    abstract getSchemas(kinds: string[], withMetadata?: boolean): Promise<string>;
    abstract getDeviceList(klass?: string, page?: number, page_size?: number): Promise<BaseClient.DeviceListRecord[]>;
    abstract searchDevice(q: string): Promise<BaseClient.DeviceListRecord[]>;
    abstract getDeviceFactories(klass: string): Promise<BaseClient.DeviceFactory[]>;
    abstract getDeviceSetup(kinds: string[]): Promise<{
        [key: string]: BaseClient.DeviceFactory | BaseClient.MultipleDeviceFactory | null;
    }>;
    abstract getKindByDiscovery(publicData: any): Promise<string>;
    abstract getExamplesByKey(key: string): Promise<string>;
    abstract getExamplesByKinds(kinds: string[]): Promise<string>;
    abstract clickExample(exampleId: number): Promise<void>;
    abstract lookupEntity(entityType: string, searchTerm: string): Promise<BaseClient.EntityLookupResult>;
    abstract lookupLocation(searchTerm: string, around?: {
        latitude: number;
        longitude: number;
    }): Promise<BaseClient.LocationRecord[]>;
    abstract getAllExamples(): Promise<string>;
    abstract getAllDeviceNames(): Promise<BaseClient.DeviceNameRecord[]>;
    abstract getAllEntityTypes(): Promise<BaseClient.EntityTypeRecord[]>;
    getMixins(): Promise<{
        [key: string]: BaseClient.MixinDeclaration;
    }>;
    abstract invokeQuery(kind: string, uniqueId: string, query: string, params: Record<string, unknown>, hints: ThingTalk.Runtime.CompiledQueryHints): AsyncIterable<Record<string, unknown>>;
}
export default BaseClient;
