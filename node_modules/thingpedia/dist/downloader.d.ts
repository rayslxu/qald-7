import * as ThingTalk from 'thingtalk';
import type BaseLoader from './loaders/base';
import type BasePlatform from './base_platform';
import type BaseClient from './base_client';
import BaseDevice from './base_device';
declare type BuiltinRegistry = Record<string, {
    class: ThingTalk.Ast.ClassDef;
    module: BaseDevice.DeviceClass<BaseDevice>;
}>;
export default class ModuleDownloader {
    private _platform;
    private _client;
    private _schemas;
    private _builtins;
    private _cacheDir;
    private _moduleRequests;
    constructor(platform: BasePlatform, client: BaseClient, schemas: ThingTalk.SchemaRetriever, builtins?: BuiltinRegistry);
    get platform(): BasePlatform;
    get client(): BaseClient;
    getCachedMetas(): Promise<{
        name: string;
        version: number;
    }[]>;
    updateModule(id: string): Promise<void>;
    getModule(id: string): Promise<BaseLoader>;
    private _getDeveloperDirs;
    private _loadClassInternal;
    private _recursiveLoadParentClasses;
    loadClass(id: string): Promise<readonly [ThingTalk.Ast.ClassDef, Record<string, ThingTalk.Ast.ClassDef>]>;
    injectModule(id: string, module: BaseLoader): void;
    private _doLoadModule;
    private _ensureModuleRequest;
}
export {};
