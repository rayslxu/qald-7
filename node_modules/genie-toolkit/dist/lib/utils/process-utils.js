"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2019 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.execCommand = exports.safeMkdir = exports.safeRmdir = void 0;
const child_process = __importStar(require("child_process"));
const fs_1 = require("fs");
const byline_1 = __importDefault(require("byline"));
async function safeRmdir(dir) {
    try {
        await fs_1.promises.rmdir(dir);
    }
    catch (e) {
        if (e.code !== 'ENOENT')
            throw e;
    }
}
exports.safeRmdir = safeRmdir;
async function safeMkdir(dir) {
    try {
        await fs_1.promises.mkdir(dir);
    }
    catch (e) {
        if (e.code !== 'EEXIST')
            throw e;
    }
}
exports.safeMkdir = safeMkdir;
function execCommand(argv, options = {}, job) {
    return new Promise((resolve, reject) => {
        const stdio = ['ignore',
            job && options.debug ? 'pipe' : options.debug ? 'inherit' : 'ignore',
            job ? 'pipe' : 'inherit'];
        if (options.debug)
            console.log(argv.map((a) => "'" + a + "'").join(' '));
        const [argv0, ...args] = argv;
        const child = child_process.spawn(argv0, args, { stdio, cwd: options.cwd });
        if (job)
            job.child = child;
        child.on('error', reject);
        child.on('exit', (code, signal) => {
            if (job)
                job.child = null;
            if (signal) {
                if (signal === 'SIGINT' || signal === 'SIGTERM')
                    reject(new Error(`Killed`));
                else
                    reject(new Error(`Command crashed with signal ${signal}`));
            }
            else {
                if (code !== 0)
                    reject(new Error(`Command exited with code ${code}`));
                else
                    resolve();
            }
        });
        if (job) {
            if (options.debug) {
                child.stdout.setEncoding('utf-8');
                const stdout = (0, byline_1.default)(child.stdout);
                stdout.on('data', (line) => {
                    if (job.id !== undefined)
                        process.stdout.write(`job ${job.id}: ${line}\n`);
                    else
                        process.stdout.write(line + '\n');
                });
            }
            child.stderr.setEncoding('utf-8');
            const stderr = (0, byline_1.default)(child.stderr);
            stderr.on('data', (line) => {
                if (options.debug) {
                    if (job.id !== undefined)
                        process.stderr.write(`job ${job.id}: ${line}\n`);
                    else
                        process.stderr.write(line + '\n');
                }
                if (options.handleStderr)
                    options.handleStderr(line);
            });
        }
    });
}
exports.execCommand = execCommand;
//# sourceMappingURL=process-utils.js.map