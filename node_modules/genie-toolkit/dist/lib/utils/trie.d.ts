export declare const WILDCARD: {};
declare class TrieNode<K, V, VCombined> {
    private _valueCombine;
    value: VCombined | undefined;
    children: Map<K | typeof WILDCARD, TrieNode<K, V, VCombined>>;
    constructor(valueCombine: (one: VCombined | undefined, two: V) => VCombined);
    iterate(keyPrefix: Array<K | typeof WILDCARD>): Generator<[Array<K | typeof WILDCARD>, VCombined | undefined]>;
    addValue(value: V): void;
    addChild(key: K | typeof WILDCARD): TrieNode<K, V, VCombined>;
    getChild(key: K | typeof WILDCARD, allowWildcard?: boolean): TrieNode<K, V, VCombined> | undefined;
}
/**
  A simple Trie-based key-value store.
*/
export default class Trie<K, V, VCombined> {
    root: TrieNode<K, V, VCombined>;
    constructor(valueCombine: (one: VCombined | undefined, two: V) => VCombined);
    [Symbol.iterator](): Iterator<[Array<K | typeof WILDCARD>, VCombined | undefined]>;
    insert(sequence: Array<K | typeof WILDCARD>, value: V): void;
    search(sequence: K[]): VCombined | undefined;
}
export {};
