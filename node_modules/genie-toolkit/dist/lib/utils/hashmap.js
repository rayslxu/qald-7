"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2021 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
Object.defineProperty(exports, "__esModule", { value: true });
exports.HashMultiMap = exports.HashMap = void 0;
/**
 * An implementation of the standard Map interface that supports custom
 * hashable objects.
 */
class HashMap {
    constructor(iterable) {
        this.store = new Map;
        this._size = 0;
        if (iterable) {
            for (const [key, value] of iterable)
                this.set(key, value);
        }
    }
    get size() {
        return this._size;
    }
    _hash(key) {
        if (typeof key === 'object' && key !== null)
            return key.hash();
        else
            return key;
    }
    _equals(key1, key2) {
        if (typeof key1 === 'object' && key1 !== null)
            return key1.equals(key2);
        else
            return key1 === key2;
    }
    get(key) {
        const bucket = this.store.get(this._hash(key));
        if (!bucket)
            return undefined;
        for (const node of bucket) {
            if (this._equals(node.key, key))
                return node.value;
        }
        return undefined;
    }
    has(key) {
        const bucket = this.store.get(this._hash(key));
        if (!bucket)
            return false;
        for (const node of bucket) {
            if (this._equals(node.key, key))
                return true;
        }
        return false;
    }
    set(key, value) {
        const hash = this._hash(key);
        const bucket = this.store.get(hash);
        if (bucket) {
            for (const node of bucket) {
                if (this._equals(node.key, key)) {
                    node.value = value;
                    return this;
                }
            }
            bucket.push({ key, value });
            this._size++;
        }
        else {
            this.store.set(hash, [{ key, value }]);
            this._size++;
        }
        return this;
    }
    delete(key) {
        const hash = this._hash(key);
        const bucket = this.store.get(hash);
        if (bucket) {
            let found = false;
            this.store.set(hash, bucket.filter((node) => {
                if (this._equals(node.key, key)) {
                    found = true;
                    return false;
                }
                else {
                    return true;
                }
            }));
            if (found)
                this._size--;
            return found;
        }
        else {
            return false;
        }
    }
    clear() {
        this.store.clear();
        this._size = 0;
    }
    *entries() {
        for (const bucket of this.store.values()) {
            for (const node of bucket)
                yield [node.key, node.value];
        }
    }
    forEach(cb, thisArg) {
        for (const [key, value] of this)
            cb.call(thisArg, value, key, this);
    }
    [Symbol.iterator]() {
        return this.entries();
    }
    *keys() {
        for (const [key,] of this)
            yield key;
    }
    *values() {
        for (const [, value] of this)
            yield value;
    }
}
exports.HashMap = HashMap;
/**
 * A variant of HashMap that allows multiple values per key.
 */
class HashMultiMap {
    constructor(elements = []) {
        this._storage = new HashMap;
        this._size = 0;
        for (const [key, value] of elements)
            this.put(key, value);
    }
    keys() {
        return this._storage.keys();
    }
    *values() {
        for (const [, value] of this)
            yield value;
    }
    *[Symbol.iterator]() {
        for (const [key, array] of this._storage) {
            for (const value of array)
                yield [key, value];
        }
    }
    entries() {
        return this[Symbol.iterator]();
    }
    get size() {
        return this._size;
    }
    clear() {
        this._storage.clear();
        this._size = 0;
    }
    delete(key) {
        const len = (this._storage.get(key) || []).length;
        this._size -= len;
        this._storage.delete(key);
    }
    deleteValue(key, value) {
        const old = this._storage.get(key);
        if (!old)
            return;
        const index = old.indexOf(value);
        if (index < 0)
            return;
        // fast unsorted splice
        if (index === old.length - 1) {
            old.pop();
        }
        else {
            const last = old.pop();
            old[index] = last;
        }
        this._size -= 1;
    }
    forEach(callback, thisArg) {
        this._storage.forEach((valueArray, key) => {
            valueArray.forEach((value) => callback.call(thisArg, value, key, this));
        });
    }
    get(key) {
        return this._storage.get(key) || [];
    }
    has(key) {
        return this._storage.has(key);
    }
    put(key, value) {
        let valueArray = this._storage.get(key);
        if (!valueArray) {
            valueArray = [];
            this._storage.set(key, valueArray);
        }
        valueArray.push(value);
        this._size++;
        return valueArray.length;
    }
}
exports.HashMultiMap = HashMultiMap;
//# sourceMappingURL=hashmap.js.map