"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const stream_1 = __importDefault(require("stream"));
const worker_threads_1 = require("worker_threads");
(async function main() {
    const worker = (await Promise.resolve().then(() => __importStar(require(worker_threads_1.workerData.workerPath)))).default;
    const stream = await worker(worker_threads_1.workerData.args, worker_threads_1.workerData.shard);
    const input = new stream_1.default.Readable({
        objectMode: true,
        read() { }
    });
    worker_threads_1.parentPort.on('message', (msg) => {
        if (msg.data)
            input.push(msg.data);
        else if (msg.end)
            input.push(null);
        else
            throw new Error('unrecognized message: ' + JSON.stringify(msg));
    });
    const output = new stream_1.default.Writable({
        objectMode: true,
        write(data, encoding, callback) {
            worker_threads_1.parentPort.postMessage({ data, end: false });
            callback();
        },
        final(callback) {
            worker_threads_1.parentPort.postMessage({ data: undefined, end: true });
            process.nextTick(() => {
                worker_threads_1.parentPort.close();
                callback();
            });
        }
    });
    input.pipe(stream).pipe(output);
})();
//# sourceMappingURL=parallelize-worker.js.map