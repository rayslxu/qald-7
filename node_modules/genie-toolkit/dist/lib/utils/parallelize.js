"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const stream_1 = __importDefault(require("stream"));
let Worker;
try {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    Worker = require('worker_threads').Worker;
}
catch (e) {
    Worker = null;
}
async function singleparallelize(workerPath, args) {
    const worker = (await Promise.resolve().then(() => __importStar(require(workerPath)))).default;
    return worker(args, 0);
}
function parallelize(N, workerPath, args) {
    if (N <= 0)
        N = 1;
    if (N === 1 || Worker === null) {
        if (N !== 1)
            console.error('Worker thread support not available, falling back to single-threaded execution');
        return singleparallelize(workerPath, args);
    }
    const workers = [];
    for (let i = 0; i < N; i++) {
        workers.push(new Worker(require.resolve('./parallelize-worker'), {
            workerData: { args, workerPath, shard: i },
        }));
    }
    // round robin
    let rr = 0;
    const stream = new stream_1.default.Duplex({
        objectMode: true,
        read() { },
        write(data, encoding, callback) {
            workers[rr].postMessage({ data, end: false });
            rr = (rr + 1) % N;
            callback();
        },
        final(callback) {
            for (const worker of workers)
                worker.postMessage({ data: undefined, end: true });
            callback();
        }
    });
    let waitCount = N;
    for (const worker of workers) {
        worker.on('message', (msg) => {
            if (msg.data) {
                stream.push(msg.data);
            }
            else if (msg.end) {
                waitCount--;
                if (waitCount === 0)
                    stream.push(null);
            }
            else {
                throw new Error('unrecognized message: ' + JSON.stringify(msg));
            }
        });
        worker.on('error', (e) => {
            stream.emit('error', e);
        });
    }
    return stream;
}
exports.default = parallelize;
//# sourceMappingURL=parallelize.js.map