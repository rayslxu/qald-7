/// <reference types="node" />
import * as Tp from 'thingpedia';
import * as events from 'events';
import type Conversation from '../dialogue-agent/conversation';
interface SpeechHandlerOptions {
    nlUrl?: string;
}
export default class SpeechHandler extends events.EventEmitter {
    private _platform;
    private _prefs;
    private _conversation;
    private _pulse;
    private _wakeWordDetector;
    private _voiceDetector;
    private _systemLock;
    private _recognizer;
    private _tts;
    private _currentRequest;
    private _started;
    private _enableVoiceInput;
    private _enableVoiceOutput;
    private _stream;
    private _audioController;
    private _queuedAudio;
    private _player;
    constructor(conversation: Conversation, platform: Tp.BasePlatform, options?: SpeechHandlerOptions);
    setVoiceInput(enable: boolean): void;
    setVoiceOutput(enable: boolean): void;
    setHypothesis(): Promise<void>;
    addDevice(): Promise<void>;
    waitFinishSpeaking(): Promise<void>;
    setExpected(expect: string): Promise<void>;
    addMessage(message: any): Promise<void>;
    /**
     * Programmatically trigger a wakeword.
     *
     * This can be used to emulate a wakeword with a push button.
     */
    wakeword(): void;
    private _onDetected;
    private _onError;
    start(): void;
    private _startVoiceInput;
    destroy(): void;
    private _stopVoiceInput;
}
export {};
