/// <reference types="node" />
import * as Tp from 'thingpedia';
import * as events from 'events';
import * as Stream from 'stream';
import WebSocket from 'ws';
declare class SpeechRequest extends Stream.Writable {
    private _stream;
    private _endDetected;
    private _ended;
    private _started;
    private _vad;
    private consecutiveSilence;
    private silenceThreshold;
    private _bufferedMessages;
    private _piped;
    private _endTimeout;
    private _connection;
    private _listener;
    constructor(stream: Stream.Readable, initialBuffer: Buffer, vad: Tp.Capabilities.VadApi | null);
    start(connection: WebSocket): void;
    _finish(callback: () => void): void;
    end(): void;
    _handleMessage(msg: Buffer): void;
    _write(chunk: Buffer, encoding: BufferEncoding, callback: (err?: Error) => void): void;
}
export interface SpeechRecognizerOptions {
    locale?: string;
    nlUrl?: string;
    vad?: Tp.Capabilities.VadApi | null;
}
export default class SpeechRecognizer extends events.EventEmitter {
    private _language;
    private _baseUrl;
    private _connection;
    private _vad;
    constructor(options?: SpeechRecognizerOptions);
    close(): void;
    _doConnect(): Promise<unknown>;
    _ensureConnection(): Promise<unknown>;
    request(stream: Stream.Readable, initialBuffer: Buffer): SpeechRequest;
}
export {};
