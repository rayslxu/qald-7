"use strict";
// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$load = exports.n_clean_info_phrase = exports.n_which_info_phrase = exports.n_with_info_phrase = exports.three_clean_info_phrase = exports.three_which_info_phrase = exports.three_with_info_phrase = exports.two_clean_info_phrase = exports.two_which_info_phrase = exports.two_with_info_phrase = exports.one_clean_info_phrase = exports.one_which_info_phrase = exports.one_with_info_phrase = exports.equal_with_filter = exports.base_result_phrase = exports.result_info_phrase = exports.four_param_direct_result_info_phrase = exports.three_param_direct_result_info_phrase = exports.two_param_direct_result_info_phrase = exports.one_param_direct_result_info_phrase = exports.direct_result_info_phrase = exports.direct_answer_phrase_3 = exports.direct_answer_phrase_2 = exports.direct_answer_phrase_1 = exports.direct_answer_phrase_0 = exports.direct_answer_phrase = void 0;
// Templates that describe results from a query
const $runtime = __importStar(require("../../sentence-generator/runtime"));
const assert_1 = __importDefault(require("assert"));
const thingtalk_1 = require("thingtalk");
const C = __importStar(require("../ast_manip"));
const D = __importStar(require("../dialogue_acts"));
const slot_bag_1 = require("../slot_bag");
exports.direct_answer_phrase = "direct_answer_phrase";
exports.direct_answer_phrase_0 = "direct_answer_phrase_0";
exports.direct_answer_phrase_1 = "direct_answer_phrase_1";
exports.direct_answer_phrase_2 = "direct_answer_phrase_2";
exports.direct_answer_phrase_3 = "direct_answer_phrase_3";
exports.direct_result_info_phrase = "direct_result_info_phrase";
exports.one_param_direct_result_info_phrase = "one_param_direct_result_info_phrase";
exports.two_param_direct_result_info_phrase = "two_param_direct_result_info_phrase";
exports.three_param_direct_result_info_phrase = "three_param_direct_result_info_phrase";
exports.four_param_direct_result_info_phrase = "four_param_direct_result_info_phrase";
exports.result_info_phrase = "result_info_phrase";
exports.base_result_phrase = "base_result_phrase";
exports.equal_with_filter = "equal_with_filter";
exports.one_with_info_phrase = "one_with_info_phrase";
exports.one_which_info_phrase = "one_which_info_phrase";
exports.one_clean_info_phrase = "one_clean_info_phrase";
exports.two_with_info_phrase = "two_with_info_phrase";
exports.two_which_info_phrase = "two_which_info_phrase";
exports.two_clean_info_phrase = "two_clean_info_phrase";
exports.three_with_info_phrase = "three_with_info_phrase";
exports.three_which_info_phrase = "three_which_info_phrase";
exports.three_clean_info_phrase = "three_clean_info_phrase";
exports.n_with_info_phrase = "n_with_info_phrase";
exports.n_which_info_phrase = "n_which_info_phrase";
exports.n_clean_info_phrase = "n_clean_info_phrase";
/**
 * Load the templates in this file.
 *
 * This is an autogenerated method that will be called by the {@link SentenceGenerator}
 * when the templates are imported.
 */
async function $load($options, $locale, $grammar, $loader) {
    $grammar.declareSymbol("direct_answer_phrase");
    $grammar.addRule("direct_answer_phrase", [new $runtime.NonTerminal("ctx_result_name", "name", undefined), new $runtime.NonTerminal("result_info_phrase", "info", undefined)], $locale._("${name} is a ${info[plural=one]}"), ((name, info) => D.checkDirectAnswerPhrase(info, name.name)), D.directAnswerPhraseKeyFn, {});
    $grammar.addRule("direct_answer_phrase", [new $runtime.NonTerminal("ctx_result_name", "name", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName", 0, "currentFunction"])], $locale._("${name} ${filter[plural=one]}"), ((name, filter) => D.makeFilterStyleDirectAnswerPhrase(name.ctx, name.name, filter)), D.directAnswerPhraseKeyFn, { priority: (1.1) });
    $grammar.addRule("direct_answer_phrase", [new $runtime.NonTerminal("ctx_result_name", "name", undefined), new $runtime.NonTerminal("pvp_filter", "filter", ["functionName", 0, "currentFunction"])], $locale._("${name} is ${filter[plural=one]}"), ((name, filter) => D.makeFilterStyleDirectAnswerPhrase(name.ctx, name.name, filter)), D.directAnswerPhraseKeyFn, { priority: (1.1) });
    $grammar.addRule("direct_answer_phrase", [new $runtime.NonTerminal("ctx_result_name", "name", undefined), new $runtime.NonTerminal("preposition_filter", "filter", ["functionName", 0, "currentFunction"])], $locale._("${name} is ${filter[plural=one]}"), ((name, filter) => D.makeFilterStyleDirectAnswerPhrase(name.ctx, name.name, filter)), D.directAnswerPhraseKeyFn, { priority: (1) });
    $grammar.addRule("direct_answer_phrase", [new $runtime.NonTerminal("ctx_result_name", "name", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName", 0, "currentFunction"])], $locale._("${name} is ${filter[plural=one]}"), ((name, filter) => D.makeFilterStyleDirectAnswerPhrase(name.ctx, name.name, filter)), D.directAnswerPhraseKeyFn, { priority: (0.1) });
    $grammar.addRule("direct_answer_phrase", [new $runtime.NonTerminal("ctx_result_name", "name", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName", 0, "currentFunction"])], $locale._("${name} has ${filter[plural=one]}"), ((name, filter) => D.makeFilterStyleDirectAnswerPhrase(name.ctx, name.name, filter)), D.directAnswerPhraseKeyFn, { priority: (1.1) });
    $grammar.declareSymbol("direct_answer_phrase_0");
    $grammar.addRule("direct_answer_phrase_0", [new $runtime.NonTerminal("direct_answer_phrase", undefined, ["index", (0)])], "${direct_answer_phrase}", (($0) => { return $0; }), D.directAnswerPhraseKeyFn, { identity: (true) });
    $grammar.declareSymbol("direct_answer_phrase_1");
    $grammar.addRule("direct_answer_phrase_1", [new $runtime.NonTerminal("direct_answer_phrase", undefined, ["index", (1)])], "${direct_answer_phrase}", (($0) => { return $0; }), D.directAnswerPhraseKeyFn, { identity: (true) });
    $grammar.declareSymbol("direct_answer_phrase_2");
    $grammar.addRule("direct_answer_phrase_2", [new $runtime.NonTerminal("direct_answer_phrase", undefined, ["index", (2)])], "${direct_answer_phrase}", (($0) => { return $0; }), D.directAnswerPhraseKeyFn, { identity: (true) });
    $grammar.declareSymbol("direct_answer_phrase_3");
    $grammar.addRule("direct_answer_phrase_3", [new $runtime.NonTerminal("direct_answer_phrase", undefined, ["index", (3)])], "${direct_answer_phrase}", (($0) => { return $0; }), D.directAnswerPhraseKeyFn, { identity: (true) });
    $grammar.declareSymbol("direct_result_info_phrase");
    $grammar.addRule("direct_result_info_phrase", [new $runtime.NonTerminal("one_param_direct_result_info_phrase", undefined, undefined)], "${one_param_direct_result_info_phrase}", (($0) => { return $0; }), D.resultPhraseKeyFn, { identity: (true) });
    $grammar.addRule("direct_result_info_phrase", [new $runtime.NonTerminal("two_param_direct_result_info_phrase", undefined, undefined)], "${two_param_direct_result_info_phrase}", (($0) => { return $0; }), D.resultPhraseKeyFn, { identity: (true) });
    $grammar.addRule("direct_result_info_phrase", [new $runtime.NonTerminal("three_param_direct_result_info_phrase", undefined, undefined)], "${three_param_direct_result_info_phrase}", (($0) => { return $0; }), D.resultPhraseKeyFn, { identity: (true) });
    if ($options.flags.long_projections) {
        $grammar.addRule("direct_result_info_phrase", [new $runtime.NonTerminal("four_param_direct_result_info_phrase", undefined, undefined)], "${four_param_direct_result_info_phrase}", (($0) => { return $0; }), D.resultPhraseKeyFn, { identity: (true) });
    }
    $grammar.declareSymbol("one_param_direct_result_info_phrase");
    $grammar.addRule("one_param_direct_result_info_phrase", [new $runtime.NonTerminal("ctx_with_result", "ctx", undefined), new $runtime.NonTerminal("out_param_Any", "param", ["functionName", 0, "currentFunction"]), new $runtime.NonTerminal("constant_Any", "v", ["type", 1, "type"])], $locale._("the ${param} is ${v}"), ((ctx, param, v) => {
        (0, assert_1.default)(param.type.equals(v.getType()));
        const bag = new slot_bag_1.SlotBag(param.schema);
        bag.set(param.name, v);
        return D.makeResultPhrase(ctx, bag);
    }), D.resultPhraseKeyFn, {});
    $grammar.addRule("one_param_direct_result_info_phrase", [new $runtime.NonTerminal("ctx_with_result", "ctx", undefined), new $runtime.NonTerminal("out_param_Any", "param", ["functionName", 0, "currentFunction"]), new $runtime.NonTerminal("constant_Any", "v", ["type", 1, "elem"])], $locale._("the ${param} is ${v}"), ((ctx, param, v) => {
        const bag = new slot_bag_1.SlotBag(param.schema);
        bag.set(param.name, new thingtalk_1.Ast.Value.Array([v]));
        return D.makeResultPhrase(ctx, bag);
    }), D.resultPhraseKeyFn, {});
    $grammar.addRule("one_param_direct_result_info_phrase", [new $runtime.NonTerminal("ctx_with_result", "ctx", undefined), new $runtime.NonTerminal("out_param_Any", "param", ["functionName", 0, "currentFunction"]), new $runtime.NonTerminal("constant_pairs", "pair", ["type", 1, "elem"]), new $runtime.NonTerminal("constant_Any", "v1", ["type", 1, "elem"])], $locale._("the ${param} are ${pair}"), ((ctx, param, pair, v1) => {
        const bag = new slot_bag_1.SlotBag(param.schema);
        bag.set(param.name, new thingtalk_1.Ast.Value.Array(pair));
        return D.makeResultPhrase(ctx, bag);
    }), D.resultPhraseKeyFn, {});
    $grammar.addRule("one_param_direct_result_info_phrase", [new $runtime.NonTerminal("ctx_with_result", "ctx", undefined), new $runtime.NonTerminal("constant_Measure_m", "v", undefined)], $locale._("the distance is ${v}"), ((ctx, v) => {
        const bag = new slot_bag_1.SlotBag(null);
        bag.set('distance', v);
        return D.makeResultPhrase(ctx, bag);
    }), D.resultPhraseKeyFn, {});
    $grammar.declareSymbol("two_param_direct_result_info_phrase");
    $grammar.addRule("two_param_direct_result_info_phrase", [new $runtime.NonTerminal("one_param_direct_result_info_phrase", "b1", undefined), new $runtime.NonTerminal("one_param_direct_result_info_phrase", "b2", undefined)], $locale._("${b1} and ${b2}"), ((b1, b2) => D.mergeResultPhrase(b1, b2)), D.resultPhraseKeyFn, {});
    $grammar.declareSymbol("three_param_direct_result_info_phrase");
    $grammar.addRule("three_param_direct_result_info_phrase", [new $runtime.NonTerminal("one_param_direct_result_info_phrase", "b1", undefined), new $runtime.NonTerminal("two_param_direct_result_info_phrase", "b2", undefined)], $locale._("${b1}, ${b2}"), ((b1, b2) => D.mergeResultPhrase(b1, b2)), D.resultPhraseKeyFn, {});
    $grammar.declareSymbol("four_param_direct_result_info_phrase");
    $grammar.addRule("four_param_direct_result_info_phrase", [new $runtime.NonTerminal("one_param_direct_result_info_phrase", "b1", undefined), new $runtime.NonTerminal("one_param_direct_result_info_phrase", "b2", undefined), new $runtime.NonTerminal("two_param_direct_result_info_phrase", "b3", undefined)], $locale._("${b1}, ${b2}, ${b3}"), ((b1, b2, b3) => {
        const b12 = D.mergeResultPhrase(b1, b2);
        if (b12 === null)
            return null;
        return D.mergeResultPhrase(b12, b3);
    }), D.resultPhraseKeyFn, {});
    $grammar.declareSymbol("result_info_phrase");
    $grammar.addRule("result_info_phrase", [new $runtime.NonTerminal("one_with_info_phrase", undefined, undefined)], "${one_with_info_phrase}", (($0) => { return $0; }), D.resultPhraseKeyFn, { weight: (0.33 * 2), priority: (1), identity: (true) });
    $grammar.addRule("result_info_phrase", [new $runtime.NonTerminal("one_which_info_phrase", undefined, undefined)], "${one_which_info_phrase}", (($0) => { return $0; }), D.resultPhraseKeyFn, { weight: (0.33 * 2), priority: (1), identity: (true) });
    $grammar.addRule("result_info_phrase", [new $runtime.NonTerminal("one_clean_info_phrase", undefined, undefined)], "${one_clean_info_phrase}", (($0) => { return $0; }), D.resultPhraseKeyFn, { weight: (0.33 * 2), priority: (1), identity: (true) });
    $grammar.addRule("result_info_phrase", [new $runtime.NonTerminal("two_with_info_phrase", undefined, undefined)], "${two_with_info_phrase}", (($0) => { return $0; }), D.resultPhraseKeyFn, { weight: (0.33), priority: (2), identity: (true) });
    $grammar.addRule("result_info_phrase", [new $runtime.NonTerminal("two_which_info_phrase", undefined, undefined)], "${two_which_info_phrase}", (($0) => { return $0; }), D.resultPhraseKeyFn, { weight: (0.33), priority: (2), identity: (true) });
    $grammar.addRule("result_info_phrase", [new $runtime.NonTerminal("two_clean_info_phrase", undefined, undefined)], "${two_clean_info_phrase}", (($0) => { return $0; }), D.resultPhraseKeyFn, { weight: (0.33), priority: (2), identity: (true) });
    if (!$options.flags.inference) {
        $grammar.addRule("result_info_phrase", [new $runtime.NonTerminal("three_with_info_phrase", undefined, undefined)], "${three_with_info_phrase}", (($0) => { return $0; }), D.resultPhraseKeyFn, { weight: (0.33 * 0.5), identity: (true) });
        $grammar.addRule("result_info_phrase", [new $runtime.NonTerminal("three_which_info_phrase", undefined, undefined)], "${three_which_info_phrase}", (($0) => { return $0; }), D.resultPhraseKeyFn, { weight: (0.33 * 0.5), identity: (true) });
        $grammar.addRule("result_info_phrase", [new $runtime.NonTerminal("three_clean_info_phrase", undefined, undefined)], "${three_clean_info_phrase}", (($0) => { return $0; }), D.resultPhraseKeyFn, { weight: (0.33 * 0.5), identity: (true) });
    }
    if ($options.flags.long_projections) {
        $grammar.addRule("result_info_phrase", [new $runtime.NonTerminal("n_with_info_phrase", undefined, undefined)], "${n_with_info_phrase}", (($0) => { return $0; }), D.resultPhraseKeyFn, { identity: (true) });
        $grammar.addRule("result_info_phrase", [new $runtime.NonTerminal("n_with_info_phrase", undefined, undefined)], "${n_with_info_phrase}", (($0) => { return $0; }), D.resultPhraseKeyFn, { identity: (true) });
        $grammar.addRule("result_info_phrase", [new $runtime.NonTerminal("n_with_info_phrase", undefined, undefined)], "${n_with_info_phrase}", (($0) => { return $0; }), D.resultPhraseKeyFn, { identity: (true) });
    }
    $grammar.declareSymbol("base_result_phrase");
    $grammar.addRule("base_result_phrase", [new $runtime.NonTerminal("ctx_with_result", "ctx", undefined), new $runtime.NonTerminal("base_table", "table", ["functionName", 0, "currentFunction"])], $locale._("${table}"), ((ctx, table) => {
        (0, assert_1.default)(table.schema instanceof thingtalk_1.Ast.FunctionDef);
        return D.makeResultPhrase(ctx, new slot_bag_1.SlotBag(table.schema));
    }), D.resultPhraseKeyFn, {});
    $grammar.declareSymbol("equal_with_filter");
    $grammar.addRule("equal_with_filter", [new $runtime.NonTerminal("out_param_Any", "p", undefined), new $runtime.NonTerminal("constant_Any", "x", ["type", 0, "type"])], $locale._("the ${p} equal to ${x}"), ((p, x) => C.makeFilter($loader, p, '==', x)), C.filterKeyFn, {});
    $grammar.declareSymbol("one_with_info_phrase");
    $grammar.addRule("one_with_info_phrase", [new $runtime.NonTerminal("base_result_phrase", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {with|having} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("one_with_info_phrase", [new $runtime.NonTerminal("base_result_phrase", "table", undefined), new $runtime.NonTerminal("equal_with_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {with|having} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.declareSymbol("one_which_info_phrase");
    $grammar.addRule("one_which_info_phrase", [new $runtime.NonTerminal("base_result_phrase", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("one_which_info_phrase", [new $runtime.NonTerminal("base_result_phrase", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} ${table[plural]:select:one{${filter[plural=one]}}other{${filter[plural=other]}}} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("one_which_info_phrase", [new $runtime.NonTerminal("base_result_phrase", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, { priority: (-0.1) });
    $grammar.addRule("one_which_info_phrase", [new $runtime.NonTerminal("base_result_phrase", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.declareSymbol("one_clean_info_phrase");
    $grammar.addRule("one_clean_info_phrase", [new $runtime.NonTerminal("base_result_phrase", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${filter} ${table} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("one_clean_info_phrase", [new $runtime.NonTerminal("base_result_phrase", "table", undefined), new $runtime.NonTerminal("pvp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("one_clean_info_phrase", [new $runtime.NonTerminal("base_result_phrase", "table", undefined), new $runtime.NonTerminal("preposition_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.declareSymbol("two_with_info_phrase");
    $grammar.addRule("two_with_info_phrase", [new $runtime.NonTerminal("one_with_info_phrase", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} and ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("two_with_info_phrase", [new $runtime.NonTerminal("one_with_info_phrase", "table", undefined), new $runtime.NonTerminal("equal_with_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} and ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("two_with_info_phrase", [new $runtime.NonTerminal("one_which_info_phrase", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {and having|and with|, with} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("two_with_info_phrase", [new $runtime.NonTerminal("one_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {with|having} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.declareSymbol("two_which_info_phrase");
    $grammar.addRule("two_which_info_phrase", [new $runtime.NonTerminal("one_with_info_phrase", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("two_which_info_phrase", [new $runtime.NonTerminal("one_with_info_phrase", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} ${table[plural]:select:one{${filter[plural=one]}}other{${filter[plural=other]}}} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("two_which_info_phrase", [new $runtime.NonTerminal("one_with_info_phrase", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, { priority: (-0.1) });
    $grammar.addRule("two_which_info_phrase", [new $runtime.NonTerminal("one_with_info_phrase", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("two_which_info_phrase", [new $runtime.NonTerminal("one_which_info_phrase", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} and ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("two_which_info_phrase", [new $runtime.NonTerminal("one_which_info_phrase", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} and ${table[plural]:select:one{${filter[plural=one]}}other{${filter[plural=other]}}} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("two_which_info_phrase", [new $runtime.NonTerminal("one_which_info_phrase", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} and ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, { priority: (-0.1) });
    $grammar.addRule("two_which_info_phrase", [new $runtime.NonTerminal("one_which_info_phrase", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} and ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("two_which_info_phrase", [new $runtime.NonTerminal("one_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("two_which_info_phrase", [new $runtime.NonTerminal("one_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} ${table[plural]:select:one{${filter[plural=one]}}other{${filter[plural=other]}}} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("two_which_info_phrase", [new $runtime.NonTerminal("one_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, { priority: (-0.1) });
    $grammar.addRule("two_which_info_phrase", [new $runtime.NonTerminal("one_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.declareSymbol("two_clean_info_phrase");
    $grammar.addRule("two_clean_info_phrase", [new $runtime.NonTerminal("one_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${filter} ${table} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("two_clean_info_phrase", [new $runtime.NonTerminal("one_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("pvp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("two_clean_info_phrase", [new $runtime.NonTerminal("one_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("preposition_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.declareSymbol("three_with_info_phrase");
    $grammar.addRule("three_with_info_phrase", [new $runtime.NonTerminal("two_with_info_phrase", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} and ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("three_with_info_phrase", [new $runtime.NonTerminal("two_with_info_phrase", "table", undefined), new $runtime.NonTerminal("equal_with_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} and ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("three_with_info_phrase", [new $runtime.NonTerminal("two_which_info_phrase", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {and having|and with|, with} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("three_with_info_phrase", [new $runtime.NonTerminal("two_which_info_phrase", "table", undefined), new $runtime.NonTerminal("equal_with_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {and having|and with|, with} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("three_with_info_phrase", [new $runtime.NonTerminal("two_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {with|having} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("three_with_info_phrase", [new $runtime.NonTerminal("two_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("equal_with_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {with|having} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.declareSymbol("three_which_info_phrase");
    $grammar.addRule("three_which_info_phrase", [new $runtime.NonTerminal("two_with_info_phrase", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("three_which_info_phrase", [new $runtime.NonTerminal("two_with_info_phrase", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} ${table[plural]:select:one{${filter[plural=one]}}other{${filter[plural=other]}}} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("three_which_info_phrase", [new $runtime.NonTerminal("two_with_info_phrase", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, { priority: (-0.1) });
    $grammar.addRule("three_which_info_phrase", [new $runtime.NonTerminal("two_with_info_phrase", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("three_which_info_phrase", [new $runtime.NonTerminal("two_which_info_phrase", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} and ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("three_which_info_phrase", [new $runtime.NonTerminal("two_which_info_phrase", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} and ${table[plural]:select:one{${filter[plural=one]}}other{${filter[plural=other]}}} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("three_which_info_phrase", [new $runtime.NonTerminal("two_which_info_phrase", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} and ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, { priority: (-0.1) });
    $grammar.addRule("three_which_info_phrase", [new $runtime.NonTerminal("two_which_info_phrase", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} and ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("three_which_info_phrase", [new $runtime.NonTerminal("two_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("three_which_info_phrase", [new $runtime.NonTerminal("two_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} ${table[plural]:select:one{${filter[plural=one]}}other{${filter[plural=other]}}} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("three_which_info_phrase", [new $runtime.NonTerminal("two_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, { priority: (-0.1) });
    $grammar.addRule("three_which_info_phrase", [new $runtime.NonTerminal("two_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.declareSymbol("three_clean_info_phrase");
    $grammar.addRule("three_clean_info_phrase", [new $runtime.NonTerminal("two_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${filter} ${table} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("three_clean_info_phrase", [new $runtime.NonTerminal("two_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("pvp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("three_clean_info_phrase", [new $runtime.NonTerminal("two_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("preposition_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.declareSymbol("n_with_info_phrase");
    $grammar.addRule("n_with_info_phrase", [new $runtime.NonTerminal("one_with_info_phrase", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} and ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("n_with_info_phrase", [new $runtime.NonTerminal("one_with_info_phrase", "table", undefined), new $runtime.NonTerminal("equal_with_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} and ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("n_with_info_phrase", [new $runtime.NonTerminal("one_which_info_phrase", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {and having|and with|, with} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("n_with_info_phrase", [new $runtime.NonTerminal("one_which_info_phrase", "table", undefined), new $runtime.NonTerminal("equal_with_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {and having|and with|, with} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("n_with_info_phrase", [new $runtime.NonTerminal("one_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {with|having} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("n_with_info_phrase", [new $runtime.NonTerminal("one_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("equal_with_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {with|having} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("n_with_info_phrase", [new $runtime.NonTerminal("n_with_info_phrase", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} and ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("n_with_info_phrase", [new $runtime.NonTerminal("n_with_info_phrase", "table", undefined), new $runtime.NonTerminal("equal_with_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} and ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("n_with_info_phrase", [new $runtime.NonTerminal("n_which_info_phrase", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {and having|and with|, with} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("n_with_info_phrase", [new $runtime.NonTerminal("n_which_info_phrase", "table", undefined), new $runtime.NonTerminal("equal_with_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {and having|and with|, with} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("n_with_info_phrase", [new $runtime.NonTerminal("n_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {with|having} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("n_with_info_phrase", [new $runtime.NonTerminal("n_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("equal_with_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {with|having} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.declareSymbol("n_which_info_phrase");
    $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("one_with_info_phrase", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("one_with_info_phrase", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} ${table[plural]:select:one{${filter[plural=one]}}other{${filter[plural=other]}}} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("one_with_info_phrase", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, { priority: (-0.1) });
    $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("one_with_info_phrase", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("one_which_info_phrase", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} and ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("one_which_info_phrase", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} and ${table[plural]:select:one{${filter[plural=one]}}other{${filter[plural=other]}}} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("one_which_info_phrase", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} and ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, { priority: (-0.1) });
    $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("one_which_info_phrase", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} and ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("one_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("one_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} ${table[plural]:select:one{${filter[plural=one]}}other{${filter[plural=other]}}} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("one_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, { priority: (-0.1) });
    $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("one_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("n_with_info_phrase", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("n_with_info_phrase", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} ${table[plural]:select:one{${filter[plural=one]}}other{${filter[plural=other]}}} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("n_with_info_phrase", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, { priority: (-0.1) });
    $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("n_with_info_phrase", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("n_which_info_phrase", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} and ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("n_which_info_phrase", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} and ${table[plural]:select:one{${filter[plural=one]}}other{${filter[plural=other]}}} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("n_which_info_phrase", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} and ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, { priority: (-0.1) });
    $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("n_which_info_phrase", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} and ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("n_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("n_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} ${table[plural]:select:one{${filter[plural=one]}}other{${filter[plural=other]}}} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("n_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, { priority: (-0.1) });
    $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("n_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.declareSymbol("n_clean_info_phrase");
    $grammar.addRule("n_clean_info_phrase", [new $runtime.NonTerminal("one_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${filter} ${table} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("n_clean_info_phrase", [new $runtime.NonTerminal("one_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("pvp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("n_clean_info_phrase", [new $runtime.NonTerminal("one_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("preposition_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("n_clean_info_phrase", [new $runtime.NonTerminal("n_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${filter} ${table} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("n_clean_info_phrase", [new $runtime.NonTerminal("n_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("pvp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
    $grammar.addRule("n_clean_info_phrase", [new $runtime.NonTerminal("n_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("preposition_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} ${filter} [plural=table[plural]]"), ((table, filter) => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {});
}
exports.$load = $load;
;
//# sourceMappingURL=results.genie.out.js.map