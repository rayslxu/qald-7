"use strict";
// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$load = exports.negative_proposal_reply = exports.negative_proposal_answer_preamble = exports.negative_proposal_request = exports.system_generic_proposal = exports.search_result_preamble = void 0;
// Refinement templates: the search is NOT complete (0, or more than 1 result), and the
// agent doesn't want to show results
//
// These include proposals, and empty search errors.
// A proposal is when the agent proposed a refined search; the user answers:
// - some form of "yes"
// - some form of "no" followed by another search refinement
const $runtime = __importStar(require("../../sentence-generator/runtime"));
const C = __importStar(require("../ast_manip"));
const D = __importStar(require("../dialogue_acts"));
const S = __importStar(require("../state_manip"));
exports.search_result_preamble = "search_result_preamble";
exports.system_generic_proposal = "system_generic_proposal";
exports.negative_proposal_request = "negative_proposal_request";
exports.negative_proposal_answer_preamble = "negative_proposal_answer_preamble";
exports.negative_proposal_reply = "negative_proposal_reply";
/**
 * Load the templates in this file.
 *
 * This is an autogenerated method that will be called by the {@link SentenceGenerator}
 * when the templates are imported.
 */
async function $load($options, $locale, $grammar, $loader) {
    $grammar.declareSymbol("search_result_preamble");
    $grammar.addRule("search_result_preamble", [new $runtime.NonTerminal("ctx_search_command", "ctx", undefined), new $runtime.NonTerminal("base_noun_phrase", "base", ["functionName", 0, "currentFunction"])], $locale._("{there are|i can see|i have found|i can recommend} {many|several} ${base[plural=other]} {matching your request|matching your constraints|with those characteristics|like that|}."), ((ctx, base) => D.checkSearchResultPreamble(ctx, base, null, false)), S.contextKeyFn, {});
    $grammar.addRule("search_result_preamble", [new $runtime.NonTerminal("ctx_search_command", "ctx", undefined), new $runtime.NonTerminal("base_noun_phrase", "base", ["functionName", 0, "currentFunction"])], $locale._("{there are|i can see|i have found|i have} ${ctx.resultLength} ${ctx.resultLength:plural:one{${base[plural=one]}}other{${base[plural=other]}}} {in my database|like that|}."), ((ctx, base) => D.checkSearchResultPreamble(ctx, base, null, false)), S.contextKeyFn, {});
    $grammar.declareSymbol("system_generic_proposal");
    $grammar.addRule("system_generic_proposal", [new $runtime.NonTerminal("ctx_search_command", "ctx", undefined), new $runtime.NonTerminal("answer_noun_phrase", "proposal", ["functionName", 0, "currentFunction"])], $locale._("{are you looking for a|how about a|how about the} ${proposal[plural=one]}"), ((ctx, proposal) => D.makeRefinementProposal(ctx, proposal)), undefined, {});
    $grammar.addRule("system_generic_proposal", [new $runtime.NonTerminal("ctx_search_command", "ctx", undefined), new $runtime.NonTerminal("anything_phrase", "proposal", ["functionName", 0, "currentFunction"])], $locale._("{are you looking for|how about|how about} ${proposal}"), ((ctx, proposal) => D.makeRefinementProposal(ctx, proposal)), undefined, {});
    $grammar.addRule("system_generic_proposal", [new $runtime.NonTerminal("search_result_preamble", "preamble", undefined), new $runtime.NonTerminal("answer_noun_phrase", "proposal", ["functionName", 0, "currentFunction"])], $locale._("${preamble} {are you looking for a|how about a|how about the} ${proposal[plural=one]}"), ((preamble, proposal) => D.makeRefinementProposal(preamble, proposal)), undefined, {});
    $grammar.addRule("system_generic_proposal", [new $runtime.NonTerminal("search_result_preamble", "preamble", undefined), new $runtime.NonTerminal("anything_phrase", "proposal", ["functionName", 0, "currentFunction"])], $locale._("${preamble} {are you looking for|how about|how about} ${proposal}"), ((preamble, proposal) => D.makeRefinementProposal(preamble, proposal)), undefined, {});
    $grammar.declareSymbol("negative_proposal_request");
    if ($options.flags.multiwoz) {
        $grammar.addRule("negative_proposal_request", [new $runtime.NonTerminal("counterproposal_preamble", undefined, undefined), new $runtime.NonTerminal("answer_noun_phrase", "request", undefined)], $locale._("${counterproposal_preamble} {a|any} ${request} ."), (($0, request) => request), C.expressionKeyFn, {});
    }
    $grammar.addRule("negative_proposal_request", [new $runtime.NonTerminal("counterproposal_preamble", undefined, undefined), new $runtime.NonTerminal("anything_phrase", "request", undefined)], $locale._("${counterproposal_preamble} ${request} ."), (($0, request) => request), C.expressionKeyFn, {});
    $grammar.declareSymbol("negative_proposal_answer_preamble");
    $grammar.addRule("negative_proposal_answer_preamble", [new $runtime.NonTerminal("answer_noun_phrase", "phrase", undefined)], $locale._("{no ,|no|} {i am not in the mood for a|i do not like|i do not want} ${phrase}"), ((phrase) => phrase), C.expressionKeyFn, {});
    $grammar.addRule("negative_proposal_answer_preamble", [new $runtime.NonTerminal("anything_phrase", "phrase", undefined)], $locale._("{no ,|no|} {i am not in the mood for a|i do not like|i do not want} ${phrase}"), ((phrase) => phrase), C.expressionKeyFn, {});
    $grammar.declareSymbol("negative_proposal_reply");
    $grammar.addRule("negative_proposal_reply", [new $runtime.NonTerminal("negative_proposal_request", "request", undefined)], $locale._("{no ,|no|} ${request}"), ((request) => [null, request]), D.negativeProposalReplyKeyFn, {});
    if ($options.flags.multiwoz) {
        $grammar.addRule("negative_proposal_reply", [new $runtime.NonTerminal("negative_proposal_answer_preamble", "preamble", undefined)], "${preamble}", ((preamble) => [preamble, null]), D.negativeProposalReplyKeyFn, {});
        $grammar.addRule("negative_proposal_reply", [new $runtime.NonTerminal("negative_proposal_answer_preamble", "preamble", undefined), new $runtime.NonTerminal("negative_proposal_request", "request", ["functionName", 0, "functionName"])], $locale._("${preamble} ${request}"), ((preamble, request) => [preamble, request]), D.negativeProposalReplyKeyFn, {});
    }
}
exports.$load = $load;
;
//# sourceMappingURL=refinement.genie.out.js.map