"use strict";
// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$load = exports.action_error_phrase = exports.two_param_try_different_param_question = exports.one_param_try_different_param_question = exports.long_action_error_message = exports.short_action_error_message = exports.action_notification_phrase = exports.action_success_phrase = exports.action_success_phrase_with_result = exports.generic_action_success_phrase = exports.complete_past_action_phrase = void 0;
// Action result templates: used after executing the action
// Either the action was successful, and we're done, or
// the action failed, and we give the user an option to try again
const $runtime = __importStar(require("../../sentence-generator/runtime"));
const assert_1 = __importDefault(require("assert"));
const thingtalk_1 = require("thingtalk");
const C = __importStar(require("../ast_manip"));
const D = __importStar(require("../dialogue_acts"));
const S = __importStar(require("../state_manip"));
exports.complete_past_action_phrase = "complete_past_action_phrase";
exports.generic_action_success_phrase = "generic_action_success_phrase";
exports.action_success_phrase_with_result = "action_success_phrase_with_result";
exports.action_success_phrase = "action_success_phrase";
exports.action_notification_phrase = "action_notification_phrase";
exports.short_action_error_message = "short_action_error_message";
exports.long_action_error_message = "long_action_error_message";
exports.one_param_try_different_param_question = "one_param_try_different_param_question";
exports.two_param_try_different_param_question = "two_param_try_different_param_question";
exports.action_error_phrase = "action_error_phrase";
/**
 * Load the templates in this file.
 *
 * This is an autogenerated method that will be called by the {@link SentenceGenerator}
 * when the templates are imported.
 */
async function $load($options, $locale, $grammar, $loader) {
    $grammar.declareSymbol("complete_past_action_phrase");
    $grammar.addRule("complete_past_action_phrase", [new $runtime.NonTerminal("thingpedia_complete_action_past", "action", undefined)], "${action}", ((action) => {
        // check against weird primitive templates, because
        // later we don't check the query
        if (!(action instanceof thingtalk_1.Ast.InvocationExpression))
            return null;
        return action;
    }), C.expressionKeyFn, {});
    $grammar.addRule("complete_past_action_phrase", [new $runtime.NonTerminal("thingpedia_complete_action_past", "action", undefined)], $locale._("${action} for you"), ((action) => {
        // check against weird primitive templates, because
        // later we don't check the query
        if (!(action instanceof thingtalk_1.Ast.InvocationExpression))
            return null;
        return action;
    }), C.expressionKeyFn, {});
    $grammar.addRule("complete_past_action_phrase", [new $runtime.NonTerminal("thingpedia_complete_join_action_past", "action", undefined)], "${action}", ((action) => action), C.expressionKeyFn, {});
    $grammar.addRule("complete_past_action_phrase", [new $runtime.NonTerminal("thingpedia_complete_join_action_past", "action", undefined)], $locale._("${action} for you"), ((action) => action), C.expressionKeyFn, {});
    $grammar.addRule("complete_past_action_phrase", [new $runtime.NonTerminal("complete_past_action_phrase", "action", undefined), new $runtime.NonTerminal("preposition_input_param", "param", ["functionName", 0, "functionName"])], $locale._("${action} ${param}"), ((action, param) => C.addActionInputParam($loader, action, param)), C.expressionKeyFn, { priority: (0.1) });
    $grammar.addRule("complete_past_action_phrase", [new $runtime.NonTerminal("complete_past_action_phrase", "action", undefined), new $runtime.NonTerminal("npp_input_param", "param", ["functionName", 0, "functionName"])], $locale._("${action} {with|having} ${param}"), ((action, param) => C.addActionInputParam($loader, action, param)), C.expressionKeyFn, { priority: (0.1) });
    $grammar.addRule("complete_past_action_phrase", [new $runtime.NonTerminal("complete_past_action_phrase", "action", undefined), new $runtime.NonTerminal("preposition_filter", "param", ["functionName", 0, "functionName"])], $locale._("${action} ${param}"), ((action, param) => {
        if (!(param.ast instanceof thingtalk_1.Ast.AtomBooleanExpression))
            return null;
        const ipslot = { schema: param.schema, ptype: param.ptype,
            ast: new thingtalk_1.Ast.InputParam(null, param.ast.name, param.ast.value) };
        return C.addActionInputParam($loader, action, ipslot, { allowOutput: true });
    }), C.expressionKeyFn, { priority: (0.1) });
    $grammar.addRule("complete_past_action_phrase", [new $runtime.NonTerminal("complete_past_action_phrase", "action", undefined), new $runtime.NonTerminal("npp_filter", "param", ["functionName", 0, "functionName"])], $locale._("${action} {with|having} ${param}"), ((action, param) => {
        if (!(param.ast instanceof thingtalk_1.Ast.AtomBooleanExpression))
            return null;
        const ipslot = { schema: param.schema, ptype: param.ptype,
            ast: new thingtalk_1.Ast.InputParam(null, param.ast.name, param.ast.value) };
        return C.addActionInputParam($loader, action, ipslot, { allowOutput: true });
    }), C.expressionKeyFn, { priority: (0.1) });
    $grammar.declareSymbol("generic_action_success_phrase");
    $grammar.addRule("generic_action_success_phrase", [], $locale._("your request was completed successfully"), (() => "your request was completed successfully"), undefined, { identity: (true) });
    $grammar.addRule("generic_action_success_phrase", [], $locale._("consider your request done !"), (() => "consider your request done !"), undefined, { identity: (true) });
    $grammar.declareSymbol("action_success_phrase_with_result");
    $grammar.addRule("action_success_phrase_with_result", [new $runtime.NonTerminal("generic_action_success_phrase", undefined, undefined), new $runtime.NonTerminal("direct_result_info_phrase", "result", undefined)], $locale._("${generic_action_success_phrase} . ${result}"), (($0, result) => [null, result.info]), D.actionSuccessPhraseWithResultKeyFn, { priority: (1) });
    $grammar.addRule("action_success_phrase_with_result", [new $runtime.NonTerminal("complete_past_action_phrase", "action", undefined), new $runtime.NonTerminal("direct_result_info_phrase", "result", ["functionName", 0, "functionName"])], $locale._("i ${action} . ${result}"), ((action, result) => [action, result.info]), D.actionSuccessPhraseWithResultKeyFn, { priority: (2) });
    $grammar.declareSymbol("action_success_phrase");
    $grammar.addRule("action_success_phrase", [new $runtime.NonTerminal("ctx_completed_action_success", "ctx", undefined), new $runtime.NonTerminal("generic_excitement_phrase", undefined, undefined), new $runtime.NonTerminal("ctx_thingpedia_result", "result", undefined)], $locale._("${ctx} ${generic_excitement_phrase} ${result} ."), ((ctx, $0, result) => D.makeThingpediaActionSuccessPhrase(ctx, result)), undefined, { priority: (5) });
    $grammar.addRule("action_success_phrase", [new $runtime.NonTerminal("ctx_completed_action_success", "ctx", undefined), new $runtime.NonTerminal("generic_excitement_phrase", undefined, undefined), new $runtime.NonTerminal("complete_past_action_phrase", "action", ["functionName", 0, "currentFunction"])], $locale._("${ctx} ${generic_excitement_phrase} i ${action} ."), ((ctx, $0, action) => D.makeCompleteActionSuccessPhrase(ctx, action, null)), undefined, { priority: (2) });
    $grammar.addRule("action_success_phrase", [new $runtime.NonTerminal("ctx_completed_action_success", "ctx", undefined), new $runtime.NonTerminal("generic_excitement_phrase", undefined, undefined), new $runtime.NonTerminal("action_success_phrase_with_result", "phrase", undefined)], $locale._("${ctx} ${generic_excitement_phrase} ${phrase}"), ((ctx, $0, phrase) => {
        const [action, info] = phrase;
        if (action)
            return D.makeCompleteActionSuccessPhrase(ctx, action, info);
        else
            return D.makeThingpediaActionSuccessPhrase(ctx, info);
    }), undefined, {});
    $grammar.addRule("action_success_phrase", [new $runtime.NonTerminal("ctx_completed_action_success", "ctx", undefined), new $runtime.NonTerminal("generic_excitement_phrase", undefined, undefined), new $runtime.NonTerminal("generic_action_success_phrase", undefined, undefined)], $locale._("${ctx} ${generic_excitement_phrase} ${generic_action_success_phrase}"), ((ctx, $0, $1) => D.makeGenericActionSuccessPhrase(ctx)), undefined, { priority: (-10) });
    $grammar.declareSymbol("action_notification_phrase");
    $grammar.addRule("action_notification_phrase", [new $runtime.NonTerminal("ctx_action_notification", "ctx", undefined), new $runtime.NonTerminal("notification_preamble", undefined, undefined), new $runtime.NonTerminal("generic_excitement_phrase", undefined, undefined), new $runtime.NonTerminal("ctx_thingpedia_result", "result", undefined)], $locale._("${ctx} ${notification_preamble} ${generic_excitement_phrase} ${result} ."), ((ctx, $0, $1, result) => D.makeThingpediaActionSuccessPhrase(ctx, result)), undefined, { priority: (5) });
    $grammar.addRule("action_notification_phrase", [new $runtime.NonTerminal("ctx_action_notification", "ctx", undefined), new $runtime.NonTerminal("notification_preamble", undefined, undefined), new $runtime.NonTerminal("generic_excitement_phrase", undefined, undefined), new $runtime.NonTerminal("complete_past_action_phrase", "action", ["functionName", 0, "currentFunction"])], $locale._("${ctx} ${notification_preamble} ${generic_excitement_phrase} i ${action} ."), ((ctx, $0, $1, action) => D.makeCompleteActionSuccessPhrase(ctx, action, null)), undefined, { priority: (2) });
    $grammar.addRule("action_notification_phrase", [new $runtime.NonTerminal("ctx_action_notification", "ctx", undefined), new $runtime.NonTerminal("notification_preamble", undefined, undefined), new $runtime.NonTerminal("generic_excitement_phrase", undefined, undefined), new $runtime.NonTerminal("action_success_phrase_with_result", "phrase", undefined)], $locale._("${ctx} ${notification_preamble} ${generic_excitement_phrase} ${phrase}"), ((ctx, $0, $1, phrase) => {
        const [action, info] = phrase;
        if (action)
            return D.makeCompleteActionSuccessPhrase(ctx, action, info);
        else
            return D.makeThingpediaActionSuccessPhrase(ctx, info);
    }), undefined, {});
    $grammar.addRule("action_notification_phrase", [new $runtime.NonTerminal("ctx_action_notification", "ctx", undefined), new $runtime.NonTerminal("notification_preamble", undefined, undefined), new $runtime.NonTerminal("generic_excitement_phrase", undefined, undefined), new $runtime.NonTerminal("generic_action_success_phrase", undefined, undefined)], $locale._("${ctx} ${notification_preamble} ${generic_excitement_phrase} ${generic_action_success_phrase}"), ((ctx, $0, $1, $2) => D.makeGenericActionSuccessPhrase(ctx)), undefined, { priority: (-10) });
    $grammar.declareSymbol("short_action_error_message");
    $grammar.addRule("short_action_error_message", [new $runtime.NonTerminal("ctx_completed_action_error", "ctx", undefined), new $runtime.NonTerminal("ctx_thingpedia_error_message", "msg", undefined)], $locale._("${ctx} ${msg} ."), ((ctx, msg) => D.checkThingpediaErrorMessage(ctx, msg)), S.contextKeyFn, { priority: (5) });
    $grammar.addRule("short_action_error_message", [new $runtime.NonTerminal("ctx_completed_action_error", "ctx", undefined)], $locale._("${ctx} there was an unexpected error with your command . please try again later or report this issue to my developers"), ((ctx) => ctx), S.contextKeyFn, {});
    $grammar.declareSymbol("long_action_error_message");
    $grammar.addRule("long_action_error_message", [new $runtime.NonTerminal("action_description_phrase", "action", undefined), new $runtime.NonTerminal("short_action_error_message", "ctx", undefined)], $locale._("{i could not|it was not possible to} ${action} {:|because} ${ctx}"), ((action, ctx) => D.checkActionErrorMessage(ctx, action)), S.contextKeyFn, {});
    $grammar.declareSymbol("one_param_try_different_param_question");
    $grammar.addRule("one_param_try_different_param_question", [new $runtime.NonTerminal("input_param", "p", undefined)], $locale._("would you like to try a different ${p} ?"), ((p) => {
        return [p];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("one_param_try_different_param_question", [new $runtime.NonTerminal("input_param", "p", undefined)], $locale._("would you like a different ${p} ?"), ((p) => {
        return [p];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("one_param_try_different_param_question", [new $runtime.NonTerminal("input_param", "p", undefined)], $locale._("shall i try another ${p} ?"), ((p) => {
        return [p];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("one_param_try_different_param_question", [new $runtime.NonTerminal("input_param", "p", undefined)], $locale._("how about for another ${p} ?"), ((p) => {
        return [p];
    }), C.paramArrayKeyFn, {});
    $grammar.declareSymbol("two_param_try_different_param_question");
    $grammar.addRule("two_param_try_different_param_question", [new $runtime.NonTerminal("input_param", "p1", undefined), new $runtime.NonTerminal("input_param", "p2", ["functionName", 0, "functionName"])], $locale._("would you like to try a different ${p1} or ${p2} ?"), ((p1, p2) => {
        (0, assert_1.default)(C.isSameFunction(p1.schema, p2.schema));
        if (p1 === p2)
            return null;
        return [p1, p2];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("two_param_try_different_param_question", [new $runtime.NonTerminal("input_param", "p1", undefined), new $runtime.NonTerminal("input_param", "p2", ["functionName", 0, "functionName"])], $locale._("would you like a different ${p1} or ${p2} ?"), ((p1, p2) => {
        (0, assert_1.default)(C.isSameFunction(p1.schema, p2.schema));
        if (p1 === p2)
            return null;
        return [p1, p2];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("two_param_try_different_param_question", [new $runtime.NonTerminal("input_param", "p1", undefined), new $runtime.NonTerminal("input_param", "p2", ["functionName", 0, "functionName"])], $locale._("shall i try another ${p1} or ${p2} ?"), ((p1, p2) => {
        (0, assert_1.default)(C.isSameFunction(p1.schema, p2.schema));
        if (p1 === p2)
            return null;
        return [p1, p2];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("two_param_try_different_param_question", [new $runtime.NonTerminal("input_param", "p1", undefined), new $runtime.NonTerminal("input_param", "p2", ["functionName", 0, "functionName"])], $locale._("how about for another ${p1} or ${p2} ?"), ((p1, p2) => {
        (0, assert_1.default)(C.isSameFunction(p1.schema, p2.schema));
        if (p1 === p2)
            return null;
        return [p1, p2];
    }), C.paramArrayKeyFn, {});
    $grammar.declareSymbol("action_error_phrase");
    $grammar.addRule("action_error_phrase", [new $runtime.NonTerminal("short_action_error_message", "ctx", undefined)], $locale._("${ctx} ."), ((ctx) => D.makeActionErrorPhrase(ctx, [])), undefined, {});
    if (!$options.flags.inference) {
        $grammar.addRule("action_error_phrase", [new $runtime.NonTerminal("sorry_preamble", undefined, undefined), new $runtime.NonTerminal("long_action_error_message", "ctx", undefined)], $locale._("${sorry_preamble} ${ctx} ."), (($0, ctx) => D.makeActionErrorPhrase(ctx, [])), undefined, {});
        $grammar.addRule("action_error_phrase", [new $runtime.NonTerminal("sorry_preamble", undefined, undefined), new $runtime.NonTerminal("short_action_error_message", "ctx", undefined), new $runtime.NonTerminal("one_param_try_different_param_question", "questions", undefined)], $locale._("${sorry_preamble} ${ctx} . ${questions}"), (($0, ctx, questions) => D.makeActionErrorPhrase(ctx, questions)), undefined, { weight: (1), priority: (0.5) });
        $grammar.addRule("action_error_phrase", [new $runtime.NonTerminal("sorry_preamble", undefined, undefined), new $runtime.NonTerminal("short_action_error_message", "ctx", undefined), new $runtime.NonTerminal("two_param_try_different_param_question", "questions", undefined)], $locale._("${sorry_preamble} ${ctx} . ${questions}"), (($0, ctx, questions) => D.makeActionErrorPhrase(ctx, questions)), undefined, { weight: (0.5) });
        $grammar.addRule("action_error_phrase", [new $runtime.NonTerminal("sorry_preamble", undefined, undefined), new $runtime.NonTerminal("long_action_error_message", "ctx", undefined), new $runtime.NonTerminal("one_param_try_different_param_question", "questions", undefined)], $locale._("${sorry_preamble} ${ctx} . ${questions}"), (($0, ctx, questions) => D.makeActionErrorPhrase(ctx, questions)), undefined, { weight: (1), priority: (0.5) });
        $grammar.addRule("action_error_phrase", [new $runtime.NonTerminal("sorry_preamble", undefined, undefined), new $runtime.NonTerminal("long_action_error_message", "ctx", undefined), new $runtime.NonTerminal("two_param_try_different_param_question", "questions", undefined)], $locale._("${sorry_preamble} ${ctx} . ${questions}"), (($0, ctx, questions) => D.makeActionErrorPhrase(ctx, questions)), undefined, { weight: (0.5) });
    }
}
exports.$load = $load;
;
//# sourceMappingURL=action-results.genie.out.js.map