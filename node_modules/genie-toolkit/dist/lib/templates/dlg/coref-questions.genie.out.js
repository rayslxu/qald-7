"use strict";
// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$load = exports.user_search_question_for_list = exports.user_search_question = exports.boolean_user_search_question_with_name = exports.user_search_question_with_name = exports.boolean_user_search_question_for_list = exports.boolean_user_search_question = exports.simple_user_search_question_for_list = exports.simple_user_search_question = exports.out_param_list_for_coref_question = void 0;
// Coref question templates: questions about the current result, referred by coreference ("it", "that", "the restaurant")
const $runtime = __importStar(require("../../sentence-generator/runtime"));
const assert_1 = __importDefault(require("assert"));
const C = __importStar(require("../ast_manip"));
const D = __importStar(require("../dialogue_acts"));
exports.out_param_list_for_coref_question = "out_param_list_for_coref_question";
exports.simple_user_search_question = "simple_user_search_question";
exports.simple_user_search_question_for_list = "simple_user_search_question_for_list";
exports.boolean_user_search_question = "boolean_user_search_question";
exports.boolean_user_search_question_for_list = "boolean_user_search_question_for_list";
exports.user_search_question_with_name = "user_search_question_with_name";
exports.boolean_user_search_question_with_name = "boolean_user_search_question_with_name";
exports.user_search_question = "user_search_question";
exports.user_search_question_for_list = "user_search_question_for_list";
/**
 * Load the templates in this file.
 *
 * This is an autogenerated method that will be called by the {@link SentenceGenerator}
 * when the templates are imported.
 */
async function $load($options, $locale, $grammar, $loader) {
    $grammar.declareSymbol("out_param_list_for_coref_question");
    $grammar.addRule("out_param_list_for_coref_question", [new $runtime.NonTerminal("out_param_Any", "p1", undefined), new $runtime.NonTerminal("out_param_Any", "p2", ["functionName", 0, "functionName"])], $locale._("${p1} and ${p2}"), ((p1, p2) => {
        if (p1.name === 'id' || p2.name === 'id' || p1.name === p2.name)
            return null;
        (0, assert_1.default)(C.isSameFunction(p1.schema, p2.schema));
        return [p1, p2];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("out_param_list_for_coref_question", [new $runtime.NonTerminal("out_param_Any", "p1", undefined), new $runtime.NonTerminal("out_param_Any", "p2", ["functionName", 0, "functionName"]), new $runtime.NonTerminal("out_param_Any", "p3", ["functionName", 0, "functionName"])], $locale._("${p1} , ${p2} {,|} and ${p3}"), ((p1, p2, p3) => {
        if (p1.name === 'id' || p2.name === 'id' || p3.name === 'id')
            return null;
        if (p1.name === p2.name || p2.name === p3.name || p1.name === p3.name)
            return null;
        (0, assert_1.default)(C.isSameFunction(p1.schema, p2.schema));
        (0, assert_1.default)(C.isSameFunction(p1.schema, p3.schema));
        return [p1, p2, p3];
    }), C.paramArrayKeyFn, {});
    $grammar.declareSymbol("simple_user_search_question");
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("out_param_Any", "param", undefined)], $locale._("{can you tell me|} what is {the|its} ${param} ?"), ((param) => {
        if (param.name === 'id')
            return null;
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("out_param_Any", "param", undefined)], $locale._("can you tell me {the|its} ${param} ?"), ((param) => {
        if (param.name === 'id')
            return null;
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("out_param_Any", "param", undefined)], $locale._("{can you tell me|} what ${param} does it have ?"), ((param) => {
        if (param.name === 'id')
            return null;
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("out_param_Any", "param", undefined)], $locale._("i would like to {know|see} {the|its} ${param} {first|} ."), ((param) => {
        if (param.name === 'id')
            return null;
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("out_param_Any", "param", undefined)], $locale._("i need {the|its} ${param} {first|} ."), ((param) => {
        if (param.name === 'id')
            return null;
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("out_param_Any", "param", undefined)], $locale._("i just need {the|its} ${param} ."), ((param) => {
        if (param.name === 'id')
            return null;
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("out_param_list_for_coref_question", "params", undefined)], $locale._("{can you tell me|} what {is|are} {the|its} ${params} ?"), ((params) => params), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("out_param_list_for_coref_question", "params", undefined)], $locale._("can you tell me {the|its} ${params} ?"), ((params) => params), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("out_param_list_for_coref_question", "params", undefined)], $locale._("i would like to {know|see} {the|its} ${params} {first|} ."), ((params) => params), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("out_param_list_for_coref_question", "params", undefined)], $locale._("i need {the|its} ${params} {first|} ."), ((params) => params), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("out_param_list_for_coref_question", "params", undefined)], $locale._("i just need {the|its} ${params} ."), ((params) => params), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("out_param_Any", "param", undefined), new $runtime.NonTerminal("base_table", "base", ["functionName", 0, "functionName"])], $locale._("{can you tell me|} what is the ${param} of the ${base} ?"), ((param, base) => {
        (0, assert_1.default)(C.isSameFunction(base.schema, param.schema));
        if (param.name === 'id')
            return null;
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("out_param_Any", "param", undefined), new $runtime.NonTerminal("base_table", "base", ["functionName", 0, "functionName"])], $locale._("can you tell me the ${param} of the ${base} ?"), ((param, base) => {
        (0, assert_1.default)(C.isSameFunction(base.schema, param.schema));
        if (param.name === 'id')
            return null;
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("out_param_Any", "param", undefined), new $runtime.NonTerminal("base_table", "base", ["functionName", 0, "functionName"])], $locale._("{can you tell me|} what ${param} does the ${base} have ?"), ((param, base) => {
        (0, assert_1.default)(C.isSameFunction(base.schema, param.schema));
        if (param.name === 'id')
            return null;
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("out_param_Any", "param", undefined), new $runtime.NonTerminal("base_table", "base", ["functionName", 0, "functionName"])], $locale._("i would like to {know|see} the ${param} of the ${base} {first|} ."), ((param, base) => {
        (0, assert_1.default)(C.isSameFunction(base.schema, param.schema));
        if (param.name === 'id')
            return null;
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("out_param_Any", "param", undefined), new $runtime.NonTerminal("base_table", "base", ["functionName", 0, "functionName"])], $locale._("i just need {the|its} the ${param} of the ${base} ."), ((param, base) => {
        (0, assert_1.default)(C.isSameFunction(base.schema, param.schema));
        if (param.name === 'id')
            return null;
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("base_table", "base", undefined), new $runtime.NonTerminal("out_param_Any", "param", ["functionName", 0, "functionName"])], $locale._("{can you tell me|} what is the ${base} 's ${param} ?"), ((base, param) => {
        (0, assert_1.default)(C.isSameFunction(base.schema, param.schema));
        if (param.name === 'id')
            return null;
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("base_table", "base", undefined), new $runtime.NonTerminal("out_param_Any", "param", ["functionName", 0, "functionName"])], $locale._("can you tell me the ${base} 's ${param} ?"), ((base, param) => {
        (0, assert_1.default)(C.isSameFunction(base.schema, param.schema));
        if (param.name === 'id')
            return null;
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("base_table", "base", undefined), new $runtime.NonTerminal("out_param_Any", "param", ["functionName", 0, "functionName"])], $locale._("i would like to {know|see} the ${base} 's ${param} {first|} ."), ((base, param) => {
        (0, assert_1.default)(C.isSameFunction(base.schema, param.schema));
        if (param.name === 'id')
            return null;
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("base_table", "base", undefined), new $runtime.NonTerminal("out_param_Any", "param", ["functionName", 0, "functionName"])], $locale._("i just need {the|its} the ${base} 's ${param} ."), ((base, param) => {
        (0, assert_1.default)(C.isSameFunction(base.schema, param.schema));
        if (param.name === 'id')
            return null;
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("out_param_list_for_coref_question", "params", undefined), new $runtime.NonTerminal("base_table", "base", ["functionName", 0, "functionName"])], $locale._("{can you tell me|} what {is|are} the ${params} of the ${base} ?"), ((params, base) => {
        if (!params.every((p) => C.isSameFunction(base.schema, p.schema)))
            return null;
        return params;
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("out_param_list_for_coref_question", "params", undefined), new $runtime.NonTerminal("base_table", "base", ["functionName", 0, "functionName"])], $locale._("can you tell me the ${params} of the ${base} ?"), ((params, base) => {
        if (!params.every((p) => C.isSameFunction(base.schema, p.schema)))
            return null;
        return params;
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("out_param_list_for_coref_question", "params", undefined), new $runtime.NonTerminal("base_table", "base", ["functionName", 0, "functionName"])], $locale._("{can you tell me|} what ${params} does the ${base} have ?"), ((params, base) => {
        if (!params.every((p) => C.isSameFunction(base.schema, p.schema)))
            return null;
        return params;
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("out_param_list_for_coref_question", "params", undefined), new $runtime.NonTerminal("base_table", "base", ["functionName", 0, "functionName"])], $locale._("i would like to {know|see} the ${params} of the ${base} {first|} ."), ((params, base) => {
        if (!params.every((p) => C.isSameFunction(base.schema, p.schema)))
            return null;
        return params;
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("out_param_list_for_coref_question", "params", undefined), new $runtime.NonTerminal("base_table", "base", ["functionName", 0, "functionName"])], $locale._("i just need {the|its} the ${params} of the ${base} ."), ((params, base) => {
        if (!params.every((p) => C.isSameFunction(base.schema, p.schema)))
            return null;
        return params;
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("base_table", "base", undefined), new $runtime.NonTerminal("out_param_list_for_coref_question", "params", ["functionName", 0, "functionName"])], $locale._("{can you tell me|} what is the ${base} 's ${params} ?"), ((base, params) => {
        if (!params.every((p) => C.isSameFunction(base.schema, p.schema)))
            return null;
        return params;
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("base_table", "base", undefined), new $runtime.NonTerminal("out_param_list_for_coref_question", "params", ["functionName", 0, "functionName"])], $locale._("can you tell me the ${base} 's ${params} ?"), ((base, params) => {
        if (!params.every((p) => C.isSameFunction(base.schema, p.schema)))
            return null;
        return params;
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("base_table", "base", undefined), new $runtime.NonTerminal("out_param_list_for_coref_question", "params", ["functionName", 0, "functionName"])], $locale._("i would like to {know|see} the ${base} 's ${params} {first|} ."), ((base, params) => {
        if (!params.every((p) => C.isSameFunction(base.schema, p.schema)))
            return null;
        return params;
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("base_table", "base", undefined), new $runtime.NonTerminal("out_param_list_for_coref_question", "params", ["functionName", 0, "functionName"])], $locale._("i just need {the|its} the ${base} 's ${params} ."), ((base, params) => {
        if (!params.every((p) => C.isSameFunction(base.schema, p.schema)))
            return null;
        return params;
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("npp_boolean_projection", "param", undefined)], $locale._("{can you tell me|} does {it|this|that} have ${param} ?"), ((param) => {
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("npp_boolean_projection", "param", undefined)], $locale._("{can you tell me|} is there ${param} ?"), ((param) => {
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("npp_boolean_projection", "param", undefined)], $locale._("i would like to {know|see} {if|whether} {it|this|that} has ${param} {first|} ."), ((param) => {
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("npp_boolean_projection", "param", undefined)], $locale._("i would like to {know|see} {if|whether} there is ${param} {first|} ."), ((param) => {
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("avp_boolean_projection", "param", undefined)], $locale._("{can you tell me|} does {it|this|that} ${param} ?"), ((param) => {
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("avp_boolean_projection", "param", undefined)], $locale._("i would like to {know|see} {if|whether} {it|this|that} ${param} {first|} ."), ((param) => {
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("pvp_boolean_projection", "param", undefined)], $locale._("{can you tell me|} is {it|this|that} ${param} ?"), ((param) => {
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("pvp_boolean_projection", "param", undefined)], $locale._("i would like to {know|see} {if|whether} {it|this|that} is ${param} {first|} ."), ((param) => {
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("preposition_boolean_projection", "param", undefined)], $locale._("{can you tell me|} is {it|this|that} ${param} ?"), ((param) => {
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("preposition_boolean_projection", "param", undefined)], $locale._("i would like to {know|see} {if|whether} {it|this|that} is ${param} {first|} ."), ((param) => {
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("npi_boolean_projection", "param", undefined)], $locale._("{can you tell me|} is it ${param} ?"), ((param) => {
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("npi_boolean_projection", "param", undefined)], $locale._("i would like to {know|see} {if|whether} {it|this|that} is ${param} {first|} ."), ((param) => {
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("npv_boolean_projection", "param", undefined)], $locale._("{can you tell me|} is it ${param} ?"), ((param) => {
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("npv_boolean_projection", "param", undefined)], $locale._("i would like to {know|see} {if|whether} {it|this|that} is ${param} {first|} ."), ((param) => {
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("apv_boolean_projection", "param", undefined)], $locale._("{can you tell me|} is it ${param} ?"), ((param) => {
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("apv_boolean_projection", "param", undefined)], $locale._("i would like to {know|see} {if|whether} {it|this|that} is ${param} {first|} ."), ((param) => {
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("base_table", "base", undefined), new $runtime.NonTerminal("npp_boolean_projection", "param", ["functionName", 0, "functionName"])], $locale._("{can you tell me|} does the ${base} have ${param} ?"), ((base, param) => {
        (0, assert_1.default)(C.isSameFunction(base.schema, param.schema));
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("base_table", "base", undefined), new $runtime.NonTerminal("npp_boolean_projection", "param", ["functionName", 0, "functionName"])], $locale._("i would like to {know|see} {if|whether} the ${base} has ${param} {first|} ."), ((base, param) => {
        (0, assert_1.default)(C.isSameFunction(base.schema, param.schema));
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("base_table", "base", undefined), new $runtime.NonTerminal("avp_boolean_projection", "param", ["functionName", 0, "functionName"])], $locale._("{can you tell me|} does the ${base} ${param} ?"), ((base, param) => {
        (0, assert_1.default)(C.isSameFunction(base.schema, param.schema));
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("base_table", "base", undefined), new $runtime.NonTerminal("avp_boolean_projection", "param", ["functionName", 0, "functionName"])], $locale._("i would like to {know|see} {if|whether} the ${base} ${param} {first|} ."), ((base, param) => {
        (0, assert_1.default)(C.isSameFunction(base.schema, param.schema));
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("base_table", "base", undefined), new $runtime.NonTerminal("pvp_boolean_projection", "param", ["functionName", 0, "functionName"])], $locale._("{can you tell me|} is the ${base} ${param} ?"), ((base, param) => {
        (0, assert_1.default)(C.isSameFunction(base.schema, param.schema));
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("base_table", "base", undefined), new $runtime.NonTerminal("pvp_boolean_projection", "param", ["functionName", 0, "functionName"])], $locale._("i would like to {know|see} {if|whether} the ${base} is ${param} {first|} ."), ((base, param) => {
        (0, assert_1.default)(C.isSameFunction(base.schema, param.schema));
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("base_table", "base", undefined), new $runtime.NonTerminal("preposition_boolean_projection", "param", ["functionName", 0, "functionName"])], $locale._("{can you tell me|} is the ${base} ${param} ?"), ((base, param) => {
        (0, assert_1.default)(C.isSameFunction(base.schema, param.schema));
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("base_table", "base", undefined), new $runtime.NonTerminal("preposition_boolean_projection", "param", ["functionName", 0, "functionName"])], $locale._("i would like to {know|see} {if|whether} the ${base} is ${param} {first|} ."), ((base, param) => {
        (0, assert_1.default)(C.isSameFunction(base.schema, param.schema));
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("base_table", "base", undefined), new $runtime.NonTerminal("npi_boolean_projection", "param", ["functionName", 0, "functionName"])], $locale._("{can you tell me|} is the ${base} ${param} ?"), ((base, param) => {
        (0, assert_1.default)(C.isSameFunction(base.schema, param.schema));
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("base_table", "base", undefined), new $runtime.NonTerminal("npi_boolean_projection", "param", ["functionName", 0, "functionName"])], $locale._("i would like to {know|see} {if|whether} the ${base} is ${param} {first|} ."), ((base, param) => {
        (0, assert_1.default)(C.isSameFunction(base.schema, param.schema));
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("base_table", "base", undefined), new $runtime.NonTerminal("npv_boolean_projection", "param", ["functionName", 0, "functionName"])], $locale._("{can you tell me|} is the ${base} ${param} ?"), ((base, param) => {
        (0, assert_1.default)(C.isSameFunction(base.schema, param.schema));
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("base_table", "base", undefined), new $runtime.NonTerminal("npv_boolean_projection", "param", ["functionName", 0, "functionName"])], $locale._("i would like to {know|see} {if|whether} the ${base} is ${param} {first|} ."), ((base, param) => {
        (0, assert_1.default)(C.isSameFunction(base.schema, param.schema));
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("base_table", "base", undefined), new $runtime.NonTerminal("apv_boolean_projection", "param", ["functionName", 0, "functionName"])], $locale._("{can you tell me|} is the ${base} ${param} ?"), ((base, param) => {
        (0, assert_1.default)(C.isSameFunction(base.schema, param.schema));
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("base_table", "base", undefined), new $runtime.NonTerminal("apv_boolean_projection", "param", ["functionName", 0, "functionName"])], $locale._("i would like to {know|see} {if|whether} the ${base} is ${param} {first|} ."), ((base, param) => {
        (0, assert_1.default)(C.isSameFunction(base.schema, param.schema));
        return [param];
    }), C.paramArrayKeyFn, {});
    for (const proj of $loader.projections) {
        if (proj.category === 'pvp' || proj.category === 'preposition') {
            $grammar.declareSymbol("simple_user_search_question");
            $grammar.addRule("simple_user_search_question", [], $locale._("{can you tell me|} " + (proj.pronoun) + " " + (proj.base) + " {is|was|are|were} {it|this|that} " + (proj.canonical) + " ?"), (() => {
                if (proj.pname === 'id')
                    return null;
                return [proj.pslot];
            }), C.paramArrayKeyFn, {});
            $grammar.addRule("simple_user_search_question", [], $locale._("i would like to {know|see} " + (proj.pronoun) + " " + (proj.base) + " {it|this|that} {is|was|are|were} " + (proj.canonical) + " {first|} ."), (() => {
                if (proj.pname === 'id')
                    return null;
                return [proj.pslot];
            }), C.paramArrayKeyFn, {});
            $grammar.declareSymbol("simple_user_search_question");
            $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("base_table", "base", undefined)], $locale._("{can you tell me|} " + (proj.pronoun) + " " + (proj.base) + " {is|was|are|were} the ${base} " + (proj.canonical) + " ?"), ((base) => {
                if (!C.isSameFunction(base.schema, proj.pslot.schema))
                    return null;
                if (proj.pname === 'id')
                    return null;
                return [proj.pslot];
            }), C.paramArrayKeyFn, {});
            $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("base_table", "base", ["functionName", ((proj.pslot.schema.qualifiedName))])], $locale._("i would like to {know|see} " + (proj.pronoun) + " " + (proj.base) + " the ${base} {is|was|are|were} " + (proj.canonical) + " {first|} ."), ((base) => {
                if (!C.isSameFunction(base.schema, proj.pslot.schema))
                    return null;
                if (proj.pname === 'id')
                    return null;
                return [proj.pslot];
            }), C.paramArrayKeyFn, {});
            if (proj.base) {
                $grammar.declareSymbol("simple_user_search_question");
                $grammar.addRule("simple_user_search_question", [], $locale._("i would like to {know|see} the " + (proj.base) + " {that|which|} {it|this|that} {is|was|are|were} " + (proj.canonical) + " {first|} ."), (() => {
                    if (proj.pname === 'id')
                        return null;
                    return [proj.pslot];
                }), C.paramArrayKeyFn, {});
                $grammar.declareSymbol("simple_user_search_question");
                $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("base_table", "base", ["functionName", ((proj.pslot.schema.qualifiedName))])], $locale._("i would like to {know|see} the " + (proj.base) + " {that|which|} the ${base} {is|was|are|were} " + (proj.canonical) + " {first|} ."), ((base) => {
                    if (!C.isSameFunction(base.schema, proj.pslot.schema))
                        return null;
                    if (proj.pname === 'id')
                        return null;
                    return [proj.pslot];
                }), C.paramArrayKeyFn, {});
            }
        }
        if (proj.category === 'avp') {
            $grammar.declareSymbol("simple_user_search_question");
            $grammar.addRule("simple_user_search_question", [], $locale._("{can you tell me|} " + (proj.pronoun) + " " + (proj.base) + " {do|does|did} {it|this|that} " + (proj.canonical) + " ?"), (() => {
                if (proj.pname === 'id')
                    return null;
                return [proj.pslot];
            }), C.paramArrayKeyFn, {});
            $grammar.addRule("simple_user_search_question", [], $locale._("i would like to {know|see} " + (proj.pronoun) + " " + (proj.base) + " {it|this|that} " + (proj.canonical) + " {first|} ."), (() => {
                if (proj.pname === 'id')
                    return null;
                return [proj.pslot];
            }), C.paramArrayKeyFn, {});
            $grammar.declareSymbol("simple_user_search_question");
            $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("base_table", "base", ["functionName", ((proj.pslot.schema.qualifiedName))])], $locale._("{can you tell me|} " + (proj.pronoun) + " " + (proj.base) + " {do|does|did} the ${base} " + (proj.canonical) + " ?"), ((base) => {
                if (!C.isSameFunction(base.schema, proj.pslot.schema))
                    return null;
                if (proj.pname === 'id')
                    return null;
                return [proj.pslot];
            }), C.paramArrayKeyFn, {});
            $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("base_table", "base", undefined)], $locale._("i would like to {know|see} " + (proj.pronoun) + " " + (proj.base) + " the ${base} " + (proj.canonical) + " {first|} ."), ((base) => {
                if (!C.isSameFunction(base.schema, proj.pslot.schema))
                    return null;
                if (proj.pname === 'id')
                    return null;
                return [proj.pslot];
            }), C.paramArrayKeyFn, {});
            if (proj.base) {
                $grammar.declareSymbol("simple_user_search_question");
                $grammar.addRule("simple_user_search_question", [], $locale._("i would like to {know|see} the " + (proj.base) + " {that|which|} {it|this|that} " + (proj.canonical) + " {first|} ."), (() => {
                    if (proj.pname === 'id')
                        return null;
                    return [proj.pslot];
                }), C.paramArrayKeyFn, {});
                $grammar.declareSymbol("simple_user_search_question");
                $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("base_table", "base", ["functionName", ((proj.pslot.schema.qualifiedName))])], $locale._("i would like to {know|see} the " + (proj.base) + " {that|which|} the ${base} " + (proj.canonical) + " {first|} ."), ((base) => {
                    if (!C.isSameFunction(base.schema, proj.pslot.schema))
                        return null;
                    if (proj.pname === 'id')
                        return null;
                    return [proj.pslot];
                }), C.paramArrayKeyFn, {});
            }
        }
        if (proj.category === 'reverse_verb') {
            $grammar.declareSymbol("simple_user_search_question");
            $grammar.addRule("simple_user_search_question", [], $locale._("{can you tell me|} " + (proj.pronoun) + " " + (proj.base) + " " + (proj.canonical) + " {it|this|that} ?"), (() => {
                if (proj.pname === 'id')
                    return null;
                return [proj.pslot];
            }), C.paramArrayKeyFn, {});
            $grammar.addRule("simple_user_search_question", [], $locale._("i would like to {know|see} " + (proj.pronoun) + " " + (proj.base) + " " + (proj.canonical) + " {it|this|that} {first|} ."), (() => {
                if (proj.pname === 'id')
                    return null;
                return [proj.pslot];
            }), C.paramArrayKeyFn, {});
            $grammar.declareSymbol("simple_user_search_question");
            $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("base_table", "base", ["functionName", ((proj.pslot.schema.qualifiedName))])], $locale._("{can you tell me|} " + (proj.pronoun) + " " + (proj.base) + " " + (proj.canonical) + " the ${base} ?"), ((base) => {
                if (!C.isSameFunction(base.schema, proj.pslot.schema))
                    return null;
                if (proj.pname === 'id')
                    return null;
                return [proj.pslot];
            }), C.paramArrayKeyFn, {});
            $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("base_table", "base", undefined)], $locale._("i would like to {know|see} " + (proj.pronoun) + " " + (proj.base) + " " + (proj.canonical) + " the ${base} {first|} ."), ((base) => {
                if (!C.isSameFunction(base.schema, proj.pslot.schema))
                    return null;
                if (proj.pname === 'id')
                    return null;
                return [proj.pslot];
            }), C.paramArrayKeyFn, {});
            if (proj.base) {
                $grammar.declareSymbol("simple_user_search_question");
                $grammar.addRule("simple_user_search_question", [], $locale._("i would like to {know|see} the " + (proj.base) + " {that|which|} " + (proj.canonical) + " {it|this|that} {first|} ."), (() => {
                    if (proj.pname === 'id')
                        return null;
                    return [proj.pslot];
                }), C.paramArrayKeyFn, {});
                $grammar.declareSymbol("simple_user_search_question");
                $grammar.addRule("simple_user_search_question", [new $runtime.NonTerminal("base_table", "base", ["functionName", ((proj.pslot.schema.qualifiedName))])], $locale._("i would like to {know|see} the " + (proj.base) + " {that|which|} " + (proj.canonical) + " the ${base} {first|} ."), ((base) => {
                    if (!C.isSameFunction(base.schema, proj.pslot.schema))
                        return null;
                    if (proj.pname === 'id')
                        return null;
                    return [proj.pslot];
                }), C.paramArrayKeyFn, {});
            }
        }
    }
    $grammar.declareSymbol("simple_user_search_question_for_list");
    $grammar.addRule("simple_user_search_question_for_list", [new $runtime.NonTerminal("out_param_Any", "param", undefined)], $locale._("{can you tell me|} what are {the|their} ${param} ?"), ((param) => {
        if (param.name === 'id')
            return null;
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question_for_list", [new $runtime.NonTerminal("out_param_Any", "param", undefined)], $locale._("can you tell me {the|their} ${param} ?"), ((param) => {
        if (param.name === 'id')
            return null;
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question_for_list", [new $runtime.NonTerminal("out_param_Any", "param", undefined)], $locale._("can you tell me the ${param} {for both of them|for all of them} ?"), ((param) => {
        if (param.name === 'id')
            return null;
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question_for_list", [new $runtime.NonTerminal("out_param_Any", "param", undefined)], $locale._("{can you tell me|} what ${param} does it have ?"), ((param) => {
        if (param.name === 'id')
            return null;
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question_for_list", [new $runtime.NonTerminal("out_param_Any", "param", undefined)], $locale._("i would like to {know|see} {both of|} {the|their} ${param} {first|} ."), ((param) => {
        if (param.name === 'id')
            return null;
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question_for_list", [new $runtime.NonTerminal("out_param_Any", "param", undefined)], $locale._("i need {the|their} ${param} {first|} ."), ((param) => {
        if (param.name === 'id')
            return null;
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question_for_list", [new $runtime.NonTerminal("out_param_Any", "param", undefined)], $locale._("i just need {the|their} ${param} ."), ((param) => {
        if (param.name === 'id')
            return null;
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question_for_list", [new $runtime.NonTerminal("npp_boolean_projection", "param", undefined)], $locale._("{can you tell me|} do {they|these|those} have ${param} ?"), ((param) => {
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question_for_list", [new $runtime.NonTerminal("npp_boolean_projection", "param", undefined)], $locale._("{can you tell me|} are there ${param} ?"), ((param) => {
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question_for_list", [new $runtime.NonTerminal("npp_boolean_projection", "param", undefined)], $locale._("i would like to {know|see} {if|whether} {they|these|those} have ${param} {first|} ."), ((param) => {
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question_for_list", [new $runtime.NonTerminal("npp_boolean_projection", "param", undefined)], $locale._("i would like to {know|see} {if|whether} there are ${param} {first|} ."), ((param) => {
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question_for_list", [new $runtime.NonTerminal("avp_boolean_projection", "param", undefined)], $locale._("{can you tell me|} do {they|these|those} ${param} ?"), ((param) => {
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question_for_list", [new $runtime.NonTerminal("avp_boolean_projection", "param", undefined)], $locale._("i would like to {know|see} {if|whether} {they|these|those} ${param} {first|} ."), ((param) => {
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question_for_list", [new $runtime.NonTerminal("pvp_boolean_projection", "param", undefined)], $locale._("{can you tell me|} are {they|these|those} ${param} ?"), ((param) => {
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question_for_list", [new $runtime.NonTerminal("pvp_boolean_projection", "param", undefined)], $locale._("i would like to {know|see} {if|whether} {they|these|those} are ${param} {first|} ."), ((param) => {
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question_for_list", [new $runtime.NonTerminal("preposition_boolean_projection", "param", undefined)], $locale._("{can you tell me|} are {they|these|those} ${param} ?"), ((param) => {
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question_for_list", [new $runtime.NonTerminal("preposition_boolean_projection", "param", undefined)], $locale._("i would like to {know|see} {if|whether} {they|these|those} are ${param} {first|} ."), ((param) => {
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question_for_list", [new $runtime.NonTerminal("npi_boolean_projection", "param", undefined)], $locale._("{can you tell me|} are {they|these|those} ${param} ?"), ((param) => {
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question_for_list", [new $runtime.NonTerminal("npi_boolean_projection", "param", undefined)], $locale._("i would like to {know|see} {if|whether} {they|these|those} are ${param} {first|} ."), ((param) => {
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question_for_list", [new $runtime.NonTerminal("npv_boolean_projection", "param", undefined)], $locale._("{can you tell me|} are {they|these|those} ${param} ?"), ((param) => {
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question_for_list", [new $runtime.NonTerminal("npv_boolean_projection", "param", undefined)], $locale._("i would like to {know|see} {if|whether} {they|these|those} are ${param} {first|} ."), ((param) => {
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question_for_list", [new $runtime.NonTerminal("apv_boolean_projection", "param", undefined)], $locale._("{can you tell me|} are {they|these|those} ${param} ?"), ((param) => {
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("simple_user_search_question_for_list", [new $runtime.NonTerminal("apv_boolean_projection", "param", undefined)], $locale._("i would like to {know|see} {if|whether} {they|these|those} are ${param} {first|} ."), ((param) => {
        return [param];
    }), C.paramArrayKeyFn, {});
    $grammar.declareSymbol("boolean_user_search_question");
    $grammar.addRule("boolean_user_search_question", [new $runtime.NonTerminal("npp_filter", "param", undefined)], $locale._("does {that|it|this} have ${param} ?"), ((param) => D.booleanQuestion(null, param)), C.paramArrayKeyFn, {});
    $grammar.addRule("boolean_user_search_question", [new $runtime.NonTerminal("avp_filter", "param", undefined)], $locale._("does {that|it|this} ${param} ?"), ((param) => D.booleanQuestion(null, param)), C.paramArrayKeyFn, {});
    $grammar.addRule("boolean_user_search_question", [new $runtime.NonTerminal("apv_filter", "param", undefined), new $runtime.NonTerminal("base_table", "base", ["functionName", 0, "functionName"])], $locale._("is {that|it|this} a ${param} ${base} ?"), ((param, base) => {
        if (!base.schema.is_list)
            return null;
        return D.booleanQuestion(base, param);
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("boolean_user_search_question", [new $runtime.NonTerminal("base_table", "base", ["is_list", (true)]), new $runtime.NonTerminal("apv_filter", "param", ["functionName", 0, "functionName"])], $locale._("is {the|this|that} ${base} ${param} ?"), ((base, param) => {
        if (!base.schema.is_list)
            return null;
        return D.booleanQuestion(base, param);
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("boolean_user_search_question", [new $runtime.NonTerminal("base_table", "base", ["is_list", (true)]), new $runtime.NonTerminal("pvp_filter", "param", ["functionName", 0, "functionName"])], $locale._("is {that|it|this} a ${base} ${param} ?"), ((base, param) => {
        if (!base.schema.is_list)
            return null;
        return D.booleanQuestion(base, param);
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("boolean_user_search_question", [new $runtime.NonTerminal("base_table", "base", ["is_list", (true)]), new $runtime.NonTerminal("pvp_filter", "param", ["functionName", 0, "functionName"])], $locale._("is {the|this|that} ${base} ${param} ?"), ((base, param) => {
        if (!base.schema.is_list)
            return null;
        return D.booleanQuestion(base, param);
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("boolean_user_search_question", [new $runtime.NonTerminal("base_table", "base", ["is_list", (true)]), new $runtime.NonTerminal("preposition_filter", "param", ["functionName", 0, "functionName"])], $locale._("is {that|it|this} a ${base} ${param} ?"), ((base, param) => {
        if (!base.schema.is_list)
            return null;
        return D.booleanQuestion(base, param);
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("boolean_user_search_question", [new $runtime.NonTerminal("base_table", "base", ["is_list", (true)]), new $runtime.NonTerminal("preposition_filter", "param", ["functionName", 0, "functionName"])], $locale._("is {the|this|that} ${base} ${param} ?"), ((base, param) => {
        if (!base.schema.is_list)
            return null;
        return D.booleanQuestion(base, param);
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("boolean_user_search_question", [new $runtime.NonTerminal("base_table", "base", ["is_list", (true)]), new $runtime.NonTerminal("avp_filter", "param", ["functionName", 0, "functionName"])], $locale._("is {that|it|this} a ${base} {that|which} ${param} ?"), ((base, param) => {
        if (!base.schema.is_list)
            return null;
        return D.booleanQuestion(base, param);
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("boolean_user_search_question", [new $runtime.NonTerminal("base_table", "base", ["is_list", (true)]), new $runtime.NonTerminal("avp_filter", "param", ["functionName", 0, "functionName"])], $locale._("does {the|this|that} ${base} ${param} ?"), ((base, param) => {
        if (!base.schema.is_list)
            return null;
        return D.booleanQuestion(base, param);
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("boolean_user_search_question", [new $runtime.NonTerminal("base_table", "base", ["is_list", (true)]), new $runtime.NonTerminal("npp_filter", "param", ["functionName", 0, "functionName"])], $locale._("is {that|it|this} a ${base} {that has|with} ${param} ?"), ((base, param) => {
        if (!base.schema.is_list)
            return null;
        return D.booleanQuestion(base, param);
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("boolean_user_search_question", [new $runtime.NonTerminal("base_table", "base", ["is_list", (true)]), new $runtime.NonTerminal("npp_filter", "param", ["functionName", 0, "functionName"])], $locale._("does {the|this|that} ${base} have ${param} ?"), ((base, param) => {
        if (!base.schema.is_list)
            return null;
        return D.booleanQuestion(base, param);
    }), C.paramArrayKeyFn, {});
    $grammar.declareSymbol("boolean_user_search_question_for_list");
    $grammar.addRule("boolean_user_search_question_for_list", [new $runtime.NonTerminal("npp_filter", "param", undefined)], $locale._("{does either of|does any of} {them|these|those} have ${param} ?"), ((param) => D.booleanQuestion(null, param)), C.paramArrayKeyFn, {});
    $grammar.addRule("boolean_user_search_question_for_list", [new $runtime.NonTerminal("npp_filter", "param", undefined)], $locale._("do they have ${param} ?"), ((param) => D.booleanQuestion(null, param)), C.paramArrayKeyFn, {});
    $grammar.addRule("boolean_user_search_question_for_list", [new $runtime.NonTerminal("avp_filter", "param", undefined)], $locale._("{does either of|does any of} {them|these|those} ${param} ?"), ((param) => D.booleanQuestion(null, param)), C.paramArrayKeyFn, {});
    $grammar.addRule("boolean_user_search_question_for_list", [new $runtime.NonTerminal("avp_filter", "param", undefined)], $locale._("do they ${param} ?"), ((param) => D.booleanQuestion(null, param)), C.paramArrayKeyFn, {});
    $grammar.addRule("boolean_user_search_question_for_list", [new $runtime.NonTerminal("apv_filter", "param", undefined), new $runtime.NonTerminal("base_table", "base", ["functionName", 0, "functionName"])], $locale._("{is either of|is any of} {them|these|those} a ${param} ${base} ?"), ((param, base) => D.booleanQuestion(base, param)), C.paramArrayKeyFn, {});
    $grammar.addRule("boolean_user_search_question_for_list", [new $runtime.NonTerminal("apv_filter", "param", undefined), new $runtime.NonTerminal("base_table", "base", ["functionName", 0, "functionName"])], $locale._("are they ${param} ${base} ?"), ((param, base) => D.booleanQuestion(base, param)), C.paramArrayKeyFn, {});
    $grammar.addRule("boolean_user_search_question_for_list", [new $runtime.NonTerminal("base_table", "base", undefined), new $runtime.NonTerminal("apv_filter", "param", ["functionName", 0, "functionName"])], $locale._("are {the|these|those} ${base} ${param} ?"), ((base, param) => D.booleanQuestion(base, param)), C.paramArrayKeyFn, {});
    $grammar.addRule("boolean_user_search_question_for_list", [new $runtime.NonTerminal("base_table", "base", undefined), new $runtime.NonTerminal("pvp_filter", "param", ["functionName", 0, "functionName"])], $locale._("{is either of|is any of} {them|these|those} a ${base} ${param} ?"), ((base, param) => D.booleanQuestion(base, param)), C.paramArrayKeyFn, {});
    $grammar.addRule("boolean_user_search_question_for_list", [new $runtime.NonTerminal("base_table", "base", undefined), new $runtime.NonTerminal("pvp_filter", "param", ["functionName", 0, "functionName"])], $locale._("are they ${base} ${param} ?"), ((base, param) => D.booleanQuestion(base, param)), C.paramArrayKeyFn, {});
    $grammar.addRule("boolean_user_search_question_for_list", [new $runtime.NonTerminal("base_table", "base", undefined), new $runtime.NonTerminal("pvp_filter", "param", ["functionName", 0, "functionName"])], $locale._("are {the|these|those} ${base} ${param} ?"), ((base, param) => D.booleanQuestion(base, param)), C.paramArrayKeyFn, {});
    $grammar.addRule("boolean_user_search_question_for_list", [new $runtime.NonTerminal("base_table", "base", undefined), new $runtime.NonTerminal("preposition_filter", "param", ["functionName", 0, "functionName"])], $locale._("{is either of|is any of} {them|these|those} a ${base} ${param} ?"), ((base, param) => D.booleanQuestion(base, param)), C.paramArrayKeyFn, {});
    $grammar.addRule("boolean_user_search_question_for_list", [new $runtime.NonTerminal("base_table", "base", undefined), new $runtime.NonTerminal("preposition_filter", "param", ["functionName", 0, "functionName"])], $locale._("are they ${base} ${param} ?"), ((base, param) => D.booleanQuestion(base, param)), C.paramArrayKeyFn, {});
    $grammar.addRule("boolean_user_search_question_for_list", [new $runtime.NonTerminal("base_table", "base", undefined), new $runtime.NonTerminal("preposition_filter", "param", ["functionName", 0, "functionName"])], $locale._("are {the|these|those} ${base} ${param} ?"), ((base, param) => D.booleanQuestion(base, param)), C.paramArrayKeyFn, {});
    $grammar.addRule("boolean_user_search_question_for_list", [new $runtime.NonTerminal("base_table", "base", undefined), new $runtime.NonTerminal("avp_filter", "param", ["functionName", 0, "functionName"])], $locale._("{is either of|is any of} {them|these|those} a ${base} {that|which} ${param} ?"), ((base, param) => D.booleanQuestion(base, param)), C.paramArrayKeyFn, {});
    $grammar.addRule("boolean_user_search_question_for_list", [new $runtime.NonTerminal("base_table", "base", undefined), new $runtime.NonTerminal("avp_filter", "param", ["functionName", 0, "functionName"])], $locale._("are they ${base} {that|which} ${param} ?"), ((base, param) => D.booleanQuestion(base, param)), C.paramArrayKeyFn, {});
    $grammar.addRule("boolean_user_search_question_for_list", [new $runtime.NonTerminal("base_table", "base", undefined), new $runtime.NonTerminal("avp_filter", "param", ["functionName", 0, "functionName"])], $locale._("do {the|these|those} ${base} ${param} ?"), ((base, param) => D.booleanQuestion(base, param)), C.paramArrayKeyFn, {});
    $grammar.addRule("boolean_user_search_question_for_list", [new $runtime.NonTerminal("base_table", "base", undefined), new $runtime.NonTerminal("npp_filter", "param", ["functionName", 0, "functionName"])], $locale._("{is either of|is any of} {them|these|those} a ${base} {that has|with} ${param} ?"), ((base, param) => D.booleanQuestion(base, param)), C.paramArrayKeyFn, {});
    $grammar.addRule("boolean_user_search_question_for_list", [new $runtime.NonTerminal("base_table", "base", undefined), new $runtime.NonTerminal("npp_filter", "param", ["functionName", 0, "functionName"])], $locale._("are they ${base} {that has|with} ${param} ?"), ((base, param) => D.booleanQuestion(base, param)), C.paramArrayKeyFn, {});
    $grammar.addRule("boolean_user_search_question_for_list", [new $runtime.NonTerminal("base_table", "base", undefined), new $runtime.NonTerminal("npp_filter", "param", ["functionName", 0, "functionName"])], $locale._("do {the|these|those} ${base} have ${param} ?"), ((base, param) => D.booleanQuestion(base, param)), C.paramArrayKeyFn, {});
    $grammar.declareSymbol("user_search_question_with_name");
    $grammar.addRule("user_search_question_with_name", [new $runtime.NonTerminal("constant_name", "name", undefined), new $runtime.NonTerminal("out_param_Any", "param", ["associatedIdType", 0, "type"])], $locale._("{can you tell me|} what is ${name} 's ${param} ?"), ((name, param) => {
        if (param.name === 'id')
            return null;
        return [name, [param]];
    }), undefined, {});
    $grammar.addRule("user_search_question_with_name", [new $runtime.NonTerminal("out_param_Any", "param", undefined), new $runtime.NonTerminal("constant_name", "name", ["type", 0, "associatedIdType"])], $locale._("{can you tell me|} what is the ${param} of ${name} ?"), ((param, name) => {
        if (param.name === 'id')
            return null;
        return [name, [param]];
    }), undefined, {});
    $grammar.addRule("user_search_question_with_name", [new $runtime.NonTerminal("constant_name", "name", undefined), new $runtime.NonTerminal("out_param_Any", "param", ["associatedIdType", 0, "type"])], $locale._("can you tell me ${name} 's ${param} ?"), ((name, param) => {
        if (param.name === 'id')
            return null;
        return [name, [param]];
    }), undefined, {});
    $grammar.addRule("user_search_question_with_name", [new $runtime.NonTerminal("out_param_Any", "param", undefined), new $runtime.NonTerminal("constant_name", "name", ["type", 0, "associatedIdType"])], $locale._("can you tell me the ${param} of ${name} ?"), ((param, name) => {
        if (param.name === 'id')
            return null;
        return [name, [param]];
    }), undefined, {});
    $grammar.addRule("user_search_question_with_name", [new $runtime.NonTerminal("constant_name", "name", undefined), new $runtime.NonTerminal("out_param_Any", "param", ["associatedIdType", 0, "type"])], $locale._("i would like to {know|see} ${name} 's ${param} {first|} ."), ((name, param) => {
        if (param.name === 'id')
            return null;
        return [name, [param]];
    }), undefined, {});
    $grammar.addRule("user_search_question_with_name", [new $runtime.NonTerminal("out_param_Any", "param", undefined), new $runtime.NonTerminal("constant_name", "name", ["type", 0, "associatedIdType"])], $locale._("i would like to {know|see} the ${param} of ${name} {first|} ."), ((param, name) => {
        if (param.name === 'id')
            return null;
        return [name, [param]];
    }), undefined, {});
    $grammar.addRule("user_search_question_with_name", [new $runtime.NonTerminal("constant_name", "name", undefined), new $runtime.NonTerminal("out_param_list_for_coref_question", "params", ["associatedIdType", 0, "type"])], $locale._("{can you tell me|} what is ${name} 's ${params} ?"), ((name, params) => {
        return [name, params];
    }), undefined, {});
    $grammar.addRule("user_search_question_with_name", [new $runtime.NonTerminal("out_param_list_for_coref_question", "params", undefined), new $runtime.NonTerminal("constant_name", "name", ["type", 0, "associatedIdType"])], $locale._("{can you tell me|} what is the ${params} of ${name} ?"), ((params, name) => {
        return [name, params];
    }), undefined, {});
    $grammar.addRule("user_search_question_with_name", [new $runtime.NonTerminal("constant_name", "name", undefined), new $runtime.NonTerminal("out_param_list_for_coref_question", "params", ["associatedIdType", 0, "type"])], $locale._("can you tell me ${name} 's ${params} ?"), ((name, params) => {
        return [name, params];
    }), undefined, {});
    $grammar.addRule("user_search_question_with_name", [new $runtime.NonTerminal("out_param_list_for_coref_question", "params", undefined), new $runtime.NonTerminal("constant_name", "name", ["type", 0, "associatedIdType"])], $locale._("can you tell me the ${params} of ${name} ?"), ((params, name) => {
        return [name, params];
    }), undefined, {});
    $grammar.addRule("user_search_question_with_name", [new $runtime.NonTerminal("constant_name", "name", undefined), new $runtime.NonTerminal("out_param_list_for_coref_question", "params", ["associatedIdType", 0, "type"])], $locale._("i would like to {know|see} ${name} 's ${params} {first|} ."), ((name, params) => {
        return [name, params];
    }), undefined, {});
    $grammar.addRule("user_search_question_with_name", [new $runtime.NonTerminal("out_param_list_for_coref_question", "params", undefined), new $runtime.NonTerminal("constant_name", "name", ["type", 0, "associatedIdType"])], $locale._("i would like to {know|see} the ${params} of ${name} {first|} ."), ((params, name) => {
        return [name, params];
    }), undefined, {});
    $grammar.declareSymbol("boolean_user_search_question_with_name");
    $grammar.addRule("boolean_user_search_question_with_name", [new $runtime.NonTerminal("constant_name", "name", undefined), new $runtime.NonTerminal("npp_filter", "param", ["associatedIdType", 0, "type"])], $locale._("does ${name} have ${param} ?"), ((name, param) => {
        const idArg = param.schema.getArgument('id');
        if (!idArg || !idArg.type.equals(name.getType()))
            return null;
        const questions = D.booleanQuestion(null, param);
        if (!questions)
            return null;
        return [name, questions];
    }), undefined, {});
    $grammar.addRule("boolean_user_search_question_with_name", [new $runtime.NonTerminal("constant_name", "name", undefined), new $runtime.NonTerminal("avp_filter", "param", ["associatedIdType", 0, "type"])], $locale._("does ${name} ${param} ?"), ((name, param) => {
        const idArg = param.schema.getArgument('id');
        if (!idArg || !idArg.type.equals(name.getType()))
            return null;
        const questions = D.booleanQuestion(null, param);
        if (!questions)
            return null;
        return [name, questions];
    }), undefined, {});
    $grammar.addRule("boolean_user_search_question_with_name", [new $runtime.NonTerminal("constant_name", "name", undefined), new $runtime.NonTerminal("apv_filter", "param", ["associatedIdType", 0, "type"])], $locale._("is ${name} ${param} ?"), ((name, param) => {
        const idArg = param.schema.getArgument('id');
        if (!idArg || !idArg.type.equals(name.getType()))
            return null;
        const questions = D.booleanQuestion(null, param);
        if (!questions)
            return null;
        return [name, questions];
    }), undefined, {});
    $grammar.addRule("boolean_user_search_question_with_name", [new $runtime.NonTerminal("constant_name", "name", undefined), new $runtime.NonTerminal("pvp_filter", "param", ["associatedIdType", 0, "type"])], $locale._("is ${name} ${param} ?"), ((name, param) => {
        const idArg = param.schema.getArgument('id');
        if (!idArg || !idArg.type.equals(name.getType()))
            return null;
        const questions = D.booleanQuestion(null, param);
        if (!questions)
            return null;
        return [name, questions];
    }), undefined, {});
    $grammar.addRule("boolean_user_search_question_with_name", [new $runtime.NonTerminal("constant_name", "name", undefined), new $runtime.NonTerminal("preposition_filter", "param", ["associatedIdType", 0, "type"])], $locale._("is ${name} ${param} ?"), ((name, param) => {
        const idArg = param.schema.getArgument('id');
        if (!idArg || !idArg.type.equals(name.getType()))
            return null;
        const questions = D.booleanQuestion(null, param);
        if (!questions)
            return null;
        return [name, questions];
    }), undefined, {});
    $grammar.addRule("boolean_user_search_question_with_name", [new $runtime.NonTerminal("constant_name", "name", undefined), new $runtime.NonTerminal("apv_filter", "param", ["associatedIdType", 0, "type"]), new $runtime.NonTerminal("base_table", "base", ["functionName", 1, "functionName"])], $locale._("is ${name} a ${param} ${base} ?"), ((name, param, base) => {
        const idArg = param.schema.getArgument('id');
        if (!idArg || !idArg.type.equals(name.getType()))
            return null;
        const questions = D.booleanQuestion(base, param);
        if (!questions)
            return null;
        return [name, questions];
    }), undefined, {});
    $grammar.addRule("boolean_user_search_question_with_name", [new $runtime.NonTerminal("constant_name", "name", undefined), new $runtime.NonTerminal("base_table", "base", ["idType", 0, "type"]), new $runtime.NonTerminal("pvp_filter", "param", ["functionName", 1, "functionName"])], $locale._("is ${name} a ${base} ${param} ?"), ((name, base, param) => {
        const idArg = param.schema.getArgument('id');
        if (!idArg || !idArg.type.equals(name.getType()))
            return null;
        const questions = D.booleanQuestion(base, param);
        if (!questions)
            return null;
        return [name, questions];
    }), undefined, {});
    $grammar.addRule("boolean_user_search_question_with_name", [new $runtime.NonTerminal("constant_name", "name", undefined), new $runtime.NonTerminal("base_table", "base", ["idType", 0, "type"]), new $runtime.NonTerminal("preposition_filter", "param", ["functionName", 1, "functionName"])], $locale._("is ${name} a ${base} ${param} ?"), ((name, base, param) => {
        const idArg = param.schema.getArgument('id');
        if (!idArg || !idArg.type.equals(name.getType()))
            return null;
        const questions = D.booleanQuestion(base, param);
        if (!questions)
            return null;
        return [name, questions];
    }), undefined, {});
    $grammar.addRule("boolean_user_search_question_with_name", [new $runtime.NonTerminal("constant_name", "name", undefined), new $runtime.NonTerminal("base_table", "base", ["idType", 0, "type"]), new $runtime.NonTerminal("avp_filter", "param", ["functionName", 1, "functionName"])], $locale._("is ${name} a ${base} {that|which} ${param} ?"), ((name, base, param) => {
        const idArg = param.schema.getArgument('id');
        if (!idArg || !idArg.type.equals(name.getType()))
            return null;
        const questions = D.booleanQuestion(base, param);
        if (!questions)
            return null;
        return [name, questions];
    }), undefined, {});
    $grammar.addRule("boolean_user_search_question_with_name", [new $runtime.NonTerminal("constant_name", "name", undefined), new $runtime.NonTerminal("base_table", "base", ["idType", 0, "type"]), new $runtime.NonTerminal("npp_filter", "param", ["functionName", 1, "functionName"])], $locale._("is ${name} a ${base} {that has|with} ${param} ?"), ((name, base, param) => {
        const idArg = param.schema.getArgument('id');
        if (!idArg || !idArg.type.equals(name.getType()))
            return null;
        const questions = D.booleanQuestion(base, param);
        if (!questions)
            return null;
        return [name, questions];
    }), undefined, {});
    $grammar.declareSymbol("user_search_question");
    $grammar.addRule("user_search_question", [new $runtime.NonTerminal("simple_user_search_question", "questions", undefined)], $locale._("{no ,|} ${questions}"), ((questions) => questions), C.paramArrayKeyFn, {});
    $grammar.addRule("user_search_question", [new $runtime.NonTerminal("thingpedia_user_question", "questions", undefined)], $locale._("{no ,|} ${questions} ?"), ((questions) => questions), C.paramArrayKeyFn, { weight: (0.3) });
    $grammar.addRule("user_search_question", [new $runtime.NonTerminal("boolean_user_search_question", "questions", undefined)], "${questions}", ((questions) => questions), C.paramArrayKeyFn, {});
    $grammar.declareSymbol("user_search_question_for_list");
    $grammar.addRule("user_search_question_for_list", [new $runtime.NonTerminal("simple_user_search_question", "questions", undefined)], "${questions}", ((questions) => [null, questions]), D.userSearchQuestionForListKeyFn, {});
    $grammar.addRule("user_search_question_for_list", [new $runtime.NonTerminal("simple_user_search_question_for_list", "questions", undefined)], "${questions}", ((questions) => [null, questions]), D.userSearchQuestionForListKeyFn, {});
    $grammar.addRule("user_search_question_for_list", [new $runtime.NonTerminal("boolean_user_search_question_for_list", "questions", undefined)], "${questions}", ((questions) => [null, questions]), D.userSearchQuestionForListKeyFn, {});
    if ($options.flags.multiwoz) {
        $grammar.addRule("user_search_question_for_list", [new $runtime.NonTerminal("user_search_question_with_name", undefined, undefined)], "${user_search_question_with_name}", (($0) => { return $0; }), D.userSearchQuestionForListKeyFn, { identity: (true) });
        $grammar.addRule("user_search_question_for_list", [new $runtime.NonTerminal("boolean_user_search_question_with_name", undefined, undefined)], "${boolean_user_search_question_with_name}", (($0) => { return $0; }), D.userSearchQuestionForListKeyFn, { identity: (true) });
    }
}
exports.$load = $load;
;
//# sourceMappingURL=coref-questions.genie.out.js.map