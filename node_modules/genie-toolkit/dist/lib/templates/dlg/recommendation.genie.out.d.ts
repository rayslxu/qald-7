import type $SentenceGenerator from "../../sentence-generator/generator";
import * as $SentenceGeneratorTypes from "../../sentence-generator/types";
import * as $I18n from "../../i18n/index";
import { Ast } from 'thingtalk';
import * as D from '../dialogue_acts';
import ThingpediaLoader from '../load-thingpedia';
export declare const question_system_recommendation_short: $SentenceGeneratorTypes.NonTerminal<D.Recommendation>;
export declare const action_recommendation: $SentenceGeneratorTypes.NonTerminal<D.Recommendation>;
export declare const actionable_system_recommendation_short: $SentenceGeneratorTypes.NonTerminal<D.Recommendation>;
export declare const proposal_info_action_pair: $SentenceGeneratorTypes.NonTerminal<[D.ResultPhrase, Ast.Invocation | null]>;
export declare const direct_user_question_answer: $SentenceGeneratorTypes.NonTerminal<D.Recommendation>;
export declare const actionable_system_display_result_short: $SentenceGeneratorTypes.NonTerminal<D.Recommendation>;
export declare const system_nonlist_result: $SentenceGeneratorTypes.NonTerminal<D.Recommendation>;
export declare const system_recommendation: $SentenceGeneratorTypes.NonTerminal<D.Recommendation>;
export declare const recommendation_accept_phrase_with_action: $SentenceGeneratorTypes.NonTerminal<Ast.Invocation>;
export declare const recommendation_accept_phrase_by_name: $SentenceGeneratorTypes.NonTerminal<[Ast.EntityValue | Ast.NumberValue, Ast.Invocation | null]>;
/**
 * Load the templates in this file.
 *
 * This is an autogenerated method that will be called by the {@link SentenceGenerator}
 * when the templates are imported.
 */
export declare function $load($options: $SentenceGeneratorTypes.GrammarOptions, $locale: $I18n.LanguagePack, $grammar: $SentenceGenerator, $loader: ThingpediaLoader): Promise<void>;
