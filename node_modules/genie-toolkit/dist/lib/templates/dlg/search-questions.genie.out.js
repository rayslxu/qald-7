"use strict";
// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$load = exports.imprecise_search_question_answer = exports.imprecise_search_answer = exports.imprecise_search_answer_phrase = exports.imprecise_search_coref_answer = exports.coref_constant = exports.specific_dontcare_phrase = exports.precise_search_question_answer = exports.verbose_search_answer_with_action = exports.verbose_search_answer = exports.search_question = exports.simple_search_question = exports.generic_question = exports.disjunctive_search_question = exports.question_pvp_filter_pair = exports.question_preposition_filter_pair = exports.question_avp_filter_pair = exports.question_apv_filter_pair = exports.question_npp_filter_pair = exports.two_param_yesno_direct_search_question = exports.one_param_yesno_direct_search_question_with_preamble = exports.one_param_yesno_direct_search_question = exports.two_param_direct_search_question = exports.one_param_direct_search_question_with_preamble = exports.one_param_direct_search_question = void 0;
// Slot fill templates: the agent asks a question, and the user replies
//
// There are two types slot-fill templates:
// - for searches: the agent is trying to add a filter
// - for actions/queries w/ parameters: the agent is trying to add a parameter
const $runtime = __importStar(require("../../sentence-generator/runtime"));
const thingtalk_1 = require("thingtalk");
const C = __importStar(require("../ast_manip"));
const D = __importStar(require("../dialogue_acts"));
exports.one_param_direct_search_question = "one_param_direct_search_question";
exports.one_param_direct_search_question_with_preamble = "one_param_direct_search_question_with_preamble";
exports.two_param_direct_search_question = "two_param_direct_search_question";
exports.one_param_yesno_direct_search_question = "one_param_yesno_direct_search_question";
exports.one_param_yesno_direct_search_question_with_preamble = "one_param_yesno_direct_search_question_with_preamble";
exports.two_param_yesno_direct_search_question = "two_param_yesno_direct_search_question";
exports.question_npp_filter_pair = "question_npp_filter_pair";
exports.question_apv_filter_pair = "question_apv_filter_pair";
exports.question_avp_filter_pair = "question_avp_filter_pair";
exports.question_preposition_filter_pair = "question_preposition_filter_pair";
exports.question_pvp_filter_pair = "question_pvp_filter_pair";
exports.disjunctive_search_question = "disjunctive_search_question";
exports.generic_question = "generic_question";
exports.simple_search_question = "simple_search_question";
exports.search_question = "search_question";
exports.verbose_search_answer = "verbose_search_answer";
exports.verbose_search_answer_with_action = "verbose_search_answer_with_action";
exports.precise_search_question_answer = "precise_search_question_answer";
exports.specific_dontcare_phrase = "specific_dontcare_phrase";
exports.coref_constant = "coref_constant";
exports.imprecise_search_coref_answer = "imprecise_search_coref_answer";
exports.imprecise_search_answer_phrase = "imprecise_search_answer_phrase";
exports.imprecise_search_answer = "imprecise_search_answer";
exports.imprecise_search_question_answer = "imprecise_search_question_answer";
/**
 * Load the templates in this file.
 *
 * This is an autogenerated method that will be called by the {@link SentenceGenerator}
 * when the templates are imported.
 */
async function $load($options, $locale, $grammar, $loader) {
    $grammar.declareSymbol("one_param_direct_search_question");
    $grammar.addRule("one_param_direct_search_question", [new $runtime.NonTerminal("out_param_Any", "p", ["filterable", (true)]), new $runtime.NonTerminal("prefer_question_phrase", undefined, undefined)], $locale._("what ${p} ${prefer_question_phrase} ?"), ((p, $0) => {
        if (p.name === 'id')
            return null;
        if (!p.filterable)
            return null;
        return [p];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("one_param_direct_search_question", [new $runtime.NonTerminal("thingpedia_search_question", "p", ["filterable", (true)])], $locale._("${p} ?"), ((p) => {
        if (p.name === 'id')
            return null;
        if (!p.filterable)
            return null;
        return [p];
    }), C.paramArrayKeyFn, {});
    $grammar.declareSymbol("one_param_direct_search_question_with_preamble");
    $grammar.addRule("one_param_direct_search_question_with_preamble", [new $runtime.NonTerminal("search_result_preamble", undefined, undefined), new $runtime.NonTerminal("one_param_direct_search_question", "question", undefined)], $locale._("${search_result_preamble} ${question}"), (($0, question) => question), C.paramArrayKeyFn, {});
    $grammar.declareSymbol("two_param_direct_search_question");
    $grammar.addRule("two_param_direct_search_question", [new $runtime.NonTerminal("out_param_Any", "p1", ["filterable", (true)]), new $runtime.NonTerminal("out_param_Any", "p2", ["functionName", 0, "functionName"]), new $runtime.NonTerminal("prefer_question_phrase", undefined, undefined)], $locale._("what ${p1} and ${p2} ${prefer_question_phrase} ?"), ((p1, p2, $0) => {
        if (!C.isSameFunction(p1.schema, p2.schema))
            return null;
        if (p1.name === 'id' || p2.name === 'id' || p1.name === p2.name)
            return null;
        if (!p1.filterable || !p2.filterable)
            return null;
        return [p1, p2];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("two_param_direct_search_question", [new $runtime.NonTerminal("thingpedia_search_question", "p1", ["filterable", (true)]), new $runtime.NonTerminal("out_param_Any", "p2", ["functionName", 0, "functionName"]), new $runtime.NonTerminal("prefer_question_phrase", undefined, undefined)], $locale._("${p1} and what ${p2} ${prefer_question_phrase} ?"), ((p1, p2, $0) => {
        if (!C.isSameFunction(p1.schema, p2.schema))
            return null;
        if (p1.name === 'id' || p2.name === 'id' || p1.name === p2.name)
            return null;
        if (!p1.filterable || !p2.filterable)
            return null;
        return [p1, p2];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("two_param_direct_search_question", [new $runtime.NonTerminal("out_param_Any", "p1", ["filterable", (true)]), new $runtime.NonTerminal("prefer_question_phrase", undefined, undefined), new $runtime.NonTerminal("thingpedia_search_question", "p2", ["functionName", 0, "functionName"])], $locale._("what ${p1} ${prefer_question_phrase} and ${p2} ?"), ((p1, $0, p2) => {
        if (!C.isSameFunction(p1.schema, p2.schema))
            return null;
        if (p1.name === 'id' || p2.name === 'id' || p1.name === p2.name)
            return null;
        if (!p1.filterable || !p2.filterable)
            return null;
        return [p1, p2];
    }), C.paramArrayKeyFn, {});
    $grammar.declareSymbol("one_param_yesno_direct_search_question");
    $grammar.addRule("one_param_yesno_direct_search_question", [new $runtime.NonTerminal("out_param_Any", "p", ["filterable", (true)])], $locale._("any preference of ${p} ?"), ((p) => {
        if (p.name === 'id')
            return null;
        if (!p.filterable)
            return null;
        return [p];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("one_param_yesno_direct_search_question", [new $runtime.NonTerminal("out_param_Any", "p", ["filterable", (true)])], $locale._("do you have a specific ${p} in mind?"), ((p) => {
        if (p.name === 'id')
            return null;
        if (!p.filterable)
            return null;
        return [p];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("one_param_yesno_direct_search_question", [new $runtime.NonTerminal("out_param_Any", "p", ["filterable", (true)])], $locale._("do you have a preference of ${p} ?"), ((p) => {
        if (p.name === 'id')
            return null;
        if (!p.filterable)
            return null;
        return [p];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("one_param_yesno_direct_search_question", [new $runtime.NonTerminal("out_param_Any", "p", ["filterable", (true)])], $locale._("do you have a preferred ${p} ?"), ((p) => {
        if (p.name === 'id')
            return null;
        if (!p.filterable)
            return null;
        return [p];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("one_param_yesno_direct_search_question", [new $runtime.NonTerminal("out_param_Any", "p", ["filterable", (true)])], $locale._("are you looking for a specific ${p} ?"), ((p) => {
        if (p.name === 'id')
            return null;
        if (!p.filterable)
            return null;
        return [p];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("one_param_yesno_direct_search_question", [new $runtime.NonTerminal("out_param_Any", "p", ["filterable", (true)])], $locale._("are you interested in a specific ${p} ?"), ((p) => {
        if (p.name === 'id')
            return null;
        if (!p.filterable)
            return null;
        return [p];
    }), C.paramArrayKeyFn, {});
    $grammar.declareSymbol("one_param_yesno_direct_search_question_with_preamble");
    $grammar.addRule("one_param_yesno_direct_search_question_with_preamble", [new $runtime.NonTerminal("search_result_preamble", undefined, undefined), new $runtime.NonTerminal("one_param_yesno_direct_search_question", "question", undefined)], $locale._("${search_result_preamble} ${question}"), (($0, question) => question), C.paramArrayKeyFn, {});
    $grammar.declareSymbol("two_param_yesno_direct_search_question");
    $grammar.addRule("two_param_yesno_direct_search_question", [new $runtime.NonTerminal("out_param_Any", "p1", ["filterable", (true)]), new $runtime.NonTerminal("out_param_Any", "p2", ["functionName", 0, "functionName"])], $locale._("any preference of ${p1} or ${p2} ?"), ((p1, p2) => {
        if (!C.isSameFunction(p1.schema, p2.schema))
            return null;
        if (p1.name === 'id' || p2.name === 'id' || p1.name === p2.name)
            return null;
        if (!p1.filterable || !p2.filterable)
            return null;
        return [p1, p2];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("two_param_yesno_direct_search_question", [new $runtime.NonTerminal("out_param_Any", "p1", ["filterable", (true)]), new $runtime.NonTerminal("out_param_Any", "p2", ["functionName", 0, "functionName"])], $locale._("do you have a specific ${p1} or ${p2} in mind?"), ((p1, p2) => {
        if (!C.isSameFunction(p1.schema, p2.schema))
            return null;
        if (p1.name === 'id' || p2.name === 'id' || p1.name === p2.name)
            return null;
        if (!p1.filterable || !p2.filterable)
            return null;
        return [p1, p2];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("two_param_yesno_direct_search_question", [new $runtime.NonTerminal("out_param_Any", "p1", ["filterable", (true)]), new $runtime.NonTerminal("out_param_Any", "p2", ["functionName", 0, "functionName"])], $locale._("do you have a preference of ${p1} or ${p2} ?"), ((p1, p2) => {
        if (!C.isSameFunction(p1.schema, p2.schema))
            return null;
        if (p1.name === 'id' || p2.name === 'id' || p1.name === p2.name)
            return null;
        if (!p1.filterable || !p2.filterable)
            return null;
        return [p1, p2];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("two_param_yesno_direct_search_question", [new $runtime.NonTerminal("out_param_Any", "p1", ["filterable", (true)]), new $runtime.NonTerminal("out_param_Any", "p2", ["functionName", 0, "functionName"])], $locale._("do you have a preferred ${p1} or ${p2} ?"), ((p1, p2) => {
        if (!C.isSameFunction(p1.schema, p2.schema))
            return null;
        if (p1.name === 'id' || p2.name === 'id' || p1.name === p2.name)
            return null;
        if (!p1.filterable || !p2.filterable)
            return null;
        return [p1, p2];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("two_param_yesno_direct_search_question", [new $runtime.NonTerminal("out_param_Any", "p1", ["filterable", (true)]), new $runtime.NonTerminal("out_param_Any", "p2", ["functionName", 0, "functionName"])], $locale._("are you looking for a specific ${p1} or ${p2} ?"), ((p1, p2) => {
        if (!C.isSameFunction(p1.schema, p2.schema))
            return null;
        if (p1.name === 'id' || p2.name === 'id' || p1.name === p2.name)
            return null;
        if (!p1.filterable || !p2.filterable)
            return null;
        return [p1, p2];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("two_param_yesno_direct_search_question", [new $runtime.NonTerminal("out_param_Any", "p1", ["filterable", (true)]), new $runtime.NonTerminal("out_param_Any", "p2", ["functionName", 0, "functionName"])], $locale._("are you interested in a specific ${p1} or ${p2} ?"), ((p1, p2) => {
        if (!C.isSameFunction(p1.schema, p2.schema))
            return null;
        if (p1.name === 'id' || p2.name === 'id' || p1.name === p2.name)
            return null;
        if (!p1.filterable || !p2.filterable)
            return null;
        return [p1, p2];
    }), C.paramArrayKeyFn, {});
    $grammar.declareSymbol("question_npp_filter_pair");
    $grammar.addRule("question_npp_filter_pair", [new $runtime.NonTerminal("ctx_with_result_noquestion", "ctx", undefined), new $runtime.NonTerminal("npp_filter", "f1", ["functionName", 0, "currentFunction"]), new $runtime.NonTerminal("npp_filter", "f2", ["functionName", 0, "currentFunction"])], $locale._("${ctx} ${f1} or ${f2}"), ((ctx, f1, f2) => D.checkFilterPairForDisjunctiveQuestion(ctx, f1, f2)), C.paramKeyFn, {});
    $grammar.addRule("question_npp_filter_pair", [new $runtime.NonTerminal("ctx_with_result_noquestion", "ctx", undefined), new $runtime.NonTerminal("npp_filter", "f1", ["functionName", 0, "currentFunction"]), new $runtime.NonTerminal("constant_Any", "c", ["type", 1, "type"])], $locale._("${ctx} ${f1} or ${c}"), ((ctx, f1, c) => D.checkFilterPairForDisjunctiveQuestionWithConstant(ctx, f1, c)), C.paramKeyFn, {});
    $grammar.declareSymbol("question_apv_filter_pair");
    $grammar.addRule("question_apv_filter_pair", [new $runtime.NonTerminal("ctx_with_result_noquestion", "ctx", undefined), new $runtime.NonTerminal("apv_filter", "f1", ["functionName", 0, "currentFunction"]), new $runtime.NonTerminal("apv_filter", "f2", ["functionName", 0, "currentFunction"])], $locale._("${ctx} ${f1} or ${f2}"), ((ctx, f1, f2) => D.checkFilterPairForDisjunctiveQuestion(ctx, f1, f2)), C.paramKeyFn, {});
    $grammar.declareSymbol("question_avp_filter_pair");
    $grammar.addRule("question_avp_filter_pair", [new $runtime.NonTerminal("ctx_with_result_noquestion", "ctx", undefined), new $runtime.NonTerminal("avp_filter", "f1", ["functionName", 0, "currentFunction"]), new $runtime.NonTerminal("constant_Any", "c", ["type", 1, "type"])], $locale._("${ctx} ${f1} or ${c}"), ((ctx, f1, c) => D.checkFilterPairForDisjunctiveQuestionWithConstant(ctx, f1, c)), C.paramKeyFn, {});
    $grammar.declareSymbol("question_preposition_filter_pair");
    $grammar.addRule("question_preposition_filter_pair", [new $runtime.NonTerminal("ctx_with_result_noquestion", "ctx", undefined), new $runtime.NonTerminal("preposition_filter", "f1", ["functionName", 0, "currentFunction"]), new $runtime.NonTerminal("preposition_filter", "f2", ["functionName", 0, "currentFunction"])], $locale._("${ctx} ${f1} or ${f2}"), ((ctx, f1, f2) => D.checkFilterPairForDisjunctiveQuestion(ctx, f1, f2)), C.paramKeyFn, {});
    $grammar.declareSymbol("question_pvp_filter_pair");
    $grammar.addRule("question_pvp_filter_pair", [new $runtime.NonTerminal("ctx_with_result_noquestion", "ctx", undefined), new $runtime.NonTerminal("pvp_filter", "f1", ["functionName", 0, "currentFunction"]), new $runtime.NonTerminal("pvp_filter", "f2", ["functionName", 0, "currentFunction"])], $locale._("${ctx} ${f1} or ${f2}"), ((ctx, f1, f2) => D.checkFilterPairForDisjunctiveQuestion(ctx, f1, f2)), C.paramKeyFn, {});
    $grammar.declareSymbol("disjunctive_search_question");
    $grammar.addRule("disjunctive_search_question", [new $runtime.NonTerminal("question_npp_filter_pair", "question", undefined)], $locale._("{are you looking for|would you like|do you need} something with ${question} ?"), ((question) => [question]), C.paramArrayKeyFn, {});
    $grammar.addRule("disjunctive_search_question", [new $runtime.NonTerminal("question_apv_filter_pair", "question", undefined)], $locale._("{are you looking for|would you like|do you need} something ${question} ?"), ((question) => [question]), C.paramArrayKeyFn, {});
    $grammar.addRule("disjunctive_search_question", [new $runtime.NonTerminal("question_preposition_filter_pair", "question", undefined)], $locale._("{are you looking for|would you like|do you need} something ${question} ?"), ((question) => [question]), C.paramArrayKeyFn, {});
    $grammar.addRule("disjunctive_search_question", [new $runtime.NonTerminal("question_pvp_filter_pair", "question", undefined)], $locale._("{are you looking for|would you like|do you need} something ${question} ?"), ((question) => [question]), C.paramArrayKeyFn, {});
    $grammar.addRule("disjunctive_search_question", [new $runtime.NonTerminal("question_avp_filter_pair", "question", undefined)], $locale._("{are you looking for|would you like|do you need} something that ${question} ?"), ((question) => [question]), C.paramArrayKeyFn, {});
    $grammar.addRule("disjunctive_search_question", [new $runtime.NonTerminal("base_table", "table", undefined), new $runtime.NonTerminal("question_npp_filter_pair", "question", ["functionName", 0, "functionName"])], $locale._("{are you looking for|would you like|do you need} a ${table} {with|that has} ${question} ?"), ((table, question) => {
        if (!C.isSameFunction(table.schema, question.schema))
            return null;
        return [question];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("disjunctive_search_question", [new $runtime.NonTerminal("question_apv_filter_pair", "question", undefined), new $runtime.NonTerminal("base_table", "table", ["functionName", 0, "functionName"])], $locale._("{are you looking for|would you like|do you need} a ${question} ${table} ?"), ((question, table) => {
        if (!C.isSameFunction(table.schema, question.schema))
            return null;
        return [question];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("disjunctive_search_question", [new $runtime.NonTerminal("base_table", "table", undefined), new $runtime.NonTerminal("question_pvp_filter_pair", "question", ["functionName", 0, "functionName"])], $locale._("{are you looking for|would you like|do you need} a ${table} ${question} ?"), ((table, question) => {
        if (!C.isSameFunction(table.schema, question.schema))
            return null;
        return [question];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("disjunctive_search_question", [new $runtime.NonTerminal("base_table", "table", undefined), new $runtime.NonTerminal("question_preposition_filter_pair", "question", ["functionName", 0, "functionName"])], $locale._("{are you looking for|would you like|do you need} a ${table} ${question} ?"), ((table, question) => {
        if (!C.isSameFunction(table.schema, question.schema))
            return null;
        return [question];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("disjunctive_search_question", [new $runtime.NonTerminal("base_table", "table", undefined), new $runtime.NonTerminal("question_avp_filter_pair", "question", ["functionName", 0, "functionName"])], $locale._("{are you looking for|would you like|do you need} a ${table} that ${question} ?"), ((table, question) => {
        if (!C.isSameFunction(table.schema, question.schema))
            return null;
        return [question];
    }), C.paramArrayKeyFn, {});
    $grammar.declareSymbol("generic_question");
    $grammar.addRule("generic_question", [], $locale._("which one would you like ?"), (() => []), undefined, {});
    $grammar.addRule("generic_question", [], $locale._("do you have a specific one in mind ?"), (() => []), undefined, {});
    $grammar.addRule("generic_question", [], $locale._("do you have any more information to narrow down the search ?"), (() => []), undefined, {});
    $grammar.declareSymbol("simple_search_question");
    $grammar.addRule("simple_search_question", [new $runtime.NonTerminal("one_param_direct_search_question", undefined, undefined)], "${one_param_direct_search_question}", (($0) => { return $0; }), C.paramArrayKeyFn, { priority: (0.1), identity: (true) });
    $grammar.addRule("simple_search_question", [new $runtime.NonTerminal("two_param_direct_search_question", undefined, undefined)], "${two_param_direct_search_question}", (($0) => { return $0; }), C.paramArrayKeyFn, { identity: (true) });
    if ($options.flags.disjunctive_search_questions) {
        $grammar.addRule("simple_search_question", [new $runtime.NonTerminal("disjunctive_search_question", undefined, undefined)], "${disjunctive_search_question}", (($0) => { return $0; }), C.paramArrayKeyFn, { identity: (true) });
    }
    $grammar.addRule("simple_search_question", [new $runtime.NonTerminal("one_param_yesno_direct_search_question", undefined, undefined)], "${one_param_yesno_direct_search_question}", (($0) => { return $0; }), C.paramArrayKeyFn, { priority: (0.1), identity: (true) });
    $grammar.addRule("simple_search_question", [new $runtime.NonTerminal("two_param_yesno_direct_search_question", undefined, undefined)], "${two_param_yesno_direct_search_question}", (($0) => { return $0; }), C.paramArrayKeyFn, { identity: (true) });
    $grammar.declareSymbol("search_question");
    $grammar.addRule("search_question", [new $runtime.NonTerminal("simple_search_question", undefined, undefined)], "${simple_search_question}", (($0) => { return $0; }), C.paramArrayKeyFn, { identity: (true) });
    $grammar.addRule("search_question", [new $runtime.NonTerminal("search_result_preamble", undefined, undefined), new $runtime.NonTerminal("simple_search_question", "question", undefined)], $locale._("${search_result_preamble} ${question}"), (($0, question) => question), C.paramArrayKeyFn, { weight: (0.1) });
    $grammar.declareSymbol("verbose_search_answer");
    if ($options.flags.multiwoz) {
        $grammar.addRule("verbose_search_answer", [new $runtime.NonTerminal("generic_preamble_for_answer", undefined, undefined), new $runtime.NonTerminal("answer_noun_phrase", "query", undefined)], $locale._("${generic_preamble_for_answer} {a|the} ${query}"), (($0, query) => query), C.expressionKeyFn, {});
    }
    $grammar.addRule("verbose_search_answer", [new $runtime.NonTerminal("generic_preamble_for_answer", undefined, undefined), new $runtime.NonTerminal("anything_phrase", "query", undefined)], $locale._("${generic_preamble_for_answer} ${query}"), (($0, query) => query), C.expressionKeyFn, {});
    $grammar.declareSymbol("verbose_search_answer_with_action");
    $grammar.addRule("verbose_search_answer_with_action", [new $runtime.NonTerminal("verbose_search_answer", "query", undefined), new $runtime.NonTerminal("generic_preamble_for_action", undefined, undefined), new $runtime.NonTerminal("coref_action_command", "action", undefined)], $locale._("${query} {.|,} ${generic_preamble_for_action} ${action}"), ((query, $0, action) => {
        // check that one of the parameters of action has the right type to param pass into the action
        let idArg = query.schema.getArgument('id');
        if (!idArg)
            return null;
        let found = false;
        for (let arg of action.schema.iterateArguments()) {
            if (!arg.is_input)
                continue;
            if (arg.type.equals(idArg.type)) {
                found = true;
                break;
            }
        }
        if (!found)
            return null;
        return [query, action];
    }), undefined, {});
    $grammar.declareSymbol("precise_search_question_answer");
    $grammar.addRule("precise_search_question_answer", [new $runtime.NonTerminal("verbose_search_answer", "table", undefined)], "${table}", ((table) => [table, null, false]), D.preciseSearchQuestionAnswerKeyFn, {});
    $grammar.addRule("precise_search_question_answer", [new $runtime.NonTerminal("verbose_search_answer", "table", undefined)], $locale._("{yes|yes ,|} ${table}"), ((table) => [table, null, true]), D.preciseSearchQuestionAnswerKeyFn, {});
    $grammar.addRule("precise_search_question_answer", [new $runtime.NonTerminal("verbose_search_answer_with_action", "table_action", undefined)], "${table_action}", ((table_action) => [...table_action, false]), D.preciseSearchQuestionAnswerKeyFn, {});
    $grammar.addRule("precise_search_question_answer", [new $runtime.NonTerminal("verbose_search_answer_with_action", "table_action", undefined)], $locale._("{yes|yes ,|} ${table_action}"), ((table_action) => [...table_action, true]), D.preciseSearchQuestionAnswerKeyFn, {});
    $grammar.declareSymbol("specific_dontcare_phrase");
    $grammar.addRule("specific_dontcare_phrase", [new $runtime.NonTerminal("out_param_Any", "param", undefined)], $locale._("the ${param} does not matter ."), ((param) => C.makeDontCareFilter(param)), C.filterKeyFn, {});
    $grammar.addRule("specific_dontcare_phrase", [new $runtime.NonTerminal("out_param_Any", "param", undefined)], $locale._("the ${param} is not an issue ."), ((param) => C.makeDontCareFilter(param)), C.filterKeyFn, {});
    $grammar.addRule("specific_dontcare_phrase", [new $runtime.NonTerminal("out_param_Any", "param", undefined)], $locale._("the ${param} is not important ."), ((param) => C.makeDontCareFilter(param)), C.filterKeyFn, {});
    $grammar.addRule("specific_dontcare_phrase", [new $runtime.NonTerminal("out_param_Any", "param", undefined)], $locale._("the ${param} does not matter . can you suggest one ?"), ((param) => C.makeDontCareFilter(param)), C.filterKeyFn, {});
    $grammar.addRule("specific_dontcare_phrase", [new $runtime.NonTerminal("out_param_Any", "param", undefined)], $locale._("i {do not have a|have no} preference of  ${param} ."), ((param) => C.makeDontCareFilter(param)), C.filterKeyFn, {});
    $grammar.addRule("specific_dontcare_phrase", [new $runtime.NonTerminal("out_param_Any", "param", undefined)], $locale._("i {do not have a|have no} preference of  ${param} . what do you recommend ?"), ((param) => C.makeDontCareFilter(param)), C.filterKeyFn, {});
    $grammar.addRule("specific_dontcare_phrase", [new $runtime.NonTerminal("out_param_Any", "param", undefined)], $locale._("i have no preference of  ${param} . please make a recommendation ."), ((param) => C.makeDontCareFilter(param)), C.filterKeyFn, {});
    $grammar.addRule("specific_dontcare_phrase", [new $runtime.NonTerminal("npp_filter", "param", undefined)], $locale._("{i do not care that it has|it need not have|i do not need} ${param}"), ((param) => {
        var _a, _b;
        if (!(param.ast instanceof thingtalk_1.Ast.AtomBooleanExpression))
            return null;
        if (!(param.ast.value instanceof thingtalk_1.Ast.BooleanValue) || param.ast.value.value !== true)
            return null;
        return C.makeDontCareFilter({ schema: param.schema, type: param.ptype, name: param.ast.name,
            filterable: (_a = param.schema.getArgument(param.ast.name).getImplementationAnnotation('filterable')) !== null && _a !== void 0 ? _a : true,
            symmetric: (_b = param.schema.getArgument(param.ast.name).getImplementationAnnotation('symmetric')) !== null && _b !== void 0 ? _b : false,
            ast: new thingtalk_1.Ast.Value.VarRef(param.ast.name) });
    }), C.filterKeyFn, {});
    $grammar.declareSymbol("coref_constant");
    $grammar.addRule("coref_constant", [new $runtime.NonTerminal("ctx_multidomain", "ctx", undefined), new $runtime.NonTerminal("base_table", "base", undefined), new $runtime.NonTerminal("out_param_Any", "param", ["functionName", 1, "functionName"])], $locale._("${ctx} {the|the same} ${base} 's ${param} ."), ((ctx, base, param) => D.corefConstant(ctx, base, param)), C.valueKeyFn, {});
    $grammar.addRule("coref_constant", [new $runtime.NonTerminal("ctx_multidomain", "ctx", undefined), new $runtime.NonTerminal("generic_preamble_for_answer", undefined, undefined), new $runtime.NonTerminal("base_table", "base", undefined), new $runtime.NonTerminal("out_param_Any", "param", ["functionName", 2, "functionName"])], $locale._("${ctx} ${generic_preamble_for_answer} {the|the same} ${base} 's ${param} ."), ((ctx, $0, base, param) => D.corefConstant(ctx, base, param)), C.valueKeyFn, {});
    $grammar.addRule("coref_constant", [new $runtime.NonTerminal("ctx_multidomain", "ctx", undefined), new $runtime.NonTerminal("out_param_Any", "param", undefined), new $runtime.NonTerminal("base_table", "base", ["functionName", 1, "functionName"])], $locale._("${ctx} the same ${param} as the ${base} ."), ((ctx, param, base) => D.corefConstant(ctx, base, param)), C.valueKeyFn, {});
    $grammar.addRule("coref_constant", [new $runtime.NonTerminal("ctx_multidomain", "ctx", undefined), new $runtime.NonTerminal("generic_preamble_for_answer", undefined, undefined), new $runtime.NonTerminal("out_param_Any", "param", undefined), new $runtime.NonTerminal("base_table", "base", ["functionName", 2, "functionName"])], $locale._("${ctx} ${generic_preamble_for_answer} the same ${param} as the ${base} ."), ((ctx, $0, param, base) => D.corefConstant(ctx, base, param)), C.valueKeyFn, {});
    $grammar.addRule("coref_constant", [new $runtime.NonTerminal("ctx_multidomain", "ctx", undefined), new $runtime.NonTerminal("out_param_Any", "param", undefined), new $runtime.NonTerminal("base_table", "base", ["functionName", 1, "functionName"])], $locale._("${ctx} {the same as the|the} ${param} of the ${base} ."), ((ctx, param, base) => D.corefConstant(ctx, base, param)), C.valueKeyFn, {});
    $grammar.addRule("coref_constant", [new $runtime.NonTerminal("ctx_multidomain", "ctx", undefined), new $runtime.NonTerminal("generic_preamble_for_answer", undefined, undefined), new $runtime.NonTerminal("out_param_Any", "param", undefined), new $runtime.NonTerminal("base_table", "base", ["functionName", 2, "functionName"])], $locale._("${ctx} ${generic_preamble_for_answer} {the same as the|the} ${param} of the ${base} ."), ((ctx, $0, param, base) => D.corefConstant(ctx, base, param)), C.valueKeyFn, {});
    $grammar.declareSymbol("imprecise_search_coref_answer");
    $grammar.addRule("imprecise_search_coref_answer", [new $runtime.NonTerminal("coref_constant", "slot", undefined)], "${slot}", ((slot) => slot), undefined, {});
    $grammar.addRule("imprecise_search_coref_answer", [new $runtime.NonTerminal("coref_npp_filter", "slot", undefined)], "${slot}", ((slot) => slot), undefined, {});
    $grammar.addRule("imprecise_search_coref_answer", [new $runtime.NonTerminal("coref_apv_filter", "slot", undefined)], "${slot}", ((slot) => slot), undefined, {});
    $grammar.addRule("imprecise_search_coref_answer", [new $runtime.NonTerminal("coref_pvp_filter", "slot", undefined)], "${slot}", ((slot) => slot), undefined, {});
    $grammar.addRule("imprecise_search_coref_answer", [new $runtime.NonTerminal("coref_preposition_filter", "slot", undefined)], "${slot}", ((slot) => slot), undefined, {});
    $grammar.declareSymbol("imprecise_search_answer_phrase");
    $grammar.addRule("imprecise_search_answer_phrase", [new $runtime.NonTerminal("constant_Any", "slot", undefined)], "${slot}", ((slot) => slot), undefined, {});
    $grammar.addRule("imprecise_search_answer_phrase", [new $runtime.NonTerminal("npp_filter", "slot", undefined)], "${slot}", ((slot) => slot), undefined, {});
    $grammar.addRule("imprecise_search_answer_phrase", [new $runtime.NonTerminal("apv_filter", "slot", undefined)], "${slot}", ((slot) => slot), undefined, {});
    $grammar.addRule("imprecise_search_answer_phrase", [new $runtime.NonTerminal("pvp_filter", "slot", undefined)], "${slot}", ((slot) => slot), undefined, {});
    $grammar.addRule("imprecise_search_answer_phrase", [new $runtime.NonTerminal("preposition_filter", "slot", undefined)], "${slot}", ((slot) => slot), undefined, {});
    $grammar.declareSymbol("imprecise_search_answer");
    $grammar.addRule("imprecise_search_answer", [new $runtime.NonTerminal("imprecise_search_answer_phrase", "ans", undefined)], $locale._("${ans} {please|} ."), ((ans) => ans), undefined, {});
    $grammar.addRule("imprecise_search_answer", [new $runtime.NonTerminal("generic_preamble_for_answer", undefined, undefined), new $runtime.NonTerminal("imprecise_search_answer_phrase", "ans", undefined)], $locale._("${generic_preamble_for_answer} ${ans} ."), (($0, ans) => ans), undefined, {});
    $grammar.declareSymbol("imprecise_search_question_answer");
    $grammar.addRule("imprecise_search_question_answer", [new $runtime.NonTerminal("imprecise_search_answer", undefined, undefined)], "${imprecise_search_answer}", (($0) => { return $0; }), undefined, { identity: (true) });
    $grammar.addRule("imprecise_search_question_answer", [new $runtime.NonTerminal("imprecise_search_coref_answer", undefined, undefined)], "${imprecise_search_coref_answer}", (($0) => { return $0; }), undefined, { identity: (true) });
    if ($options.flags.dontcare) {
        $grammar.addRule("imprecise_search_question_answer", [new $runtime.NonTerminal("generic_dontcare_phrase", undefined, undefined)], "${generic_dontcare_phrase}", (($0) => 'dontcare'), undefined, { weight: (0.1) });
        $grammar.addRule("imprecise_search_question_answer", [new $runtime.NonTerminal("no_dontcare_phrase", undefined, undefined)], "${no_dontcare_phrase}", (($0) => 'dontcare'), undefined, { weight: (0.1) });
        $grammar.addRule("imprecise_search_question_answer", [new $runtime.NonTerminal("specific_dontcare_phrase", undefined, undefined)], "${specific_dontcare_phrase}", (($0) => { return $0; }), undefined, { identity: (true) });
    }
}
exports.$load = $load;
;
//# sourceMappingURL=search-questions.genie.out.js.map