"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$load = exports.positive_list_proposal_reply = exports.list_proposal_tell_me_more = exports.list_proposal_accept_phrase_with_action_by_name = exports.list_proposal_accept_phrase_with_action = exports.list_proposal_accept_phrase_must_have_action = exports.generic_list_proposal_accept_phrase = exports.concat_list_description = exports.system_list_proposal = void 0;
// List proposal templates: the search is complete (1-3 search results), and the
// agent reads out the search results, optionally proposing an action to do on them
// A list proposal from the system is followed by:
// - choosing an element from the list (= "positive_list_proposal_reply_pair")
// - some form of search refinement (= "negative_list_proposa_reply_pair")
// - a question about an element of the list (= "list_proposal_search_question_pair")
const $runtime = __importStar(require("../../sentence-generator/runtime"));
const C = __importStar(require("../ast_manip"));
const D = __importStar(require("../dialogue_acts"));
exports.system_list_proposal = "system_list_proposal";
exports.concat_list_description = "concat_list_description";
exports.generic_list_proposal_accept_phrase = "generic_list_proposal_accept_phrase";
exports.list_proposal_accept_phrase_must_have_action = "list_proposal_accept_phrase_must_have_action";
exports.list_proposal_accept_phrase_with_action = "list_proposal_accept_phrase_with_action";
exports.list_proposal_accept_phrase_with_action_by_name = "list_proposal_accept_phrase_with_action_by_name";
exports.list_proposal_tell_me_more = "list_proposal_tell_me_more";
exports.positive_list_proposal_reply = "positive_list_proposal_reply";
/**
 * Load the templates in this file.
 *
 * This is an autogenerated method that will be called by the {@link SentenceGenerator}
 * when the templates are imported.
 */
async function $load($options, $locale, $grammar, $loader) {
    $grammar.declareSymbol("system_list_proposal");
    if (!$options.flags.inference) {
        $grammar.addRule("system_list_proposal", [new $runtime.NonTerminal("ctx_result_name_list", "name_list", undefined)], $locale._("{i see|i have|i have found} ${name_list} . {|would you like to learn more ?|would you like to learn more about either of them ?|would you like to know more about them ?|would you like to hear more about them ?|are you interested to hear more about any of them ?}"), ((name_list) => D.checkListProposal(name_list, null, true)), D.listProposalKeyFn, {});
    }
    $grammar.addRule("system_list_proposal", [new $runtime.NonTerminal("ctx_result_name_list", "name_list", undefined)], $locale._("{i see|i have|i have found} ${name_list}."), ((name_list) => D.checkListProposal(name_list, null, false)), D.listProposalKeyFn, {});
    $grammar.addRule("system_list_proposal", [new $runtime.NonTerminal("ctx_result_name_list", "name_list", undefined), new $runtime.NonTerminal("result_info_phrase", "info", undefined)], $locale._("{i see|i have|i have found} ${name_list}. ${name_list.length:select:=2{both|they|all of them}_{they|all of them}} are ${info[plural=other]}."), ((name_list, info) => D.checkListProposal(name_list, info.info, false)), D.listProposalKeyFn, { priority: (5) });
    $grammar.addRule("system_list_proposal", [new $runtime.NonTerminal("ctx_thingpedia_list_result", "proposal", undefined)], "${proposal}", ((proposal) => D.checkThingpediaListProposal(proposal, null)), D.listProposalKeyFn, { priority: (20) });
    $grammar.addRule("system_list_proposal", [new $runtime.NonTerminal("ctx_thingpedia_list_result", "proposal", undefined), new $runtime.NonTerminal("result_info_phrase", "info", undefined)], $locale._("${proposal}. {they|all of them} are ${info[plural=other]}."), ((proposal, info) => D.checkThingpediaListProposal(proposal, info.info)), D.listProposalKeyFn, { priority: (11) });
    $grammar.addRule("system_list_proposal", [new $runtime.NonTerminal("ctx_result_name_list", "name_list", undefined), new $runtime.NonTerminal("action_coref_list_proposal", "action", undefined)], $locale._("{i see|i have|i have found} ${name_list}. {action}."), ((name_list, action) => D.addActionToListProposal(name_list, action)), D.listProposalKeyFn, { priority: (-1) });
    $grammar.addRule("system_list_proposal", [new $runtime.NonTerminal("ctx_result_name_list", "name_list", undefined), new $runtime.NonTerminal("concat_list_description", "description", ["length", 0, "length"])], $locale._("{i see|i have|i have found} ${name_list}. ${description}."), ((name_list, description) => description), D.listProposalKeyFn, { priority: (0.5) });
    $grammar.addRule("system_list_proposal", [new $runtime.NonTerminal("ctx_with_result_question", "ctx", undefined), new $runtime.NonTerminal("ctx_result_name_list", "name_list", undefined), new $runtime.NonTerminal("result_info_phrase", "info", undefined)], $locale._("${name_list.length:select:=2{both ${name_list} are|${name_list} are both|${name_list} are all}_{${name_list} are all}} ${info[plural=other]}."), ((ctx, name_list, info) => D.checkListProposal(name_list, info.info, false)), D.listProposalKeyFn, { priority: (10) });
    $grammar.addRule("system_list_proposal", [new $runtime.NonTerminal("ctx_with_result_question", "ctx", undefined), new $runtime.NonTerminal("concat_list_description", "description", undefined)], $locale._("${description}"), ((ctx, description) => description), D.listProposalKeyFn, { priority: (4) });
    $grammar.declareSymbol("concat_list_description");
    $grammar.addRule("concat_list_description", [new $runtime.NonTerminal("direct_answer_phrase_0", "p1", undefined), new $runtime.NonTerminal("direct_answer_phrase_1", "p2", undefined)], $locale._("${p1}, {while|whereas|and} ${p2}."), ((p1, p2) => D.makeListProposalFromDirectAnswers(p1, p2)), D.listProposalKeyFn, {});
    $grammar.addRule("concat_list_description", [new $runtime.NonTerminal("direct_answer_phrase_0", "p1", undefined), new $runtime.NonTerminal("direct_answer_phrase_1", "p2", undefined), new $runtime.NonTerminal("direct_answer_phrase_2", "p3", undefined)], $locale._("${p1}, ${p2}, {and|while|whereas} ${p3}."), ((p1, p2, p3) => D.makeListProposalFromDirectAnswers(p1, p2, p3)), D.listProposalKeyFn, { priority: (1) });
    $grammar.declareSymbol("generic_list_proposal_accept_phrase");
    $grammar.addRule("generic_list_proposal_accept_phrase", [new $runtime.NonTerminal("constant_name", "name", undefined)], $locale._("{ok|yeah|} {i like|i am interested in|i am intrigued by} ${name} ."), ((name) => name), C.entityOrNumberValueKeyFn, {});
    $grammar.addRule("generic_list_proposal_accept_phrase", [new $runtime.NonTerminal("constant_name", "name", undefined)], $locale._("{ok|yeah|} ${name} sounds {good|really good|nice|interesting} ."), ((name) => name), C.entityOrNumberValueKeyFn, {});
    $grammar.declareSymbol("list_proposal_accept_phrase_must_have_action");
    $grammar.addRule("list_proposal_accept_phrase_must_have_action", [new $runtime.NonTerminal("constant_name", "name", undefined)], $locale._("{ok|yeah|} {i will go|i will take|i am good for} ${name} ."), ((name) => name), C.entityOrNumberValueKeyFn, {});
    $grammar.declareSymbol("list_proposal_accept_phrase_with_action");
    $grammar.addRule("list_proposal_accept_phrase_with_action", [new $runtime.NonTerminal("generic_list_proposal_accept_phrase", "name", undefined), new $runtime.NonTerminal("generic_preamble_for_action", undefined, undefined), new $runtime.NonTerminal("coref_action_command", "action", undefined)], $locale._("${name} ${generic_preamble_for_action} ${action}"), ((name, $0, action) => [name, action, false]), undefined, {});
    $grammar.addRule("list_proposal_accept_phrase_with_action", [new $runtime.NonTerminal("list_proposal_accept_phrase_must_have_action", "name", undefined), new $runtime.NonTerminal("generic_preamble_for_action", undefined, undefined), new $runtime.NonTerminal("coref_action_command", "action", undefined)], $locale._("${name} ${generic_preamble_for_action} ${action}"), ((name, $0, action) => [name, action, false]), undefined, {});
    $grammar.declareSymbol("list_proposal_accept_phrase_with_action_by_name");
    $grammar.addRule("list_proposal_accept_phrase_with_action_by_name", [new $runtime.NonTerminal("generic_preamble_for_action", undefined, undefined), new $runtime.NonTerminal("action_by_name_command", "action", undefined)], $locale._("{ok|yeah|} ${generic_preamble_for_action} ${action}"), (($0, action) => action), C.invocationKeyFn, {});
    $grammar.declareSymbol("list_proposal_tell_me_more");
    $grammar.addRule("list_proposal_tell_me_more", [new $runtime.NonTerminal("constant_name", "name", undefined)], $locale._("{ok|yeah|} can you tell me more about ${name} ?"), ((name) => name), C.entityOrNumberValueKeyFn, {});
    $grammar.addRule("list_proposal_tell_me_more", [new $runtime.NonTerminal("constant_name", "name", undefined), new $runtime.NonTerminal("tell_me_more_phrase", undefined, undefined)], $locale._("{ok|yeah|} {i like|i am interested in|i am intrigued by} ${name} . ${tell_me_more_phrase}"), ((name, $0) => name), C.entityOrNumberValueKeyFn, {});
    $grammar.addRule("list_proposal_tell_me_more", [new $runtime.NonTerminal("constant_name", "name", undefined), new $runtime.NonTerminal("tell_me_more_phrase", undefined, undefined)], $locale._("{ok|yeah|} ${name} sounds {good|really good|nice|interesting} . ${tell_me_more_phrase}"), ((name, $0) => name), C.entityOrNumberValueKeyFn, {});
    $grammar.declareSymbol("positive_list_proposal_reply");
    $grammar.addRule("positive_list_proposal_reply", [new $runtime.NonTerminal("generic_list_proposal_accept_phrase", "name", undefined)], "${name}", ((name) => [name, null, false]), undefined, {});
    $grammar.addRule("positive_list_proposal_reply", [new $runtime.NonTerminal("list_proposal_accept_phrase_must_have_action", "name", undefined)], "${name}", ((name) => [name, null, true]), undefined, {});
    $grammar.addRule("positive_list_proposal_reply", [new $runtime.NonTerminal("list_proposal_accept_phrase_with_action", "accept", undefined)], "${accept}", ((accept) => accept), undefined, {});
}
exports.$load = $load;
;
//# sourceMappingURL=list-proposal.genie.out.js.map