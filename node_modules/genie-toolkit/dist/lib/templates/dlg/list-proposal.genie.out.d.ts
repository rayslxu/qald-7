import type $SentenceGenerator from "../../sentence-generator/generator";
import * as $SentenceGeneratorTypes from "../../sentence-generator/types";
import * as $I18n from "../../i18n/index";
import { Ast } from 'thingtalk';
import * as D from '../dialogue_acts';
import ThingpediaLoader from '../load-thingpedia';
export declare const system_list_proposal: $SentenceGeneratorTypes.NonTerminal<D.ListProposal>;
export declare const concat_list_description: $SentenceGeneratorTypes.NonTerminal<D.ListProposal>;
export declare const generic_list_proposal_accept_phrase: $SentenceGeneratorTypes.NonTerminal<Ast.EntityValue | Ast.NumberValue>;
export declare const list_proposal_accept_phrase_must_have_action: $SentenceGeneratorTypes.NonTerminal<Ast.EntityValue | Ast.NumberValue>;
export declare const list_proposal_accept_phrase_with_action: $SentenceGeneratorTypes.NonTerminal<[Ast.EntityValue | Ast.NumberValue, Ast.Invocation, boolean]>;
export declare const list_proposal_accept_phrase_with_action_by_name: $SentenceGeneratorTypes.NonTerminal<Ast.Invocation>;
export declare const list_proposal_tell_me_more: $SentenceGeneratorTypes.NonTerminal<Ast.EntityValue | Ast.NumberValue>;
export declare const positive_list_proposal_reply: $SentenceGeneratorTypes.NonTerminal<[Ast.EntityValue | Ast.NumberValue, Ast.Invocation | null, boolean]>;
/**
 * Load the templates in this file.
 *
 * This is an autogenerated method that will be called by the {@link SentenceGenerator}
 * when the templates are imported.
 */
export declare function $load($options: $SentenceGeneratorTypes.GrammarOptions, $locale: $I18n.LanguagePack, $grammar: $SentenceGenerator, $loader: ThingpediaLoader): Promise<void>;
