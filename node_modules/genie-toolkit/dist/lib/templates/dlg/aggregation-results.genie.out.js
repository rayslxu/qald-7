"use strict";
// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$load = exports.other_aggregation_reply = exports.agg_operator_for_reply = exports.count_aggregation_reply = void 0;
// Templates that describe results from a query
const $runtime = __importStar(require("../../sentence-generator/runtime"));
const D = __importStar(require("../dialogue_acts"));
exports.count_aggregation_reply = "count_aggregation_reply";
exports.agg_operator_for_reply = "agg_operator_for_reply";
exports.other_aggregation_reply = "other_aggregation_reply";
/**
 * Load the templates in this file.
 *
 * This is an autogenerated method that will be called by the {@link SentenceGenerator}
 * when the templates are imported.
 */
async function $load($options, $locale, $grammar, $loader) {
    $grammar.declareSymbol("count_aggregation_reply");
    $grammar.addRule("count_aggregation_reply", [new $runtime.NonTerminal("ctx_with_aggregation_result", "ctx", undefined), new $runtime.NonTerminal("base_table", "table", ["functionName", 0, "currentFunction"])], $locale._("{there ${ctx.aggregationCount:plural:one{is}other{are}}|i see|i have} ${ctx.aggregationCount} ${ctx.aggregationCount:plural:one{${table[plural=one]}}other{${table[plural=other]}}} {like that|with those characteristics}"), ((ctx, table) => D.makeCountAggregationReply(ctx, table, false)), undefined, {});
    $grammar.addRule("count_aggregation_reply", [new $runtime.NonTerminal("ctx_with_aggregation_result", "ctx", undefined), new $runtime.NonTerminal("one_with_filter_table", "table", undefined)], $locale._("{there ${ctx.aggregationCount:plural:one{is}other{are}}|i see|i have} ${ctx.aggregationCount} ${ctx.aggregationCount:plural:one{${table[plural=one]}}other{${table[plural=other]}}}"), ((ctx, table) => D.makeCountAggregationReply(ctx, table, true)), undefined, { priority: (10) });
    $grammar.addRule("count_aggregation_reply", [new $runtime.NonTerminal("ctx_with_aggregation_result", "ctx", undefined), new $runtime.NonTerminal("two_with_filter_table", "table", undefined)], $locale._("{there ${ctx.aggregationCount:plural:one{is}other{are}}|i see|i have} ${ctx.aggregationCount} ${ctx.aggregationCount:plural:one{${table[plural=one]}}other{${table[plural=other]}}}"), ((ctx, table) => D.makeCountAggregationReply(ctx, table, true)), undefined, { priority: (10) });
    $grammar.declareSymbol("agg_operator_for_reply");
    $grammar.addRule("agg_operator_for_reply", [], $locale._("minimum"), (() => 'min'), undefined, {});
    $grammar.addRule("agg_operator_for_reply", [], $locale._("smallest"), (() => 'min'), undefined, {});
    $grammar.addRule("agg_operator_for_reply", [], $locale._("maximum"), (() => 'max'), undefined, {});
    $grammar.addRule("agg_operator_for_reply", [], $locale._("largest"), (() => 'max'), undefined, {});
    $grammar.addRule("agg_operator_for_reply", [], $locale._("average"), (() => 'avg'), undefined, {});
    $grammar.addRule("agg_operator_for_reply", [], $locale._("total"), (() => 'sum'), undefined, {});
    $grammar.declareSymbol("other_aggregation_reply");
    $grammar.addRule("other_aggregation_reply", [new $runtime.NonTerminal("ctx_with_aggregation_result", "ctx", undefined), new $runtime.NonTerminal("agg_operator_for_reply", "op", undefined), new $runtime.NonTerminal("out_param_Any", "p", undefined), new $runtime.NonTerminal("constant_Any", "c", undefined)], $locale._("${ctx} the ${op} ${p} is ${c}"), ((ctx, op, p, c) => D.makeOtherAggregationReply(ctx, op, p, c)), undefined, {});
}
exports.$load = $load;
;
//# sourceMappingURL=aggregation-results.genie.out.js.map