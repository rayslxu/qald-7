import type $SentenceGenerator from "../../sentence-generator/generator";
import * as $SentenceGeneratorTypes from "../../sentence-generator/types";
import * as $I18n from "../../i18n/index";
import { Ast } from 'thingtalk';
import * as C from '../ast_manip';
import * as D from '../dialogue_acts';
import ThingpediaLoader from '../load-thingpedia';
export declare const out_param_list_for_coref_question: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot[]>;
export declare const simple_user_search_question: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot[]>;
export declare const simple_user_search_question_for_list: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot[]>;
export declare const boolean_user_search_question: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot[]>;
export declare const boolean_user_search_question_for_list: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot[]>;
export declare const user_search_question_with_name: $SentenceGeneratorTypes.NonTerminal<[Ast.EntityValue | Ast.NumberValue, C.ParamSlot[]]>;
export declare const boolean_user_search_question_with_name: $SentenceGeneratorTypes.NonTerminal<[Ast.EntityValue | Ast.NumberValue, C.ParamSlot[]]>;
export declare const user_search_question: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot[]>;
export declare const user_search_question_for_list: $SentenceGeneratorTypes.NonTerminal<D.UserSearchQuestionForList>;
/**
 * Load the templates in this file.
 *
 * This is an autogenerated method that will be called by the {@link SentenceGenerator}
 * when the templates are imported.
 */
export declare function $load($options: $SentenceGeneratorTypes.GrammarOptions, $locale: $I18n.LanguagePack, $grammar: $SentenceGenerator, $loader: ThingpediaLoader): Promise<void>;
