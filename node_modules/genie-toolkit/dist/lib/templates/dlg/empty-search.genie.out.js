"use strict";
// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$load = exports.imprecise_empty_search_change_request = exports.precise_empty_search_change_request = exports.empty_search_error = void 0;
// Refinement templates: the search is NOT complete (0, or more than 1 result), and the
// agent doesn't want to show results
//
// These include proposals, and empty search errors.
// A proposal is when the agent proposed a refined search; the user answers:
// - some form of "yes"
// - some form of "no" followed by another search refinement
const $runtime = __importStar(require("../../sentence-generator/runtime"));
const C = __importStar(require("../ast_manip"));
exports.empty_search_error = "empty_search_error";
exports.precise_empty_search_change_request = "precise_empty_search_change_request";
exports.imprecise_empty_search_change_request = "imprecise_empty_search_change_request";
/**
 * Load the templates in this file.
 *
 * This is an autogenerated method that will be called by the {@link SentenceGenerator}
 * when the templates are imported.
 */
async function $load($options, $locale, $grammar, $loader) {
    $grammar.declareSymbol("empty_search_error");
    $grammar.addRule("empty_search_error", [new $runtime.NonTerminal("sorry_preamble", undefined, undefined), new $runtime.NonTerminal("base_table", "base", undefined)], $locale._("${sorry_preamble} {there are no ${base[plural=other]}|i cannot find any ${base[plural=one]}} {matching your request|with those characteristics|like that}."), (($0, base) => [base, null, false]), undefined, {});
    $grammar.addRule("empty_search_error", [new $runtime.NonTerminal("sorry_preamble", undefined, undefined), new $runtime.NonTerminal("base_table", "base", ["is_monitorable", (true)])], $locale._("${sorry_preamble} {there are no ${base[plural=other]}|i cannot find any ${base[plural=one]}} at the moment {matching your request|with those characteristics|like that}. would you like to be notified when {there are|i have|you have} new ${base[plural=other]}?"), (($0, base) => [base, null, true]), undefined, { priority: (1) });
    if (!$options.flags.inference) {
        $grammar.addRule("empty_search_error", [new $runtime.NonTerminal("sorry_preamble", undefined, undefined), new $runtime.NonTerminal("base_table", "base", undefined), new $runtime.NonTerminal("out_param_Any", "p", undefined)], $locale._("${sorry_preamble} {there are no ${base[plural=other]}|i cannot find any ${base[plural=one]}} {matching your request|with those characteristics|like that}. would you like {a different|another} ${p}?"), (($0, base, p) => {
            if (!C.isSameFunction(base.schema, p.schema))
                return null;
            if (p.name === 'id')
                return null;
            return [base, p, false];
        }), undefined, { priority: (1) });
        $grammar.addRule("empty_search_error", [new $runtime.NonTerminal("sorry_preamble", undefined, undefined), new $runtime.NonTerminal("out_param_Any", "p", undefined)], $locale._("${sorry_preamble} i cannot find any result for your search . would you like {a different|another} ${p}?"), (($0, p) => {
            if (p.name === 'id')
                return null;
            return [null, p, false];
        }), undefined, {});
    }
    if ($options.flags.inference) {
        $grammar.addRule("empty_search_error", [new $runtime.NonTerminal("sorry_preamble", undefined, undefined)], $locale._("${sorry_preamble} i cannot find any result for your search. "), (($0) => [null, null, false]), undefined, { priority: (-1) });
    }
    $grammar.addRule("empty_search_error", [new $runtime.NonTerminal("sorry_preamble", undefined, undefined), new $runtime.NonTerminal("ctx_thingpedia_empty_result", "message", undefined)], $locale._("${sorry_preamble} ${message}."), (($0, message) => [null, null, false]), undefined, { priority: (5) });
    $grammar.addRule("empty_search_error", [new $runtime.NonTerminal("sorry_preamble", undefined, undefined), new $runtime.NonTerminal("ctx_thingpedia_empty_result", "ctx", undefined), new $runtime.NonTerminal("base_table", "base", ["functionName", 1, "functionName"])], $locale._("${sorry_preamble} ${ctx}. would you like to be notified when {there are|i have|you have} new ${base[plural=other]}?"), (($0, ctx, base) => (base.schema.is_monitorable ? [base, null, true] : null)), undefined, { priority: (6) });
    $grammar.declareSymbol("precise_empty_search_change_request");
    if ($options.flags.multiwoz) {
        $grammar.addRule("precise_empty_search_change_request", [new $runtime.NonTerminal("answer_noun_phrase", "phrase", undefined)], $locale._("{i see ,|okay|okay ,|yeah|yeah ,} {do you have|can you find|is there|how about} a ${phrase} ?"), ((phrase) => phrase), C.expressionKeyFn, {});
    }
    $grammar.addRule("precise_empty_search_change_request", [new $runtime.NonTerminal("anything_phrase", "phrase", undefined)], $locale._("{i see ,|okay|okay ,|yeah|yeah ,} {do you have|can you find|is there|how about} ${phrase} ?"), ((phrase) => phrase), C.expressionKeyFn, {});
    $grammar.declareSymbol("imprecise_empty_search_change_request");
    $grammar.addRule("imprecise_empty_search_change_request", [new $runtime.NonTerminal("imprecise_search_answer_phrase", "answer", undefined)], $locale._("{i see ,|okay|okay ,|yeah|yeah ,} {do you have|can you find|is there|how about} ${answer} ?"), ((answer) => answer), undefined, {});
}
exports.$load = $load;
;
//# sourceMappingURL=empty-search.genie.out.js.map