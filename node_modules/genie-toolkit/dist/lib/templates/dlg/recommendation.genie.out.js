"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$load = exports.recommendation_accept_phrase_by_name = exports.recommendation_accept_phrase_with_action = exports.system_recommendation = exports.system_nonlist_result = exports.actionable_system_display_result_short = exports.direct_user_question_answer = exports.proposal_info_action_pair = exports.actionable_system_recommendation_short = exports.action_recommendation = exports.question_system_recommendation_short = void 0;
// Recommendation templates: the agent reads out or describe the top result from the search,
// optionally proposing an action to do on it
// A recommendation from the system is followed by:
// - yes (= "positive_recommendation_reply_pair")
// - some form of search refinement (= "negative_recommendation_reply_pair")
// - a question (= "recommendation_search_question_pair")
// - closing the dialogue (= "recommendation_cancel_pair")
const $runtime = __importStar(require("../../sentence-generator/runtime"));
const C = __importStar(require("../ast_manip"));
const D = __importStar(require("../dialogue_acts"));
exports.question_system_recommendation_short = "question_system_recommendation_short";
exports.action_recommendation = "action_recommendation";
exports.actionable_system_recommendation_short = "actionable_system_recommendation_short";
exports.proposal_info_action_pair = "proposal_info_action_pair";
exports.direct_user_question_answer = "direct_user_question_answer";
exports.actionable_system_display_result_short = "actionable_system_display_result_short";
exports.system_nonlist_result = "system_nonlist_result";
exports.system_recommendation = "system_recommendation";
exports.recommendation_accept_phrase_with_action = "recommendation_accept_phrase_with_action";
exports.recommendation_accept_phrase_by_name = "recommendation_accept_phrase_by_name";
/**
 * Load the templates in this file.
 *
 * This is an autogenerated method that will be called by the {@link SentenceGenerator}
 * when the templates are imported.
 */
async function $load($options, $locale, $grammar, $loader) {
    $grammar.declareSymbol("question_system_recommendation_short");
    $grammar.addRule("question_system_recommendation_short", [new $runtime.NonTerminal("ctx_with_result_and_action", "ctx", undefined), new $runtime.NonTerminal("constant_name", "proposal", ["value", 0, "id0"])], $locale._("how about ${proposal}"), ((ctx, proposal) => D.makeRecommendation(ctx, proposal)), D.recommendationKeyFn, {});
    $grammar.declareSymbol("action_recommendation");
    $grammar.addRule("action_recommendation", [new $runtime.NonTerminal("ctx_with_result_and_action", "ctx", undefined), new $runtime.NonTerminal("contextual_action_phrase", "action", ["functionName", 0, "nextFunction"])], $locale._("{would you like to|would you like me to} ${action}"), ((ctx, action) => D.makeActionRecommendation(ctx, action)), D.recommendationKeyFn, { weight: (0.1) });
    $grammar.declareSymbol("actionable_system_recommendation_short");
    $grammar.addRule("actionable_system_recommendation_short", [new $runtime.NonTerminal("ctx_with_result_noquestion", "ctx", undefined), new $runtime.NonTerminal("ctx_thingpedia_result", "proposal", undefined)], $locale._("${ctx} ${proposal}"), ((ctx, proposal) => D.makeThingpediaRecommendation(ctx, proposal)), D.recommendationKeyFn, { priority: (2) });
    $grammar.addRule("actionable_system_recommendation_short", [new $runtime.NonTerminal("ctx_with_result_noquestion", "ctx", undefined), new $runtime.NonTerminal("ctx_thingpedia_result", "proposal", undefined)], $locale._("${ctx} ${proposal}"), ((ctx, proposal) => D.makeThingpediaRecommendation(ctx, proposal)), D.recommendationKeyFn, { priority: (2) });
    $grammar.addRule("actionable_system_recommendation_short", [new $runtime.NonTerminal("ctx_with_result_and_action", "ctx", undefined), new $runtime.NonTerminal("constant_name", "proposal", ["value", 0, "id0"])], $locale._("i {recommend|suggest} ${proposal}"), ((ctx, proposal) => D.makeRecommendation(ctx, proposal)), D.recommendationKeyFn, {});
    $grammar.addRule("actionable_system_recommendation_short", [new $runtime.NonTerminal("ctx_with_result_noquestion", "ctx", undefined), new $runtime.NonTerminal("constant_name", "proposal", ["value", 0, "id0"])], $locale._("{i see|i have|i have found|i have one, it is} ${proposal}"), ((ctx, proposal) => D.makeRecommendation(ctx, proposal)), D.recommendationKeyFn, {});
    $grammar.addRule("actionable_system_recommendation_short", [new $runtime.NonTerminal("ctx_with_result_argminmax", "ctx", undefined), new $runtime.NonTerminal("constant_name", "proposal", ["value", 0, "id0"])], $locale._("the answer is ${proposal}"), ((ctx, proposal) => D.makeRecommendation(ctx, proposal)), D.recommendationKeyFn, {});
    $grammar.addRule("actionable_system_recommendation_short", [new $runtime.NonTerminal("ctx_with_result_argminmax", "ctx", undefined), new $runtime.NonTerminal("base_table", "base", ["functionName", 0, "currentFunction"]), new $runtime.NonTerminal("out_param_Any", "param", ["functionName", 0, "currentFunction"]), new $runtime.NonTerminal("constant_name", "proposal", ["value", 0, "id0"])], $locale._("the ${base[plural=one]} with the highest ${param} is ${proposal}"), ((ctx, base, param, proposal) => D.makeArgMinMaxRecommendation(ctx, proposal, base, param, 'desc')), D.recommendationKeyFn, { priority: (1) });
    $grammar.addRule("actionable_system_recommendation_short", [new $runtime.NonTerminal("ctx_with_result_argminmax", "ctx", undefined), new $runtime.NonTerminal("base_table", "base", ["functionName", 0, "currentFunction"]), new $runtime.NonTerminal("out_param_Any", "param", ["functionName", 0, "currentFunction"]), new $runtime.NonTerminal("constant_name", "proposal", ["value", 0, "id0"])], $locale._("the ${base[plural=one]} with the lowest ${param} is ${proposal}"), ((ctx, base, param, proposal) => D.makeArgMinMaxRecommendation(ctx, proposal, base, param, 'asc')), D.recommendationKeyFn, { priority: (1) });
    $grammar.addRule("actionable_system_recommendation_short", [new $runtime.NonTerminal("ctx_with_result_argminmax", "ctx", undefined), new $runtime.NonTerminal("apv_argminmax", "argminmax", ["functionName", 0, "currentFunction"]), new $runtime.NonTerminal("base_table", "base", ["functionName", 0, "currentFunction"]), new $runtime.NonTerminal("constant_name", "proposal", ["value", 0, "id0"])], $locale._("the ${argminmax} ${base[plural=one]} is ${proposal}"), ((ctx, argminmax, base, proposal) => D.makeArgMinMaxRecommendation(ctx, proposal, base, argminmax[0], argminmax[1])), D.recommendationKeyFn, { priority: (2) });
    $grammar.declareSymbol("proposal_info_action_pair");
    $grammar.addRule("proposal_info_action_pair", [new $runtime.NonTerminal("result_info_phrase", "res", undefined), new $runtime.NonTerminal("action_coref_recommendation", "action", undefined)], $locale._("is a ${res[plural=one]}. ${action}"), ((res, action) => {
        const resultType = res.info.schema.getArgType('id');
        if (!resultType || !C.hasArgumentOfType(action, resultType))
            return null;
        return [res, action];
    }), undefined, { weight: (0.8) });
    if (!$options.flags.inference) {
        $grammar.addRule("proposal_info_action_pair", [new $runtime.NonTerminal("result_info_phrase", "res", undefined), new $runtime.NonTerminal("learn_more_offer", undefined, undefined)], $locale._("is a ${res[plural=one]}. ${learn_more_offer}?"), ((res, $0) => {
            return [res, null];
        }), undefined, { weight: (0.2) });
    }
    $grammar.declareSymbol("direct_user_question_answer");
    $grammar.addRule("direct_user_question_answer", [new $runtime.NonTerminal("direct_result_info_phrase", "res", undefined)], "${res}", ((res) => D.makeThingpediaRecommendation(res.ctx, res.info)), D.recommendationKeyFn, {});
    $grammar.declareSymbol("actionable_system_display_result_short");
    $grammar.addRule("actionable_system_display_result_short", [new $runtime.NonTerminal("ctx_with_result", "ctx", undefined), new $runtime.NonTerminal("ctx_thingpedia_result", "info", undefined)], $locale._("${ctx} ${info} ."), ((ctx, info) => D.makeDisplayResult(ctx, info)), D.recommendationKeyFn, { priority: (5) });
    $grammar.declareSymbol("system_nonlist_result");
    $grammar.addRule("system_nonlist_result", [new $runtime.NonTerminal("actionable_system_display_result_short", "phrase", undefined)], "${phrase}", ((phrase) => D.checkDisplayResult(phrase)), D.recommendationKeyFn, {});
    $grammar.addRule("system_nonlist_result", [new $runtime.NonTerminal("ctx_with_result_noquestion", "ctx", undefined), new $runtime.NonTerminal("direct_result_info_phrase", "res", undefined)], $locale._("${ctx} ${res}"), ((ctx, res) => D.checkDisplayResult(D.makeDisplayResult(ctx, res.info))), D.recommendationKeyFn, {});
    $grammar.addRule("system_nonlist_result", [new $runtime.NonTerminal("ctx_with_result_question", "ctx", undefined), new $runtime.NonTerminal("direct_result_info_phrase", "res", undefined)], $locale._("${ctx} ${res}"), ((ctx, res) => D.checkDisplayResult(D.makeDisplayResult(ctx, res.info))), D.recommendationKeyFn, { priority: (10) });
    $grammar.addRule("system_nonlist_result", [new $runtime.NonTerminal("actionable_system_display_result_short", "phrase", undefined), new $runtime.NonTerminal("direct_result_info_phrase", "extra", undefined)], $locale._("${phrase} ${extra}"), ((phrase, extra) => D.checkDisplayResult(D.combineDisplayResult(phrase, extra.info))), D.recommendationKeyFn, {});
    if ($options.flags.anything_else) {
        $grammar.addRule("system_nonlist_result", [new $runtime.NonTerminal("actionable_system_display_result_short", "proposal", undefined), new $runtime.NonTerminal("anything_else_phrase", undefined, undefined)], $locale._("${proposal} ${anything_else_phrase}"), ((proposal, $0) => {
            const clone = {};
            Object.assign(clone, proposal);
            clone.hasAnythingElse = true;
            return D.checkDisplayResult(clone);
        }), D.recommendationKeyFn, {});
    }
    $grammar.declareSymbol("system_recommendation");
    $grammar.addRule("system_recommendation", [new $runtime.NonTerminal("ctx_with_action", undefined, undefined), new $runtime.NonTerminal("question_system_recommendation_short", "proposal", undefined)], $locale._("${proposal}."), (($0, proposal) => D.checkRecommendation(proposal, null)), D.recommendationKeyFn, {});
    $grammar.addRule("system_recommendation", [new $runtime.NonTerminal("ctx_with_action", undefined, undefined), new $runtime.NonTerminal("actionable_system_recommendation_short", "proposal", undefined)], $locale._("${proposal}."), (($0, proposal) => D.checkRecommendation(proposal, null)), D.recommendationKeyFn, {});
    $grammar.addRule("system_recommendation", [new $runtime.NonTerminal("ctx_with_action", undefined, undefined), new $runtime.NonTerminal("actionable_system_recommendation_short", "proposal", undefined), new $runtime.NonTerminal("learn_more_offer", undefined, undefined)], $locale._("${proposal}. ${learn_more_offer}?"), (($0, proposal, $1) => D.recommendationSetLearnMore(proposal)), D.recommendationKeyFn, {});
    $grammar.addRule("system_recommendation", [new $runtime.NonTerminal("ctx_without_projection", undefined, undefined), new $runtime.NonTerminal("action_recommendation", "proposal", undefined)], $locale._("${proposal}?"), (($0, proposal) => proposal), D.recommendationKeyFn, {});
    $grammar.addRule("system_recommendation", [new $runtime.NonTerminal("ctx_without_projection", undefined, undefined), new $runtime.NonTerminal("actionable_system_recommendation_short", "proposal", undefined), new $runtime.NonTerminal("action_coref_recommendation", "action", undefined)], $locale._("${proposal}. ${action}"), (($0, proposal, action) => D.checkActionForRecommendation(proposal, action)), D.recommendationKeyFn, {});
    $grammar.addRule("system_recommendation", [new $runtime.NonTerminal("question_system_recommendation_short", "proposal", undefined), new $runtime.NonTerminal("result_info_phrase", "res", undefined)], $locale._("{${proposal}? it is a ${res[plural=one]}.|${proposal}, which is a ${res[plural=one]}?}"), ((proposal, res) => D.checkRecommendation(proposal, res.info)), D.recommendationKeyFn, {});
    $grammar.addRule("system_recommendation", [new $runtime.NonTerminal("action_recommendation", "proposal", undefined), new $runtime.NonTerminal("result_info_phrase", "res", undefined)], $locale._("{${proposal}? it is a ${res[plural=one]}.|${proposal}, which is a ${res[plural=one]}?}"), ((proposal, res) => D.checkRecommendation(proposal, res.info)), D.recommendationKeyFn, {});
    $grammar.addRule("system_recommendation", [new $runtime.NonTerminal("actionable_system_recommendation_short", "proposal", undefined), new $runtime.NonTerminal("result_info_phrase", "res", undefined)], $locale._("{${proposal}. it is a ${res[plural=one]}.|${proposal}, which is a ${res[plural=one]}.}"), ((proposal, res) => D.checkRecommendation(proposal, res.info)), D.recommendationKeyFn, {});
    $grammar.addRule("system_recommendation", [new $runtime.NonTerminal("question_system_recommendation_short", "proposal", undefined)], $locale._("${proposal}?"), ((proposal) => D.checkRecommendation(proposal, null)), D.recommendationKeyFn, {});
    $grammar.addRule("system_recommendation", [new $runtime.NonTerminal("action_recommendation", "proposal", undefined)], $locale._("${proposal}?"), ((proposal) => D.checkRecommendation(proposal, null)), D.recommendationKeyFn, {});
    $grammar.addRule("system_recommendation", [new $runtime.NonTerminal("actionable_system_recommendation_short", "proposal", undefined)], $locale._("${proposal}."), ((proposal) => D.checkRecommendation(proposal, null)), D.recommendationKeyFn, {});
    $grammar.addRule("system_recommendation", [new $runtime.NonTerminal("ctx_with_result_question", "ctx", undefined), new $runtime.NonTerminal("direct_answer_phrase", "proposal", ["index", (0)])], $locale._("${proposal}."), ((ctx, proposal) => {
        const rec = D.makeRecommendation(proposal.result.ctx, proposal.name);
        if (!rec)
            return null;
        return D.checkRecommendation(rec, proposal.result.info);
    }), D.recommendationKeyFn, {});
    $grammar.addRule("system_recommendation", [new $runtime.NonTerminal("direct_user_question_answer", "proposal", undefined)], "${proposal}", ((proposal) => D.checkRecommendation(proposal, null)), D.recommendationKeyFn, {});
    $grammar.addRule("system_recommendation", [new $runtime.NonTerminal("actionable_system_recommendation_short", "proposal", undefined), new $runtime.NonTerminal("proposal_info_action_pair", "pair", undefined)], $locale._("${proposal}. it ${pair}"), ((proposal, pair) => {
        const [res, action] = pair;
        const maybeProposal = D.checkRecommendation(proposal, res.info);
        if (maybeProposal === null)
            return null;
        if (action === null)
            return D.recommendationSetLearnMore(maybeProposal);
        return D.checkActionForRecommendation(maybeProposal, action);
    }), D.recommendationKeyFn, { weight: (2) });
    $grammar.addRule("system_recommendation", [new $runtime.NonTerminal("ctx_with_result_question", "ctx", undefined), new $runtime.NonTerminal("constant_name", "proposal", undefined), new $runtime.NonTerminal("proposal_info_action_pair", "pair", undefined)], $locale._("${proposal} ${pair}"), ((ctx, proposal, pair) => {
        const rec = D.makeRecommendation(ctx, proposal);
        if (!rec)
            return null;
        const [res, action] = pair;
        const maybeRec = D.checkRecommendation(rec, res.info);
        if (maybeRec === null)
            return null;
        if (action === null)
            return D.recommendationSetLearnMore(maybeRec);
        return D.checkActionForRecommendation(maybeRec, action);
    }), D.recommendationKeyFn, { weight: (2) });
    $grammar.declareSymbol("recommendation_accept_phrase_with_action");
    $grammar.addRule("recommendation_accept_phrase_with_action", [new $runtime.NonTerminal("accept_phrase", undefined, undefined), new $runtime.NonTerminal("generic_preamble_for_action", undefined, undefined), new $runtime.NonTerminal("coref_action_command", "action", undefined)], $locale._("${accept_phrase} ${generic_preamble_for_action} ${action}"), (($0, $1, action) => action), C.invocationKeyFn, {});
    $grammar.declareSymbol("recommendation_accept_phrase_by_name");
    $grammar.addRule("recommendation_accept_phrase_by_name", [new $runtime.NonTerminal("generic_list_proposal_accept_phrase", "name", undefined)], "${name}", ((name) => [name, null]), undefined, {});
    $grammar.addRule("recommendation_accept_phrase_by_name", [new $runtime.NonTerminal("list_proposal_accept_phrase_must_have_action", "name", undefined)], "${name}", ((name) => [name, null]), undefined, {});
    $grammar.addRule("recommendation_accept_phrase_by_name", [new $runtime.NonTerminal("list_proposal_accept_phrase_with_action", "accept", undefined)], "${accept}", ((accept) => [accept[0], accept[1]]), undefined, {});
}
exports.$load = $load;
;
//# sourceMappingURL=recommendation.genie.out.js.map