import type $SentenceGenerator from "../../sentence-generator/generator";
import * as $SentenceGeneratorTypes from "../../sentence-generator/types";
import * as $I18n from "../../i18n/index";
import { Ast } from 'thingtalk';
import * as C from '../ast_manip';
import ThingpediaLoader from '../load-thingpedia';
export declare const one_param_slot_fill_question: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot[]>;
export declare const two_param_slot_fill_question: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot[]>;
export declare const slot_fill_question: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot[]>;
export declare const imprecise_slot_fill_answer_phrase: $SentenceGeneratorTypes.NonTerminal<Ast.Value | C.InputParamSlot>;
export declare const imprecise_slot_fill_coref_answer: $SentenceGeneratorTypes.NonTerminal<Ast.Value | C.InputParamSlot>;
export declare const imprecise_slot_fill_answer: $SentenceGeneratorTypes.NonTerminal<Ast.Value | C.InputParamSlot>;
export declare const precise_slot_fill_answer: $SentenceGeneratorTypes.NonTerminal<Ast.Invocation>;
/**
 * Load the templates in this file.
 *
 * This is an autogenerated method that will be called by the {@link SentenceGenerator}
 * when the templates are imported.
 */
export declare function $load($options: $SentenceGeneratorTypes.GrammarOptions, $locale: $I18n.LanguagePack, $grammar: $SentenceGenerator, $loader: ThingpediaLoader): Promise<void>;
