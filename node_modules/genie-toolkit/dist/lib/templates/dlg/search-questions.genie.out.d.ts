import type $SentenceGenerator from "../../sentence-generator/generator";
import * as $SentenceGeneratorTypes from "../../sentence-generator/types";
import * as $I18n from "../../i18n/index";
import { Ast } from 'thingtalk';
import * as C from '../ast_manip';
import * as D from '../dialogue_acts';
import ThingpediaLoader from '../load-thingpedia';
export declare const one_param_direct_search_question: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot[]>;
export declare const one_param_direct_search_question_with_preamble: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot[]>;
export declare const two_param_direct_search_question: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot[]>;
export declare const one_param_yesno_direct_search_question: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot[]>;
export declare const one_param_yesno_direct_search_question_with_preamble: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot[]>;
export declare const two_param_yesno_direct_search_question: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot[]>;
export declare const question_npp_filter_pair: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot>;
export declare const question_apv_filter_pair: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot>;
export declare const question_avp_filter_pair: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot>;
export declare const question_preposition_filter_pair: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot>;
export declare const question_pvp_filter_pair: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot>;
export declare const disjunctive_search_question: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot[]>;
export declare const generic_question: $SentenceGeneratorTypes.NonTerminal<never[]>;
export declare const simple_search_question: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot[]>;
export declare const search_question: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot[]>;
export declare const verbose_search_answer: $SentenceGeneratorTypes.NonTerminal<Ast.Expression>;
export declare const verbose_search_answer_with_action: $SentenceGeneratorTypes.NonTerminal<[Ast.Expression, Ast.Invocation]>;
export declare const precise_search_question_answer: $SentenceGeneratorTypes.NonTerminal<D.PreciseSearchQuestionAnswer>;
export declare const specific_dontcare_phrase: $SentenceGeneratorTypes.NonTerminal<C.FilterSlot>;
export declare const coref_constant: $SentenceGeneratorTypes.NonTerminal<Ast.Value>;
export declare const imprecise_search_coref_answer: $SentenceGeneratorTypes.NonTerminal<Ast.Value | C.FilterSlot>;
export declare const imprecise_search_answer_phrase: $SentenceGeneratorTypes.NonTerminal<Ast.Value | C.FilterSlot>;
export declare const imprecise_search_answer: $SentenceGeneratorTypes.NonTerminal<Ast.Value | C.FilterSlot>;
export declare const imprecise_search_question_answer: $SentenceGeneratorTypes.NonTerminal<Ast.Value | C.FilterSlot | 'dontcare'>;
/**
 * Load the templates in this file.
 *
 * This is an autogenerated method that will be called by the {@link SentenceGenerator}
 * when the templates are imported.
 */
export declare function $load($options: $SentenceGeneratorTypes.GrammarOptions, $locale: $I18n.LanguagePack, $grammar: $SentenceGenerator, $loader: ThingpediaLoader): Promise<void>;
