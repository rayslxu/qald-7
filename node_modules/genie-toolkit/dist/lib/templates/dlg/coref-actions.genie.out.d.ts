import type $SentenceGenerator from "../../sentence-generator/generator";
import * as $SentenceGeneratorTypes from "../../sentence-generator/types";
import * as $I18n from "../../i18n/index";
import { Ast } from 'thingtalk';
import ThingpediaLoader from '../load-thingpedia';
export declare const coref_action_phrase: $SentenceGeneratorTypes.NonTerminal<Ast.Invocation>;
export declare const list_coref_action_phrase: $SentenceGeneratorTypes.NonTerminal<Ast.Invocation>;
export declare const contextual_action_phrase: $SentenceGeneratorTypes.NonTerminal<Ast.Invocation>;
export declare const action_coref_recommendation: $SentenceGeneratorTypes.NonTerminal<Ast.Invocation>;
export declare const action_coref_list_proposal: $SentenceGeneratorTypes.NonTerminal<Ast.Invocation>;
export declare const coref_action_command: $SentenceGeneratorTypes.NonTerminal<Ast.Invocation>;
export declare const action_by_name_command: $SentenceGeneratorTypes.NonTerminal<Ast.Invocation>;
export declare const action_continuation_command: $SentenceGeneratorTypes.NonTerminal<Ast.Invocation>;
export declare const continuation_query: $SentenceGeneratorTypes.NonTerminal<Ast.Invocation>;
export declare const action_description_phrase: $SentenceGeneratorTypes.NonTerminal<Ast.Invocation>;
/**
 * Load the templates in this file.
 *
 * This is an autogenerated method that will be called by the {@link SentenceGenerator}
 * when the templates are imported.
 */
export declare function $load($options: $SentenceGeneratorTypes.GrammarOptions, $locale: $I18n.LanguagePack, $grammar: $SentenceGenerator, $loader: ThingpediaLoader): Promise<void>;
