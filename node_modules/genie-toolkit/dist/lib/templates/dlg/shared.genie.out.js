"use strict";
// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$load = exports.make_monitor_phrase = exports.repeat_command_on_error_phrase = exports.repeat_command_phrase = exports.system_learn_more = exports.prefer_question_phrase = exports.no_dontcare_phrase = exports.generic_dontcare_phrase = exports.ask_recommend_phrase = exports.nevermind_phrase = exports.sorry_preamble = exports.anything_else_phrase = exports.no_thanks_phrase = exports.thanks_phrase = exports.ok_thanks_phrase = exports.yes_please_phrase = exports.learn_more_offer = exports.tell_me_more_phrase = exports.reject_phrase = exports.accept_phrase = exports.generic_negative_proposal_reply = exports.greeting = exports.generic_excitement2_phrase = exports.generic_excitement_phrase = exports.the_base_noun_phrase = exports.counterproposal_preamble = void 0;
// Shared templates and utilities, mostly collecting actual phrases or groups of phrases
// rather than complex logic
const $runtime = __importStar(require("../../sentence-generator/runtime"));
const C = __importStar(require("../ast_manip"));
exports.counterproposal_preamble = "counterproposal_preamble";
exports.the_base_noun_phrase = "the_base_noun_phrase";
exports.generic_excitement_phrase = "generic_excitement_phrase";
exports.generic_excitement2_phrase = "generic_excitement2_phrase";
exports.greeting = "greeting";
exports.generic_negative_proposal_reply = "generic_negative_proposal_reply";
exports.accept_phrase = "accept_phrase";
exports.reject_phrase = "reject_phrase";
exports.tell_me_more_phrase = "tell_me_more_phrase";
exports.learn_more_offer = "learn_more_offer";
exports.yes_please_phrase = "yes_please_phrase";
exports.ok_thanks_phrase = "ok_thanks_phrase";
exports.thanks_phrase = "thanks_phrase";
exports.no_thanks_phrase = "no_thanks_phrase";
exports.anything_else_phrase = "anything_else_phrase";
exports.sorry_preamble = "sorry_preamble";
exports.nevermind_phrase = "nevermind_phrase";
exports.ask_recommend_phrase = "ask_recommend_phrase";
exports.generic_dontcare_phrase = "generic_dontcare_phrase";
exports.no_dontcare_phrase = "no_dontcare_phrase";
exports.prefer_question_phrase = "prefer_question_phrase";
exports.system_learn_more = "system_learn_more";
exports.repeat_command_phrase = "repeat_command_phrase";
exports.repeat_command_on_error_phrase = "repeat_command_on_error_phrase";
exports.make_monitor_phrase = "make_monitor_phrase";
/**
 * Load the templates in this file.
 *
 * This is an autogenerated method that will be called by the {@link SentenceGenerator}
 * when the templates are imported.
 */
async function $load($options, $locale, $grammar, $loader) {
    $grammar.declareSymbol("counterproposal_preamble");
    $grammar.addRule("counterproposal_preamble", [], $locale._("{i was thinking more of|i would like|i am looking for|do you have|can you find|is there [plural=one]|are there [plural=other]|that does not sound great , do you have}"), (() => ''), undefined, {});
    $grammar.declareSymbol("the_base_noun_phrase");
    $grammar.addRule("the_base_noun_phrase", [new $runtime.NonTerminal("base_noun_phrase", "noun", undefined)], $locale._("{the|that} ${noun} [plural=noun[plural]]"), ((noun) => noun), C.functionDefKeyFn, {});
    $grammar.declareSymbol("generic_excitement_phrase");
    $grammar.addRule("generic_excitement_phrase", [], '', (() => ''), undefined, { priority: (0.1) });
    $grammar.addRule("generic_excitement_phrase", [], $locale._("{alright,| great!|awesome !|sounds good !|sounds good ,|perfect !}"), (() => ''), undefined, {});
    $grammar.declareSymbol("generic_excitement2_phrase");
    $grammar.addRule("generic_excitement2_phrase", [], $locale._("{alright,| great!|awesome !|sounds good !|sounds good ,|perfect !}"), (() => ''), undefined, {});
    $grammar.declareSymbol("greeting");
    $grammar.addRule("greeting", [], $locale._("{hello !|hi !}"), (() => ''), undefined, {});
    $grammar.declareSymbol("generic_negative_proposal_reply");
    $grammar.addRule("generic_negative_proposal_reply", [], $locale._("{i do not like that|i do not like that , do you have any other option ?}"), (() => ''), undefined, {});
    $grammar.declareSymbol("accept_phrase");
    $grammar.addRule("accept_phrase", [], $locale._("{i like that|yes i like that|sure i like that|sounds good}"), (() => ''), undefined, {});
    $grammar.declareSymbol("reject_phrase");
    $grammar.addRule("reject_phrase", [], $locale._("{no|actually , no|that will not work|no , thank you|not yet|actually , not yet}"), (() => ''), undefined, {});
    $grammar.declareSymbol("tell_me_more_phrase");
    $grammar.addRule("tell_me_more_phrase", [], $locale._("{can you tell me more ?|can you tell me more about it ?|can you give me more info ?|give me more info !|give me more information .|tell me more .}"), (() => ''), undefined, {});
    $grammar.declareSymbol("learn_more_offer");
    $grammar.addRule("learn_more_offer", [], $locale._("{would you like to {learn more|{know|hear} more about it}|are you interested to hear more about it}"), (() => ''), undefined, { priority: (0.1) });
    $grammar.declareSymbol("yes_please_phrase");
    $grammar.addRule("yes_please_phrase", [], $locale._("{yes|yes , please|yeah}"), (() => ''), undefined, {});
    $grammar.declareSymbol("ok_thanks_phrase");
    $grammar.addRule("ok_thanks_phrase", [], $locale._("{ok {thank you|thanks} that is all i need.}"), (() => ''), undefined, {});
    $grammar.declareSymbol("thanks_phrase");
    $grammar.addRule("thanks_phrase", [], $locale._("{{thank you|thanks} {,|} {that will be all|that will be all for now|this is good for now|this is what i need} .|thank your for your help{!|, this is what i needed.}}"), (() => ''), undefined, {});
    $grammar.declareSymbol("no_thanks_phrase");
    $grammar.addRule("no_thanks_phrase", [], $locale._("{no thanks|no, thanks|no i am good thanks|no need thanks|no {thank you|thanks} {,|} {this is good for now|this is all i need|that will be it|this will do|that will be it for now|this will do for now|that will be all}.}"), (() => ''), undefined, {});
    $grammar.declareSymbol("anything_else_phrase");
    $grammar.addRule("anything_else_phrase", [], $locale._("{is there anything else i can help you with|can i help you with anything else|do you need anything else|anything else for you today}?"), (() => ''), undefined, {});
    $grammar.declareSymbol("sorry_preamble");
    $grammar.addRule("sorry_preamble", [], $locale._("{sorry,|i am sorry,|}"), (() => ''), undefined, {});
    $grammar.declareSymbol("nevermind_phrase");
    $grammar.addRule("nevermind_phrase", [], $locale._("{ok, never mind|never mind then|alright, never mind|too bad, alright}"), (() => ''), undefined, {});
    $grammar.declareSymbol("ask_recommend_phrase");
    $grammar.addRule("ask_recommend_phrase", [], $locale._("{which {one|1} would you recommend?|what is your favorite?|surprise me! just pick one please.}"), (() => ''), undefined, {});
    $grammar.declareSymbol("generic_dontcare_phrase");
    $grammar.addRule("generic_dontcare_phrase", [], $locale._("{it does not matter. {|can you suggest one?}|i {do not have a|have no} preference. {|what do you recommend?}|i have no preference. {please make a recommendation|which {one|1} is best?}}"), (() => ''), undefined, {});
    $grammar.declareSymbol("no_dontcare_phrase");
    $grammar.addRule("no_dontcare_phrase", [], $locale._("{no {.|,} {can you suggest one|please make a recommendation|which {one|1} is best?|you choose for me!|surprise me!}|i have no preference. please make a recommendation.}"), (() => ''), undefined, {});
    $grammar.declareSymbol("prefer_question_phrase");
    $grammar.addRule("prefer_question_phrase", [], $locale._("{do you want|would you prefer|would you like|are you interested in|are you looking for}"), (() => ''), undefined, {});
    $grammar.declareSymbol("system_learn_more");
    $grammar.addRule("system_learn_more", [], $locale._("what would you like to {know|hear}?"), (() => ''), undefined, {});
    $grammar.declareSymbol("repeat_command_phrase");
    $grammar.addRule("repeat_command_phrase", [], $locale._("{again !|another one|do this again|do it again|do the last command}"), (() => ''), undefined, {});
    $grammar.declareSymbol("repeat_command_on_error_phrase");
    $grammar.addRule("repeat_command_on_error_phrase", [], $locale._("{please|} {try again|try this again|do the last command|do it again}"), (() => ''), undefined, {});
    $grammar.declareSymbol("make_monitor_phrase");
    $grammar.addRule("make_monitor_phrase", [], $locale._("{ok|great|i like that|yes i like that|sure i like that|sounds good} {,|} {notify me when it changes|notify me when it changes|subscribe to changes|let me know of changes|notify me of this|subscribe to this}"), (() => ''), undefined, {});
}
exports.$load = $load;
;
//# sourceMappingURL=shared.genie.out.js.map