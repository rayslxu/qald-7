"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$load = exports.precise_slot_fill_answer = exports.imprecise_slot_fill_answer = exports.imprecise_slot_fill_coref_answer = exports.imprecise_slot_fill_answer_phrase = exports.slot_fill_question = exports.two_param_slot_fill_question = exports.one_param_slot_fill_question = void 0;
// Slot fill templates: the agent asks a question, and the user replies
//
// There are two types slot-fill templates:
// - for searches: the agent is trying to add a filter
// - for actions/queries w/ parameters: the agent is trying to add a parameter
const $runtime = __importStar(require("../../sentence-generator/runtime"));
const thingtalk_1 = require("thingtalk");
const C = __importStar(require("../ast_manip"));
exports.one_param_slot_fill_question = "one_param_slot_fill_question";
exports.two_param_slot_fill_question = "two_param_slot_fill_question";
exports.slot_fill_question = "slot_fill_question";
exports.imprecise_slot_fill_answer_phrase = "imprecise_slot_fill_answer_phrase";
exports.imprecise_slot_fill_coref_answer = "imprecise_slot_fill_coref_answer";
exports.imprecise_slot_fill_answer = "imprecise_slot_fill_answer";
exports.precise_slot_fill_answer = "precise_slot_fill_answer";
/**
 * Load the templates in this file.
 *
 * This is an autogenerated method that will be called by the {@link SentenceGenerator}
 * when the templates are imported.
 */
async function $load($options, $locale, $grammar, $loader) {
    $grammar.declareSymbol("one_param_slot_fill_question");
    $grammar.addRule("one_param_slot_fill_question", [new $runtime.NonTerminal("thingpedia_slot_fill_question", "p", undefined)], $locale._("${p} ?"), ((p) => [p]), C.paramArrayKeyFn, { priority: (0.1) });
    $grammar.addRule("one_param_slot_fill_question", [new $runtime.NonTerminal("input_param", "p", undefined), new $runtime.NonTerminal("prefer_question_phrase", undefined, undefined)], $locale._("what ${p} ${prefer_question_phrase} ?"), ((p, $0) => [p]), C.paramArrayKeyFn, {});
    $grammar.addRule("one_param_slot_fill_question", [], $locale._("when would you like your reminder?"), (() => [{ schema: $loader.standardSchemas.ontimer, name: 'date', type: new thingtalk_1.Type.Array(thingtalk_1.Type.Date), filterable: false, symmetric: false, ast: new thingtalk_1.Ast.Value.VarRef('date') }]), C.paramArrayKeyFn, { priority: (0.2) });
    $grammar.addRule("one_param_slot_fill_question", [], $locale._("when would you like your reminder?"), (() => [{ schema: $loader.standardSchemas.attimer, name: 'time', type: new thingtalk_1.Type.Array(thingtalk_1.Type.Date), filterable: false, symmetric: false, ast: new thingtalk_1.Ast.Value.VarRef('date') }]), C.paramArrayKeyFn, { priority: (0.2) });
    $grammar.declareSymbol("two_param_slot_fill_question");
    $grammar.addRule("two_param_slot_fill_question", [new $runtime.NonTerminal("input_param", "p1", undefined), new $runtime.NonTerminal("input_param", "p2", ["functionName", 0, "functionName"]), new $runtime.NonTerminal("prefer_question_phrase", undefined, undefined)], $locale._("what ${p1} and ${p2} ${prefer_question_phrase} ?"), ((p1, p2, $0) => {
        if (p1.name === p2.name || !C.isSameFunction(p1.schema, p2.schema))
            return null;
        return [p1, p2];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("two_param_slot_fill_question", [new $runtime.NonTerminal("thingpedia_slot_fill_question", "p1", undefined), new $runtime.NonTerminal("input_param", "p2", ["functionName", 0, "functionName"]), new $runtime.NonTerminal("prefer_question_phrase", undefined, undefined)], $locale._("${p1} and what ${p2} ${prefer_question_phrase} ?"), ((p1, p2, $0) => {
        if (p1.name === p2.name || !C.isSameFunction(p1.schema, p2.schema))
            return null;
        return [p1, p2];
    }), C.paramArrayKeyFn, {});
    $grammar.addRule("two_param_slot_fill_question", [new $runtime.NonTerminal("input_param", "p1", undefined), new $runtime.NonTerminal("prefer_question_phrase", undefined, undefined), new $runtime.NonTerminal("thingpedia_slot_fill_question", "p2", ["functionName", 0, "functionName"])], $locale._("what ${p1} ${prefer_question_phrase} and ${p2} ?"), ((p1, $0, p2) => {
        if (p1.name === p2.name || !C.isSameFunction(p1.schema, p2.schema))
            return null;
        return [p1, p2];
    }), C.paramArrayKeyFn, {});
    $grammar.declareSymbol("slot_fill_question");
    $grammar.addRule("slot_fill_question", [new $runtime.NonTerminal("one_param_slot_fill_question", undefined, undefined)], "${one_param_slot_fill_question}", (($0) => { return $0; }), C.paramArrayKeyFn, { priority: (0.1), identity: (true) });
    if (!$options.flags.inference) {
        $grammar.addRule("slot_fill_question", [new $runtime.NonTerminal("two_param_slot_fill_question", undefined, undefined)], "${two_param_slot_fill_question}", (($0) => { return $0; }), C.paramArrayKeyFn, { identity: (true) });
    }
    $grammar.declareSymbol("imprecise_slot_fill_answer_phrase");
    $grammar.addRule("imprecise_slot_fill_answer_phrase", [new $runtime.NonTerminal("constant_Any", "slot", undefined)], "${slot}", ((slot) => slot), undefined, {});
    $grammar.addRule("imprecise_slot_fill_answer_phrase", [new $runtime.NonTerminal("npp_input_param", "slot", undefined)], "${slot}", ((slot) => slot), undefined, {});
    $grammar.addRule("imprecise_slot_fill_answer_phrase", [new $runtime.NonTerminal("apv_input_param", "slot", undefined)], "${slot}", ((slot) => slot), undefined, {});
    $grammar.addRule("imprecise_slot_fill_answer_phrase", [new $runtime.NonTerminal("pvp_input_param", "slot", undefined)], "${slot}", ((slot) => slot), undefined, {});
    $grammar.addRule("imprecise_slot_fill_answer_phrase", [new $runtime.NonTerminal("preposition_input_param", "slot", undefined)], "${slot}", ((slot) => slot), undefined, {});
    $grammar.declareSymbol("imprecise_slot_fill_coref_answer");
    $grammar.addRule("imprecise_slot_fill_coref_answer", [new $runtime.NonTerminal("coref_constant", "slot", undefined)], "${slot}", ((slot) => slot), undefined, {});
    $grammar.addRule("imprecise_slot_fill_coref_answer", [new $runtime.NonTerminal("coref_npp_input_param", "slot", undefined)], "${slot}", ((slot) => slot), undefined, {});
    $grammar.addRule("imprecise_slot_fill_coref_answer", [new $runtime.NonTerminal("coref_apv_input_param", "slot", undefined)], "${slot}", ((slot) => slot), undefined, {});
    $grammar.addRule("imprecise_slot_fill_coref_answer", [new $runtime.NonTerminal("coref_pvp_input_param", "slot", undefined)], "${slot}", ((slot) => slot), undefined, {});
    $grammar.addRule("imprecise_slot_fill_coref_answer", [new $runtime.NonTerminal("coref_preposition_input_param", "slot", undefined)], "${slot}", ((slot) => slot), undefined, {});
    $grammar.declareSymbol("imprecise_slot_fill_answer");
    $grammar.addRule("imprecise_slot_fill_answer", [new $runtime.NonTerminal("imprecise_slot_fill_answer_phrase", "ans", undefined)], $locale._("${ans} {please|} ."), ((ans) => ans), undefined, {});
    $grammar.addRule("imprecise_slot_fill_answer", [new $runtime.NonTerminal("generic_preamble_for_answer", undefined, undefined), new $runtime.NonTerminal("imprecise_slot_fill_answer_phrase", "ans", undefined)], $locale._("${generic_preamble_for_answer} ${ans} ."), (($0, ans) => ans), undefined, {});
    $grammar.addRule("imprecise_slot_fill_answer", [new $runtime.NonTerminal("imprecise_slot_fill_coref_answer", "ans", undefined)], $locale._("${ans} {please|} ."), ((ans) => ans), undefined, {});
    $grammar.addRule("imprecise_slot_fill_answer", [new $runtime.NonTerminal("generic_preamble_for_answer", undefined, undefined), new $runtime.NonTerminal("imprecise_slot_fill_coref_answer", "ans", undefined)], $locale._("${generic_preamble_for_answer} ${ans} ."), (($0, ans) => ans), undefined, {});
    $grammar.declareSymbol("precise_slot_fill_answer");
    $grammar.addRule("precise_slot_fill_answer", [new $runtime.NonTerminal("generic_preamble_for_action", undefined, undefined), new $runtime.NonTerminal("action_continuation_command", "action", undefined)], $locale._("${generic_preamble_for_action} ${action}"), (($0, action) => action), C.invocationKeyFn, {});
    $grammar.addRule("precise_slot_fill_answer", [new $runtime.NonTerminal("generic_preamble_for_answer", undefined, undefined), new $runtime.NonTerminal("generic_article", undefined, undefined), new $runtime.NonTerminal("continuation_query", "query", undefined)], $locale._("${generic_preamble_for_answer} ${generic_article} ${query}"), (($0, $1, query) => query), C.invocationKeyFn, {});
    $grammar.addRule("precise_slot_fill_answer", [new $runtime.NonTerminal("generic_verb_for_search", undefined, undefined), new $runtime.NonTerminal("generic_article", undefined, undefined), new $runtime.NonTerminal("continuation_query", "query", undefined)], $locale._("${generic_verb_for_search} ${generic_article} ${query}"), (($0, $1, query) => query), C.invocationKeyFn, {});
}
exports.$load = $load;
;
//# sourceMappingURL=slot-fill.genie.out.js.map