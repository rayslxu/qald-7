import type $SentenceGenerator from "../../sentence-generator/generator";
import * as $SentenceGeneratorTypes from "../../sentence-generator/types";
import * as $I18n from "../../i18n/index";
import { Ast } from 'thingtalk';
import * as C from '../ast_manip';
import * as D from '../dialogue_acts';
import * as S from '../state_manip';
import ThingpediaLoader from '../load-thingpedia';
export declare const complete_past_action_phrase: $SentenceGeneratorTypes.NonTerminal<Ast.Expression>;
export declare const generic_action_success_phrase: $SentenceGeneratorTypes.NonTerminal<string>;
export declare const action_success_phrase_with_result: $SentenceGeneratorTypes.NonTerminal<D.ActionSuccessPhraseWithResult>;
export declare const action_success_phrase: $SentenceGeneratorTypes.NonTerminal<S.AgentReplyRecord>;
export declare const action_notification_phrase: $SentenceGeneratorTypes.NonTerminal<S.AgentReplyRecord>;
export declare const short_action_error_message: $SentenceGeneratorTypes.NonTerminal<S.ContextInfo>;
export declare const long_action_error_message: $SentenceGeneratorTypes.NonTerminal<S.ContextInfo>;
export declare const one_param_try_different_param_question: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot[]>;
export declare const two_param_try_different_param_question: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot[]>;
export declare const action_error_phrase: $SentenceGeneratorTypes.NonTerminal<S.AgentReplyRecord>;
/**
 * Load the templates in this file.
 *
 * This is an autogenerated method that will be called by the {@link SentenceGenerator}
 * when the templates are imported.
 */
export declare function $load($options: $SentenceGeneratorTypes.GrammarOptions, $locale: $I18n.LanguagePack, $grammar: $SentenceGenerator, $loader: ThingpediaLoader): Promise<void>;
