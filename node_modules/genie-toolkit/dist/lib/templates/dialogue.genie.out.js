"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.complete_table = exports.whose_filtered_table = exports.who_two_verb_filter_table = exports.who_two_have_filter_table = exports.who_two_be_filter_table = exports.who_one_verb_filter_table = exports.who_one_have_filter_table = exports.who_one_be_filter_table = exports.who_verb_filtered_table = exports.who_two_clean_filter_table = exports.who_two_which_filter_table = exports.who_two_with_filter_table = exports.who_one_clean_filter_table = exports.who_one_which_filter_table = exports.who_one_with_filter_table = exports.who_with_filtered_table = exports.who_complete_table = exports.compute_question = exports.projection_Measure_m = exports.projection_Number = exports.verb_projection_Any = exports.boolean_projection = exports.where_question = exports.pair_projection = exports.the_out_param_triple = exports.the_out_param_pair = exports.pvp_id_soft_filter = exports.npp_id_soft_filter = exports.within_filter = exports.quality_filter = exports.whose_npp_filter = exports.nearby_filter = exports.range_with_filter = exports.with_filter = exports.range_filter = exports.range = exports.either_filter = exports.edge_filter = exports.if_filter = exports.get_predicate_filter = exports.timer = exports.constant_String_ContextRef = exports.constant_nor_pairs = exports.constant_or_pairs = exports.constant_pairs = exports.unit_Measure_ms = exports.constant_day_of_week = exports.constant_date_range = exports.constant_date_point = exports.at_time = void 0;
exports.when_command = exports.explicit_when_condition = exports.projection_question = exports.complete_question = exports.search_command = exports.generic_article = exports.generic_lookup_preamble = exports.generic_search_preamble = exports.imperative_verb_for_search = exports.generic_verb_for_search = exports.generic_preamble_for_action = exports.generic_preamble_for_answer = exports.timer_rule = exports.when_get_do_rule = exports.when_get_stream = exports.backward_when_do_rule = exports.forward_when_do_rule = exports.backward_get_do_command = exports.forward_get_do_command = exports.have_filtered_table_join = exports.with_filtered_table_join = exports.stream = exports.edge_stream = exports.have_arg_min_max_table = exports.generic_argminmax = exports.two_verb_filter_table = exports.two_have_filter_table = exports.two_be_filter_table = exports.one_verb_filter_table = exports.one_have_filter_table = exports.one_be_filter_table = exports.verb_filtered_table = exports.anything_clean_filter_phrase = exports.anything_which_filter_phrase = exports.anything_with_filter_phrase = exports.anything_phrase = exports.three_clean_filter_table = exports.three_which_filter_table = exports.three_with_filter_table = exports.two_clean_filter_table = exports.two_which_filter_table = exports.two_with_filter_table = exports.one_clean_filter_table = exports.one_which_filter_table = exports.one_with_filter_table = exports.answer_noun_phrase = exports.two_if_filter_table = exports.one_if_filter_table = exports.if_filtered_table = exports.complete_get_command = void 0;
exports.three_clean_info_phrase = exports.three_which_info_phrase = exports.three_with_info_phrase = exports.two_clean_info_phrase = exports.two_which_info_phrase = exports.two_with_info_phrase = exports.one_clean_info_phrase = exports.one_which_info_phrase = exports.one_with_info_phrase = exports.equal_with_filter = exports.base_result_phrase = exports.result_info_phrase = exports.four_param_direct_result_info_phrase = exports.three_param_direct_result_info_phrase = exports.two_param_direct_result_info_phrase = exports.one_param_direct_result_info_phrase = exports.direct_result_info_phrase = exports.direct_answer_phrase_3 = exports.direct_answer_phrase_2 = exports.direct_answer_phrase_1 = exports.direct_answer_phrase_0 = exports.direct_answer_phrase = exports.make_monitor_phrase = exports.repeat_command_on_error_phrase = exports.repeat_command_phrase = exports.system_learn_more = exports.prefer_question_phrase = exports.no_dontcare_phrase = exports.generic_dontcare_phrase = exports.ask_recommend_phrase = exports.nevermind_phrase = exports.sorry_preamble = exports.anything_else_phrase = exports.no_thanks_phrase = exports.thanks_phrase = exports.ok_thanks_phrase = exports.yes_please_phrase = exports.learn_more_offer = exports.tell_me_more_phrase = exports.reject_phrase = exports.accept_phrase = exports.generic_negative_proposal_reply = exports.greeting = exports.generic_excitement2_phrase = exports.generic_excitement_phrase = exports.the_base_noun_phrase = exports.counterproposal_preamble = exports.say_command = exports.complete_action = exports.monitor_command = void 0;
exports.action_recommendation = exports.question_system_recommendation_short = exports.positive_list_proposal_reply = exports.list_proposal_tell_me_more = exports.list_proposal_accept_phrase_with_action_by_name = exports.list_proposal_accept_phrase_with_action = exports.list_proposal_accept_phrase_must_have_action = exports.generic_list_proposal_accept_phrase = exports.concat_list_description = exports.system_list_proposal = exports.initial_command = exports.imprecise_empty_search_change_request = exports.precise_empty_search_change_request = exports.empty_search_error = exports.user_search_question_for_list = exports.user_search_question = exports.boolean_user_search_question_with_name = exports.user_search_question_with_name = exports.boolean_user_search_question_for_list = exports.boolean_user_search_question = exports.simple_user_search_question_for_list = exports.simple_user_search_question = exports.out_param_list_for_coref_question = exports.other_aggregation_reply = exports.agg_operator_for_reply = exports.count_aggregation_reply = exports.action_error_phrase = exports.two_param_try_different_param_question = exports.one_param_try_different_param_question = exports.long_action_error_message = exports.short_action_error_message = exports.action_notification_phrase = exports.action_success_phrase = exports.action_success_phrase_with_result = exports.generic_action_success_phrase = exports.complete_past_action_phrase = exports.action_confirm_phrase = exports.action_description_phrase = exports.continuation_query = exports.action_continuation_command = exports.action_by_name_command = exports.coref_action_command = exports.action_coref_list_proposal = exports.action_coref_recommendation = exports.contextual_action_phrase = exports.list_coref_action_phrase = exports.coref_action_phrase = exports.n_clean_info_phrase = exports.n_which_info_phrase = exports.n_with_info_phrase = void 0;
exports.$agent = exports.initial_request_preamble = exports.add_separate_stream = exports.add_separate_stream_to_query = exports.notification_error_preamble = exports.notification_preamble = exports.precise_slot_fill_answer = exports.imprecise_slot_fill_answer = exports.imprecise_slot_fill_coref_answer = exports.imprecise_slot_fill_answer_phrase = exports.slot_fill_question = exports.two_param_slot_fill_question = exports.one_param_slot_fill_question = exports.imprecise_search_question_answer = exports.imprecise_search_answer = exports.imprecise_search_answer_phrase = exports.imprecise_search_coref_answer = exports.specific_dontcare_phrase = exports.precise_search_question_answer = exports.verbose_search_answer_with_action = exports.verbose_search_answer = exports.search_question = exports.simple_search_question = exports.generic_question = exports.disjunctive_search_question = exports.question_pvp_filter_pair = exports.question_preposition_filter_pair = exports.question_avp_filter_pair = exports.question_apv_filter_pair = exports.question_npp_filter_pair = exports.two_param_yesno_direct_search_question = exports.one_param_yesno_direct_search_question_with_preamble = exports.one_param_yesno_direct_search_question = exports.two_param_direct_search_question = exports.one_param_direct_search_question_with_preamble = exports.one_param_direct_search_question = exports.related_question = exports.negative_proposal_reply = exports.negative_proposal_answer_preamble = exports.negative_proposal_request = exports.system_generic_proposal = exports.search_result_preamble = exports.recommendation_accept_phrase_by_name = exports.recommendation_accept_phrase_with_action = exports.system_recommendation = exports.system_nonlist_result = exports.actionable_system_display_result_short = exports.direct_user_question_answer = exports.proposal_info_action_pair = exports.actionable_system_recommendation_short = void 0;
exports.$load = exports.$user = void 0;
const $runtime = __importStar(require("../sentence-generator/runtime"));
const C = __importStar(require("./ast_manip"));
const S = __importStar(require("./state_manip"));
const D = __importStar(require("./dialogue_acts"));
const shared_genie_out_1 = require("./shared.genie.out");
const constants_genie_out_1 = require("./constants.genie.out");
Object.defineProperty(exports, "at_time", { enumerable: true, get: function () { return constants_genie_out_1.at_time; } });
Object.defineProperty(exports, "constant_date_point", { enumerable: true, get: function () { return constants_genie_out_1.constant_date_point; } });
Object.defineProperty(exports, "constant_date_range", { enumerable: true, get: function () { return constants_genie_out_1.constant_date_range; } });
Object.defineProperty(exports, "constant_day_of_week", { enumerable: true, get: function () { return constants_genie_out_1.constant_day_of_week; } });
Object.defineProperty(exports, "unit_Measure_ms", { enumerable: true, get: function () { return constants_genie_out_1.unit_Measure_ms; } });
Object.defineProperty(exports, "constant_pairs", { enumerable: true, get: function () { return constants_genie_out_1.constant_pairs; } });
Object.defineProperty(exports, "constant_or_pairs", { enumerable: true, get: function () { return constants_genie_out_1.constant_or_pairs; } });
Object.defineProperty(exports, "constant_nor_pairs", { enumerable: true, get: function () { return constants_genie_out_1.constant_nor_pairs; } });
Object.defineProperty(exports, "constant_String_ContextRef", { enumerable: true, get: function () { return constants_genie_out_1.constant_String_ContextRef; } });
const timers_genie_out_1 = require("./timers.genie.out");
Object.defineProperty(exports, "timer", { enumerable: true, get: function () { return timers_genie_out_1.timer; } });
const filters_genie_out_1 = require("./filters.genie.out");
Object.defineProperty(exports, "get_predicate_filter", { enumerable: true, get: function () { return filters_genie_out_1.get_predicate_filter; } });
Object.defineProperty(exports, "if_filter", { enumerable: true, get: function () { return filters_genie_out_1.if_filter; } });
Object.defineProperty(exports, "edge_filter", { enumerable: true, get: function () { return filters_genie_out_1.edge_filter; } });
Object.defineProperty(exports, "either_filter", { enumerable: true, get: function () { return filters_genie_out_1.either_filter; } });
Object.defineProperty(exports, "range", { enumerable: true, get: function () { return filters_genie_out_1.range; } });
Object.defineProperty(exports, "range_filter", { enumerable: true, get: function () { return filters_genie_out_1.range_filter; } });
Object.defineProperty(exports, "with_filter", { enumerable: true, get: function () { return filters_genie_out_1.with_filter; } });
Object.defineProperty(exports, "range_with_filter", { enumerable: true, get: function () { return filters_genie_out_1.range_with_filter; } });
Object.defineProperty(exports, "nearby_filter", { enumerable: true, get: function () { return filters_genie_out_1.nearby_filter; } });
Object.defineProperty(exports, "whose_npp_filter", { enumerable: true, get: function () { return filters_genie_out_1.whose_npp_filter; } });
Object.defineProperty(exports, "quality_filter", { enumerable: true, get: function () { return filters_genie_out_1.quality_filter; } });
Object.defineProperty(exports, "within_filter", { enumerable: true, get: function () { return filters_genie_out_1.within_filter; } });
Object.defineProperty(exports, "npp_id_soft_filter", { enumerable: true, get: function () { return filters_genie_out_1.npp_id_soft_filter; } });
Object.defineProperty(exports, "pvp_id_soft_filter", { enumerable: true, get: function () { return filters_genie_out_1.pvp_id_soft_filter; } });
const projections_genie_out_1 = require("./projections.genie.out");
Object.defineProperty(exports, "the_out_param_pair", { enumerable: true, get: function () { return projections_genie_out_1.the_out_param_pair; } });
Object.defineProperty(exports, "the_out_param_triple", { enumerable: true, get: function () { return projections_genie_out_1.the_out_param_triple; } });
Object.defineProperty(exports, "pair_projection", { enumerable: true, get: function () { return projections_genie_out_1.pair_projection; } });
Object.defineProperty(exports, "where_question", { enumerable: true, get: function () { return projections_genie_out_1.where_question; } });
Object.defineProperty(exports, "boolean_projection", { enumerable: true, get: function () { return projections_genie_out_1.boolean_projection; } });
Object.defineProperty(exports, "verb_projection_Any", { enumerable: true, get: function () { return projections_genie_out_1.verb_projection_Any; } });
const aggregation_genie_out_1 = require("./aggregation.genie.out");
Object.defineProperty(exports, "projection_Number", { enumerable: true, get: function () { return aggregation_genie_out_1.projection_Number; } });
const computation_genie_out_1 = require("./computation.genie.out");
Object.defineProperty(exports, "projection_Measure_m", { enumerable: true, get: function () { return computation_genie_out_1.projection_Measure_m; } });
Object.defineProperty(exports, "compute_question", { enumerable: true, get: function () { return computation_genie_out_1.compute_question; } });
const who_questions_genie_out_1 = require("./who_questions.genie.out");
Object.defineProperty(exports, "who_complete_table", { enumerable: true, get: function () { return who_questions_genie_out_1.who_complete_table; } });
Object.defineProperty(exports, "who_with_filtered_table", { enumerable: true, get: function () { return who_questions_genie_out_1.who_with_filtered_table; } });
Object.defineProperty(exports, "who_one_with_filter_table", { enumerable: true, get: function () { return who_questions_genie_out_1.who_one_with_filter_table; } });
Object.defineProperty(exports, "who_one_which_filter_table", { enumerable: true, get: function () { return who_questions_genie_out_1.who_one_which_filter_table; } });
Object.defineProperty(exports, "who_one_clean_filter_table", { enumerable: true, get: function () { return who_questions_genie_out_1.who_one_clean_filter_table; } });
Object.defineProperty(exports, "who_two_with_filter_table", { enumerable: true, get: function () { return who_questions_genie_out_1.who_two_with_filter_table; } });
Object.defineProperty(exports, "who_two_which_filter_table", { enumerable: true, get: function () { return who_questions_genie_out_1.who_two_which_filter_table; } });
Object.defineProperty(exports, "who_two_clean_filter_table", { enumerable: true, get: function () { return who_questions_genie_out_1.who_two_clean_filter_table; } });
Object.defineProperty(exports, "who_verb_filtered_table", { enumerable: true, get: function () { return who_questions_genie_out_1.who_verb_filtered_table; } });
Object.defineProperty(exports, "who_one_be_filter_table", { enumerable: true, get: function () { return who_questions_genie_out_1.who_one_be_filter_table; } });
Object.defineProperty(exports, "who_one_have_filter_table", { enumerable: true, get: function () { return who_questions_genie_out_1.who_one_have_filter_table; } });
Object.defineProperty(exports, "who_one_verb_filter_table", { enumerable: true, get: function () { return who_questions_genie_out_1.who_one_verb_filter_table; } });
Object.defineProperty(exports, "who_two_be_filter_table", { enumerable: true, get: function () { return who_questions_genie_out_1.who_two_be_filter_table; } });
Object.defineProperty(exports, "who_two_have_filter_table", { enumerable: true, get: function () { return who_questions_genie_out_1.who_two_have_filter_table; } });
Object.defineProperty(exports, "who_two_verb_filter_table", { enumerable: true, get: function () { return who_questions_genie_out_1.who_two_verb_filter_table; } });
Object.defineProperty(exports, "whose_filtered_table", { enumerable: true, get: function () { return who_questions_genie_out_1.whose_filtered_table; } });
const stream_tables_genie_out_1 = require("./stream_tables.genie.out");
Object.defineProperty(exports, "complete_table", { enumerable: true, get: function () { return stream_tables_genie_out_1.complete_table; } });
Object.defineProperty(exports, "complete_get_command", { enumerable: true, get: function () { return stream_tables_genie_out_1.complete_get_command; } });
Object.defineProperty(exports, "if_filtered_table", { enumerable: true, get: function () { return stream_tables_genie_out_1.if_filtered_table; } });
Object.defineProperty(exports, "one_if_filter_table", { enumerable: true, get: function () { return stream_tables_genie_out_1.one_if_filter_table; } });
Object.defineProperty(exports, "two_if_filter_table", { enumerable: true, get: function () { return stream_tables_genie_out_1.two_if_filter_table; } });
Object.defineProperty(exports, "answer_noun_phrase", { enumerable: true, get: function () { return stream_tables_genie_out_1.answer_noun_phrase; } });
Object.defineProperty(exports, "one_with_filter_table", { enumerable: true, get: function () { return stream_tables_genie_out_1.one_with_filter_table; } });
Object.defineProperty(exports, "one_which_filter_table", { enumerable: true, get: function () { return stream_tables_genie_out_1.one_which_filter_table; } });
Object.defineProperty(exports, "one_clean_filter_table", { enumerable: true, get: function () { return stream_tables_genie_out_1.one_clean_filter_table; } });
Object.defineProperty(exports, "two_with_filter_table", { enumerable: true, get: function () { return stream_tables_genie_out_1.two_with_filter_table; } });
Object.defineProperty(exports, "two_which_filter_table", { enumerable: true, get: function () { return stream_tables_genie_out_1.two_which_filter_table; } });
Object.defineProperty(exports, "two_clean_filter_table", { enumerable: true, get: function () { return stream_tables_genie_out_1.two_clean_filter_table; } });
Object.defineProperty(exports, "three_with_filter_table", { enumerable: true, get: function () { return stream_tables_genie_out_1.three_with_filter_table; } });
Object.defineProperty(exports, "three_which_filter_table", { enumerable: true, get: function () { return stream_tables_genie_out_1.three_which_filter_table; } });
Object.defineProperty(exports, "three_clean_filter_table", { enumerable: true, get: function () { return stream_tables_genie_out_1.three_clean_filter_table; } });
Object.defineProperty(exports, "anything_phrase", { enumerable: true, get: function () { return stream_tables_genie_out_1.anything_phrase; } });
Object.defineProperty(exports, "anything_with_filter_phrase", { enumerable: true, get: function () { return stream_tables_genie_out_1.anything_with_filter_phrase; } });
Object.defineProperty(exports, "anything_which_filter_phrase", { enumerable: true, get: function () { return stream_tables_genie_out_1.anything_which_filter_phrase; } });
Object.defineProperty(exports, "anything_clean_filter_phrase", { enumerable: true, get: function () { return stream_tables_genie_out_1.anything_clean_filter_phrase; } });
Object.defineProperty(exports, "verb_filtered_table", { enumerable: true, get: function () { return stream_tables_genie_out_1.verb_filtered_table; } });
Object.defineProperty(exports, "one_be_filter_table", { enumerable: true, get: function () { return stream_tables_genie_out_1.one_be_filter_table; } });
Object.defineProperty(exports, "one_have_filter_table", { enumerable: true, get: function () { return stream_tables_genie_out_1.one_have_filter_table; } });
Object.defineProperty(exports, "one_verb_filter_table", { enumerable: true, get: function () { return stream_tables_genie_out_1.one_verb_filter_table; } });
Object.defineProperty(exports, "two_be_filter_table", { enumerable: true, get: function () { return stream_tables_genie_out_1.two_be_filter_table; } });
Object.defineProperty(exports, "two_have_filter_table", { enumerable: true, get: function () { return stream_tables_genie_out_1.two_have_filter_table; } });
Object.defineProperty(exports, "two_verb_filter_table", { enumerable: true, get: function () { return stream_tables_genie_out_1.two_verb_filter_table; } });
Object.defineProperty(exports, "generic_argminmax", { enumerable: true, get: function () { return stream_tables_genie_out_1.generic_argminmax; } });
Object.defineProperty(exports, "have_arg_min_max_table", { enumerable: true, get: function () { return stream_tables_genie_out_1.have_arg_min_max_table; } });
Object.defineProperty(exports, "edge_stream", { enumerable: true, get: function () { return stream_tables_genie_out_1.edge_stream; } });
Object.defineProperty(exports, "stream", { enumerable: true, get: function () { return stream_tables_genie_out_1.stream; } });
Object.defineProperty(exports, "with_filtered_table_join", { enumerable: true, get: function () { return stream_tables_genie_out_1.with_filtered_table_join; } });
Object.defineProperty(exports, "have_filtered_table_join", { enumerable: true, get: function () { return stream_tables_genie_out_1.have_filtered_table_join; } });
const commands_genie_out_1 = require("./commands.genie.out");
Object.defineProperty(exports, "forward_get_do_command", { enumerable: true, get: function () { return commands_genie_out_1.forward_get_do_command; } });
Object.defineProperty(exports, "backward_get_do_command", { enumerable: true, get: function () { return commands_genie_out_1.backward_get_do_command; } });
Object.defineProperty(exports, "forward_when_do_rule", { enumerable: true, get: function () { return commands_genie_out_1.forward_when_do_rule; } });
Object.defineProperty(exports, "backward_when_do_rule", { enumerable: true, get: function () { return commands_genie_out_1.backward_when_do_rule; } });
Object.defineProperty(exports, "when_get_stream", { enumerable: true, get: function () { return commands_genie_out_1.when_get_stream; } });
Object.defineProperty(exports, "when_get_do_rule", { enumerable: true, get: function () { return commands_genie_out_1.when_get_do_rule; } });
Object.defineProperty(exports, "timer_rule", { enumerable: true, get: function () { return commands_genie_out_1.timer_rule; } });
Object.defineProperty(exports, "generic_preamble_for_answer", { enumerable: true, get: function () { return commands_genie_out_1.generic_preamble_for_answer; } });
Object.defineProperty(exports, "generic_preamble_for_action", { enumerable: true, get: function () { return commands_genie_out_1.generic_preamble_for_action; } });
Object.defineProperty(exports, "generic_verb_for_search", { enumerable: true, get: function () { return commands_genie_out_1.generic_verb_for_search; } });
Object.defineProperty(exports, "imperative_verb_for_search", { enumerable: true, get: function () { return commands_genie_out_1.imperative_verb_for_search; } });
Object.defineProperty(exports, "generic_search_preamble", { enumerable: true, get: function () { return commands_genie_out_1.generic_search_preamble; } });
Object.defineProperty(exports, "generic_lookup_preamble", { enumerable: true, get: function () { return commands_genie_out_1.generic_lookup_preamble; } });
Object.defineProperty(exports, "generic_article", { enumerable: true, get: function () { return commands_genie_out_1.generic_article; } });
Object.defineProperty(exports, "search_command", { enumerable: true, get: function () { return commands_genie_out_1.search_command; } });
Object.defineProperty(exports, "complete_question", { enumerable: true, get: function () { return commands_genie_out_1.complete_question; } });
Object.defineProperty(exports, "projection_question", { enumerable: true, get: function () { return commands_genie_out_1.projection_question; } });
Object.defineProperty(exports, "explicit_when_condition", { enumerable: true, get: function () { return commands_genie_out_1.explicit_when_condition; } });
Object.defineProperty(exports, "when_command", { enumerable: true, get: function () { return commands_genie_out_1.when_command; } });
Object.defineProperty(exports, "monitor_command", { enumerable: true, get: function () { return commands_genie_out_1.monitor_command; } });
Object.defineProperty(exports, "complete_action", { enumerable: true, get: function () { return commands_genie_out_1.complete_action; } });
Object.defineProperty(exports, "say_command", { enumerable: true, get: function () { return commands_genie_out_1.say_command; } });
const shared_genie_out_2 = require("./dlg/shared.genie.out");
Object.defineProperty(exports, "counterproposal_preamble", { enumerable: true, get: function () { return shared_genie_out_2.counterproposal_preamble; } });
Object.defineProperty(exports, "the_base_noun_phrase", { enumerable: true, get: function () { return shared_genie_out_2.the_base_noun_phrase; } });
Object.defineProperty(exports, "generic_excitement_phrase", { enumerable: true, get: function () { return shared_genie_out_2.generic_excitement_phrase; } });
Object.defineProperty(exports, "generic_excitement2_phrase", { enumerable: true, get: function () { return shared_genie_out_2.generic_excitement2_phrase; } });
Object.defineProperty(exports, "greeting", { enumerable: true, get: function () { return shared_genie_out_2.greeting; } });
Object.defineProperty(exports, "generic_negative_proposal_reply", { enumerable: true, get: function () { return shared_genie_out_2.generic_negative_proposal_reply; } });
Object.defineProperty(exports, "accept_phrase", { enumerable: true, get: function () { return shared_genie_out_2.accept_phrase; } });
Object.defineProperty(exports, "reject_phrase", { enumerable: true, get: function () { return shared_genie_out_2.reject_phrase; } });
Object.defineProperty(exports, "tell_me_more_phrase", { enumerable: true, get: function () { return shared_genie_out_2.tell_me_more_phrase; } });
Object.defineProperty(exports, "learn_more_offer", { enumerable: true, get: function () { return shared_genie_out_2.learn_more_offer; } });
Object.defineProperty(exports, "yes_please_phrase", { enumerable: true, get: function () { return shared_genie_out_2.yes_please_phrase; } });
Object.defineProperty(exports, "ok_thanks_phrase", { enumerable: true, get: function () { return shared_genie_out_2.ok_thanks_phrase; } });
Object.defineProperty(exports, "thanks_phrase", { enumerable: true, get: function () { return shared_genie_out_2.thanks_phrase; } });
Object.defineProperty(exports, "no_thanks_phrase", { enumerable: true, get: function () { return shared_genie_out_2.no_thanks_phrase; } });
Object.defineProperty(exports, "anything_else_phrase", { enumerable: true, get: function () { return shared_genie_out_2.anything_else_phrase; } });
Object.defineProperty(exports, "sorry_preamble", { enumerable: true, get: function () { return shared_genie_out_2.sorry_preamble; } });
Object.defineProperty(exports, "nevermind_phrase", { enumerable: true, get: function () { return shared_genie_out_2.nevermind_phrase; } });
Object.defineProperty(exports, "ask_recommend_phrase", { enumerable: true, get: function () { return shared_genie_out_2.ask_recommend_phrase; } });
Object.defineProperty(exports, "generic_dontcare_phrase", { enumerable: true, get: function () { return shared_genie_out_2.generic_dontcare_phrase; } });
Object.defineProperty(exports, "no_dontcare_phrase", { enumerable: true, get: function () { return shared_genie_out_2.no_dontcare_phrase; } });
Object.defineProperty(exports, "prefer_question_phrase", { enumerable: true, get: function () { return shared_genie_out_2.prefer_question_phrase; } });
Object.defineProperty(exports, "system_learn_more", { enumerable: true, get: function () { return shared_genie_out_2.system_learn_more; } });
Object.defineProperty(exports, "repeat_command_phrase", { enumerable: true, get: function () { return shared_genie_out_2.repeat_command_phrase; } });
Object.defineProperty(exports, "repeat_command_on_error_phrase", { enumerable: true, get: function () { return shared_genie_out_2.repeat_command_on_error_phrase; } });
Object.defineProperty(exports, "make_monitor_phrase", { enumerable: true, get: function () { return shared_genie_out_2.make_monitor_phrase; } });
const results_genie_out_1 = require("./dlg/results.genie.out");
Object.defineProperty(exports, "direct_answer_phrase", { enumerable: true, get: function () { return results_genie_out_1.direct_answer_phrase; } });
Object.defineProperty(exports, "direct_answer_phrase_0", { enumerable: true, get: function () { return results_genie_out_1.direct_answer_phrase_0; } });
Object.defineProperty(exports, "direct_answer_phrase_1", { enumerable: true, get: function () { return results_genie_out_1.direct_answer_phrase_1; } });
Object.defineProperty(exports, "direct_answer_phrase_2", { enumerable: true, get: function () { return results_genie_out_1.direct_answer_phrase_2; } });
Object.defineProperty(exports, "direct_answer_phrase_3", { enumerable: true, get: function () { return results_genie_out_1.direct_answer_phrase_3; } });
Object.defineProperty(exports, "direct_result_info_phrase", { enumerable: true, get: function () { return results_genie_out_1.direct_result_info_phrase; } });
Object.defineProperty(exports, "one_param_direct_result_info_phrase", { enumerable: true, get: function () { return results_genie_out_1.one_param_direct_result_info_phrase; } });
Object.defineProperty(exports, "two_param_direct_result_info_phrase", { enumerable: true, get: function () { return results_genie_out_1.two_param_direct_result_info_phrase; } });
Object.defineProperty(exports, "three_param_direct_result_info_phrase", { enumerable: true, get: function () { return results_genie_out_1.three_param_direct_result_info_phrase; } });
Object.defineProperty(exports, "four_param_direct_result_info_phrase", { enumerable: true, get: function () { return results_genie_out_1.four_param_direct_result_info_phrase; } });
Object.defineProperty(exports, "result_info_phrase", { enumerable: true, get: function () { return results_genie_out_1.result_info_phrase; } });
Object.defineProperty(exports, "base_result_phrase", { enumerable: true, get: function () { return results_genie_out_1.base_result_phrase; } });
Object.defineProperty(exports, "equal_with_filter", { enumerable: true, get: function () { return results_genie_out_1.equal_with_filter; } });
Object.defineProperty(exports, "one_with_info_phrase", { enumerable: true, get: function () { return results_genie_out_1.one_with_info_phrase; } });
Object.defineProperty(exports, "one_which_info_phrase", { enumerable: true, get: function () { return results_genie_out_1.one_which_info_phrase; } });
Object.defineProperty(exports, "one_clean_info_phrase", { enumerable: true, get: function () { return results_genie_out_1.one_clean_info_phrase; } });
Object.defineProperty(exports, "two_with_info_phrase", { enumerable: true, get: function () { return results_genie_out_1.two_with_info_phrase; } });
Object.defineProperty(exports, "two_which_info_phrase", { enumerable: true, get: function () { return results_genie_out_1.two_which_info_phrase; } });
Object.defineProperty(exports, "two_clean_info_phrase", { enumerable: true, get: function () { return results_genie_out_1.two_clean_info_phrase; } });
Object.defineProperty(exports, "three_with_info_phrase", { enumerable: true, get: function () { return results_genie_out_1.three_with_info_phrase; } });
Object.defineProperty(exports, "three_which_info_phrase", { enumerable: true, get: function () { return results_genie_out_1.three_which_info_phrase; } });
Object.defineProperty(exports, "three_clean_info_phrase", { enumerable: true, get: function () { return results_genie_out_1.three_clean_info_phrase; } });
Object.defineProperty(exports, "n_with_info_phrase", { enumerable: true, get: function () { return results_genie_out_1.n_with_info_phrase; } });
Object.defineProperty(exports, "n_which_info_phrase", { enumerable: true, get: function () { return results_genie_out_1.n_which_info_phrase; } });
Object.defineProperty(exports, "n_clean_info_phrase", { enumerable: true, get: function () { return results_genie_out_1.n_clean_info_phrase; } });
const coref_actions_genie_out_1 = require("./dlg/coref-actions.genie.out");
Object.defineProperty(exports, "coref_action_phrase", { enumerable: true, get: function () { return coref_actions_genie_out_1.coref_action_phrase; } });
Object.defineProperty(exports, "list_coref_action_phrase", { enumerable: true, get: function () { return coref_actions_genie_out_1.list_coref_action_phrase; } });
Object.defineProperty(exports, "contextual_action_phrase", { enumerable: true, get: function () { return coref_actions_genie_out_1.contextual_action_phrase; } });
Object.defineProperty(exports, "action_coref_recommendation", { enumerable: true, get: function () { return coref_actions_genie_out_1.action_coref_recommendation; } });
Object.defineProperty(exports, "action_coref_list_proposal", { enumerable: true, get: function () { return coref_actions_genie_out_1.action_coref_list_proposal; } });
Object.defineProperty(exports, "coref_action_command", { enumerable: true, get: function () { return coref_actions_genie_out_1.coref_action_command; } });
Object.defineProperty(exports, "action_by_name_command", { enumerable: true, get: function () { return coref_actions_genie_out_1.action_by_name_command; } });
Object.defineProperty(exports, "action_continuation_command", { enumerable: true, get: function () { return coref_actions_genie_out_1.action_continuation_command; } });
Object.defineProperty(exports, "continuation_query", { enumerable: true, get: function () { return coref_actions_genie_out_1.continuation_query; } });
Object.defineProperty(exports, "action_description_phrase", { enumerable: true, get: function () { return coref_actions_genie_out_1.action_description_phrase; } });
const action_confirm_genie_out_1 = require("./dlg/action-confirm.genie.out");
Object.defineProperty(exports, "action_confirm_phrase", { enumerable: true, get: function () { return action_confirm_genie_out_1.action_confirm_phrase; } });
const action_results_genie_out_1 = require("./dlg/action-results.genie.out");
Object.defineProperty(exports, "complete_past_action_phrase", { enumerable: true, get: function () { return action_results_genie_out_1.complete_past_action_phrase; } });
Object.defineProperty(exports, "generic_action_success_phrase", { enumerable: true, get: function () { return action_results_genie_out_1.generic_action_success_phrase; } });
Object.defineProperty(exports, "action_success_phrase_with_result", { enumerable: true, get: function () { return action_results_genie_out_1.action_success_phrase_with_result; } });
Object.defineProperty(exports, "action_success_phrase", { enumerable: true, get: function () { return action_results_genie_out_1.action_success_phrase; } });
Object.defineProperty(exports, "action_notification_phrase", { enumerable: true, get: function () { return action_results_genie_out_1.action_notification_phrase; } });
Object.defineProperty(exports, "short_action_error_message", { enumerable: true, get: function () { return action_results_genie_out_1.short_action_error_message; } });
Object.defineProperty(exports, "long_action_error_message", { enumerable: true, get: function () { return action_results_genie_out_1.long_action_error_message; } });
Object.defineProperty(exports, "one_param_try_different_param_question", { enumerable: true, get: function () { return action_results_genie_out_1.one_param_try_different_param_question; } });
Object.defineProperty(exports, "two_param_try_different_param_question", { enumerable: true, get: function () { return action_results_genie_out_1.two_param_try_different_param_question; } });
Object.defineProperty(exports, "action_error_phrase", { enumerable: true, get: function () { return action_results_genie_out_1.action_error_phrase; } });
const aggregation_results_genie_out_1 = require("./dlg/aggregation-results.genie.out");
Object.defineProperty(exports, "count_aggregation_reply", { enumerable: true, get: function () { return aggregation_results_genie_out_1.count_aggregation_reply; } });
Object.defineProperty(exports, "agg_operator_for_reply", { enumerable: true, get: function () { return aggregation_results_genie_out_1.agg_operator_for_reply; } });
Object.defineProperty(exports, "other_aggregation_reply", { enumerable: true, get: function () { return aggregation_results_genie_out_1.other_aggregation_reply; } });
const coref_questions_genie_out_1 = require("./dlg/coref-questions.genie.out");
Object.defineProperty(exports, "out_param_list_for_coref_question", { enumerable: true, get: function () { return coref_questions_genie_out_1.out_param_list_for_coref_question; } });
Object.defineProperty(exports, "simple_user_search_question", { enumerable: true, get: function () { return coref_questions_genie_out_1.simple_user_search_question; } });
Object.defineProperty(exports, "simple_user_search_question_for_list", { enumerable: true, get: function () { return coref_questions_genie_out_1.simple_user_search_question_for_list; } });
Object.defineProperty(exports, "boolean_user_search_question", { enumerable: true, get: function () { return coref_questions_genie_out_1.boolean_user_search_question; } });
Object.defineProperty(exports, "boolean_user_search_question_for_list", { enumerable: true, get: function () { return coref_questions_genie_out_1.boolean_user_search_question_for_list; } });
Object.defineProperty(exports, "user_search_question_with_name", { enumerable: true, get: function () { return coref_questions_genie_out_1.user_search_question_with_name; } });
Object.defineProperty(exports, "boolean_user_search_question_with_name", { enumerable: true, get: function () { return coref_questions_genie_out_1.boolean_user_search_question_with_name; } });
Object.defineProperty(exports, "user_search_question", { enumerable: true, get: function () { return coref_questions_genie_out_1.user_search_question; } });
Object.defineProperty(exports, "user_search_question_for_list", { enumerable: true, get: function () { return coref_questions_genie_out_1.user_search_question_for_list; } });
const empty_search_genie_out_1 = require("./dlg/empty-search.genie.out");
Object.defineProperty(exports, "empty_search_error", { enumerable: true, get: function () { return empty_search_genie_out_1.empty_search_error; } });
Object.defineProperty(exports, "precise_empty_search_change_request", { enumerable: true, get: function () { return empty_search_genie_out_1.precise_empty_search_change_request; } });
Object.defineProperty(exports, "imprecise_empty_search_change_request", { enumerable: true, get: function () { return empty_search_genie_out_1.imprecise_empty_search_change_request; } });
const initial_request_genie_out_1 = require("./dlg/initial-request.genie.out");
Object.defineProperty(exports, "initial_command", { enumerable: true, get: function () { return initial_request_genie_out_1.initial_command; } });
const list_proposal_genie_out_1 = require("./dlg/list-proposal.genie.out");
Object.defineProperty(exports, "system_list_proposal", { enumerable: true, get: function () { return list_proposal_genie_out_1.system_list_proposal; } });
Object.defineProperty(exports, "concat_list_description", { enumerable: true, get: function () { return list_proposal_genie_out_1.concat_list_description; } });
Object.defineProperty(exports, "generic_list_proposal_accept_phrase", { enumerable: true, get: function () { return list_proposal_genie_out_1.generic_list_proposal_accept_phrase; } });
Object.defineProperty(exports, "list_proposal_accept_phrase_must_have_action", { enumerable: true, get: function () { return list_proposal_genie_out_1.list_proposal_accept_phrase_must_have_action; } });
Object.defineProperty(exports, "list_proposal_accept_phrase_with_action", { enumerable: true, get: function () { return list_proposal_genie_out_1.list_proposal_accept_phrase_with_action; } });
Object.defineProperty(exports, "list_proposal_accept_phrase_with_action_by_name", { enumerable: true, get: function () { return list_proposal_genie_out_1.list_proposal_accept_phrase_with_action_by_name; } });
Object.defineProperty(exports, "list_proposal_tell_me_more", { enumerable: true, get: function () { return list_proposal_genie_out_1.list_proposal_tell_me_more; } });
Object.defineProperty(exports, "positive_list_proposal_reply", { enumerable: true, get: function () { return list_proposal_genie_out_1.positive_list_proposal_reply; } });
const recommendation_genie_out_1 = require("./dlg/recommendation.genie.out");
Object.defineProperty(exports, "question_system_recommendation_short", { enumerable: true, get: function () { return recommendation_genie_out_1.question_system_recommendation_short; } });
Object.defineProperty(exports, "action_recommendation", { enumerable: true, get: function () { return recommendation_genie_out_1.action_recommendation; } });
Object.defineProperty(exports, "actionable_system_recommendation_short", { enumerable: true, get: function () { return recommendation_genie_out_1.actionable_system_recommendation_short; } });
Object.defineProperty(exports, "proposal_info_action_pair", { enumerable: true, get: function () { return recommendation_genie_out_1.proposal_info_action_pair; } });
Object.defineProperty(exports, "direct_user_question_answer", { enumerable: true, get: function () { return recommendation_genie_out_1.direct_user_question_answer; } });
Object.defineProperty(exports, "actionable_system_display_result_short", { enumerable: true, get: function () { return recommendation_genie_out_1.actionable_system_display_result_short; } });
Object.defineProperty(exports, "system_nonlist_result", { enumerable: true, get: function () { return recommendation_genie_out_1.system_nonlist_result; } });
Object.defineProperty(exports, "system_recommendation", { enumerable: true, get: function () { return recommendation_genie_out_1.system_recommendation; } });
Object.defineProperty(exports, "recommendation_accept_phrase_with_action", { enumerable: true, get: function () { return recommendation_genie_out_1.recommendation_accept_phrase_with_action; } });
Object.defineProperty(exports, "recommendation_accept_phrase_by_name", { enumerable: true, get: function () { return recommendation_genie_out_1.recommendation_accept_phrase_by_name; } });
const refinement_genie_out_1 = require("./dlg/refinement.genie.out");
Object.defineProperty(exports, "search_result_preamble", { enumerable: true, get: function () { return refinement_genie_out_1.search_result_preamble; } });
Object.defineProperty(exports, "system_generic_proposal", { enumerable: true, get: function () { return refinement_genie_out_1.system_generic_proposal; } });
Object.defineProperty(exports, "negative_proposal_request", { enumerable: true, get: function () { return refinement_genie_out_1.negative_proposal_request; } });
Object.defineProperty(exports, "negative_proposal_answer_preamble", { enumerable: true, get: function () { return refinement_genie_out_1.negative_proposal_answer_preamble; } });
Object.defineProperty(exports, "negative_proposal_reply", { enumerable: true, get: function () { return refinement_genie_out_1.negative_proposal_reply; } });
const related_questions_genie_out_1 = require("./dlg/related-questions.genie.out");
Object.defineProperty(exports, "related_question", { enumerable: true, get: function () { return related_questions_genie_out_1.related_question; } });
const search_questions_genie_out_1 = require("./dlg/search-questions.genie.out");
Object.defineProperty(exports, "one_param_direct_search_question", { enumerable: true, get: function () { return search_questions_genie_out_1.one_param_direct_search_question; } });
Object.defineProperty(exports, "one_param_direct_search_question_with_preamble", { enumerable: true, get: function () { return search_questions_genie_out_1.one_param_direct_search_question_with_preamble; } });
Object.defineProperty(exports, "two_param_direct_search_question", { enumerable: true, get: function () { return search_questions_genie_out_1.two_param_direct_search_question; } });
Object.defineProperty(exports, "one_param_yesno_direct_search_question", { enumerable: true, get: function () { return search_questions_genie_out_1.one_param_yesno_direct_search_question; } });
Object.defineProperty(exports, "one_param_yesno_direct_search_question_with_preamble", { enumerable: true, get: function () { return search_questions_genie_out_1.one_param_yesno_direct_search_question_with_preamble; } });
Object.defineProperty(exports, "two_param_yesno_direct_search_question", { enumerable: true, get: function () { return search_questions_genie_out_1.two_param_yesno_direct_search_question; } });
Object.defineProperty(exports, "question_npp_filter_pair", { enumerable: true, get: function () { return search_questions_genie_out_1.question_npp_filter_pair; } });
Object.defineProperty(exports, "question_apv_filter_pair", { enumerable: true, get: function () { return search_questions_genie_out_1.question_apv_filter_pair; } });
Object.defineProperty(exports, "question_avp_filter_pair", { enumerable: true, get: function () { return search_questions_genie_out_1.question_avp_filter_pair; } });
Object.defineProperty(exports, "question_preposition_filter_pair", { enumerable: true, get: function () { return search_questions_genie_out_1.question_preposition_filter_pair; } });
Object.defineProperty(exports, "question_pvp_filter_pair", { enumerable: true, get: function () { return search_questions_genie_out_1.question_pvp_filter_pair; } });
Object.defineProperty(exports, "disjunctive_search_question", { enumerable: true, get: function () { return search_questions_genie_out_1.disjunctive_search_question; } });
Object.defineProperty(exports, "generic_question", { enumerable: true, get: function () { return search_questions_genie_out_1.generic_question; } });
Object.defineProperty(exports, "simple_search_question", { enumerable: true, get: function () { return search_questions_genie_out_1.simple_search_question; } });
Object.defineProperty(exports, "search_question", { enumerable: true, get: function () { return search_questions_genie_out_1.search_question; } });
Object.defineProperty(exports, "verbose_search_answer", { enumerable: true, get: function () { return search_questions_genie_out_1.verbose_search_answer; } });
Object.defineProperty(exports, "verbose_search_answer_with_action", { enumerable: true, get: function () { return search_questions_genie_out_1.verbose_search_answer_with_action; } });
Object.defineProperty(exports, "precise_search_question_answer", { enumerable: true, get: function () { return search_questions_genie_out_1.precise_search_question_answer; } });
Object.defineProperty(exports, "specific_dontcare_phrase", { enumerable: true, get: function () { return search_questions_genie_out_1.specific_dontcare_phrase; } });
Object.defineProperty(exports, "imprecise_search_coref_answer", { enumerable: true, get: function () { return search_questions_genie_out_1.imprecise_search_coref_answer; } });
Object.defineProperty(exports, "imprecise_search_answer_phrase", { enumerable: true, get: function () { return search_questions_genie_out_1.imprecise_search_answer_phrase; } });
Object.defineProperty(exports, "imprecise_search_answer", { enumerable: true, get: function () { return search_questions_genie_out_1.imprecise_search_answer; } });
Object.defineProperty(exports, "imprecise_search_question_answer", { enumerable: true, get: function () { return search_questions_genie_out_1.imprecise_search_question_answer; } });
const slot_fill_genie_out_1 = require("./dlg/slot-fill.genie.out");
Object.defineProperty(exports, "one_param_slot_fill_question", { enumerable: true, get: function () { return slot_fill_genie_out_1.one_param_slot_fill_question; } });
Object.defineProperty(exports, "two_param_slot_fill_question", { enumerable: true, get: function () { return slot_fill_genie_out_1.two_param_slot_fill_question; } });
Object.defineProperty(exports, "slot_fill_question", { enumerable: true, get: function () { return slot_fill_genie_out_1.slot_fill_question; } });
Object.defineProperty(exports, "imprecise_slot_fill_answer_phrase", { enumerable: true, get: function () { return slot_fill_genie_out_1.imprecise_slot_fill_answer_phrase; } });
Object.defineProperty(exports, "imprecise_slot_fill_coref_answer", { enumerable: true, get: function () { return slot_fill_genie_out_1.imprecise_slot_fill_coref_answer; } });
Object.defineProperty(exports, "imprecise_slot_fill_answer", { enumerable: true, get: function () { return slot_fill_genie_out_1.imprecise_slot_fill_answer; } });
Object.defineProperty(exports, "precise_slot_fill_answer", { enumerable: true, get: function () { return slot_fill_genie_out_1.precise_slot_fill_answer; } });
const streams_genie_out_1 = require("./dlg/streams.genie.out");
Object.defineProperty(exports, "notification_preamble", { enumerable: true, get: function () { return streams_genie_out_1.notification_preamble; } });
Object.defineProperty(exports, "notification_error_preamble", { enumerable: true, get: function () { return streams_genie_out_1.notification_error_preamble; } });
Object.defineProperty(exports, "add_separate_stream_to_query", { enumerable: true, get: function () { return streams_genie_out_1.add_separate_stream_to_query; } });
Object.defineProperty(exports, "add_separate_stream", { enumerable: true, get: function () { return streams_genie_out_1.add_separate_stream; } });
exports.initial_request_preamble = "initial_request_preamble";
/**
 * The root of the agent generation.
 *
 * This non-terminal contains the entire reply of the agent.
 */
exports.$agent = "$agent";
/**
 * The root of the user generation.
 *
 * This non-terminal contains a single user turn in its entirety.
 */
exports.$user = "$user";
/**
 * Load the templates in this file.
 *
 * This is an autogenerated method that will be called by the {@link SentenceGenerator}
 * when the templates are imported.
 */
async function $load($options, $locale, $grammar, $loader) {
    await (0, shared_genie_out_1.$load)($options, $locale, $grammar, $loader);
    await (0, constants_genie_out_1.$load)($options, $locale, $grammar, $loader);
    await (0, timers_genie_out_1.$load)($options, $locale, $grammar, $loader);
    await (0, filters_genie_out_1.$load)($options, $locale, $grammar, $loader);
    await (0, projections_genie_out_1.$load)($options, $locale, $grammar, $loader);
    await (0, aggregation_genie_out_1.$load)($options, $locale, $grammar, $loader);
    await (0, computation_genie_out_1.$load)($options, $locale, $grammar, $loader);
    await (0, who_questions_genie_out_1.$load)($options, $locale, $grammar, $loader);
    await (0, stream_tables_genie_out_1.$load)($options, $locale, $grammar, $loader);
    await (0, commands_genie_out_1.$load)($options, $locale, $grammar, $loader);
    await (0, shared_genie_out_2.$load)($options, $locale, $grammar, $loader);
    await (0, results_genie_out_1.$load)($options, $locale, $grammar, $loader);
    await (0, coref_actions_genie_out_1.$load)($options, $locale, $grammar, $loader);
    await (0, action_confirm_genie_out_1.$load)($options, $locale, $grammar, $loader);
    await (0, action_results_genie_out_1.$load)($options, $locale, $grammar, $loader);
    await (0, aggregation_results_genie_out_1.$load)($options, $locale, $grammar, $loader);
    await (0, coref_questions_genie_out_1.$load)($options, $locale, $grammar, $loader);
    await (0, empty_search_genie_out_1.$load)($options, $locale, $grammar, $loader);
    await (0, initial_request_genie_out_1.$load)($options, $locale, $grammar, $loader);
    await (0, list_proposal_genie_out_1.$load)($options, $locale, $grammar, $loader);
    await (0, recommendation_genie_out_1.$load)($options, $locale, $grammar, $loader);
    await (0, refinement_genie_out_1.$load)($options, $locale, $grammar, $loader);
    await (0, related_questions_genie_out_1.$load)($options, $locale, $grammar, $loader);
    await (0, search_questions_genie_out_1.$load)($options, $locale, $grammar, $loader);
    await (0, slot_fill_genie_out_1.$load)($options, $locale, $grammar, $loader);
    await (0, streams_genie_out_1.$load)($options, $locale, $grammar, $loader);
    $grammar.declareContext("ctx_init");
    $grammar.declareContext("ctx_multidomain");
    $grammar.declareContext("ctx_with_result");
    $grammar.declareContext("ctx_with_table_result");
    $grammar.declareContext("ctx_with_aggregation_result");
    $grammar.declareContext("ctx_with_action");
    $grammar.declareContext("ctx_without_action");
    $grammar.declareContext("ctx_with_result_and_action");
    $grammar.declareContext("ctx_with_result_question");
    $grammar.declareContext("ctx_with_result_noquestion");
    $grammar.declareContext("ctx_with_result_argminmax");
    $grammar.declareContext("ctx_without_projection");
    $grammar.declareContext("ctx_with_notification");
    $grammar.declareContext("ctx_for_related_question");
    $grammar.declareContext("ctx_with_missing_projection");
    $grammar.declareContext("ctx_next_statement");
    $grammar.declareContext("ctx_current_statement");
    $grammar.declareContext("ctx_greet");
    $grammar.declareContext("ctx_reinit");
    $grammar.declareContext("ctx_cancel");
    $grammar.declareContext("ctx_end");
    $grammar.declareContext("ctx_search_command");
    $grammar.declareContext("ctx_aggregation_question");
    $grammar.declareContext("ctx_distance_argminmax_question");
    $grammar.declareContext("ctx_argminmax_question");
    $grammar.declareContext("ctx_one_result_question");
    $grammar.declareContext("ctx_empty_direct_question");
    $grammar.declareContext("ctx_empty_search_command");
    $grammar.declareContext("ctx_large_search_command");
    $grammar.declareContext("ctx_single_result_search_command");
    $grammar.declareContext("ctx_complete_search_command");
    $grammar.declareContext("ctx_completed_action_success");
    $grammar.declareContext("ctx_completed_action_error");
    $grammar.declareContext("ctx_confirm_action");
    $grammar.declareContext("ctx_incomplete_action");
    $grammar.declareContext("ctx_incomplete_action_after_search");
    $grammar.declareContext("ctx_learn_more");
    $grammar.declareContext("ctx_display_nonlist_result");
    $grammar.declareContext("ctx_rule_enable_success");
    $grammar.declareContext("ctx_action_notification");
    $grammar.declareContext("ctx_list_notification");
    $grammar.declareContext("ctx_nonlist_notification");
    $grammar.declareContext("ctx_notification_error");
    $grammar.declareContext("ctx_sys_any");
    $grammar.declareContext("ctx_sys_action_success");
    $grammar.declareContext("ctx_sys_action_error");
    $grammar.declareContext("ctx_sys_anything_else");
    $grammar.declareContext("ctx_sys_confirm_action");
    $grammar.declareContext("ctx_sys_display_result");
    $grammar.declareContext("ctx_sys_empty_search");
    $grammar.declareContext("ctx_sys_end");
    $grammar.declareContext("ctx_sys_greet");
    $grammar.declareContext("ctx_sys_learn_more_what");
    $grammar.declareContext("ctx_sys_propose_refined_query");
    $grammar.declareContext("ctx_sys_recommend_many");
    $grammar.declareContext("ctx_sys_recommend_one");
    $grammar.declareContext("ctx_sys_search_question");
    $grammar.declareContext("ctx_sys_slot_fill");
    $grammar.declareContext("ctx_current_query");
    $grammar.declareContext("ctx_thingpedia_result");
    $grammar.declareContext("ctx_thingpedia_empty_result");
    $grammar.declareContext("ctx_thingpedia_list_result");
    $grammar.declareContext("ctx_thingpedia_error_message");
    $grammar.declareContext("ctx_result_name_list");
    $grammar.declareContext("ctx_result_name");
    $grammar.declareContext("ctx_notification_app_name");
    $grammar.declareSymbol("initial_request_preamble");
    $grammar.addRule("initial_request_preamble", [new $runtime.NonTerminal("ctx_init", "ctx", undefined), new $runtime.NonTerminal("base_table", "table", ["functionName", 0, "nextFunction"])], $locale._("{hello|hi}! i can help you {find a ${table[plural=one]}|{find|search for} ${table[plural=other]}}."), ((ctx, table) => ctx), S.contextKeyFn, { priority: (10) });
    $grammar.addRule("initial_request_preamble", [new $runtime.NonTerminal("ctx_init", "ctx", undefined), new $runtime.NonTerminal("complete_action", "action", ["functionName", 0, "nextFunction"])], $locale._("{hello|hi}! i can help you ${action}."), ((ctx, action) => {
        const invocation = C.getInvocation(action);
        if (invocation.in_params.length > 0)
            return null;
        return ctx;
    }), S.contextKeyFn, { priority: (10) });
    $grammar.declareSymbol("$agent");
    $grammar.addRule("$agent", [new $runtime.NonTerminal("ctx_greet", "ctx", undefined)], $locale._("${ctx} {hello|hi} {!|,} {how can i help you|what are you interested in|what can i do for you} ?"), ((ctx) => S.makeAgentReply(ctx, S.makeSimpleState(ctx, 'sys_greet', null), null, null)), undefined, {});
    $grammar.addRule("$agent", [new $runtime.NonTerminal("ctx_init", "ctx", undefined)], $locale._("${ctx} {hello|hi} {!|,} {how can i help you|what are you interested in|what can i do for you} ?"), ((ctx) => S.makeAgentReply(ctx, S.makeSimpleState(ctx, 'sys_greet', null), null, null)), undefined, {});
    $grammar.addRule("$agent", [new $runtime.NonTerminal("ctx_reinit", "ctx", undefined)], $locale._("${ctx} {how can i help you|what are you interested in|what can i do for you} ?"), ((ctx) => S.makeAgentReply(ctx, S.makeSimpleState(ctx, 'sys_greet', null), null, null)), undefined, {});
    if ($options.flags.anything_else) {
        $grammar.addRule("$agent", [new $runtime.NonTerminal("ctx_cancel", "ctx", undefined), new $runtime.NonTerminal("anything_else_phrase", undefined, undefined)], $locale._("${ctx} ${anything_else_phrase}"), ((ctx, $0) => S.makeAgentReply(ctx, S.makeSimpleState(ctx, 'sys_anything_else', null), null, null, { end: false })), undefined, {});
        $grammar.addRule("$agent", [new $runtime.NonTerminal("ctx_end", "ctx", undefined)], $locale._("${ctx} alright , {bye !|good bye !}"), ((ctx) => S.makeAgentReply(ctx, S.makeSimpleState(ctx, 'sys_end', null))), undefined, {});
    }
    if (!$options.flags.anything_else) {
        $grammar.addRule("$agent", [new $runtime.NonTerminal("ctx_cancel", "ctx", undefined)], $locale._("${ctx} alright, let me know if I can help you with anything else!"), ((ctx) => S.makeAgentReply(ctx, S.makeSimpleState(ctx, 'sys_end', null))), undefined, {});
    }
    $grammar.addRule("$agent", [new $runtime.NonTerminal("action_success_phrase", undefined, undefined)], "${action_success_phrase}", (($0) => { return $0; }), undefined, { identity: (true) });
    if ($options.flags.anything_else) {
        $grammar.addRule("$agent", [new $runtime.NonTerminal("action_success_phrase", "action", undefined), new $runtime.NonTerminal("anything_else_phrase", undefined, undefined)], $locale._("${action} ${anything_else_phrase}"), ((action, $0) => S.setEndBit(action, false)), undefined, {});
    }
    $grammar.addRule("$agent", [new $runtime.NonTerminal("ctx_completed_action_error", "ctx", undefined), new $runtime.NonTerminal("sorry_preamble", undefined, undefined), new $runtime.NonTerminal("action_error_phrase", "phrase", undefined)], $locale._("${ctx} ${sorry_preamble} ${phrase}"), ((ctx, $0, phrase) => phrase), undefined, {});
    $grammar.addRule("$agent", [new $runtime.NonTerminal("ctx_display_nonlist_result", "ctx", undefined), new $runtime.NonTerminal("system_nonlist_result", "proposal", undefined)], $locale._("${ctx} ${proposal}"), ((ctx, proposal) => D.makeDisplayResultReply(ctx, proposal)), undefined, {});
    $grammar.addRule("$agent", [new $runtime.NonTerminal("ctx_display_nonlist_result", "ctx", undefined), new $runtime.NonTerminal("system_list_proposal", "proposal", undefined)], $locale._("${ctx} ${proposal}"), ((ctx, proposal) => D.makeDisplayResultReplyFromList(ctx, proposal)), undefined, {});
    $grammar.addRule("$agent", [new $runtime.NonTerminal("ctx_aggregation_question", "ctx", undefined), new $runtime.NonTerminal("count_aggregation_reply", "reply", undefined)], $locale._("${ctx} ${reply}"), ((ctx, reply) => reply), undefined, {});
    $grammar.addRule("$agent", [new $runtime.NonTerminal("ctx_aggregation_question", "ctx", undefined), new $runtime.NonTerminal("other_aggregation_reply", "reply", undefined)], $locale._("${ctx} ${reply}"), ((ctx, reply) => reply), undefined, {});
    $grammar.addRule("$agent", [new $runtime.NonTerminal("ctx_confirm_action", "ctx", undefined), new $runtime.NonTerminal("action_confirm_phrase", "reply", undefined)], $locale._("${ctx} ${reply}"), ((ctx, reply) => reply), undefined, {});
    $grammar.addRule("$agent", [new $runtime.NonTerminal("ctx_empty_search_command", "ctx", undefined), new $runtime.NonTerminal("empty_search_error", "error", undefined)], $locale._("${ctx} ${error}"), ((ctx, error) => D.makeEmptySearchError(ctx, error)), undefined, {});
    if ($options.flags.multiwoz) {
        $grammar.addRule("$agent", [new $runtime.NonTerminal("system_generic_proposal", "prop", undefined)], "${prop}", ((prop) => prop), undefined, {});
    }
    if (!$options.flags.inference) {
        $grammar.addRule("$agent", [new $runtime.NonTerminal("ctx_search_command", "ctx", undefined), new $runtime.NonTerminal("search_question", "questions", undefined)], $locale._("${ctx} ${questions}"), ((ctx, questions) => D.makeSearchQuestion(ctx, questions)), undefined, {});
    }
    $grammar.addRule("$agent", [new $runtime.NonTerminal("ctx_incomplete_action_after_search", "ctx", undefined), new $runtime.NonTerminal("slot_fill_question", "questions", undefined)], $locale._("${ctx} ${questions}"), ((ctx, questions) => D.makeSlotFillQuestion(ctx, questions)), undefined, {});
    $grammar.addRule("$agent", [new $runtime.NonTerminal("ctx_incomplete_action_after_search", "ctx", undefined), new $runtime.NonTerminal("initial_request_preamble", undefined, undefined), new $runtime.NonTerminal("slot_fill_question", "questions", undefined)], $locale._("${ctx} ${initial_request_preamble} ${questions}"), ((ctx, $0, questions) => D.makeSlotFillQuestion(ctx, questions)), undefined, {});
    $grammar.addRule("$agent", [new $runtime.NonTerminal("ctx_complete_search_command", "ctx", undefined), new $runtime.NonTerminal("system_recommendation", "proposal", undefined)], $locale._("${ctx} ${proposal}"), ((ctx, proposal) => D.makeRecommendationReply(ctx, proposal)), undefined, {});
    $grammar.addRule("$agent", [new $runtime.NonTerminal("ctx_complete_search_command", "ctx", undefined), new $runtime.NonTerminal("system_list_proposal", "proposal", undefined)], $locale._("${ctx} ${proposal}"), ((ctx, proposal) => D.makeListProposalReply(ctx, proposal)), undefined, { weight: (10) });
    $grammar.addRule("$agent", [new $runtime.NonTerminal("ctx_with_missing_projection", "ctx", undefined)], $locale._("${ctx} sorry, I don't have that information at the moment"), ((ctx) => S.makeAgentReply(ctx, S.makeSimpleState(ctx, 'sys_recommend_one', null))), undefined, {});
    $grammar.addRule("$agent", [new $runtime.NonTerminal("ctx_learn_more", "ctx", undefined), new $runtime.NonTerminal("system_learn_more", undefined, undefined)], $locale._("${ctx} ${system_learn_more}"), ((ctx, $0) => S.makeAgentReply(ctx, S.makeSimpleState(ctx, 'sys_learn_more_what', null), null, null, { end: false })), undefined, {});
    $grammar.addRule("$agent", [new $runtime.NonTerminal("ctx_rule_enable_success", "ctx", undefined), new $runtime.NonTerminal("generic_excitement2_phrase", "preamble", undefined), new $runtime.NonTerminal("ctx_current_statement", "stmt", undefined)], $locale._("${preamble} I {will|am going to} ${stmt}"), ((ctx, preamble, stmt) => S.makeAgentReply(ctx, S.makeSimpleState(ctx, 'sys_rule_enable_success', null))), undefined, {});
    $grammar.addRule("$agent", [new $runtime.NonTerminal("ctx_list_notification", "ctx", undefined), new $runtime.NonTerminal("notification_preamble", undefined, undefined), new $runtime.NonTerminal("system_recommendation", "proposal", undefined)], $locale._("${ctx} ${notification_preamble} ${proposal}"), ((ctx, $0, proposal) => D.makeRecommendationReply(ctx, proposal)), undefined, {});
    $grammar.addRule("$agent", [new $runtime.NonTerminal("ctx_nonlist_notification", "ctx", undefined), new $runtime.NonTerminal("notification_preamble", undefined, undefined), new $runtime.NonTerminal("system_nonlist_result", "proposal", undefined)], $locale._("${ctx} ${notification_preamble} ${proposal}"), ((ctx, $0, proposal) => D.makeDisplayResultReply(ctx, proposal)), undefined, {});
    $grammar.addRule("$agent", [new $runtime.NonTerminal("action_notification_phrase", undefined, undefined)], "${action_notification_phrase}", (($0) => { return $0; }), undefined, { identity: (true) });
    $grammar.addRule("$agent", [new $runtime.NonTerminal("ctx_notification_error", "ctx", undefined), new $runtime.NonTerminal("notification_error_preamble", undefined, undefined), new $runtime.NonTerminal("action_error_phrase", "phrase", undefined)], $locale._("${ctx} ${notification_error_preamble} ${phrase}"), ((ctx, $0, phrase) => phrase), undefined, {});
    $grammar.declareSymbol("$user");
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_init", "ctx", undefined), new $runtime.NonTerminal("greeting", undefined, undefined)], $locale._("${ctx} ${greeting}"), ((ctx, $0) => S.makeSimpleState(ctx, 'greet', null)), undefined, { weight: (0.01), expandchoice: (false) });
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_init", "ctx", undefined), new $runtime.NonTerminal("initial_command", "stmt", undefined)], $locale._("${ctx} ${stmt}"), ((ctx, stmt) => D.startNewRequest($loader, ctx, stmt)), undefined, { weight: (0.5) });
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_init", "ctx", undefined), new $runtime.NonTerminal("greeting", undefined, undefined), new $runtime.NonTerminal("initial_command", "stmt", undefined)], $locale._("${ctx} ${greeting} ${stmt}"), ((ctx, $0, stmt) => D.startNewRequest($loader, ctx, stmt)), undefined, { weight: (0.5) });
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_greet", "ctx", undefined), new $runtime.NonTerminal("initial_command", "stmt", undefined)], $locale._("${ctx} ${stmt}"), ((ctx, stmt) => D.startNewRequest($loader, ctx, stmt)), undefined, {});
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_anything_else", "ctx", undefined), new $runtime.NonTerminal("no_thanks_phrase", undefined, undefined)], $locale._("${ctx} ${no_thanks_phrase} {goodbye !|}"), ((ctx, $0) => S.makeSimpleState(ctx, 'end', null)), undefined, { weight: (0.01) });
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_anything_else", "ctx", undefined), new $runtime.NonTerminal("thanks_phrase", undefined, undefined)], $locale._("${ctx} ${thanks_phrase} {goodbye !|}"), ((ctx, $0) => S.makeSimpleState(ctx, 'end', null)), undefined, { weight: (0.01) });
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_anything_else", "ctx", undefined), new $runtime.NonTerminal("initial_command", "stmt", undefined)], $locale._("${ctx} ${stmt}"), ((ctx, stmt) => D.startNewRequest($loader, ctx, stmt)), undefined, {});
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_anything_else", "ctx", undefined), new $runtime.NonTerminal("yes_please_phrase", undefined, undefined), new $runtime.NonTerminal("initial_command", "stmt", undefined)], $locale._("${ctx} ${yes_please_phrase} ${stmt}"), ((ctx, $0, stmt) => D.startNewRequest($loader, ctx, stmt)), undefined, {});
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_anything_else", "ctx", undefined), new $runtime.NonTerminal("yes_please_phrase", undefined, undefined)], $locale._("${ctx} ${yes_please_phrase}"), ((ctx, $0) => S.makeSimpleState(ctx, 'reinit', null)), undefined, {});
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_confirm_action", "ctx", undefined), new $runtime.NonTerminal("accept_phrase", undefined, undefined)], $locale._("${ctx} ${accept_phrase}"), ((ctx, $0) => D.actionConfirmAcceptPhrase(ctx)), undefined, { weight: (0.9) });
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_confirm_action", "ctx", undefined), new $runtime.NonTerminal("reject_phrase", undefined, undefined)], $locale._("${ctx} ${reject_phrase}"), ((ctx, $0) => D.actionConfirmRejectPhrase(ctx)), undefined, { weight: (0.1) });
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_confirm_action", "ctx", undefined), new $runtime.NonTerminal("reject_phrase", undefined, undefined), new $runtime.NonTerminal("imprecise_slot_fill_answer_phrase", "answer", undefined)], $locale._("${ctx} ${reject_phrase} {can you try|how about} ${answer} {instead ?|}"), ((ctx, $0, answer) => D.actionConfirmChangeParam(ctx, answer)), undefined, { weight: (0.1) });
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_action_success", "ctx", undefined), new $runtime.NonTerminal("thanks_phrase", undefined, undefined)], $locale._("${ctx} ${thanks_phrase} {goodbye !|}"), ((ctx, $0) => S.makeSimpleState(ctx, 'cancel', null)), undefined, {});
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_display_result", "ctx", undefined), new $runtime.NonTerminal("thanks_phrase", undefined, undefined)], $locale._("${ctx} ${thanks_phrase} {goodbye !|}"), ((ctx, $0) => S.makeSimpleState(ctx, 'cancel', null)), undefined, {});
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_action_success", "ctx", undefined), new $runtime.NonTerminal("simple_user_search_question", "questions", undefined)], $locale._("${ctx} ${questions}"), ((ctx, questions) => D.actionSuccessQuestion(ctx, questions)), undefined, {});
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_display_result", "ctx", undefined), new $runtime.NonTerminal("repeat_command_phrase", undefined, undefined)], $locale._("${ctx} ${repeat_command_phrase}"), ((ctx, $0) => D.repeatCommandReply(ctx)), undefined, {});
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_action_error", "ctx", undefined), new $runtime.NonTerminal("repeat_command_on_error_phrase", undefined, undefined)], $locale._("${ctx} ${repeat_command_on_error_phrase}"), ((ctx, $0) => D.repeatCommandReply(ctx)), undefined, {});
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_action_success", "ctx", undefined), new $runtime.NonTerminal("initial_command", "stmt", undefined)], $locale._("${ctx} ${stmt}"), ((ctx, stmt) => D.startNewRequest($loader, ctx, stmt)), undefined, {});
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_action_success", "ctx", undefined), new $runtime.NonTerminal("yes_please_phrase", undefined, undefined), new $runtime.NonTerminal("initial_command", "stmt", undefined)], $locale._("${ctx} ${yes_please_phrase} ${stmt}"), ((ctx, $0, stmt) => D.startNewRequest($loader, ctx, stmt)), undefined, {});
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_display_result", "ctx", undefined), new $runtime.NonTerminal("initial_command", "stmt", undefined)], $locale._("${ctx} ${stmt}"), ((ctx, stmt) => D.startNewRequest($loader, ctx, stmt)), undefined, {});
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_display_result", "ctx", undefined), new $runtime.NonTerminal("yes_please_phrase", undefined, undefined), new $runtime.NonTerminal("initial_command", "stmt", undefined)], $locale._("${ctx} ${yes_please_phrase} ${stmt}"), ((ctx, $0, stmt) => D.startNewRequest($loader, ctx, stmt)), undefined, {});
    if (!$options.flags.multiwoz) {
        $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_recommend_one", "ctx", undefined), new $runtime.NonTerminal("initial_command", "stmt", undefined)], $locale._("${ctx} ${stmt}"), ((ctx, stmt) => D.startNewRequest($loader, ctx, stmt)), undefined, {});
        $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_action_error", "ctx", undefined), new $runtime.NonTerminal("initial_command", "stmt", undefined)], $locale._("${ctx} ${stmt}"), ((ctx, stmt) => D.startNewRequest($loader, ctx, stmt)), undefined, {});
        $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_recommend_many", "ctx", undefined), new $runtime.NonTerminal("initial_command", "stmt", undefined)], $locale._("${ctx} ${stmt}"), ((ctx, stmt) => D.startNewRequest($loader, ctx, stmt)), undefined, {});
    }
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_action_error", "ctx", undefined), new $runtime.NonTerminal("no_thanks_phrase", undefined, undefined)], $locale._("${ctx} ${no_thanks_phrase}"), ((ctx, $0) => S.makeSimpleState(ctx, 'cancel', null)), undefined, {});
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_action_error", "ctx", undefined), new $runtime.NonTerminal("nevermind_phrase", undefined, undefined)], $locale._("${ctx} ${nevermind_phrase}"), ((ctx, $0) => S.makeSimpleState(ctx, 'cancel', null)), undefined, {});
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_empty_search", "ctx", undefined), new $runtime.NonTerminal("precise_empty_search_change_request", "req", ["functionName", 0, "currentTableFunction"])], $locale._("${ctx} ${req}"), ((ctx, req) => D.preciseEmptySearchChangeRequest(ctx, req)), undefined, {});
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_empty_search", "ctx", undefined), new $runtime.NonTerminal("imprecise_empty_search_change_request", "req", undefined)], $locale._("${ctx} ${req}"), ((ctx, req) => D.impreciseEmptySearchChangeRequest(ctx, req)), undefined, {});
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_empty_search", "ctx", undefined), new $runtime.NonTerminal("accept_phrase", undefined, undefined)], $locale._("${ctx} ${accept_phrase}"), ((ctx, $0) => D.acceptEmptySearchOffer(ctx)), undefined, {});
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_search_question", "ctx", undefined), new $runtime.NonTerminal("precise_search_question_answer", "answer", ["functionName", 0, "currentFunction"])], $locale._("${ctx} ${answer}"), ((ctx, answer) => D.preciseSearchQuestionAnswer(ctx, answer)), undefined, {});
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_search_question", "ctx", undefined), new $runtime.NonTerminal("imprecise_search_question_answer", "answer", undefined)], $locale._("${ctx} ${answer}"), ((ctx, answer) => D.impreciseSearchQuestionAnswer(ctx, answer)), undefined, { weight: (0.2) });
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_slot_fill", "ctx", undefined), new $runtime.NonTerminal("precise_slot_fill_answer", "answer", ["functionName", 0, "nextFunction"])], $locale._("${ctx} ${answer}"), ((ctx, answer) => D.preciseSlotFillAnswer(ctx, answer)), undefined, {});
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_slot_fill", "ctx", undefined), new $runtime.NonTerminal("imprecise_slot_fill_answer", "answer", undefined)], $locale._("${ctx} ${answer}"), ((ctx, answer) => D.impreciseSlotFillAnswer(ctx, answer)), undefined, {});
    if ($options.flags.multiwoz) {
        $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_recommend_many", "ctx", undefined), new $runtime.NonTerminal("ask_recommend_phrase", undefined, undefined)], $locale._("${ctx} ${ask_recommend_phrase}"), ((ctx, $0) => S.makeSimpleState(ctx, 'ask_recommend', null)), undefined, {});
        $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_search_question", "ctx", undefined), new $runtime.NonTerminal("ask_recommend_phrase", undefined, undefined)], $locale._("${ctx} ${ask_recommend_phrase}"), ((ctx, $0) => S.makeSimpleState(ctx, 'ask_recommend', null)), undefined, {});
    }
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_propose_refined_query", "ctx", undefined), new $runtime.NonTerminal("accept_phrase", undefined, undefined)], $locale._("${ctx} ${accept_phrase}"), ((ctx, $0) => D.positiveProposalReply(ctx)), undefined, { weight: (0.5) });
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_propose_refined_query", "ctx", undefined), new $runtime.NonTerminal("negative_proposal_reply", "reply", ["functionName", 0, "currentFunction"])], $locale._("${ctx} ${reply}"), ((ctx, reply) => D.negativeProposalReply(ctx, reply)), undefined, { weight: (0.5) });
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_recommend_one", "ctx", undefined), new $runtime.NonTerminal("accept_phrase", undefined, undefined)], $locale._("${ctx} ${accept_phrase}"), ((ctx, $0) => D.positiveRecommendationReply($loader, ctx, null, null)), undefined, { weight: (0.7) });
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_recommend_one", "ctx", undefined), new $runtime.NonTerminal("recommendation_accept_phrase_with_action", "acceptedAction", undefined)], $locale._("${ctx} ${acceptedAction}"), ((ctx, acceptedAction) => D.positiveRecommendationReply($loader, ctx, acceptedAction, null)), undefined, { weight: (0.7) });
    if ($options.flags.multiwoz) {
        $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_recommend_one", "ctx", undefined), new $runtime.NonTerminal("recommendation_accept_phrase_by_name", "name", undefined)], $locale._("${ctx} ${name}"), ((ctx, name) => D.positiveRecommendationReply($loader, ctx, name[1], name[0])), undefined, { weight: (0.7) });
    }
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_recommend_one", "ctx", undefined), new $runtime.NonTerminal("tell_me_more_phrase", undefined, undefined)], $locale._("${ctx} ${tell_me_more_phrase}"), ((ctx, $0) => D.recommendationLearnMoreReply(ctx, null)), undefined, { weight: (0.5) });
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_recommend_one", "ctx", undefined), new $runtime.NonTerminal("accept_phrase", undefined, undefined), new $runtime.NonTerminal("tell_me_more_phrase", undefined, undefined)], $locale._("${ctx} ${accept_phrase} ${tell_me_more_phrase}"), ((ctx, $0, $1) => D.recommendationLearnMoreReply(ctx, null)), undefined, { weight: (0.5) });
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_recommend_one", "ctx", undefined), new $runtime.NonTerminal("list_proposal_tell_me_more", "name", undefined)], $locale._("${ctx} ${name}"), ((ctx, name) => D.recommendationLearnMoreReply(ctx, name)), undefined, {});
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_recommend_one", "ctx", undefined), new $runtime.NonTerminal("negative_proposal_reply", "reply", ["functionName", 0, "currentFunction"])], $locale._("${ctx} ${reply}"), ((ctx, reply) => D.negativeRecommendationReply(ctx, reply)), undefined, { weight: (0.6) });
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_recommend_one", "ctx", undefined), new $runtime.NonTerminal("thanks_phrase", undefined, undefined)], $locale._("${ctx} ${thanks_phrase} {goodbye !|}"), ((ctx, $0) => D.recommendationCancelReply(ctx, true)), undefined, {});
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_recommend_one", "ctx", undefined), new $runtime.NonTerminal("ok_thanks_phrase", undefined, undefined)], $locale._("${ctx} ${ok_thanks_phrase} {goodbye !|}"), ((ctx, $0) => D.recommendationCancelReply(ctx, !ctx.aux.action && !ctx.aux.hasLearnMore)), undefined, {});
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_recommend_one", "ctx", undefined), new $runtime.NonTerminal("no_thanks_phrase", undefined, undefined)], $locale._("${ctx} ${no_thanks_phrase} {goodbye !|}"), ((ctx, $0) => D.recommendationCancelReply(ctx, ctx.aux.action || ctx.aux.hasLearnMore)), undefined, {});
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_recommend_one", "ctx", undefined), new $runtime.NonTerminal("related_question", "question", undefined)], $locale._("${ctx} ${question}"), ((ctx, question) => question), undefined, {});
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_recommend_one", "ctx", undefined), new $runtime.NonTerminal("user_search_question", "questions", ["functionName", 0, "currentFunction"])], $locale._("${ctx} ${questions}"), ((ctx, questions) => D.recommendationSearchQuestionReply(ctx, questions)), undefined, {});
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_learn_more_what", "ctx", undefined), new $runtime.NonTerminal("user_search_question", "questions", ["functionName", 0, "currentFunction"])], $locale._("${ctx} ${questions}"), ((ctx, questions) => D.learnMoreSearchQuestionReply(ctx, questions)), undefined, {});
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_display_result", "ctx", undefined), new $runtime.NonTerminal("user_search_question", "questions", ["functionName", 0, "currentFunction"])], $locale._("${ctx} ${questions}"), ((ctx, questions) => D.displayResultSearchQuestionReply(ctx, questions)), undefined, {});
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_recommend_many", "ctx", undefined), new $runtime.NonTerminal("positive_list_proposal_reply", "reply", undefined)], $locale._("${ctx} ${reply}"), ((ctx, reply) => D.positiveListProposalReply($loader, ctx, reply)), undefined, { weight: (10 * 0.7) });
    if ($options.flags.multiwoz) {
        $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_recommend_many", "ctx", undefined), new $runtime.NonTerminal("list_proposal_accept_phrase_with_action_by_name", "action", undefined)], $locale._("${ctx} ${action}"), ((ctx, action) => D.positiveListProposalReplyActionByName($loader, ctx, action)), undefined, { weight: (10 * 0.7) });
    }
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_recommend_many", "ctx", undefined), new $runtime.NonTerminal("list_proposal_tell_me_more", "name", undefined)], $locale._("${ctx} ${name}"), ((ctx, name) => D.listProposalLearnMoreReply(ctx, name)), undefined, {});
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_recommend_many", "ctx", undefined), new $runtime.NonTerminal("negative_proposal_reply", "reply", ["functionName", 0, "currentFunction"])], $locale._("${ctx} ${reply}"), ((ctx, reply) => D.negativeListProposalReply(ctx, reply)), undefined, { weight: (0.6) });
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_recommend_many", "ctx", undefined), new $runtime.NonTerminal("related_question", "question", undefined)], $locale._("${ctx} ${question}"), ((ctx, question) => question), undefined, {});
    $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_recommend_many", "ctx", undefined), new $runtime.NonTerminal("user_search_question_for_list", "questions", ["functionName", 0, "currentFunction"])], $locale._("${ctx} ${questions}"), ((ctx, questions) => D.listProposalSearchQuestionReply(ctx, questions)), undefined, {});
    if (!$options.flags.nostream) {
        $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_action_success", "ctx", undefined), new $runtime.NonTerminal("add_separate_stream", "stream", undefined)], $locale._("${ctx} ${stream}"), ((ctx, stream) => D.addStream(ctx, stream)), undefined, {});
        $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_recommend_one", "ctx", undefined), new $runtime.NonTerminal("add_separate_stream_to_query", "stream", undefined)], $locale._("${ctx} ${stream}"), ((ctx, stream) => D.addStream(ctx, stream)), undefined, {});
        $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_recommend_many", "ctx", undefined), new $runtime.NonTerminal("add_separate_stream_to_query", "stream", undefined)], $locale._("${ctx} ${stream}"), ((ctx, stream) => D.addStream(ctx, stream)), undefined, {});
        $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_display_result", "ctx", undefined), new $runtime.NonTerminal("add_separate_stream_to_query", "stream", undefined)], $locale._("${ctx} ${stream}"), ((ctx, stream) => D.addStream(ctx, stream)), undefined, {});
        $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_recommend_one", "ctx", ["is_monitorable", (true)]), new $runtime.NonTerminal("make_monitor_phrase", undefined, undefined)], $locale._("${ctx} ${make_monitor_phrase}"), ((ctx, $0) => D.makeMonitor(ctx, { monitorItemID: false })), undefined, {});
        $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_recommend_many", "ctx", ["is_monitorable", (true)]), new $runtime.NonTerminal("make_monitor_phrase", undefined, undefined)], $locale._("${ctx} ${make_monitor_phrase}"), ((ctx, $0) => D.makeMonitor(ctx, { monitorItemID: false })), undefined, {});
        $grammar.addRule("$user", [new $runtime.NonTerminal("ctx_sys_display_result", "ctx", ["is_monitorable", (true)]), new $runtime.NonTerminal("make_monitor_phrase", undefined, undefined)], $locale._("${ctx} ${make_monitor_phrase}"), ((ctx, $0) => D.makeMonitor(ctx, { monitorItemID: false })), undefined, {});
    }
}
exports.$load = $load;
;
//# sourceMappingURL=dialogue.genie.out.js.map