"use strict";
// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2019-2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$load = exports.constant_String_ContextRef = exports.constant_nor_pairs = exports.constant_or_pairs = exports.constant_pairs = exports.constant_Location = exports.constant_Measure_dBm = exports.constant_Measure_dB = exports.constant_Measure_lm = exports.constant_Measure_lx = exports.constant_Measure_W = exports.constant_Measure_mps = exports.constant_Measure_m3 = exports.constant_Measure_m2 = exports.constant_Measure_m = exports.constant_Measure_C = exports.constant_Measure_kg = exports.constant_Measure_byte = exports.unit_Measure_ms = exports.constant_Measure_ms = exports.constant_Date = exports.constant_day_of_week = exports.constant_date_range = exports.constant_date_point = exports.constant_Number = exports.constant_Time = exports.at_time = void 0;
const $runtime = __importStar(require("../sentence-generator/runtime"));
const assert_1 = __importDefault(require("assert"));
const thingtalk_1 = require("thingtalk");
const C = __importStar(require("./ast_manip"));
exports.at_time = "at_time";
exports.constant_Time = "constant_Time";
exports.constant_Number = "constant_Number";
exports.constant_date_point = "constant_date_point";
exports.constant_date_range = "constant_date_range";
exports.constant_day_of_week = "constant_day_of_week";
exports.constant_Date = "constant_Date";
exports.constant_Measure_ms = "constant_Measure_ms";
exports.unit_Measure_ms = "unit_Measure_ms";
exports.constant_Measure_byte = "constant_Measure_byte";
exports.constant_Measure_kg = "constant_Measure_kg";
exports.constant_Measure_C = "constant_Measure_C";
exports.constant_Measure_m = "constant_Measure_m";
exports.constant_Measure_m2 = "constant_Measure_m2";
exports.constant_Measure_m3 = "constant_Measure_m3";
exports.constant_Measure_mps = "constant_Measure_mps";
exports.constant_Measure_W = "constant_Measure_W";
exports.constant_Measure_lx = "constant_Measure_lx";
exports.constant_Measure_lm = "constant_Measure_lm";
exports.constant_Measure_dB = "constant_Measure_dB";
exports.constant_Measure_dBm = "constant_Measure_dBm";
exports.constant_Location = "constant_Location";
exports.constant_pairs = "constant_pairs";
exports.constant_or_pairs = "constant_or_pairs";
exports.constant_nor_pairs = "constant_nor_pairs";
exports.constant_String_ContextRef = "constant_String_ContextRef";
/**
 * Load the templates in this file.
 *
 * This is an autogenerated method that will be called by the {@link SentenceGenerator}
 * when the templates are imported.
 */
async function $load($options, $locale, $grammar, $loader) {
    const TIME_MORNING = new thingtalk_1.Ast.Value.Time(new thingtalk_1.Ast.Time.Relative("morning"));
    const TIME_NOON = new thingtalk_1.Ast.Value.Time(new thingtalk_1.Ast.Time.Absolute(12, 0, 0));
    const TIME_EVENING = new thingtalk_1.Ast.Value.Time(new thingtalk_1.Ast.Time.Relative("evening"));
    const TIME_MIDNIGHT = new thingtalk_1.Ast.Value.Time(new thingtalk_1.Ast.Time.Absolute(0, 0, 0));
    $grammar.declareSymbol("at_time");
    $grammar.addRule("at_time", [new $runtime.NonTerminal("constant_Time", "time", undefined)], $locale._("{at|when it is} ${time}"), ((time) => time), C.valueKeyFn, {});
    $grammar.addRule("at_time", [], $locale._("in the middle of the day"), (() => TIME_NOON), C.valueKeyFn, {});
    $grammar.addRule("at_time", [], $locale._("{{in|during} the morning|{when|after} {getting|waking|i {get|wake}} up}"), (() => TIME_MORNING), C.valueKeyFn, {});
    $grammar.addRule("at_time", [], $locale._("{{in|during} the {evening|night}|{when|before} {going to {sleep|bed}|i go to {sleep|bed}}|at bedtime}"), (() => TIME_EVENING), C.valueKeyFn, {});
    $grammar.declareSymbol("constant_Time");
    $grammar.addRule("constant_Time", [], $locale._("noon"), (() => TIME_NOON), C.valueKeyFn, {});
    $grammar.addRule("constant_Time", [], $locale._("midday"), (() => TIME_NOON), C.valueKeyFn, {});
    $grammar.addRule("constant_Time", [], $locale._("midnight"), (() => TIME_MIDNIGHT), C.valueKeyFn, {});
    $grammar.declareSymbol("constant_Number");
    if (!$options.flags.inference) {
        if (!$options.flags.turking) {
            $grammar.addRule("constant_Number", [], $locale._("zero"), (() => new thingtalk_1.Ast.Value.Number(0)), C.entityOrNumberValueKeyFn, {});
            $grammar.addRule("constant_Number", [], $locale._("one"), (() => new thingtalk_1.Ast.Value.Number(1)), C.entityOrNumberValueKeyFn, {});
        }
    }
    $grammar.declareSymbol("constant_date_point");
    $grammar.addRule("constant_date_point", [], $locale._("now"), (() => C.makeDate(null, '+', null)), C.valueKeyFn, {});
    $grammar.addRule("constant_date_point", [], $locale._("today"), (() => C.makeDate(new thingtalk_1.Ast.DateEdge('start_of', 'day'), '+', null)), C.valueKeyFn, {});
    $grammar.addRule("constant_date_point", [], $locale._("yesterday"), (() => C.makeDate(new thingtalk_1.Ast.DateEdge('start_of', 'day'), '-', new thingtalk_1.Ast.Value.Measure(1, 'day'))), C.valueKeyFn, {});
    if (!$options.flags.turking) {
        $grammar.addRule("constant_date_point", [], $locale._("tomorrow"), (() => C.makeDate(new thingtalk_1.Ast.DateEdge('end_of', 'day'), '+', null)), C.valueKeyFn, {});
        $grammar.addRule("constant_date_point", [], $locale._("the end of the day"), (() => C.makeDate(new thingtalk_1.Ast.DateEdge('end_of', 'day'), '+', null)), C.valueKeyFn, {});
        $grammar.addRule("constant_date_point", [], $locale._("the end of the week"), (() => C.makeDate(new thingtalk_1.Ast.DateEdge('end_of', 'week'), '+', null)), C.valueKeyFn, {});
        $grammar.addRule("constant_date_point", [], $locale._("the end of the month"), (() => C.makeDate(new thingtalk_1.Ast.DateEdge('end_of', 'mon'), '+', null)), C.valueKeyFn, {});
        $grammar.addRule("constant_date_point", [], $locale._("the end of the year"), (() => C.makeDate(new thingtalk_1.Ast.DateEdge('end_of', 'year'), '+', null)), C.valueKeyFn, {});
    }
    $grammar.declareSymbol("constant_date_range");
    $grammar.addRule("constant_date_range", [], $locale._("this week"), (() => [C.makeDate(new thingtalk_1.Ast.DateEdge('start_of', 'week'), '+', null), C.makeDate(new thingtalk_1.Ast.DateEdge('end_of', 'week'), '+', null)]), C.valueArrayKeyFn, {});
    $grammar.addRule("constant_date_range", [], $locale._("this month"), (() => [C.makeDate(new thingtalk_1.Ast.DateEdge('start_of', 'mon'), '+', null), C.makeDate(new thingtalk_1.Ast.DateEdge('end_of', 'mon'), '+', null)]), C.valueArrayKeyFn, {});
    $grammar.addRule("constant_date_range", [], $locale._("this year"), (() => [C.makeDate(new thingtalk_1.Ast.DateEdge('start_of', 'year'), '+', null), C.makeDate(new thingtalk_1.Ast.DateEdge('end_of', 'year'), '+', null)]), C.valueArrayKeyFn, {});
    if (!$options.flags.turking) {
        $grammar.addRule("constant_date_range", [], $locale._("last week"), (() => [C.makeDate(new thingtalk_1.Ast.DateEdge('start_of', 'week'), '-', new thingtalk_1.Ast.Value.Measure(1, 'week')), C.makeDate(new thingtalk_1.Ast.DateEdge('start_of', 'week'), '+', null)]), C.valueArrayKeyFn, {});
        $grammar.addRule("constant_date_range", [], $locale._("last month"), (() => [C.makeDate(new thingtalk_1.Ast.DateEdge('start_of', 'mon'), '-', new thingtalk_1.Ast.Value.Measure(1, 'mon')), C.makeDate(new thingtalk_1.Ast.DateEdge('start_of', 'mon'), '+', null)]), C.valueArrayKeyFn, {});
        $grammar.addRule("constant_date_range", [], $locale._("last year"), (() => [C.makeDate(new thingtalk_1.Ast.DateEdge('start_of', 'year'), '-', new thingtalk_1.Ast.Value.Measure(1, 'year')), C.makeDate(new thingtalk_1.Ast.DateEdge('start_of', 'year'), '+', null)]), C.valueArrayKeyFn, {});
        $grammar.addRule("constant_date_range", [], $locale._("next week"), (() => [C.makeDate(new thingtalk_1.Ast.DateEdge('end_of', 'week'), '+', null), C.makeDate(new thingtalk_1.Ast.DateEdge('end_of', 'week'), '+', new thingtalk_1.Ast.Value.Measure(1, 'week'))]), C.valueArrayKeyFn, {});
        $grammar.addRule("constant_date_range", [], $locale._("next month"), (() => [C.makeDate(new thingtalk_1.Ast.DateEdge('end_of', 'mon'), '+', null), C.makeDate(new thingtalk_1.Ast.DateEdge('end_of', 'mon'), '+', new thingtalk_1.Ast.Value.Measure(1, 'mon'))]), C.valueArrayKeyFn, {});
        $grammar.addRule("constant_date_range", [], $locale._("next year"), (() => [C.makeDate(new thingtalk_1.Ast.DateEdge('end_of', 'year'), '+', null), C.makeDate(new thingtalk_1.Ast.DateEdge('end_of', 'year'), '+', new thingtalk_1.Ast.Value.Measure(1, 'year'))]), C.valueArrayKeyFn, {});
        $grammar.addRule("constant_date_range", [new $runtime.NonTerminal("constant_Number", "year", undefined)], "${year}", ((year) => {
            if (year.value <= 0)
                return null;
            return [
                C.makeDate(C.makeJSDate(C.fixTwoYearNumber(year.value), 1, $loader), '+', null),
                C.makeDate(C.makeJSDate(C.fixTwoYearNumber(year.value), 1, $loader), '+', new thingtalk_1.Ast.Value.Measure(1, 'year'))
            ];
        }), C.valueArrayKeyFn, {});
        $grammar.addRule("constant_date_range", [new $runtime.NonTerminal("constant_Number", "year", undefined)], $locale._("${year} s"), ((year) => {
            if (year.value <= 0)
                return null;
            return [
                C.makeDate(C.makeJSDate(C.fixTwoYearNumber(year.value), 1, $loader), '+', null),
                C.makeDate(C.makeJSDate(C.fixTwoYearNumber(year.value), 1, $loader), '+', new thingtalk_1.Ast.Value.Measure(10, 'year'))
            ];
        }), C.valueArrayKeyFn, {});
    }
    $grammar.addRule("constant_date_range", [], $locale._("jan"), (() => C.makeMonthDateRange(null, 1, $loader)), C.valueArrayKeyFn, {});
    $grammar.addRule("constant_date_range", [], $locale._("january"), (() => C.makeMonthDateRange(null, 1, $loader)), C.valueArrayKeyFn, {});
    $grammar.addRule("constant_date_range", [new $runtime.NonTerminal("constant_Number", "year", undefined)], $locale._("{jan|january} of ${year}"), ((year) => C.makeMonthDateRange(year.value, 1, $loader)), C.valueArrayKeyFn, {});
    $grammar.addRule("constant_date_range", [], $locale._("feb"), (() => C.makeMonthDateRange(null, 2, $loader)), C.valueArrayKeyFn, {});
    $grammar.addRule("constant_date_range", [], $locale._("february"), (() => C.makeMonthDateRange(null, 2, $loader)), C.valueArrayKeyFn, {});
    $grammar.addRule("constant_date_range", [new $runtime.NonTerminal("constant_Number", "year", undefined)], $locale._("{feb|february} of ${year}"), ((year) => C.makeMonthDateRange(year.value, 2, $loader)), C.valueArrayKeyFn, {});
    $grammar.addRule("constant_date_range", [], $locale._("mar"), (() => C.makeMonthDateRange(null, 3, $loader)), C.valueArrayKeyFn, {});
    $grammar.addRule("constant_date_range", [], $locale._("march"), (() => C.makeMonthDateRange(null, 3, $loader)), C.valueArrayKeyFn, {});
    $grammar.addRule("constant_date_range", [new $runtime.NonTerminal("constant_Number", "year", undefined)], $locale._("{mar|march} of ${year}"), ((year) => C.makeMonthDateRange(year.value, 3, $loader)), C.valueArrayKeyFn, {});
    $grammar.addRule("constant_date_range", [], $locale._("apr"), (() => C.makeMonthDateRange(null, 4, $loader)), C.valueArrayKeyFn, {});
    $grammar.addRule("constant_date_range", [], $locale._("april"), (() => C.makeMonthDateRange(null, 4, $loader)), C.valueArrayKeyFn, {});
    $grammar.addRule("constant_date_range", [new $runtime.NonTerminal("constant_Number", "year", undefined)], $locale._("{apr|april} of ${year}"), ((year) => C.makeMonthDateRange(year.value, 4, $loader)), C.valueArrayKeyFn, {});
    $grammar.addRule("constant_date_range", [], $locale._("may"), (() => C.makeMonthDateRange(null, 5, $loader)), C.valueArrayKeyFn, {});
    $grammar.addRule("constant_date_range", [new $runtime.NonTerminal("constant_Number", "year", undefined)], $locale._("may of ${year}"), ((year) => C.makeMonthDateRange(year.value, 5, $loader)), C.valueArrayKeyFn, {});
    $grammar.addRule("constant_date_range", [], $locale._("jun"), (() => C.makeMonthDateRange(null, 6, $loader)), C.valueArrayKeyFn, {});
    $grammar.addRule("constant_date_range", [], $locale._("june"), (() => C.makeMonthDateRange(null, 6, $loader)), C.valueArrayKeyFn, {});
    $grammar.addRule("constant_date_range", [new $runtime.NonTerminal("constant_Number", "year", undefined)], $locale._("{jun|june} of ${year}"), ((year) => C.makeMonthDateRange(year.value, 6, $loader)), C.valueArrayKeyFn, {});
    $grammar.addRule("constant_date_range", [], $locale._("jul"), (() => C.makeMonthDateRange(null, 7, $loader)), C.valueArrayKeyFn, {});
    $grammar.addRule("constant_date_range", [], $locale._("july"), (() => C.makeMonthDateRange(null, 7, $loader)), C.valueArrayKeyFn, {});
    $grammar.addRule("constant_date_range", [new $runtime.NonTerminal("constant_Number", "year", undefined)], $locale._("{jul|july} of ${year}"), ((year) => C.makeMonthDateRange(year.value, 7, $loader)), C.valueArrayKeyFn, {});
    $grammar.addRule("constant_date_range", [], $locale._("aug"), (() => C.makeMonthDateRange(null, 8, $loader)), C.valueArrayKeyFn, {});
    $grammar.addRule("constant_date_range", [], $locale._("august"), (() => C.makeMonthDateRange(null, 8, $loader)), C.valueArrayKeyFn, {});
    $grammar.addRule("constant_date_range", [new $runtime.NonTerminal("constant_Number", "year", undefined)], $locale._("{aug|august} of ${year}"), ((year) => C.makeMonthDateRange(year.value, 8, $loader)), C.valueArrayKeyFn, {});
    $grammar.addRule("constant_date_range", [], $locale._("sep"), (() => C.makeMonthDateRange(null, 9, $loader)), C.valueArrayKeyFn, {});
    $grammar.addRule("constant_date_range", [], $locale._("sept"), (() => C.makeMonthDateRange(null, 9, $loader)), C.valueArrayKeyFn, {});
    $grammar.addRule("constant_date_range", [], $locale._("september"), (() => C.makeMonthDateRange(null, 9, $loader)), C.valueArrayKeyFn, {});
    $grammar.addRule("constant_date_range", [new $runtime.NonTerminal("constant_Number", "year", undefined)], $locale._("{sep|sept|september} of ${year}"), ((year) => C.makeMonthDateRange(year.value, 9, $loader)), C.valueArrayKeyFn, {});
    $grammar.addRule("constant_date_range", [], $locale._("oct"), (() => C.makeMonthDateRange(null, 10, $loader)), C.valueArrayKeyFn, {});
    $grammar.addRule("constant_date_range", [], $locale._("october"), (() => C.makeMonthDateRange(null, 10, $loader)), C.valueArrayKeyFn, {});
    $grammar.addRule("constant_date_range", [new $runtime.NonTerminal("constant_Number", "year", undefined)], $locale._("{oct|october} of ${year}"), ((year) => C.makeMonthDateRange(year.value, 10, $loader)), C.valueArrayKeyFn, {});
    $grammar.addRule("constant_date_range", [], $locale._("nov"), (() => C.makeMonthDateRange(null, 11, $loader)), C.valueArrayKeyFn, {});
    $grammar.addRule("constant_date_range", [], $locale._("november"), (() => C.makeMonthDateRange(null, 11, $loader)), C.valueArrayKeyFn, {});
    $grammar.addRule("constant_date_range", [new $runtime.NonTerminal("constant_Number", "year", undefined)], $locale._("{nov|november} of ${year}"), ((year) => C.makeMonthDateRange(year.value, 11, $loader)), C.valueArrayKeyFn, {});
    $grammar.addRule("constant_date_range", [], $locale._("dec"), (() => C.makeMonthDateRange(null, 12, $loader)), C.valueArrayKeyFn, {});
    $grammar.addRule("constant_date_range", [], $locale._("december"), (() => C.makeMonthDateRange(null, 12, $loader)), C.valueArrayKeyFn, {});
    $grammar.addRule("constant_date_range", [new $runtime.NonTerminal("constant_Number", "year", undefined)], $locale._("{dec|december} of ${year}"), ((year) => C.makeMonthDateRange(year.value, 12, $loader)), C.valueArrayKeyFn, {});
    $grammar.declareSymbol("constant_day_of_week");
    $grammar.addRule("constant_day_of_week", [], $locale._("mon"), (() => C.makeDate(new thingtalk_1.Ast.WeekDayDate('monday', null), '+', null)), C.valueKeyFn, {});
    $grammar.addRule("constant_day_of_week", [], $locale._("monday"), (() => C.makeDate(new thingtalk_1.Ast.WeekDayDate('monday', null), '+', null)), C.valueKeyFn, {});
    $grammar.addRule("constant_day_of_week", [], $locale._("last {mon|monday}"), (() => C.makeDate(new thingtalk_1.Ast.WeekDayDate('monday', null), '-', new thingtalk_1.Ast.Value.Measure(1, 'week'))), C.valueKeyFn, {});
    $grammar.addRule("constant_day_of_week", [], $locale._("next {mon|monday}"), (() => C.makeDate(new thingtalk_1.Ast.WeekDayDate('monday', null), '+', new thingtalk_1.Ast.Value.Measure(1, 'week'))), C.valueKeyFn, {});
    $grammar.addRule("constant_day_of_week", [], $locale._("tue"), (() => C.makeDate(new thingtalk_1.Ast.WeekDayDate('tuesday', null), '+', null)), C.valueKeyFn, {});
    $grammar.addRule("constant_day_of_week", [], $locale._("tuesday"), (() => C.makeDate(new thingtalk_1.Ast.WeekDayDate('tuesday', null), '+', null)), C.valueKeyFn, {});
    $grammar.addRule("constant_day_of_week", [], $locale._("last {tue|tuesday}"), (() => C.makeDate(new thingtalk_1.Ast.WeekDayDate('tuesday', null), '-', new thingtalk_1.Ast.Value.Measure(1, 'week'))), C.valueKeyFn, {});
    $grammar.addRule("constant_day_of_week", [], $locale._("next {tue|tuesday}"), (() => C.makeDate(new thingtalk_1.Ast.WeekDayDate('tuesday', null), '+', new thingtalk_1.Ast.Value.Measure(1, 'week'))), C.valueKeyFn, {});
    $grammar.addRule("constant_day_of_week", [], $locale._("wed"), (() => C.makeDate(new thingtalk_1.Ast.WeekDayDate('wednesday', null), '+', null)), C.valueKeyFn, {});
    $grammar.addRule("constant_day_of_week", [], $locale._("wednesday"), (() => C.makeDate(new thingtalk_1.Ast.WeekDayDate('wednesday', null), '+', null)), C.valueKeyFn, {});
    $grammar.addRule("constant_day_of_week", [], $locale._("last {wed|wednesday}"), (() => C.makeDate(new thingtalk_1.Ast.WeekDayDate('wednesday', null), '-', new thingtalk_1.Ast.Value.Measure(1, 'week'))), C.valueKeyFn, {});
    $grammar.addRule("constant_day_of_week", [], $locale._("next {wed|wednesday}"), (() => C.makeDate(new thingtalk_1.Ast.WeekDayDate('wednesday', null), '+', new thingtalk_1.Ast.Value.Measure(1, 'week'))), C.valueKeyFn, {});
    $grammar.addRule("constant_day_of_week", [], $locale._("thu"), (() => C.makeDate(new thingtalk_1.Ast.WeekDayDate('thursday', null), '+', null)), C.valueKeyFn, {});
    $grammar.addRule("constant_day_of_week", [], $locale._("thursday"), (() => C.makeDate(new thingtalk_1.Ast.WeekDayDate('thursday', null), '+', null)), C.valueKeyFn, {});
    $grammar.addRule("constant_day_of_week", [], $locale._("last {thu|thursday}"), (() => C.makeDate(new thingtalk_1.Ast.WeekDayDate('thursday', null), '-', new thingtalk_1.Ast.Value.Measure(1, 'week'))), C.valueKeyFn, {});
    $grammar.addRule("constant_day_of_week", [], $locale._("next {thu|thursday}"), (() => C.makeDate(new thingtalk_1.Ast.WeekDayDate('thursday', null), '+', new thingtalk_1.Ast.Value.Measure(1, 'week'))), C.valueKeyFn, {});
    $grammar.addRule("constant_day_of_week", [], $locale._("fri"), (() => C.makeDate(new thingtalk_1.Ast.WeekDayDate('friday', null), '+', null)), C.valueKeyFn, {});
    $grammar.addRule("constant_day_of_week", [], $locale._("friday"), (() => C.makeDate(new thingtalk_1.Ast.WeekDayDate('friday', null), '+', null)), C.valueKeyFn, {});
    $grammar.addRule("constant_day_of_week", [], $locale._("last {fri|friday}"), (() => C.makeDate(new thingtalk_1.Ast.WeekDayDate('friday', null), '-', new thingtalk_1.Ast.Value.Measure(1, 'week'))), C.valueKeyFn, {});
    $grammar.addRule("constant_day_of_week", [], $locale._("next {fri|friday}"), (() => C.makeDate(new thingtalk_1.Ast.WeekDayDate('friday', null), '+', new thingtalk_1.Ast.Value.Measure(1, 'week'))), C.valueKeyFn, {});
    $grammar.addRule("constant_day_of_week", [], $locale._("sat"), (() => C.makeDate(new thingtalk_1.Ast.WeekDayDate('saturday', null), '+', null)), C.valueKeyFn, {});
    $grammar.addRule("constant_day_of_week", [], $locale._("saturday"), (() => C.makeDate(new thingtalk_1.Ast.WeekDayDate('saturday', null), '+', null)), C.valueKeyFn, {});
    $grammar.addRule("constant_day_of_week", [], $locale._("last {sat|saturday}"), (() => C.makeDate(new thingtalk_1.Ast.WeekDayDate('saturday', null), '-', new thingtalk_1.Ast.Value.Measure(1, 'week'))), C.valueKeyFn, {});
    $grammar.addRule("constant_day_of_week", [], $locale._("next {sat|saturday}"), (() => C.makeDate(new thingtalk_1.Ast.WeekDayDate('saturday', null), '+', new thingtalk_1.Ast.Value.Measure(1, 'week'))), C.valueKeyFn, {});
    $grammar.addRule("constant_day_of_week", [], $locale._("sun"), (() => C.makeDate(new thingtalk_1.Ast.WeekDayDate('sunday', null), '+', null)), C.valueKeyFn, {});
    $grammar.addRule("constant_day_of_week", [], $locale._("sunday"), (() => C.makeDate(new thingtalk_1.Ast.WeekDayDate('sunday', null), '+', null)), C.valueKeyFn, {});
    $grammar.addRule("constant_day_of_week", [], $locale._("last {sun|sunday}"), (() => C.makeDate(new thingtalk_1.Ast.WeekDayDate('sunday', null), '-', new thingtalk_1.Ast.Value.Measure(1, 'week'))), C.valueKeyFn, {});
    $grammar.addRule("constant_day_of_week", [], $locale._("next {sun|sunday}"), (() => C.makeDate(new thingtalk_1.Ast.WeekDayDate('sunday', null), '+', new thingtalk_1.Ast.Value.Measure(1, 'week'))), C.valueKeyFn, {});
    $grammar.declareSymbol("constant_Date");
    if (!$options.flags.inference) {
        $grammar.addRule("constant_Date", [new $runtime.NonTerminal("constant_date_point", undefined, undefined)], "${constant_date_point}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
        $grammar.addRule("constant_Date", [new $runtime.NonTerminal("constant_day_of_week", undefined, undefined)], "${constant_day_of_week}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
        if (!$options.flags.turking) {
            $grammar.addRule("constant_Date", [new $runtime.NonTerminal("constant_Measure_ms", "duration", undefined)], $locale._("${duration} ago"), ((duration) => C.makeDate(null, '-', duration)), C.valueKeyFn, {});
            $grammar.addRule("constant_Date", [new $runtime.NonTerminal("constant_Measure_ms", "duration", undefined), new $runtime.NonTerminal("constant_date_point", "pt", undefined)], $locale._("${duration} before ${pt}"), ((duration, pt) => C.makeDate(pt, '-', duration)), C.valueKeyFn, {});
            $grammar.addRule("constant_Date", [new $runtime.NonTerminal("constant_Measure_ms", "duration", undefined)], $locale._("{${duration} from now|in ${duration}}"), ((duration) => C.makeDate(null, '+', duration)), C.valueKeyFn, {});
            $grammar.addRule("constant_Date", [new $runtime.NonTerminal("constant_Measure_ms", "duration", undefined), new $runtime.NonTerminal("constant_date_point", "pt", undefined)], $locale._("${duration} after ${pt}"), ((duration, pt) => C.makeDate(pt, '+', duration)), C.valueKeyFn, {});
            $grammar.addRule("constant_Date", [new $runtime.NonTerminal("constant_Time", "time", undefined), new $runtime.NonTerminal("constant_date_point", "date", undefined)], $locale._("${time} on ${date}"), ((time, date) => C.makeDateWithDateTime(date, time)), C.valueKeyFn, {});
            $grammar.addRule("constant_Date", [new $runtime.NonTerminal("at_time", "time", undefined), new $runtime.NonTerminal("constant_date_point", "date", undefined)], $locale._("${date} ${time}"), ((time, date) => C.makeDateWithDateTime(date, time)), C.valueKeyFn, {});
            $grammar.addRule("constant_Date", [new $runtime.NonTerminal("constant_Time", "time", undefined)], "${time}", ((time) => C.makeDateWithDateTime(null, time)), C.valueKeyFn, {});
        }
    }
    $grammar.declareSymbol("constant_Measure_ms");
    if (!$options.flags.inference) {
        if (!$options.flags.turking) {
            $grammar.addRule("constant_Measure_ms", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} ms"), ((num) => C.addUnit('ms', num)), C.valueKeyFn, {});
        }
        if (!$options.flags.turking) {
            $grammar.addRule("constant_Measure_ms", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} milliseconds"), ((num) => C.addUnit('ms', num)), C.valueKeyFn, {});
        }
        if (!$options.flags.turking) {
            $grammar.addRule("constant_Measure_ms", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} s"), ((num) => C.addUnit('s', num)), C.valueKeyFn, {});
        }
        if (!$options.flags.turking) {
            $grammar.addRule("constant_Measure_ms", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} seconds"), ((num) => C.addUnit('s', num)), C.valueKeyFn, {});
        }
        $grammar.addRule("constant_Measure_ms", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} min"), ((num) => C.addUnit('min', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_ms", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} minutes"), ((num) => C.addUnit('min', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_ms", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} h"), ((num) => C.addUnit('h', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_ms", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} hours"), ((num) => C.addUnit('h', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_ms", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} days"), ((num) => C.addUnit('day', num)), C.valueKeyFn, {});
        if (!$options.flags.turking) {
            $grammar.addRule("constant_Measure_ms", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} weeks"), ((num) => C.addUnit('week', num)), C.valueKeyFn, {});
        }
        if (!$options.flags.turking) {
            $grammar.addRule("constant_Measure_ms", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} months"), ((num) => C.addUnit('mon', num)), C.valueKeyFn, {});
        }
        if (!$options.flags.turking) {
            $grammar.addRule("constant_Measure_ms", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} years"), ((num) => C.addUnit('year', num)), C.valueKeyFn, {});
        }
    }
    $grammar.declareSymbol("unit_Measure_ms");
    $grammar.addRule("unit_Measure_ms", [], $locale._("minute"), (() => 'min'), undefined, {});
    $grammar.addRule("unit_Measure_ms", [], $locale._("hour"), (() => 'h'), undefined, {});
    $grammar.addRule("unit_Measure_ms", [], $locale._("day"), (() => 'day'), undefined, {});
    $grammar.addRule("unit_Measure_ms", [], $locale._("week"), (() => 'week'), undefined, {});
    $grammar.addRule("unit_Measure_ms", [], $locale._("month"), (() => 'mon'), undefined, {});
    $grammar.addRule("unit_Measure_ms", [], $locale._("year"), (() => 'year'), undefined, {});
    $grammar.declareSymbol("constant_Measure_byte");
    if (!$options.flags.inference) {
        if (!$options.flags.turking) {
            $grammar.addRule("constant_Measure_byte", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} byte"), ((num) => C.addUnit('byte', num)), C.valueKeyFn, {});
        }
        $grammar.addRule("constant_Measure_byte", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} kb"), ((num) => C.addUnit('KB', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_byte", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} mb"), ((num) => C.addUnit('MB', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_byte", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} gb"), ((num) => C.addUnit('GB', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_byte", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} tb"), ((num) => C.addUnit('TB', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_byte", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} kilobytes"), ((num) => C.addUnit('KB', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_byte", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} megabytes"), ((num) => C.addUnit('MB', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_byte", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} gigabytes"), ((num) => C.addUnit('GB', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_byte", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} terabytes"), ((num) => C.addUnit('TB', num)), C.valueKeyFn, {});
    }
    $grammar.declareSymbol("constant_Measure_kg");
    if (!$options.flags.inference) {
        if (!$options.flags.turking) {
            $grammar.addRule("constant_Measure_kg", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} grams"), ((num) => C.addUnit('g', num)), C.valueKeyFn, {});
        }
        $grammar.addRule("constant_Measure_kg", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} kilograms"), ((num) => C.addUnit('kg', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_kg", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} kg"), ((num) => C.addUnit('kg', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_kg", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} pounds"), ((num) => C.addUnit('lb', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_kg", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} lbs"), ((num) => C.addUnit('lb', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_kg", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} ounces"), ((num) => C.addUnit('oz', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_kg", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} oz"), ((num) => C.addUnit('oz', num)), C.valueKeyFn, {});
    }
    $grammar.declareSymbol("constant_Measure_C");
    if (!$options.flags.inference) {
        if (!$options.flags.turking) {
            $grammar.addRule("constant_Measure_C", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} c"), ((num) => C.addUnit('C', num)), C.valueKeyFn, {});
            $grammar.addRule("constant_Measure_C", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} centigrade"), ((num) => C.addUnit('C', num)), C.valueKeyFn, {});
            $grammar.addRule("constant_Measure_C", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} celsius"), ((num) => C.addUnit('C', num)), C.valueKeyFn, {});
            $grammar.addRule("constant_Measure_C", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} degrees celsius"), ((num) => C.addUnit('C', num)), C.valueKeyFn, {});
        }
        $grammar.addRule("constant_Measure_C", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} f"), ((num) => C.addUnit('F', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_C", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} fahrenheit"), ((num) => C.addUnit('F', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_C", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} degrees fahrenheit"), ((num) => C.addUnit('F', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_C", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} degrees"), ((num) => C.addUnit('defaultTemperature', num)), C.valueKeyFn, {});
    }
    $grammar.declareSymbol("constant_Measure_m");
    if (!$options.flags.inference) {
        if (!$options.flags.turking) {
            $grammar.addRule("constant_Measure_m", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} m"), ((num) => C.addUnit('m', num)), C.valueKeyFn, {});
        }
        $grammar.addRule("constant_Measure_m", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} meters"), ((num) => C.addUnit('m', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_m", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} km"), ((num) => C.addUnit('km', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_m", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} kilometers"), ((num) => C.addUnit('km', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_m", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} mi"), ((num) => C.addUnit('mi', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_m", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} miles"), ((num) => C.addUnit('mi', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_m", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} ft"), ((num) => C.addUnit('ft', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_m", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} in"), ((num) => C.addUnit('in', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_m", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} inches"), ((num) => C.addUnit('in', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_m", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} cm"), ((num) => C.addUnit('cm', num)), C.valueKeyFn, {});
    }
    $grammar.declareSymbol("constant_Measure_m2");
    if (!$options.flags.inference) {
        $grammar.addRule("constant_Measure_m2", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} square meters"), ((num) => C.addUnit('m2', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_m2", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} square km"), ((num) => C.addUnit('km2', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_m2", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} square kilometers"), ((num) => C.addUnit('km2', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_m2", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} square ft"), ((num) => C.addUnit('ft2', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_m2", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} square feet"), ((num) => C.addUnit('ft2', num)), C.valueKeyFn, {});
    }
    $grammar.declareSymbol("constant_Measure_m3");
    if (!$options.flags.inference) {
        $grammar.addRule("constant_Measure_m3", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} cubic meters"), ((num) => C.addUnit('m3', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_m3", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} cubic km"), ((num) => C.addUnit('km3', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_m3", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} cubic kilometers"), ((num) => C.addUnit('km3', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_m3", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} cubic ft"), ((num) => C.addUnit('ft3', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_m3", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} cubic feet"), ((num) => C.addUnit('ft3', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_m3", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} liter"), ((num) => C.addUnit('l', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_m3", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} l"), ((num) => C.addUnit('l', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_m3", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} cl"), ((num) => C.addUnit('cl', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_m3", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} hl"), ((num) => C.addUnit('hl', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_m3", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} ml"), ((num) => C.addUnit('ml', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_m3", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} floz"), ((num) => C.addUnit('floz', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_m3", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} gallon"), ((num) => C.addUnit('gal', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_m3", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} quart"), ((num) => C.addUnit('qt', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_m3", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} pint"), ((num) => C.addUnit('pint', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_m3", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} cup"), ((num) => C.addUnit('cup', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_m3", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} teaspoon"), ((num) => C.addUnit('tsp', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_m3", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} tablespoon"), ((num) => C.addUnit('tbsp', num)), C.valueKeyFn, {});
    }
    $grammar.declareSymbol("constant_Measure_mps");
    if (!$options.flags.inference) {
        $grammar.addRule("constant_Measure_mps", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} mph"), ((num) => C.addUnit('mph', num)), C.valueKeyFn, {});
        if (!$options.flags.turking) {
            $grammar.addRule("constant_Measure_mps", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} m/s"), ((num) => C.addUnit('mps', num)), C.valueKeyFn, {});
        }
        $grammar.addRule("constant_Measure_mps", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} kph"), ((num) => C.addUnit('kmph', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_mps", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} miles per hour"), ((num) => C.addUnit('mph', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_mps", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} kilometers per hour"), ((num) => C.addUnit('kmph', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_mps", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} km/h"), ((num) => C.addUnit('kmph', num)), C.valueKeyFn, {});
    }
    $grammar.declareSymbol("constant_Measure_W");
    if (!$options.flags.inference) {
        $grammar.addRule("constant_Measure_W", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} w"), ((num) => C.addUnit('W', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_W", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} watt"), ((num) => C.addUnit('W', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_W", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} kw"), ((num) => C.addUnit('kW', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_W", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} kilowatt"), ((num) => C.addUnit('W', num)), C.valueKeyFn, {});
    }
    $grammar.declareSymbol("constant_Measure_lx");
    if (!$options.flags.inference) {
        $grammar.addRule("constant_Measure_lx", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} lx"), ((num) => C.addUnit('lx', num)), C.valueKeyFn, {});
    }
    $grammar.declareSymbol("constant_Measure_lm");
    if (!$options.flags.inference) {
        $grammar.addRule("constant_Measure_lm", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} lm"), ((num) => C.addUnit('lm', num)), C.valueKeyFn, {});
    }
    $grammar.declareSymbol("constant_Measure_dB");
    if (!$options.flags.inference) {
        $grammar.addRule("constant_Measure_dB", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} db"), ((num) => C.addUnit('dB', num)), C.valueKeyFn, {});
        $grammar.addRule("constant_Measure_dB", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} decibels"), ((num) => C.addUnit('dB', num)), C.valueKeyFn, {});
    }
    $grammar.declareSymbol("constant_Measure_dBm");
    if (!$options.flags.inference) {
        $grammar.addRule("constant_Measure_dBm", [new $runtime.NonTerminal("constant_Number", "num", undefined)], $locale._("${num} dbm"), ((num) => C.addUnit('dBm', num)), C.valueKeyFn, {});
    }
    $grammar.declareSymbol("constant_Location");
    if (!$options.flags.inference) {
        $grammar.addRule("constant_Location", [], $locale._("here"), (() => new thingtalk_1.Ast.Value.Location(new thingtalk_1.Ast.Location.Relative('current_location'))), C.valueKeyFn, {});
        if (!$options.flags.turking) {
            $grammar.addRule("constant_Location", [], $locale._("where i am now"), (() => new thingtalk_1.Ast.Value.Location(new thingtalk_1.Ast.Location.Relative('current_location'))), C.valueKeyFn, {});
        }
        $grammar.addRule("constant_Location", [], $locale._("the area"), (() => new thingtalk_1.Ast.Value.Location(new thingtalk_1.Ast.Location.Relative('current_location'))), C.valueKeyFn, {});
        $grammar.addRule("constant_Location", [], $locale._("the city"), (() => new thingtalk_1.Ast.Value.Location(new thingtalk_1.Ast.Location.Relative('current_location'))), C.valueKeyFn, {});
        $grammar.addRule("constant_Location", [], $locale._("home"), (() => new thingtalk_1.Ast.Value.Location(new thingtalk_1.Ast.Location.Relative('home'))), C.valueKeyFn, {});
        $grammar.addRule("constant_Location", [], $locale._("my home"), (() => new thingtalk_1.Ast.Value.Location(new thingtalk_1.Ast.Location.Relative('home'))), C.valueKeyFn, {});
        $grammar.addRule("constant_Location", [], $locale._("my neighborhood"), (() => new thingtalk_1.Ast.Value.Location(new thingtalk_1.Ast.Location.Relative('home'))), C.valueKeyFn, {});
        $grammar.addRule("constant_Location", [], $locale._("work"), (() => new thingtalk_1.Ast.Value.Location(new thingtalk_1.Ast.Location.Relative('work'))), C.valueKeyFn, {});
        $grammar.addRule("constant_Location", [], $locale._("my office"), (() => new thingtalk_1.Ast.Value.Location(new thingtalk_1.Ast.Location.Relative('work'))), C.valueKeyFn, {});
        $grammar.addRule("constant_Location", [], $locale._("my workplace"), (() => new thingtalk_1.Ast.Value.Location(new thingtalk_1.Ast.Location.Relative('work'))), C.valueKeyFn, {});
    }
    $grammar.declareSymbol("constant_pairs");
    $grammar.addRule("constant_pairs", [new $runtime.NonTerminal("constant_Any", "c1", undefined), new $runtime.NonTerminal("constant_Any", "c2", ["type", 0, "type"])], $locale._("${c1} and ${c2}"), ((c1, c2) => {
        (0, assert_1.default)(c1.getType().equals(c2.getType()));
        if (c1.equals(c2))
            return null;
        return [c1, c2];
    }), C.valueArrayKeyFn, {});
    $grammar.declareSymbol("constant_or_pairs");
    $grammar.addRule("constant_or_pairs", [new $runtime.NonTerminal("constant_Any", "c1", undefined), new $runtime.NonTerminal("constant_Any", "c2", ["type", 0, "type"])], $locale._("${c1} or ${c2}"), ((c1, c2) => {
        (0, assert_1.default)(c1.getType().equals(c2.getType()));
        if (c1.equals(c2))
            return null;
        return [c1, c2];
    }), C.valueArrayKeyFn, {});
    $grammar.declareSymbol("constant_nor_pairs");
    $grammar.addRule("constant_nor_pairs", [new $runtime.NonTerminal("constant_Any", "c1", undefined), new $runtime.NonTerminal("constant_Any", "c2", ["type", 0, "type"])], $locale._("${c1} nor ${c2}"), ((c1, c2) => {
        (0, assert_1.default)(c1.getType().equals(c2.getType()));
        if (c1.equals(c2))
            return null;
        return [c1, c2];
    }), C.valueArrayKeyFn, {});
    $grammar.declareSymbol("constant_String_ContextRef");
    if ($options.flags.screen_selection) {
        $grammar.addRule("constant_String_ContextRef", [], $locale._("this"), (() => new thingtalk_1.Ast.Value.ContextRef('selection', thingtalk_1.Type.String)), C.valueKeyFn, {});
    }
    if ($options.flags.screen_selection) {
        $grammar.addRule("constant_String_ContextRef", [], $locale._("the selection on the screen"), (() => new thingtalk_1.Ast.Value.ContextRef('selection', thingtalk_1.Type.String)), C.valueKeyFn, {});
    }
}
exports.$load = $load;
;
//# sourceMappingURL=constants.genie.out.js.map