"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$load = exports.$root = exports.bookkeeping = exports.constant_String_ContextRef = exports.constant_nor_pairs = exports.constant_or_pairs = exports.constant_pairs = exports.unit_Measure_ms = exports.constant_day_of_week = exports.constant_date_range = exports.constant_date_point = exports.at_time = void 0;
const $runtime = __importStar(require("../sentence-generator/runtime"));
const thingtalk_1 = require("thingtalk");
const C = __importStar(require("./ast_manip"));
const D = __importStar(require("./dialogue_acts"));
const constants_genie_out_1 = require("./constants.genie.out");
Object.defineProperty(exports, "at_time", { enumerable: true, get: function () { return constants_genie_out_1.at_time; } });
Object.defineProperty(exports, "constant_date_point", { enumerable: true, get: function () { return constants_genie_out_1.constant_date_point; } });
Object.defineProperty(exports, "constant_date_range", { enumerable: true, get: function () { return constants_genie_out_1.constant_date_range; } });
Object.defineProperty(exports, "constant_day_of_week", { enumerable: true, get: function () { return constants_genie_out_1.constant_day_of_week; } });
Object.defineProperty(exports, "unit_Measure_ms", { enumerable: true, get: function () { return constants_genie_out_1.unit_Measure_ms; } });
Object.defineProperty(exports, "constant_pairs", { enumerable: true, get: function () { return constants_genie_out_1.constant_pairs; } });
Object.defineProperty(exports, "constant_or_pairs", { enumerable: true, get: function () { return constants_genie_out_1.constant_or_pairs; } });
Object.defineProperty(exports, "constant_nor_pairs", { enumerable: true, get: function () { return constants_genie_out_1.constant_nor_pairs; } });
Object.defineProperty(exports, "constant_String_ContextRef", { enumerable: true, get: function () { return constants_genie_out_1.constant_String_ContextRef; } });
exports.bookkeeping = "bookkeeping";
exports.$root = "$root";
/**
 * Load the templates in this file.
 *
 * This is an autogenerated method that will be called by the {@link SentenceGenerator}
 * when the templates are imported.
 */
async function $load($options, $locale, $grammar, $loader) {
    function special(specialType) {
        return new thingtalk_1.Ast.ControlCommand(null, new thingtalk_1.Ast.SpecialControlIntent(null, specialType));
    }
    await (0, constants_genie_out_1.$load)($options, $locale, $grammar, $loader);
    $grammar.declareSymbol("bookkeeping");
    $grammar.addRule("bookkeeping", [], $locale._("debug"), (() => special('debug')), undefined, {});
    $grammar.addRule("bookkeeping", [], $locale._("cancel"), (() => special('nevermind')), undefined, {});
    $grammar.addRule("bookkeeping", [], $locale._("never mind"), (() => special('nevermind')), undefined, {});
    $grammar.addRule("bookkeeping", [], $locale._("stop"), (() => special('stop')), undefined, {});
    $grammar.addRule("bookkeeping", [], $locale._("stop it"), (() => special('stop')), undefined, {});
    $grammar.addRule("bookkeeping", [], $locale._("shut up"), (() => special('stop')), undefined, {});
    $grammar.addRule("bookkeeping", [], $locale._("stop . stop"), (() => special('stop')), undefined, {});
    $grammar.addRule("bookkeeping", [], $locale._("stopped"), (() => special('stop')), undefined, {});
    $grammar.addRule("bookkeeping", [], $locale._("shush"), (() => special('stop')), undefined, {});
    $grammar.addRule("bookkeeping", [], $locale._("quiet"), (() => special('stop')), undefined, {});
    $grammar.addRule("bookkeeping", [], $locale._("close"), (() => special('stop')), undefined, {});
    $grammar.addRule("bookkeeping", [], $locale._("yes"), (() => special('yes')), undefined, {});
    $grammar.addRule("bookkeeping", [], $locale._("yes please"), (() => special('yes')), undefined, {});
    $grammar.addRule("bookkeeping", [], $locale._("yes ,  please"), (() => special('yes')), undefined, {});
    $grammar.addRule("bookkeeping", [], $locale._("yeah"), (() => special('yes')), undefined, {});
    $grammar.addRule("bookkeeping", [], $locale._("ok"), (() => special('yes')), undefined, {});
    $grammar.addRule("bookkeeping", [], $locale._("okay"), (() => special('yes')), undefined, {});
    $grammar.addRule("bookkeeping", [], $locale._("yes yes"), (() => special('yes')), undefined, {});
    $grammar.addRule("bookkeeping", [], $locale._("yes . yes"), (() => special('yes')), undefined, {});
    $grammar.addRule("bookkeeping", [], $locale._("no"), (() => special('no')), undefined, {});
    $grammar.addRule("bookkeeping", [], $locale._("no thanks"), (() => special('no')), undefined, {});
    $grammar.addRule("bookkeeping", [], $locale._("no ,  thanks"), (() => special('no')), undefined, {});
    $grammar.addRule("bookkeeping", [], $locale._("nope"), (() => special('no')), undefined, {});
    $grammar.addRule("bookkeeping", [], $locale._("no no"), (() => special('no')), undefined, {});
    $grammar.addRule("bookkeeping", [], $locale._("no . no"), (() => special('no')), undefined, {});
    $grammar.addRule("bookkeeping", [new $runtime.NonTerminal("constant_Any", "c", undefined)], "${c}", ((c) => {
        if (c.isEnum)
            return null;
        return new thingtalk_1.Ast.ControlCommand(null, new thingtalk_1.Ast.AnswerControlIntent(null, c));
    }), undefined, {});
    $grammar.declareSymbol("$root");
    $grammar.addRule("$root", [new $runtime.NonTerminal("bookkeeping", undefined, undefined)], "${bookkeeping}", (($0) => { return $0; }), undefined, { identity: (true) });
    if (!$options.flags.dialogues) {
        $grammar.addRule("$root", [new $runtime.NonTerminal("thingpedia_complete_query", "query", undefined)], $locale._("get ${query}"), ((query) => C.makeProgram($loader, query)), undefined, {});
        $grammar.addRule("$root", [new $runtime.NonTerminal("thingpedia_complete_query", "query", undefined)], $locale._("show me ${query}"), ((query) => C.makeProgram($loader, query)), undefined, {});
        $grammar.addRule("$root", [new $runtime.NonTerminal("thingpedia_complete_get_command", "query", undefined)], "${query}", ((query) => C.makeProgram($loader, query)), undefined, {});
        $grammar.addRule("$root", [new $runtime.NonTerminal("thingpedia_complete_action", "action", undefined)], "${action}", ((action) => C.makeProgram($loader, action)), undefined, {});
        $grammar.addRule("$root", [new $runtime.NonTerminal("thingpedia_complete_stream", "stream", undefined)], $locale._("notify me ${stream}"), ((stream) => C.makeProgram($loader, stream)), undefined, {});
    }
    if ($options.flags.dialogues) {
        $grammar.addRule("$root", [new $runtime.NonTerminal("thingpedia_complete_query", "query", undefined)], $locale._("get ${query}"), ((query) => D.initialRequest($loader, query)), undefined, {});
        $grammar.addRule("$root", [new $runtime.NonTerminal("thingpedia_complete_query", "query", undefined)], $locale._("show me ${query}"), ((query) => D.initialRequest($loader, query)), undefined, {});
        $grammar.addRule("$root", [new $runtime.NonTerminal("thingpedia_complete_get_command", "query", undefined)], "${query}", ((query) => D.initialRequest($loader, query)), undefined, {});
        $grammar.addRule("$root", [new $runtime.NonTerminal("thingpedia_complete_action", "action", undefined)], "${action}", ((action) => D.initialRequest($loader, action)), undefined, {});
        $grammar.addRule("$root", [new $runtime.NonTerminal("thingpedia_complete_stream", "stream", undefined)], $locale._("notify me ${stream}"), ((stream) => D.initialRequest($loader, stream)), undefined, {});
    }
}
exports.$load = $load;
;
//# sourceMappingURL=basic.genie.out.js.map