import type $SentenceGenerator from "../sentence-generator/generator";
import * as $SentenceGeneratorTypes from "../sentence-generator/types";
import * as $I18n from "../i18n/index";
import { Ast } from 'thingtalk';
import * as C from './ast_manip';
import ThingpediaLoader from './load-thingpedia';
import { constant_Number, constant_String, constant_Entity__tt__url, constant_Entity__tt__username, constant_Entity__tt__hashtag, constant_Entity__tt__phone_number, constant_Entity__tt__email_address, constant_Entity__tt__path_name, constant_Currency, constant_Time, constant_Date, constant_Location, constant_Entity__tt__picture, constant_Entity__tt__function, constant_Entity__tt__program, constant_Entity__tt__device, constant_Boolean, constant_RecurrentTimeSpecification, constant_Measure_ms, constant_Measure_byte, constant_Measure_kg, constant_Measure_C, constant_Measure_m, constant_Measure_m2, constant_Measure_m3, constant_Measure_mps, constant_Measure_Pa, constant_Measure_kcal, constant_Measure_W, constant_Measure_lx, constant_Measure_lm, constant_Measure_dB, constant_Measure_dBm, constant_Any, constant_Numeric } from "./common-constants.genie.out";
export { constant_Number, constant_String, constant_Entity__tt__url, constant_Entity__tt__username, constant_Entity__tt__hashtag, constant_Entity__tt__phone_number, constant_Entity__tt__email_address, constant_Entity__tt__path_name, constant_Currency, constant_Time, constant_Date, constant_Location, constant_Entity__tt__picture, constant_Entity__tt__function, constant_Entity__tt__program, constant_Entity__tt__device, constant_Boolean, constant_RecurrentTimeSpecification, constant_Measure_ms, constant_Measure_byte, constant_Measure_kg, constant_Measure_C, constant_Measure_m, constant_Measure_m2, constant_Measure_m3, constant_Measure_mps, constant_Measure_Pa, constant_Measure_kcal, constant_Measure_W, constant_Measure_lx, constant_Measure_lm, constant_Measure_dB, constant_Measure_dBm, constant_Any, constant_Numeric };
export declare const thingpedia_complete_query: $SentenceGeneratorTypes.NonTerminal<Ast.Expression>;
export declare const thingpedia_complete_get_command: $SentenceGeneratorTypes.NonTerminal<Ast.Expression>;
export declare const thingpedia_complete_stream: $SentenceGeneratorTypes.NonTerminal<Ast.Expression>;
export declare const thingpedia_complete_action: $SentenceGeneratorTypes.NonTerminal<Ast.Expression>;
export declare const thingpedia_complete_action_past: $SentenceGeneratorTypes.NonTerminal<Ast.Expression>;
export declare const thingpedia_complete_join_action_past: $SentenceGeneratorTypes.NonTerminal<Ast.Expression>;
export declare const thingpedia_complete_program: $SentenceGeneratorTypes.NonTerminal<Ast.Expression>;
export declare const thingpedia_who_question: $SentenceGeneratorTypes.NonTerminal<Ast.Expression>;
export declare const thingpedia_search_question: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot>;
export declare const thingpedia_slot_fill_question: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot>;
export declare const thingpedia_user_question: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot[]>;
export declare const same_sentence_coref: $SentenceGeneratorTypes.NonTerminal<undefined>;
export declare const context_coref: $SentenceGeneratorTypes.NonTerminal<undefined>;
export declare const list_context_coref: $SentenceGeneratorTypes.NonTerminal<undefined>;
export declare const coref_constant: $SentenceGeneratorTypes.NonTerminal<Ast.Value>;
export declare const placeholder: $SentenceGeneratorTypes.NonTerminal<C.Placeholder>;
export declare const constant_or_undefined: $SentenceGeneratorTypes.NonTerminal<Ast.Value>;
export declare const table_join_replace_placeholder: $SentenceGeneratorTypes.NonTerminal<Ast.ChainExpression>;
export declare const action_replace_param_with_table: $SentenceGeneratorTypes.NonTerminal<Ast.ChainExpression>;
export declare const action_replace_param_with_stream: $SentenceGeneratorTypes.NonTerminal<Ast.ChainExpression>;
export declare const with_filtered_table: $SentenceGeneratorTypes.NonTerminal<Ast.Expression>;
export declare const with_arg_min_max_table: $SentenceGeneratorTypes.NonTerminal<Ast.Expression>;
export declare const projection_Any: $SentenceGeneratorTypes.NonTerminal<Ast.Expression>;
export declare const stream_projection_Any: $SentenceGeneratorTypes.NonTerminal<Ast.Expression>;
export declare const stream_coref_same_sentence: $SentenceGeneratorTypes.NonTerminal<C.ExpressionWithCoreference>;
export declare const stream_coref_context: $SentenceGeneratorTypes.NonTerminal<C.ExpressionWithCoreference>;
export declare const stream_coref_list_context: $SentenceGeneratorTypes.NonTerminal<C.ExpressionWithCoreference>;
export declare const action_coref_same_sentence: $SentenceGeneratorTypes.NonTerminal<C.ExpressionWithCoreference>;
export declare const action_coref_context: $SentenceGeneratorTypes.NonTerminal<C.ExpressionWithCoreference>;
export declare const action_coref_list_context: $SentenceGeneratorTypes.NonTerminal<C.ExpressionWithCoreference>;
export declare const query_coref_same_sentence: $SentenceGeneratorTypes.NonTerminal<C.ExpressionWithCoreference>;
export declare const query_coref_context: $SentenceGeneratorTypes.NonTerminal<C.ExpressionWithCoreference>;
export declare const query_coref_list_context: $SentenceGeneratorTypes.NonTerminal<C.ExpressionWithCoreference>;
export declare const get_command_coref_same_sentence: $SentenceGeneratorTypes.NonTerminal<C.ExpressionWithCoreference>;
export declare const get_command_coref_context: $SentenceGeneratorTypes.NonTerminal<C.ExpressionWithCoreference>;
export declare const get_command_coref_list_context: $SentenceGeneratorTypes.NonTerminal<C.ExpressionWithCoreference>;
export declare const out_param_Any: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot>;
export declare const out_param_Any_hidden: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot>;
export declare const the_out_param_Any: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot>;
export declare const out_param_Array__Any: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot>;
export declare const out_param_Array__Compound: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot>;
export declare const out_param_ArrayCount: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot>;
export declare const out_param_NotArray__Any: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot>;
export declare const out_param_npp: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot>;
export declare const out_param_npi: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot>;
export declare const out_param_avp: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot>;
export declare const out_param_pvp: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot>;
export declare const out_param_npv: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot>;
export declare const out_param_apv: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot>;
export declare const input_param: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot>;
export declare const both_prefix: $SentenceGeneratorTypes.NonTerminal<string>;
export declare const pronoun_the_first: $SentenceGeneratorTypes.NonTerminal<string>;
export declare const pronoun_the_second: $SentenceGeneratorTypes.NonTerminal<string>;
export declare const each_other: $SentenceGeneratorTypes.NonTerminal<string>;
export declare const npp_filter: $SentenceGeneratorTypes.NonTerminal<C.FilterSlot>;
export declare const npp_join_condition: $SentenceGeneratorTypes.NonTerminal<C.FilterSlot>;
export declare const npp_symmetric_join_condition: $SentenceGeneratorTypes.NonTerminal<C.FilterSlot>;
export declare const npp_input_param: $SentenceGeneratorTypes.NonTerminal<C.InputParamSlot>;
export declare const npp_argminmax: $SentenceGeneratorTypes.NonTerminal<C.ArgMinMax>;
export declare const coref_npp_filter: $SentenceGeneratorTypes.NonTerminal<C.FilterSlot>;
export declare const coref_npp_input_param: $SentenceGeneratorTypes.NonTerminal<C.InputParamSlot>;
export declare const npp_boolean_projection: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot>;
export declare const npi_filter: $SentenceGeneratorTypes.NonTerminal<C.FilterSlot>;
export declare const npi_join_condition: $SentenceGeneratorTypes.NonTerminal<C.FilterSlot>;
export declare const npi_symmetric_join_condition: $SentenceGeneratorTypes.NonTerminal<C.FilterSlot>;
export declare const npi_input_param: $SentenceGeneratorTypes.NonTerminal<C.InputParamSlot>;
export declare const npi_argminmax: $SentenceGeneratorTypes.NonTerminal<C.ArgMinMax>;
export declare const coref_npi_filter: $SentenceGeneratorTypes.NonTerminal<C.FilterSlot>;
export declare const coref_npi_input_param: $SentenceGeneratorTypes.NonTerminal<C.InputParamSlot>;
export declare const npi_boolean_projection: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot>;
export declare const pvp_filter: $SentenceGeneratorTypes.NonTerminal<C.FilterSlot>;
export declare const pvp_join_condition: $SentenceGeneratorTypes.NonTerminal<C.FilterSlot>;
export declare const pvp_symmetric_join_condition: $SentenceGeneratorTypes.NonTerminal<C.FilterSlot>;
export declare const pvp_input_param: $SentenceGeneratorTypes.NonTerminal<C.InputParamSlot>;
export declare const pvp_argminmax: $SentenceGeneratorTypes.NonTerminal<C.ArgMinMax>;
export declare const coref_pvp_filter: $SentenceGeneratorTypes.NonTerminal<C.FilterSlot>;
export declare const coref_pvp_input_param: $SentenceGeneratorTypes.NonTerminal<C.InputParamSlot>;
export declare const pvp_boolean_projection: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot>;
export declare const preposition_filter: $SentenceGeneratorTypes.NonTerminal<C.FilterSlot>;
export declare const preposition_join_condition: $SentenceGeneratorTypes.NonTerminal<C.FilterSlot>;
export declare const preposition_symmetric_join_condition: $SentenceGeneratorTypes.NonTerminal<C.FilterSlot>;
export declare const preposition_input_param: $SentenceGeneratorTypes.NonTerminal<C.InputParamSlot>;
export declare const preposition_argminmax: $SentenceGeneratorTypes.NonTerminal<C.ArgMinMax>;
export declare const coref_preposition_filter: $SentenceGeneratorTypes.NonTerminal<C.FilterSlot>;
export declare const coref_preposition_input_param: $SentenceGeneratorTypes.NonTerminal<C.InputParamSlot>;
export declare const preposition_boolean_projection: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot>;
export declare const avp_filter: $SentenceGeneratorTypes.NonTerminal<C.FilterSlot>;
export declare const avp_join_condition: $SentenceGeneratorTypes.NonTerminal<C.FilterSlot>;
export declare const avp_symmetric_join_condition: $SentenceGeneratorTypes.NonTerminal<C.FilterSlot>;
export declare const avp_input_param: $SentenceGeneratorTypes.NonTerminal<C.InputParamSlot>;
export declare const avp_argminmax: $SentenceGeneratorTypes.NonTerminal<C.ArgMinMax>;
export declare const coref_avp_filter: $SentenceGeneratorTypes.NonTerminal<C.FilterSlot>;
export declare const coref_avp_input_param: $SentenceGeneratorTypes.NonTerminal<C.InputParamSlot>;
export declare const avp_boolean_projection: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot>;
export declare const npv_filter: $SentenceGeneratorTypes.NonTerminal<C.FilterSlot>;
export declare const npv_join_condition: $SentenceGeneratorTypes.NonTerminal<C.FilterSlot>;
export declare const npv_symmetric_join_condition: $SentenceGeneratorTypes.NonTerminal<C.FilterSlot>;
export declare const npv_input_pconstant_namearam: $SentenceGeneratorTypes.NonTerminal<C.InputParamSlot>;
export declare const npv_argminmax: $SentenceGeneratorTypes.NonTerminal<C.ArgMinMax>;
export declare const coref_npv_filter: $SentenceGeneratorTypes.NonTerminal<C.FilterSlot>;
export declare const coref_npv_input_param: $SentenceGeneratorTypes.NonTerminal<C.InputParamSlot>;
export declare const npv_boolean_projection: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot>;
export declare const apv_filter: $SentenceGeneratorTypes.NonTerminal<C.FilterSlot>;
export declare const apv_join_condition: $SentenceGeneratorTypes.NonTerminal<C.FilterSlot>;
export declare const apv_symmetric_join_condition: $SentenceGeneratorTypes.NonTerminal<C.FilterSlot>;
export declare const apv_input_param: $SentenceGeneratorTypes.NonTerminal<C.InputParamSlot>;
export declare const apv_argminmax: $SentenceGeneratorTypes.NonTerminal<C.ArgMinMax>;
export declare const coref_apv_filter: $SentenceGeneratorTypes.NonTerminal<C.FilterSlot>;
export declare const coref_apv_input_param: $SentenceGeneratorTypes.NonTerminal<C.InputParamSlot>;
export declare const apv_boolean_projection: $SentenceGeneratorTypes.NonTerminal<C.ParamSlot>;
export declare const reverse_verb_filter: $SentenceGeneratorTypes.NonTerminal<C.FilterSlot>;
export declare const reverse_verb_join_condition: $SentenceGeneratorTypes.NonTerminal<C.FilterSlot>;
export declare const reverse_verb_symmetric_join_condition: $SentenceGeneratorTypes.NonTerminal<C.FilterSlot>;
export declare const reverse_verb_input_param: $SentenceGeneratorTypes.NonTerminal<C.InputParamSlot>;
export declare const coref_reverse_verb_filter: $SentenceGeneratorTypes.NonTerminal<C.FilterSlot>;
export declare const coref_reverse_verb_input_param: $SentenceGeneratorTypes.NonTerminal<C.InputParamSlot>;
export declare const question_projection_table: $SentenceGeneratorTypes.NonTerminal<Ast.Expression>;
export declare const command_projection_table: $SentenceGeneratorTypes.NonTerminal<Ast.Expression>;
export declare const entity_table: $SentenceGeneratorTypes.NonTerminal<Ast.Expression>;
export declare const constant_name: $SentenceGeneratorTypes.NonTerminal<Ast.EntityValue | Ast.NumberValue>;
export declare const the_base_table: $SentenceGeneratorTypes.NonTerminal<Ast.InvocationExpression>;
export declare const base_table: $SentenceGeneratorTypes.NonTerminal<Ast.InvocationExpression>;
export declare const base_table_hidden: $SentenceGeneratorTypes.NonTerminal<Ast.InvocationExpression>;
export declare const base_noun_phrase: $SentenceGeneratorTypes.NonTerminal<Ast.FunctionDef>;
export declare const generic_anything_noun_phrase: $SentenceGeneratorTypes.NonTerminal<Ast.InvocationExpression>;
export declare const generic_base_noun_phrase: $SentenceGeneratorTypes.NonTerminal<Ast.InvocationExpression>;
export declare const time_qualifier: $SentenceGeneratorTypes.NonTerminal<C.FilterSlot>;
export declare const qualified_with_filter: $SentenceGeneratorTypes.NonTerminal<C.FilterSlot>;
export declare const qualified_npp_filter: $SentenceGeneratorTypes.NonTerminal<C.FilterSlot>;
export declare const qualified_npi_filter: $SentenceGeneratorTypes.NonTerminal<C.FilterSlot>;
export declare const qualified_pvp_filter: $SentenceGeneratorTypes.NonTerminal<C.FilterSlot>;
export declare const qualified_avp_filter: $SentenceGeneratorTypes.NonTerminal<C.FilterSlot>;
export declare const qualified_apv_filter: $SentenceGeneratorTypes.NonTerminal<C.FilterSlot>;
export declare const qualified_npv_filter: $SentenceGeneratorTypes.NonTerminal<C.FilterSlot>;
export declare const qualified_reverse_verb_filter: $SentenceGeneratorTypes.NonTerminal<C.FilterSlot>;
export declare const qualified_preposition_filter: $SentenceGeneratorTypes.NonTerminal<C.FilterSlot>;
/**
 * Load the templates in this file.
 *
 * This is an autogenerated method that will be called by the {@link SentenceGenerator}
 * when the templates are imported.
 */
export declare function $load($options: $SentenceGeneratorTypes.GrammarOptions, $locale: $I18n.LanguagePack, $grammar: $SentenceGenerator, $loader: ThingpediaLoader): Promise<void>;
