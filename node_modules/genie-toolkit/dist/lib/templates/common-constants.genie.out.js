"use strict";
// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2019-2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$load = exports.constant_Numeric = exports.constant_Any = exports.constant_Measure_dBm = exports.constant_Measure_dB = exports.constant_Measure_lm = exports.constant_Measure_lx = exports.constant_Measure_W = exports.constant_Measure_kcal = exports.constant_Measure_Pa = exports.constant_Measure_mps = exports.constant_Measure_m3 = exports.constant_Measure_m2 = exports.constant_Measure_m = exports.constant_Measure_C = exports.constant_Measure_kg = exports.constant_Measure_byte = exports.constant_Measure_ms = exports.constant_RecurrentTimeSpecification = exports.constant_Boolean = exports.constant_Entity__tt__device = exports.constant_Entity__tt__program = exports.constant_Entity__tt__function = exports.constant_Entity__tt__picture = exports.constant_Location = exports.constant_Date = exports.constant_Time = exports.constant_Currency = exports.constant_Number = exports.constant_Entity__tt__path_name = exports.constant_Entity__tt__email_address = exports.constant_Entity__tt__phone_number = exports.constant_Entity__tt__hashtag = exports.constant_Entity__tt__username = exports.constant_Entity__tt__url = exports.constant_String = void 0;
const $runtime = __importStar(require("../sentence-generator/runtime"));
const thingtalk_1 = require("thingtalk");
const C = __importStar(require("./ast_manip"));
exports.constant_String = "constant_String";
exports.constant_Entity__tt__url = "constant_Entity__tt__url";
exports.constant_Entity__tt__username = "constant_Entity__tt__username";
exports.constant_Entity__tt__hashtag = "constant_Entity__tt__hashtag";
exports.constant_Entity__tt__phone_number = "constant_Entity__tt__phone_number";
exports.constant_Entity__tt__email_address = "constant_Entity__tt__email_address";
exports.constant_Entity__tt__path_name = "constant_Entity__tt__path_name";
exports.constant_Number = "constant_Number";
exports.constant_Currency = "constant_Currency";
exports.constant_Time = "constant_Time";
exports.constant_Date = "constant_Date";
exports.constant_Location = "constant_Location";
exports.constant_Entity__tt__picture = "constant_Entity__tt__picture";
exports.constant_Entity__tt__function = "constant_Entity__tt__function";
exports.constant_Entity__tt__program = "constant_Entity__tt__program";
exports.constant_Entity__tt__device = "constant_Entity__tt__device";
exports.constant_Boolean = "constant_Boolean";
exports.constant_RecurrentTimeSpecification = "constant_RecurrentTimeSpecification";
exports.constant_Measure_ms = "constant_Measure_ms";
exports.constant_Measure_byte = "constant_Measure_byte";
exports.constant_Measure_kg = "constant_Measure_kg";
exports.constant_Measure_C = "constant_Measure_C";
exports.constant_Measure_m = "constant_Measure_m";
exports.constant_Measure_m2 = "constant_Measure_m2";
exports.constant_Measure_m3 = "constant_Measure_m3";
exports.constant_Measure_mps = "constant_Measure_mps";
exports.constant_Measure_Pa = "constant_Measure_Pa";
exports.constant_Measure_kcal = "constant_Measure_kcal";
exports.constant_Measure_W = "constant_Measure_W";
exports.constant_Measure_lx = "constant_Measure_lx";
exports.constant_Measure_lm = "constant_Measure_lm";
exports.constant_Measure_dB = "constant_Measure_dB";
exports.constant_Measure_dBm = "constant_Measure_dBm";
exports.constant_Any = "constant_Any";
exports.constant_Numeric = "constant_Numeric";
/**
 * Load the templates in this file.
 *
 * This is an autogenerated method that will be called by the {@link SentenceGenerator}
 * when the templates are imported.
 */
async function $load($options, $locale, $grammar, $loader) {
    const MAX_SMALL_INTEGER = 12;
    for (let i = 0; i <= MAX_SMALL_INTEGER; i++) {
        $grammar.declareSymbol("constant_Number");
        $grammar.addRule("constant_Number", [], $locale._("" + (String(i)) + ""), (() => new thingtalk_1.Ast.Value.Number(i)), C.entityOrNumberValueKeyFn, {});
    }
    $grammar.declareSymbol("constant_String");
    $grammar.addConstants("constant_String", "QUOTED_STRING", thingtalk_1.Type.String, C.valueKeyFn, {});
    $grammar.declareSymbol("constant_Entity__tt__url");
    $grammar.addConstants("constant_Entity__tt__url", "URL", new thingtalk_1.Type.Entity('tt:url'), C.entityOrNumberValueKeyFn, {});
    $grammar.declareSymbol("constant_Entity__tt__username");
    $grammar.addConstants("constant_Entity__tt__username", "USERNAME", new thingtalk_1.Type.Entity('tt:username'), C.entityOrNumberValueKeyFn, {});
    $grammar.declareSymbol("constant_Entity__tt__hashtag");
    $grammar.addConstants("constant_Entity__tt__hashtag", "HASHTAG", new thingtalk_1.Type.Entity('tt:hashtag'), C.entityOrNumberValueKeyFn, {});
    $grammar.declareSymbol("constant_Entity__tt__phone_number");
    $grammar.addConstants("constant_Entity__tt__phone_number", "PHONE_NUMBER", new thingtalk_1.Type.Entity('tt:phone_number'), C.entityOrNumberValueKeyFn, {});
    $grammar.declareSymbol("constant_Entity__tt__email_address");
    $grammar.addConstants("constant_Entity__tt__email_address", "EMAIL_ADDRESS", new thingtalk_1.Type.Entity('tt:email_address'), C.entityOrNumberValueKeyFn, {});
    $grammar.declareSymbol("constant_Entity__tt__path_name");
    $grammar.addConstants("constant_Entity__tt__path_name", "PATH_NAME", new thingtalk_1.Type.Entity('tt:path_name'), C.entityOrNumberValueKeyFn, {});
    $grammar.declareSymbol("constant_Number");
    $grammar.addConstants("constant_Number", "NUMBER", thingtalk_1.Type.Number, C.entityOrNumberValueKeyFn, {});
    $grammar.declareSymbol("constant_Currency");
    $grammar.addConstants("constant_Currency", "CURRENCY", thingtalk_1.Type.Currency, C.valueKeyFn, {});
    $grammar.declareSymbol("constant_Time");
    $grammar.addConstants("constant_Time", "TIME", thingtalk_1.Type.Time, C.valueKeyFn, {});
    $grammar.declareSymbol("constant_Date");
    $grammar.addConstants("constant_Date", "DATE", thingtalk_1.Type.Date, C.valueKeyFn, {});
    $grammar.declareSymbol("constant_Location");
    $grammar.addConstants("constant_Location", "LOCATION", thingtalk_1.Type.Location, C.valueKeyFn, {});
    $grammar.declareSymbol("constant_Entity__tt__picture");
    $grammar.declareSymbol("constant_Entity__tt__function");
    $grammar.declareSymbol("constant_Entity__tt__program");
    $grammar.declareSymbol("constant_Entity__tt__device");
    $grammar.declareSymbol("constant_Boolean");
    $grammar.declareSymbol("constant_RecurrentTimeSpecification");
    if ($options.flags.inference) {
        $grammar.addConstants("constant_RecurrentTimeSpecification", "RECURRENT_TIME_SPECIFICATION", thingtalk_1.Type.RecurrentTimeSpecification, C.valueKeyFn, {});
    }
    $grammar.declareSymbol("constant_Measure_ms");
    if ($options.flags.inference) {
        $grammar.addConstants("constant_Measure_ms", "MEASURE_ms", new thingtalk_1.Type.Measure('ms'), C.valueKeyFn, {});
    }
    $grammar.declareSymbol("constant_Measure_byte");
    if ($options.flags.inference) {
        $grammar.addConstants("constant_Measure_byte", "MEASURE_byte", new thingtalk_1.Type.Measure('byte'), C.valueKeyFn, {});
    }
    $grammar.declareSymbol("constant_Measure_kg");
    if ($options.flags.inference) {
        $grammar.addConstants("constant_Measure_kg", "MEASURE_kg", new thingtalk_1.Type.Measure('kg'), C.valueKeyFn, {});
    }
    $grammar.declareSymbol("constant_Measure_C");
    if ($options.flags.inference) {
        $grammar.addConstants("constant_Measure_C", "MEASURE_C", new thingtalk_1.Type.Measure('C'), C.valueKeyFn, {});
    }
    $grammar.declareSymbol("constant_Measure_m");
    if ($options.flags.inference) {
        $grammar.addConstants("constant_Measure_m", "MEASURE_m", new thingtalk_1.Type.Measure('m'), C.valueKeyFn, {});
    }
    $grammar.declareSymbol("constant_Measure_m2");
    if ($options.flags.inference) {
        $grammar.addConstants("constant_Measure_m2", "MEASURE_m2", new thingtalk_1.Type.Measure('m2'), C.valueKeyFn, {});
    }
    $grammar.declareSymbol("constant_Measure_m3");
    if ($options.flags.inference) {
        $grammar.addConstants("constant_Measure_m3", "MEASURE_m3", new thingtalk_1.Type.Measure('m3'), C.valueKeyFn, {});
    }
    $grammar.declareSymbol("constant_Measure_m2");
    if ($options.flags.inference) {
        $grammar.addConstants("constant_Measure_m2", "MEASURE_m2", new thingtalk_1.Type.Measure('m2'), C.valueKeyFn, {});
    }
    $grammar.declareSymbol("constant_Measure_m3");
    if ($options.flags.inference) {
        $grammar.addConstants("constant_Measure_m3", "MEASURE_m3", new thingtalk_1.Type.Measure('m3'), C.valueKeyFn, {});
    }
    $grammar.declareSymbol("constant_Measure_mps");
    if ($options.flags.inference) {
        $grammar.addConstants("constant_Measure_mps", "MEASURE_mps", new thingtalk_1.Type.Measure('mps'), C.valueKeyFn, {});
    }
    $grammar.declareSymbol("constant_Measure_Pa");
    if ($options.flags.inference) {
        $grammar.addConstants("constant_Measure_Pa", "MEASURE_Pa", new thingtalk_1.Type.Measure('Pa'), C.valueKeyFn, {});
    }
    $grammar.declareSymbol("constant_Measure_kcal");
    if ($options.flags.inference) {
        $grammar.addConstants("constant_Measure_kcal", "MEASURE_kcal", new thingtalk_1.Type.Measure('kcal'), C.valueKeyFn, {});
    }
    $grammar.declareSymbol("constant_Measure_W");
    if ($options.flags.inference) {
        $grammar.addConstants("constant_Measure_W", "MEASURE_W", new thingtalk_1.Type.Measure('W'), C.valueKeyFn, {});
    }
    $grammar.declareSymbol("constant_Measure_lx");
    if ($options.flags.inference) {
        $grammar.addConstants("constant_Measure_lx", "MEASURE_lx", new thingtalk_1.Type.Measure('lx'), C.valueKeyFn, {});
    }
    $grammar.declareSymbol("constant_Measure_lm");
    if ($options.flags.inference) {
        $grammar.addConstants("constant_Measure_lm", "MEASURE_lm", new thingtalk_1.Type.Measure('lm'), C.valueKeyFn, {});
    }
    $grammar.declareSymbol("constant_Measure_dB");
    if ($options.flags.inference) {
        $grammar.addConstants("constant_Measure_dB", "MEASURE_dB", new thingtalk_1.Type.Measure('dB'), C.valueKeyFn, {});
    }
    $grammar.declareSymbol("constant_Measure_dBm");
    if ($options.flags.inference) {
        $grammar.addConstants("constant_Measure_dBm", "MEASURE_dBm", new thingtalk_1.Type.Measure('byte'), C.valueKeyFn, {});
    }
    $grammar.declareSymbol("constant_Any");
    if (!$options.flags.unbalanced) {
        $grammar.addRule("constant_Any", [new $runtime.NonTerminal("constant_String", undefined, undefined)], "${constant_String}", (($0) => { return $0; }), C.valueKeyFn, { repeat: (true), identity: (true) });
    }
    if ($options.flags.unbalanced) {
        $grammar.addRule("constant_Any", [new $runtime.NonTerminal("constant_String", undefined, undefined)], "${constant_String}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
    }
    $grammar.addRule("constant_Any", [new $runtime.NonTerminal("constant_Entity__tt__picture", undefined, undefined)], "${constant_Entity__tt__picture}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
    $grammar.addRule("constant_Any", [new $runtime.NonTerminal("constant_Entity__tt__username", undefined, undefined)], "${constant_Entity__tt__username}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
    $grammar.addRule("constant_Any", [new $runtime.NonTerminal("constant_Entity__tt__hashtag", undefined, undefined)], "${constant_Entity__tt__hashtag}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
    $grammar.addRule("constant_Any", [new $runtime.NonTerminal("constant_Entity__tt__phone_number", undefined, undefined)], "${constant_Entity__tt__phone_number}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
    $grammar.addRule("constant_Any", [new $runtime.NonTerminal("constant_Entity__tt__email_address", undefined, undefined)], "${constant_Entity__tt__email_address}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
    $grammar.addRule("constant_Any", [new $runtime.NonTerminal("constant_Entity__tt__path_name", undefined, undefined)], "${constant_Entity__tt__path_name}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
    $grammar.addRule("constant_Any", [new $runtime.NonTerminal("constant_Number", undefined, undefined)], "${constant_Number}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
    $grammar.addRule("constant_Any", [new $runtime.NonTerminal("constant_Time", undefined, undefined)], "${constant_Time}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
    $grammar.addRule("constant_Any", [new $runtime.NonTerminal("constant_Location", undefined, undefined)], "${constant_Location}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
    $grammar.addRule("constant_Any", [new $runtime.NonTerminal("constant_Currency", undefined, undefined)], "${constant_Currency}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
    if (!$options.flags.turking) {
        $grammar.addRule("constant_Any", [new $runtime.NonTerminal("constant_Entity__tt__url", undefined, undefined)], "${constant_Entity__tt__url}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
        $grammar.addRule("constant_Any", [new $runtime.NonTerminal("constant_Date", undefined, undefined)], "${constant_Date}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
        $grammar.addRule("constant_Any", [new $runtime.NonTerminal("constant_Measure_ms", undefined, undefined)], "${constant_Measure_ms}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
        $grammar.addRule("constant_Any", [new $runtime.NonTerminal("constant_Measure_byte", undefined, undefined)], "${constant_Measure_byte}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
        $grammar.addRule("constant_Any", [new $runtime.NonTerminal("constant_Measure_mps", undefined, undefined)], "${constant_Measure_mps}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
        $grammar.addRule("constant_Any", [new $runtime.NonTerminal("constant_Measure_m", undefined, undefined)], "${constant_Measure_m}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
        $grammar.addRule("constant_Any", [new $runtime.NonTerminal("constant_Measure_m2", undefined, undefined)], "${constant_Measure_m2}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
        $grammar.addRule("constant_Any", [new $runtime.NonTerminal("constant_Measure_m3", undefined, undefined)], "${constant_Measure_m3}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
        $grammar.addRule("constant_Any", [new $runtime.NonTerminal("constant_Measure_C", undefined, undefined)], "${constant_Measure_C}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
        $grammar.addRule("constant_Any", [new $runtime.NonTerminal("constant_Measure_kg", undefined, undefined)], "${constant_Measure_kg}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
        $grammar.addRule("constant_Any", [new $runtime.NonTerminal("constant_Measure_Pa", undefined, undefined)], "${constant_Measure_Pa}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
        $grammar.addRule("constant_Any", [new $runtime.NonTerminal("constant_Measure_kcal", undefined, undefined)], "${constant_Measure_kcal}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
        $grammar.addRule("constant_Any", [new $runtime.NonTerminal("constant_Measure_W", undefined, undefined)], "${constant_Measure_W}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
        $grammar.addRule("constant_Any", [new $runtime.NonTerminal("constant_Measure_lx", undefined, undefined)], "${constant_Measure_lx}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
        $grammar.addRule("constant_Any", [new $runtime.NonTerminal("constant_Measure_lm", undefined, undefined)], "${constant_Measure_lm}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
        $grammar.addRule("constant_Any", [new $runtime.NonTerminal("constant_Measure_dB", undefined, undefined)], "${constant_Measure_dB}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
        $grammar.addRule("constant_Any", [new $runtime.NonTerminal("constant_Measure_dBm", undefined, undefined)], "${constant_Measure_dBm}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
        $grammar.addRule("constant_Any", [new $runtime.NonTerminal("constant_Boolean", undefined, undefined)], "${constant_Boolean}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
    }
    $grammar.declareSymbol("constant_Numeric");
    $grammar.addRule("constant_Numeric", [new $runtime.NonTerminal("constant_Number", undefined, undefined)], "${constant_Number}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
    $grammar.addRule("constant_Numeric", [new $runtime.NonTerminal("constant_Currency", undefined, undefined)], "${constant_Currency}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
    $grammar.addRule("constant_Numeric", [new $runtime.NonTerminal("constant_Measure_ms", undefined, undefined)], "${constant_Measure_ms}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
    $grammar.addRule("constant_Numeric", [new $runtime.NonTerminal("constant_Measure_byte", undefined, undefined)], "${constant_Measure_byte}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
    $grammar.addRule("constant_Numeric", [new $runtime.NonTerminal("constant_Measure_mps", undefined, undefined)], "${constant_Measure_mps}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
    $grammar.addRule("constant_Numeric", [new $runtime.NonTerminal("constant_Measure_m", undefined, undefined)], "${constant_Measure_m}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
    $grammar.addRule("constant_Numeric", [new $runtime.NonTerminal("constant_Measure_m2", undefined, undefined)], "${constant_Measure_m2}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
    $grammar.addRule("constant_Numeric", [new $runtime.NonTerminal("constant_Measure_m3", undefined, undefined)], "${constant_Measure_m3}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
    $grammar.addRule("constant_Numeric", [new $runtime.NonTerminal("constant_Measure_C", undefined, undefined)], "${constant_Measure_C}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
    $grammar.addRule("constant_Numeric", [new $runtime.NonTerminal("constant_Measure_kg", undefined, undefined)], "${constant_Measure_kg}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
    $grammar.addRule("constant_Numeric", [new $runtime.NonTerminal("constant_Measure_Pa", undefined, undefined)], "${constant_Measure_Pa}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
    $grammar.addRule("constant_Numeric", [new $runtime.NonTerminal("constant_Measure_kcal", undefined, undefined)], "${constant_Measure_kcal}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
    $grammar.addRule("constant_Numeric", [new $runtime.NonTerminal("constant_Measure_W", undefined, undefined)], "${constant_Measure_W}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
    $grammar.addRule("constant_Numeric", [new $runtime.NonTerminal("constant_Measure_lx", undefined, undefined)], "${constant_Measure_lx}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
    $grammar.addRule("constant_Numeric", [new $runtime.NonTerminal("constant_Measure_lm", undefined, undefined)], "${constant_Measure_lm}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
    $grammar.addRule("constant_Numeric", [new $runtime.NonTerminal("constant_Measure_dB", undefined, undefined)], "${constant_Measure_dB}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
    $grammar.addRule("constant_Numeric", [new $runtime.NonTerminal("constant_Measure_dBm", undefined, undefined)], "${constant_Measure_dBm}", (($0) => { return $0; }), C.valueKeyFn, { identity: (true) });
}
exports.$load = $load;
;
//# sourceMappingURL=common-constants.genie.out.js.map