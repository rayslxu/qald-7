import { Ast } from 'thingtalk';
import { ContextInfo } from '../state_manip';
export declare type NegativeProposalReply = [Ast.Expression | null, Ast.Expression | null];
export declare function negativeProposalReplyKeyFn([preamble, request]: NegativeProposalReply): {
    functionName: string;
};
declare function checkSearchResultPreamble(ctx: ContextInfo, base: Ast.FunctionDef, num: Ast.Value | null, more: boolean): ContextInfo | null;
/**
 * Agent act: the agent proposes to execute a different query statement (a refinement of
 * the current query).
 */
declare function makeRefinementProposal(ctx: ContextInfo, proposal: Ast.Expression): import("../../sentence-generator/types").AgentReplyRecord | null;
declare function negativeProposalReply(ctx: ContextInfo, [preamble, request]: [Ast.Expression | null, Ast.Expression | null]): Ast.DialogueState | null;
declare function positiveProposalReply(ctx: ContextInfo): Ast.DialogueState | null;
export { checkSearchResultPreamble, makeRefinementProposal, positiveProposalReply, negativeProposalReply, };
