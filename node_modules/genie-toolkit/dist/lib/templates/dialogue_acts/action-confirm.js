"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.actionConfirmChangeParam = exports.actionConfirmRejectPhrase = exports.actionConfirmAcceptPhrase = exports.makeActionConfirmationPhrase = void 0;
const assert_1 = __importDefault(require("assert"));
const thingtalk_1 = require("thingtalk");
const C = __importStar(require("../ast_manip"));
const state_manip_1 = require("../state_manip");
function makeActionConfirmationPhrase(ctx) {
    return (0, state_manip_1.makeAgentReply)(ctx, (0, state_manip_1.makeSimpleState)(ctx, 'sys_confirm_action', null), null, thingtalk_1.Type.Boolean);
}
exports.makeActionConfirmationPhrase = makeActionConfirmationPhrase;
function actionConfirmAcceptPhrase(ctx) {
    const clone = ctx.clone();
    (0, assert_1.default)(clone.next.confirm === 'accepted');
    clone.next.confirm = 'confirmed';
    clone.state.dialogueAct = 'execute';
    clone.state.dialogueActParam = null;
    return clone.state;
}
exports.actionConfirmAcceptPhrase = actionConfirmAcceptPhrase;
function actionConfirmRejectPhrase(ctx) {
    const clone = ctx.clone();
    clone.next.confirm = 'proposed';
    return (0, state_manip_1.makeSimpleState)(clone, 'cancel', null);
}
exports.actionConfirmRejectPhrase = actionConfirmRejectPhrase;
function actionConfirmChangeParam(ctx, answer) {
    if (!ctx.next)
        return null;
    if (answer instanceof thingtalk_1.Ast.Value)
        return null;
    // don't accept in params that don't apply to this specific action
    const arg = ctx.nextFunction.getArgument(answer.ast.name);
    if (!arg || !arg.is_input || !arg.type.equals(answer.ast.value.getType()))
        return null;
    const clone = ctx.next.clone();
    const action = C.getInvocation(clone);
    if (!action || !(action instanceof thingtalk_1.Ast.Invocation))
        return null;
    (0, state_manip_1.setOrAddInvocationParam)(action, answer.ast.name, answer.ast.value);
    return (0, state_manip_1.addNewItem)(ctx, 'execute', null, 'confirmed', clone);
}
exports.actionConfirmChangeParam = actionConfirmChangeParam;
//# sourceMappingURL=action-confirm.js.map