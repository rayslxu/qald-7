"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.impreciseSlotFillAnswer = exports.preciseSlotFillAnswer = exports.makeSlotFillQuestion = void 0;
const assert_1 = __importDefault(require("assert"));
const thingtalk_1 = require("thingtalk");
const C = __importStar(require("../ast_manip"));
const state_manip_1 = require("../state_manip");
function isGoodSlotFillQuestion(ctx, question) {
    var _a;
    for (const slot of ctx.nextInfo.missingSlots) {
        const schema = (_a = slot.primitive) === null || _a === void 0 ? void 0 : _a.schema;
        if (!schema)
            continue;
        if (C.isSameFunction(question.schema, schema))
            return slot.tag === `in_param.${question.name}`;
    }
    return false;
}
function areGoodSlotFillQuestions(ctx, questions) {
    return questions.every((q) => isGoodSlotFillQuestion(ctx, q));
}
function useRawModeForSlotFill(arg) {
    // raw mode bypasses _all_ natural language understanding
    // it is used to take in free-form inputs like messages or titles
    const type = arg.type;
    if (!type.isString)
        return false;
    // if the developer specified what to do for the argument, it is authoritative
    const annotation = arg.getAnnotation('raw_mode');
    if (annotation !== undefined)
        return annotation;
    // use raw mode for free-form text parameters
    const stringvalues = arg.getAnnotation('string_values');
    if (!stringvalues)
        return false;
    return ['tt:short_free_text', 'tt:long_free_text'].includes(stringvalues);
}
function makeSlotFillQuestion(ctx, questions) {
    if (!areGoodSlotFillQuestions(ctx, questions))
        return null;
    (0, assert_1.default)(questions.length > 0);
    if (questions.length === 1) {
        const slot = ctx.nextInfo.missingSlots.find((slot) => slot.tag === `in_param.${questions[0].name}`);
        (0, assert_1.default)(slot);
        const raw = !!slot.arg && useRawModeForSlotFill(slot.arg);
        return (0, state_manip_1.makeAgentReply)(ctx, (0, state_manip_1.makeSimpleState)(ctx, 'sys_slot_fill', [questions[0].name]), null, slot.type, { raw });
    }
    return (0, state_manip_1.makeAgentReply)(ctx, (0, state_manip_1.makeSimpleState)(ctx, 'sys_slot_fill', questions.map((q) => q.name)));
}
exports.makeSlotFillQuestion = makeSlotFillQuestion;
/**
 * Check if the action has parameters for the `questions`
 */
function isSlotFillAnswerValidForQuestion(action, questions) {
    (0, assert_1.default)(Array.isArray(questions));
    (0, assert_1.default)(action instanceof thingtalk_1.Ast.Invocation);
    return questions.every((question) => {
        for (const in_param of action.in_params) {
            if (in_param.name === question)
                return !in_param.value.isUndefined;
        }
        return false;
    });
}
function fastSemiShallowClone(item) {
    const newExpressions = [];
    const oldExpressions = item.stmt.expression.expressions;
    for (let i = 0; i < oldExpressions.length - 1; i++)
        newExpressions.push(oldExpressions[i]);
    // deep clone only the last expression
    newExpressions.push(oldExpressions[oldExpressions.length - 1].clone());
    const newStmt = new thingtalk_1.Ast.ExpressionStatement(null, new thingtalk_1.Ast.ChainExpression(null, newExpressions, item.stmt.expression.schema));
    return new thingtalk_1.Ast.DialogueHistoryItem(null, newStmt, null, 'accepted');
}
function preciseSlotFillAnswer(ctx, answer) {
    const questions = ctx.state.dialogueActParam;
    (0, assert_1.default)(Array.isArray(questions) && questions.length > 0 && questions.every((q) => typeof q === 'string'));
    if (!isSlotFillAnswerValidForQuestion(answer, questions))
        return null;
    if (!C.isSameFunction(answer.schema, ctx.nextFunction))
        return null;
    (0, assert_1.default)(answer instanceof thingtalk_1.Ast.Invocation);
    (0, assert_1.default)(ctx.next && ctx.nextInfo);
    // check that we don't fill the chain parameter through this path:
    // the chain parameter can only be filled if the agent shows the results
    for (const in_param of answer.in_params) {
        if (in_param.name === ctx.nextInfo.chainParameter &&
            !ctx.nextInfo.chainParameterFilled)
            return null;
    }
    const clone = fastSemiShallowClone(ctx.next);
    const newInvocation = C.getInvocation(clone);
    (0, assert_1.default)(newInvocation instanceof thingtalk_1.Ast.Invocation);
    (0, assert_1.default)(C.isSameFunction(newInvocation.schema, answer.schema));
    // modify in place
    (0, state_manip_1.mergeParameters)(newInvocation, answer);
    return (0, state_manip_1.addNewItem)(ctx, 'execute', null, 'accepted', clone);
}
exports.preciseSlotFillAnswer = preciseSlotFillAnswer;
function impreciseSlotFillAnswer(ctx, answer) {
    var _a;
    const questions = ctx.state.dialogueActParam;
    (0, assert_1.default)(Array.isArray(questions) && questions.length > 0 && questions.every((q) => typeof q === 'string'));
    if (questions.length !== 1)
        return null;
    (0, assert_1.default)(ctx.next && ctx.nextInfo);
    let ipslot;
    if (answer instanceof thingtalk_1.Ast.Value) {
        (0, assert_1.default)(questions.length === 1);
        const slot = ctx.nextInfo.missingSlots.find((slot) => slot.tag === `in_param.${questions[0]}`);
        (0, assert_1.default)(slot);
        const ptype = slot.type;
        if (ptype instanceof thingtalk_1.Type.Array && !(answer instanceof thingtalk_1.Ast.ArrayValue)) {
            const elem = ptype.elem;
            if (elem === thingtalk_1.Type.Date && answer.getType() === thingtalk_1.Type.Time)
                answer = C.makeDateWithDateTime(null, answer);
            answer = new thingtalk_1.Ast.ArrayValue([answer]);
        }
        else {
            if (ptype === thingtalk_1.Type.Date && answer.getType() === thingtalk_1.Type.Time)
                answer = C.makeDateWithDateTime(null, answer);
        }
        if (!thingtalk_1.Type.isAssignable(answer.getType(), ptype, {}, ctx.loader.entitySubTypeMap))
            return null;
        ipslot = {
            schema: slot.primitive.schema,
            ptype: ptype,
            ast: new thingtalk_1.Ast.InputParam(null, questions[0], answer)
        };
    }
    else {
        ipslot = answer;
        if (!questions.some((q) => q === ipslot.ast.name))
            return null;
        if (!C.isSameFunction(answer.schema, ctx.nextFunction))
            return null;
    }
    if (ipslot.ast.name === ctx.nextInfo.chainParameter)
        return null;
    // modify in place
    const clone = ctx.next.clone();
    for (const slot of clone.iterateSlots2()) {
        if (slot instanceof thingtalk_1.Ast.DeviceSelector)
            continue;
        const schema = (_a = slot.primitive) === null || _a === void 0 ? void 0 : _a.schema;
        if (!schema || !C.isSameFunction(schema, ipslot.schema))
            continue;
        if (slot.tag !== `in_param.${ipslot.ast.name}`)
            continue;
        if (!(slot.get() instanceof thingtalk_1.Ast.UndefinedValue))
            continue;
        slot.set(ipslot.ast.value);
    }
    return (0, state_manip_1.addNewItem)(ctx, 'execute', null, 'accepted', clone);
}
exports.impreciseSlotFillAnswer = impreciseSlotFillAnswer;
//# sourceMappingURL=slot-fill.js.map