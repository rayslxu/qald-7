"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.negativeProposalReply = exports.positiveProposalReply = exports.makeRefinementProposal = exports.checkSearchResultPreamble = exports.negativeProposalReplyKeyFn = void 0;
const assert_1 = __importDefault(require("assert"));
const thingtalk_1 = require("thingtalk");
const C = __importStar(require("../ast_manip"));
const state_manip_1 = require("../state_manip");
const refinement_helpers_1 = require("./refinement-helpers");
function negativeProposalReplyKeyFn([preamble, request]) {
    (0, assert_1.default)(preamble || request);
    if (preamble && request)
        (0, assert_1.default)(C.isSameFunction(preamble.schema, request.schema));
    return {
        functionName: preamble ? preamble.schema.qualifiedName : request.schema.qualifiedName
    };
}
exports.negativeProposalReplyKeyFn = negativeProposalReplyKeyFn;
function checkSearchResultPreamble(ctx, base, num, more) {
    if (!C.isSameFunction(base, ctx.currentFunction))
        return null;
    if (num !== null) {
        if (!num.equals(ctx.current.results.count))
            return null;
        if (more !== ctx.current.results.more)
            return null;
    }
    return ctx;
}
exports.checkSearchResultPreamble = checkSearchResultPreamble;
/**
 * Agent act: the agent proposes to execute a different query statement (a refinement of
 * the current query).
 */
function makeRefinementProposal(ctx, proposal) {
    // this if() can be false only with weird primitive templates
    if (!(proposal instanceof thingtalk_1.Ast.FilterExpression && proposal.expression instanceof thingtalk_1.Ast.InvocationExpression))
        return null;
    if (!C.isSameFunction(ctx.currentFunction, proposal.schema))
        return null;
    const currentStmt = ctx.current.stmt;
    (0, assert_1.default)(currentStmt.stream === null);
    const ctxFilterTable = C.findFilterExpression(currentStmt.expression);
    if (ctxFilterTable === null)
        return null;
    const refinedFilter = (0, refinement_helpers_1.refineFilterToAnswerQuestion)(ctxFilterTable.filter, proposal.filter);
    if (refinedFilter === null)
        return null;
    const sysState = (0, state_manip_1.addQuery)(ctx, 'sys_propose_refined_query', proposal, 'proposed');
    return (0, state_manip_1.makeAgentReply)(ctx, sysState, proposal);
}
exports.makeRefinementProposal = makeRefinementProposal;
function negativeProposalReply(ctx, [preamble, request]) {
    // discard if we have a preamble, because it's too complicated to check if the preamble is meaningful
    if (preamble !== null)
        return null;
    if (!(request instanceof thingtalk_1.Ast.FilterExpression))
        return null;
    const proposal = ctx.aux;
    if (!C.isSameFunction(ctx.currentFunction, request.schema))
        return null;
    const refined = (0, refinement_helpers_1.refineFilterToChangeFilter)(proposal.filter, request.filter);
    if (refined === null)
        return null;
    return (0, refinement_helpers_1.proposalReply)(ctx, request, refinement_helpers_1.refineFilterToAnswerQuestion);
}
exports.negativeProposalReply = negativeProposalReply;
function positiveProposalReply(ctx) {
    const proposal = ctx.aux;
    return (0, refinement_helpers_1.proposalReply)(ctx, proposal, refinement_helpers_1.refineFilterToAnswerQuestion);
}
exports.positiveProposalReply = positiveProposalReply;
//# sourceMappingURL=refinement.js.map