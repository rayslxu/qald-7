"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addStream = exports.makeMonitor = void 0;
const thingtalk_1 = require("thingtalk");
const C = __importStar(require("../ast_manip"));
const state_manip_1 = require("../state_manip");
function makeMonitor(ctx, options) {
    const currentExpression = ctx.current.stmt.expression;
    if (currentExpression.first.schema.functionType === 'stream')
        return null;
    const stream = C.tableToStream(currentExpression, options);
    if (!stream)
        return null;
    // throw away any planned action that we have
    return (0, state_manip_1.addNewStatement)(ctx, 'execute', null, 'accepted', stream);
}
exports.makeMonitor = makeMonitor;
function addStream(ctx, stream) {
    const currentExpression = ctx.current.stmt.expression;
    if (currentExpression.first.schema.functionType === 'stream')
        return null;
    // no self-joins
    if (C.isSameFunction(currentExpression.schema, stream.schema))
        return null;
    return (0, state_manip_1.addNewStatement)(ctx, 'execute', null, 'accepted', new thingtalk_1.Ast.ChainExpression(null, [stream, currentExpression], C.resolveChain([stream, currentExpression])));
}
exports.addStream = addStream;
//# sourceMappingURL=streams.js.map