import { Ast } from 'thingtalk';
import * as C from '../ast_manip';
import { SlotBag } from '../slot_bag';
import { ContextInfo } from '../state_manip';
export declare type ActionSuccessPhraseWithResult = [Ast.Expression | null, SlotBag];
export declare function actionSuccessPhraseWithResultKeyFn([expression, bag]: ActionSuccessPhraseWithResult): {
    functionName: string;
};
declare function makeThingpediaActionSuccessPhrase(ctx: ContextInfo, info: SlotBag): import("../../sentence-generator/types").AgentReplyRecord;
declare function makeCompleteActionSuccessPhrase(ctx: ContextInfo, action: Ast.Expression, info: SlotBag | null): import("../../sentence-generator/types").AgentReplyRecord | null;
declare function makeGenericActionSuccessPhrase(ctx: ContextInfo): import("../../sentence-generator/types").AgentReplyRecord;
export interface ErrorMessage {
    code: string;
    bag: SlotBag;
}
declare function checkThingpediaErrorMessage(ctx: ContextInfo, msg: ErrorMessage): ContextInfo | null;
declare function checkActionErrorMessage(ctx: ContextInfo, action: Ast.Invocation): ContextInfo | null;
declare function makeActionErrorPhrase(ctx: ContextInfo, questions: C.ParamSlot[]): import("../../sentence-generator/types").AgentReplyRecord | null;
declare function actionErrorChangeParam(ctx: ContextInfo, answer: Ast.Value | C.InputParamSlot): Ast.DialogueState | null;
declare function actionSuccessQuestion(ctx: ContextInfo, questions: C.ParamSlot[]): Ast.DialogueState | null;
export { makeThingpediaActionSuccessPhrase, makeCompleteActionSuccessPhrase, makeGenericActionSuccessPhrase, checkThingpediaErrorMessage, checkActionErrorMessage, makeActionErrorPhrase, actionErrorChangeParam, actionSuccessQuestion };
