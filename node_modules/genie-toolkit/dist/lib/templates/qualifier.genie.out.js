"use strict";
// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2019-2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Silei Xu <silei@cs.stanford.edu>
//         Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$load = exports.two_clean_filter_table = exports.two_which_filter_table = exports.two_with_filter_table = exports.one_clean_filter_table = exports.one_which_filter_table = exports.one_with_filter_table = exports.qualified_preposition_filter = exports.qualified_reverse_verb_filter = exports.qualified_apv_filter = exports.qualified_npv_filter = exports.qualified_pvp_filter = exports.qualified_avp_filter = exports.qualified_npi_filter = exports.qualified_npp_filter = exports.qualified_with_filter = void 0;
const $runtime = __importStar(require("../sentence-generator/runtime"));
const thingtalk_1 = require("thingtalk");
const C = __importStar(require("./ast_manip"));
exports.qualified_with_filter = "qualified_with_filter";
exports.qualified_npp_filter = "qualified_npp_filter";
exports.qualified_npi_filter = "qualified_npi_filter";
exports.qualified_avp_filter = "qualified_avp_filter";
exports.qualified_pvp_filter = "qualified_pvp_filter";
exports.qualified_npv_filter = "qualified_npv_filter";
exports.qualified_apv_filter = "qualified_apv_filter";
exports.qualified_reverse_verb_filter = "qualified_reverse_verb_filter";
exports.qualified_preposition_filter = "qualified_preposition_filter";
exports.one_with_filter_table = "one_with_filter_table";
exports.one_which_filter_table = "one_which_filter_table";
exports.one_clean_filter_table = "one_clean_filter_table";
exports.two_with_filter_table = "two_with_filter_table";
exports.two_which_filter_table = "two_which_filter_table";
exports.two_clean_filter_table = "two_clean_filter_table";
/**
 * Load the templates in this file.
 *
 * This is an autogenerated method that will be called by the {@link SentenceGenerator}
 * when the templates are imported.
 */
async function $load($options, $locale, $grammar, $loader) {
    for (const qualifier of $loader.qualifiers) {
        if (qualifier.pslot.type === thingtalk_1.Type.Date) {
            $grammar.declareSymbol("time_qualifier");
            $grammar.addRule("time_qualifier", [new $runtime.NonTerminal("constant_date_range", "range", undefined)], $locale._("in ${range}"), ((range) => C.makeWikidataTimeFilter(qualifier, '==', range)), C.filterKeyFn, {});
            $grammar.addRule("time_qualifier", [new $runtime.NonTerminal("constant_Date", "date", undefined)], $locale._("{before|earlier than} ${date}"), ((date) => C.makeWikidataTimeFilter(qualifier, '<=', [date])), C.filterKeyFn, {});
            $grammar.addRule("time_qualifier", [new $runtime.NonTerminal("constant_Date", "date", undefined)], $locale._("{after|later than} ${date}"), ((date) => C.makeWikidataTimeFilter(qualifier, '>=', [date])), C.filterKeyFn, {});
        }
    }
    $grammar.declareSymbol("qualified_with_filter");
    $grammar.addRule("qualified_with_filter", [new $runtime.NonTerminal("with_filter", "filter", undefined), new $runtime.NonTerminal("time_qualifier", "qualifier", ["type", 0, "type"])], $locale._("${filter} ${qualifier}"), ((filter, qualifier) => C.makeQualifiedFilter(filter, qualifier)), C.filterKeyFn, {});
    $grammar.declareSymbol("qualified_npp_filter");
    $grammar.addRule("qualified_npp_filter", [new $runtime.NonTerminal("npp_filter", "filter", undefined), new $runtime.NonTerminal("time_qualifier", "qualifier", ["type", 0, "type"])], $locale._("${filter} ${qualifier}"), ((filter, qualifier) => C.makeQualifiedFilter(filter, qualifier)), C.filterKeyFn, {});
    $grammar.declareSymbol("qualified_npp_filter");
    $grammar.addRule("qualified_npp_filter", [new $runtime.NonTerminal("npp_filter", "filter", undefined), new $runtime.NonTerminal("time_qualifier", "qualifier", ["type", 0, "type"])], $locale._("${filter} ${qualifier}"), ((filter, qualifier) => C.makeQualifiedFilter(filter, qualifier)), C.filterKeyFn, {});
    $grammar.declareSymbol("qualified_npi_filter");
    $grammar.addRule("qualified_npi_filter", [new $runtime.NonTerminal("npi_filter", "filter", undefined), new $runtime.NonTerminal("time_qualifier", "qualifier", ["type", 0, "type"])], $locale._("${filter} ${qualifier}"), ((filter, qualifier) => C.makeQualifiedFilter(filter, qualifier)), C.filterKeyFn, {});
    $grammar.declareSymbol("qualified_avp_filter");
    $grammar.addRule("qualified_avp_filter", [new $runtime.NonTerminal("avp_filter", "filter", undefined), new $runtime.NonTerminal("time_qualifier", "qualifier", ["type", 0, "type"])], $locale._("${filter} ${qualifier}"), ((filter, qualifier) => C.makeQualifiedFilter(filter, qualifier)), C.filterKeyFn, {});
    $grammar.declareSymbol("qualified_pvp_filter");
    $grammar.addRule("qualified_pvp_filter", [new $runtime.NonTerminal("pvp_filter", "filter", undefined), new $runtime.NonTerminal("time_qualifier", "qualifier", ["type", 0, "type"])], $locale._("${filter} ${qualifier}"), ((filter, qualifier) => C.makeQualifiedFilter(filter, qualifier)), C.filterKeyFn, {});
    $grammar.declareSymbol("qualified_npv_filter");
    $grammar.addRule("qualified_npv_filter", [new $runtime.NonTerminal("npv_filter", "filter", undefined), new $runtime.NonTerminal("time_qualifier", "qualifier", ["type", 0, "type"])], $locale._("${filter} ${qualifier}"), ((filter, qualifier) => C.makeQualifiedFilter(filter, qualifier)), C.filterKeyFn, {});
    $grammar.declareSymbol("qualified_apv_filter");
    $grammar.addRule("qualified_apv_filter", [new $runtime.NonTerminal("apv_filter", "filter", undefined), new $runtime.NonTerminal("time_qualifier", "qualifier", ["type", 0, "type"])], $locale._("${filter} ${qualifier}"), ((filter, qualifier) => C.makeQualifiedFilter(filter, qualifier)), C.filterKeyFn, {});
    $grammar.declareSymbol("qualified_reverse_verb_filter");
    $grammar.addRule("qualified_reverse_verb_filter", [new $runtime.NonTerminal("reverse_verb_filter", "filter", undefined), new $runtime.NonTerminal("time_qualifier", "qualifier", ["type", 0, "type"])], $locale._("${filter} ${qualifier}"), ((filter, qualifier) => C.makeQualifiedFilter(filter, qualifier)), C.filterKeyFn, {});
    $grammar.declareSymbol("qualified_preposition_filter");
    $grammar.addRule("qualified_preposition_filter", [new $runtime.NonTerminal("preposition_filter", "filter", undefined), new $runtime.NonTerminal("time_qualifier", "qualifier", ["type", 0, "type"])], $locale._("${filter} ${qualifier}"), ((filter, qualifier) => C.makeQualifiedFilter(filter, qualifier)), C.filterKeyFn, {});
    $grammar.declareSymbol("one_with_filter_table");
    if (!$options.flags.nofilter) {
        $grammar.addRule("one_with_filter_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("qualified_with_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {with|having} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("one_with_filter_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("qualified_npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {with|having} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
    }
    $grammar.declareSymbol("one_which_filter_table");
    if (!$options.flags.nofilter) {
        $grammar.addRule("one_which_filter_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("qualified_npi_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("one_which_filter_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("qualified_avp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("one_which_filter_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("qualified_apv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("one_which_filter_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("qualified_npv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("one_which_filter_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("qualified_npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} have ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("one_which_filter_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("qualified_with_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} have ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("one_which_filter_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("qualified_reverse_verb_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
    }
    $grammar.declareSymbol("one_clean_filter_table");
    if (!$options.flags.nofilter) {
        $grammar.addRule("one_clean_filter_table", [new $runtime.NonTerminal("qualified_apv_filter", "filter", undefined), new $runtime.NonTerminal("complete_table", "table", ["functionName", 0, "functionName"])], $locale._("${filter} ${table}"), ((filter, table) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("one_clean_filter_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("qualified_pvp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("one_clean_filter_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("qualified_preposition_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
    }
    $grammar.declareSymbol("two_with_filter_table");
    if (!$options.flags.nofilter) {
        $grammar.addRule("two_with_filter_table", [new $runtime.NonTerminal("one_with_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_with_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} and ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_with_filter_table", [new $runtime.NonTerminal("one_which_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_with_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {and having|and with|, with|and have} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_with_filter_table", [new $runtime.NonTerminal("one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_with_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {with|having|that have} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_with_filter_table", [new $runtime.NonTerminal("one_with_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} and ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_with_filter_table", [new $runtime.NonTerminal("one_which_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {and having|and with|, with|and have} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_with_filter_table", [new $runtime.NonTerminal("one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {with|having|that have} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
    }
    if (!$options.flags.nofilter) {
        $grammar.addRule("two_with_filter_table", [new $runtime.NonTerminal("qualified_apv_filter", "filter", undefined), new $runtime.NonTerminal("one_with_filter_table", "table", ["functionName", 0, "functionName"])], $locale._("${filter} ${table}"), ((filter, table) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
    }
    $grammar.declareSymbol("two_which_filter_table");
    if (!$options.flags.nofilter) {
        $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_with_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_npi_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {which|that} {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_with_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_avp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {which|that} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_with_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_apv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {which|that} {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_with_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_npv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {which|that} {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_with_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {which|that} have ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_with_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_with_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {which|that} have ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_with_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_reverse_verb_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {which|that} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_which_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_npi_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} and {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_which_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_avp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} and ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_which_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_apv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} and {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_which_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_npv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} and {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_which_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} and have ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_which_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_with_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} and have ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_which_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_reverse_verb_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} and ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_npi_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {which|that} {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_avp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {which|that} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_apv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {which|that} {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_npv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {which|that} {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {which|that} have ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_with_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {which|that} have ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_reverse_verb_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {which|that} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        if (!$options.flags.nofilter) {
            $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("qualified_apv_filter", "filter", undefined), new $runtime.NonTerminal("one_which_filter_table", "table", ["functionName", 0, "functionName"])], $locale._("${filter} ${table}"), ((filter, table) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        }
    }
    $grammar.declareSymbol("two_clean_filter_table");
    if (!$options.flags.nofilter) {
        $grammar.addRule("two_clean_filter_table", [new $runtime.NonTerminal("qualified_apv_filter", "filter", undefined), new $runtime.NonTerminal("one_clean_filter_table", "table", ["functionName", 0, "functionName"])], $locale._("${filter} ${table}"), ((filter, table) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_clean_filter_table", [new $runtime.NonTerminal("one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_pvp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_clean_filter_table", [new $runtime.NonTerminal("one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_preposition_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
    }
}
exports.$load = $load;
;
//# sourceMappingURL=qualifier.genie.out.js.map