"use strict";
// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2021 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Silei Xu <silei@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$load = exports.complete_table = exports.generic_join_table = exports.self_join_table = exports.out_param_symmetric = exports.short_phrase_table = exports.each_other = exports.pronoun_the_second = exports.pronoun_the_first = void 0;
const $runtime = __importStar(require("../sentence-generator/runtime"));
const C = __importStar(require("./ast_manip"));
exports.pronoun_the_first = "pronoun_the_first";
exports.pronoun_the_second = "pronoun_the_second";
exports.each_other = "each_other";
exports.short_phrase_table = "short_phrase_table";
exports.out_param_symmetric = "out_param_symmetric";
exports.self_join_table = "self_join_table";
exports.generic_join_table = "generic_join_table";
exports.complete_table = "complete_table";
/**
 * Load the templates in this file.
 *
 * This is an autogenerated method that will be called by the {@link SentenceGenerator}
 * when the templates are imported.
 */
async function $load($options, $locale, $grammar, $loader) {
    $grammar.declareSymbol("pronoun_the_first");
    $grammar.addRule("pronoun_the_first", [], $locale._("the first"), (() => "the first"), undefined, { identity: (true) });
    $grammar.addRule("pronoun_the_first", [], $locale._("the former"), (() => "the former"), undefined, { identity: (true) });
    $grammar.declareSymbol("pronoun_the_second");
    $grammar.addRule("pronoun_the_second", [], $locale._("the second"), (() => "the second"), undefined, { identity: (true) });
    $grammar.addRule("pronoun_the_second", [], $locale._("the latter"), (() => "the latter"), undefined, { identity: (true) });
    $grammar.declareSymbol("each_other");
    $grammar.addRule("each_other", [], $locale._("each other"), (() => "each other"), undefined, { identity: (true) });
    $grammar.addRule("each_other", [], $locale._("one another"), (() => "one another"), undefined, { identity: (true) });
    $grammar.declareSymbol("short_phrase_table");
    $grammar.addRule("short_phrase_table", [new $runtime.NonTerminal("complete_table", undefined, undefined)], "${complete_table}", (($0) => { return $0; }), C.expressionKeyFn, { identity: (true) });
    $grammar.addRule("short_phrase_table", [new $runtime.NonTerminal("one_clean_filter_table", undefined, undefined)], "${one_clean_filter_table}", (($0) => { return $0; }), C.expressionKeyFn, { identity: (true) });
    $grammar.declareSymbol("out_param_symmetric");
    $grammar.addRule("out_param_symmetric", [new $runtime.NonTerminal("out_param_Any", undefined, ["symmetric", (true)])], "${out_param_Any}", (($0) => { return $0; }), undefined, { identity: (true) });
    $grammar.declareSymbol("self_join_table");
    $grammar.addRule("self_join_table", [new $runtime.NonTerminal("short_phrase_table", "table", undefined), new $runtime.NonTerminal("pronoun_the_first", undefined, undefined), new $runtime.NonTerminal("out_param_Any", "param", ["functionName", 0, "functionName"]), new $runtime.NonTerminal("pronoun_the_second", undefined, undefined)], $locale._("pairs of ${table} {such that|that} ${pronoun_the_first} {is|are|was|were} {the|a|} ${param} of ${pronoun_the_second}"), ((table, $0, param, $1) => C.makeSelfJoinFromParam($loader, table, param)), C.expressionKeyFn, {});
    $grammar.addRule("self_join_table", [new $runtime.NonTerminal("short_phrase_table", "table", undefined), new $runtime.NonTerminal("pronoun_the_first", undefined, undefined), new $runtime.NonTerminal("pronoun_the_second", undefined, undefined), new $runtime.NonTerminal("out_param_Any", "param", ["functionName", 0, "functionName"])], $locale._("pairs of ${table} {such that|that} ${pronoun_the_first} {has|have|had} ${pronoun_the_second} as {the|a|} ${param}"), ((table, $0, $1, param) => C.makeSelfJoinFromParam($loader, table, param)), C.expressionKeyFn, {});
    $grammar.addRule("self_join_table", [new $runtime.NonTerminal("short_phrase_table", "table", undefined), new $runtime.NonTerminal("pronoun_the_first", undefined, undefined), new $runtime.NonTerminal("npp_join_condition", "condition", ["functionName", 0, "functionName"])], $locale._("pairs of ${table} {such that|that} ${pronoun_the_first} {has|have|had} ${condition}"), ((table, $0, condition) => C.makeSelfJoin(table, condition)), C.expressionKeyFn, {});
    $grammar.addRule("self_join_table", [new $runtime.NonTerminal("short_phrase_table", "table", undefined), new $runtime.NonTerminal("pronoun_the_first", undefined, undefined), new $runtime.NonTerminal("npi_join_condition", "condition", ["functionName", 0, "functionName"])], $locale._("pairs of ${table} {such that|that} ${pronoun_the_first} {is|are|was|were} {the|a|} ${condition}"), ((table, $0, condition) => C.makeSelfJoin(table, condition)), C.expressionKeyFn, {});
    $grammar.addRule("self_join_table", [new $runtime.NonTerminal("short_phrase_table", "table", undefined), new $runtime.NonTerminal("pronoun_the_first", undefined, undefined), new $runtime.NonTerminal("pvp_join_condition", "condition", ["functionName", 0, "functionName"])], $locale._("pairs of ${table} {such that|that} ${pronoun_the_first} {is|are|was|were} ${condition}"), ((table, $0, condition) => C.makeSelfJoin(table, condition)), C.expressionKeyFn, {});
    $grammar.addRule("self_join_table", [new $runtime.NonTerminal("short_phrase_table", "table", undefined), new $runtime.NonTerminal("pronoun_the_first", undefined, undefined), new $runtime.NonTerminal("preposition_join_condition", "condition", ["functionName", 0, "functionName"])], $locale._("pairs of ${table} {such that|that} ${pronoun_the_first} {is|are|was|were} ${condition}"), ((table, $0, condition) => C.makeSelfJoin(table, condition)), C.expressionKeyFn, {});
    $grammar.addRule("self_join_table", [new $runtime.NonTerminal("short_phrase_table", "table", undefined), new $runtime.NonTerminal("pronoun_the_first", undefined, undefined), new $runtime.NonTerminal("avp_join_condition", "condition", ["functionName", 0, "functionName"])], $locale._("pairs of ${table} {such that|that} ${pronoun_the_first} ${condition}"), ((table, $0, condition) => C.makeSelfJoin(table, condition)), C.expressionKeyFn, {});
    $grammar.addRule("self_join_table", [new $runtime.NonTerminal("short_phrase_table", "table", undefined), new $runtime.NonTerminal("pronoun_the_first", undefined, undefined), new $runtime.NonTerminal("reverse_verb_join_condition", "condition", ["functionName", 0, "functionName"])], $locale._("pairs of ${table} {such that|that} ${pronoun_the_first} ${condition}"), ((table, $0, condition) => C.makeSelfJoin(table, condition)), C.expressionKeyFn, {});
    $grammar.addRule("self_join_table", [new $runtime.NonTerminal("short_phrase_table", "table", undefined), new $runtime.NonTerminal("out_param_symmetric", "param", ["functionName", 0, "functionName"]), new $runtime.NonTerminal("each_other", undefined, undefined)], $locale._("${table} {pairs|} {that|which|who} {are|were} {the|} ${param} of ${each_other}"), ((table, param, $0) => C.makeSelfJoinFromParam($loader, table, param)), C.expressionKeyFn, {});
    $grammar.addRule("self_join_table", [new $runtime.NonTerminal("short_phrase_table", "table", undefined), new $runtime.NonTerminal("npi_symmetric_join_condition", "condition", ["functionName", 0, "functionName"])], $locale._("{pairs of|} ${table} {that|which|who} {are|were} {the|} ${condition}"), ((table, condition) => C.makeSelfJoin(table, condition)), C.expressionKeyFn, {});
    $grammar.addRule("self_join_table", [new $runtime.NonTerminal("short_phrase_table", "table", undefined), new $runtime.NonTerminal("pvp_symmetric_join_condition", "condition", ["functionName", 0, "functionName"])], $locale._("{pairs of|} ${table} {that|which|who} {are|were} ${condition}"), ((table, condition) => C.makeSelfJoin(table, condition)), C.expressionKeyFn, {});
    $grammar.addRule("self_join_table", [new $runtime.NonTerminal("short_phrase_table", "table", undefined), new $runtime.NonTerminal("preposition_symmetric_join_condition", "condition", ["functionName", 0, "functionName"])], $locale._("{pairs of|} ${table} {that|which|who} {are|were} ${condition}"), ((table, condition) => C.makeSelfJoin(table, condition)), C.expressionKeyFn, {});
    $grammar.addRule("self_join_table", [new $runtime.NonTerminal("short_phrase_table", "table", undefined), new $runtime.NonTerminal("avp_symmetric_join_condition", "condition", ["functionName", 0, "functionName"])], $locale._("{pairs of|} ${table} {that|which|who} ${condition}"), ((table, condition) => C.makeSelfJoin(table, condition)), C.expressionKeyFn, {});
    $grammar.addRule("self_join_table", [new $runtime.NonTerminal("short_phrase_table", "table", undefined), new $runtime.NonTerminal("reverse_verb_symmetric_join_condition", "condition", ["functionName", 0, "functionName"])], $locale._("{pairs of|} ${table} {that|which|who} ${condition}"), ((table, condition) => C.makeSelfJoin(table, condition)), C.expressionKeyFn, {});
    $grammar.declareSymbol("generic_join_table");
    $grammar.addRule("generic_join_table", [new $runtime.NonTerminal("short_phrase_table", "table1", undefined), new $runtime.NonTerminal("base_table_hidden", "table2", undefined), new $runtime.NonTerminal("out_param_Any", "param2", ["functionName", 1, "functionName"]), new $runtime.NonTerminal("out_param_Any", "param1", ["functionName", 0, "functionName"])], $locale._("${table1} {and|with} the ${table2} ${param2} of {its|their} ${param1}"), ((table1, table2, param2, param1) => C.makeGenericJoin($loader, table1, param1, table2, param2)), undefined, {});
    $grammar.declareSymbol("complete_table");
    if (!$options.flags.notablejoin) {
        $grammar.addRule("complete_table", [new $runtime.NonTerminal("self_join_table", undefined, undefined)], "${self_join_table}", (($0) => { return $0; }), C.expressionKeyFn, { identity: (true) });
    }
    if (!$options.flags.notablejoin) {
        $grammar.addRule("complete_table", [new $runtime.NonTerminal("generic_join_table", undefined, undefined)], "${generic_join_table}", (($0) => { return $0; }), C.expressionKeyFn, { identity: (true) });
    }
}
exports.$load = $load;
;
//# sourceMappingURL=joins.genie.out.js.map