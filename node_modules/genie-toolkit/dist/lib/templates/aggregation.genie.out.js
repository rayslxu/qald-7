"use strict";
// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2019-2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$load = exports.projection_Any = exports.projection_Number = void 0;
const $runtime = __importStar(require("../sentence-generator/runtime"));
const assert_1 = __importDefault(require("assert"));
const thingtalk_1 = require("thingtalk");
const C = __importStar(require("./ast_manip"));
exports.projection_Number = "projection_Number";
exports.projection_Any = "projection_Any";
/**
 * Load the templates in this file.
 *
 * This is an autogenerated method that will be called by the {@link SentenceGenerator}
 * when the templates are imported.
 */
async function $load($options, $locale, $grammar, $loader) {
    $grammar.declareSymbol("projection_Number");
    if ($options.flags.aggregation) {
        $grammar.addRule("projection_Number", [new $runtime.NonTerminal("complete_table", "t", ["is_list", (true)])], $locale._("the {number|total number|count} of {|the|this|that} ${t}"), ((t) => {
            (0, assert_1.default)(t.schema.is_list);
            const newSchema = t.schema.filterArguments((arg) => arg.direction !== thingtalk_1.Ast.ArgDirection.OUT)
                .addArguments([new thingtalk_1.Ast.ArgumentDef(null, thingtalk_1.Ast.ArgDirection.OUT, 'count', thingtalk_1.Type.Number)]);
            newSchema.is_list = false;
            const agg = new thingtalk_1.Ast.AggregationExpression(null, t, '*', 'count', newSchema);
            return new thingtalk_1.Ast.ProjectionExpression(null, agg, ['count'], [], [], newSchema);
        }), C.expressionKeyFn, {});
    }
    $grammar.declareSymbol("projection_Any");
    if ($options.flags.aggregation) {
        $grammar.addRule("projection_Any", [new $runtime.NonTerminal("thingpedia_complete_query", "q", undefined)], "${q}", ((q) => {
            if (!(q instanceof thingtalk_1.Ast.AggregationExpression))
                return null;
            return q;
        }), C.expressionKeyFn, {});
        if (!$options.flags.schema_org) {
            $grammar.addRule("projection_Any", [new $runtime.NonTerminal("out_param_Any", "p", ["is_numeric", (true)]), new $runtime.NonTerminal("complete_table", "t", ["functionName", 0, "functionName"])], $locale._("the total ${p} of {|the|this|that} ${t}"), ((p, t) => {
                const arg = t.schema.getArgument(p.name);
                if (!arg || arg.is_input || !arg.type.isNumeric())
                    return null;
                if (!t.schema.is_list)
                    return null;
                const newSchema = t.schema.filterArguments((arg) => arg.direction !== thingtalk_1.Ast.ArgDirection.OUT || arg.name === p.name);
                newSchema.is_list = false;
                const agg = new thingtalk_1.Ast.AggregationExpression(null, t, p.name, 'sum', newSchema);
                return new thingtalk_1.Ast.ProjectionExpression(null, agg, [p.name], [], [], newSchema);
            }), C.expressionKeyFn, {});
        }
        if (!$options.flags.turking) {
            $grammar.addRule("projection_Any", [new $runtime.NonTerminal("out_param_Any", "p", ["is_numeric", (true)]), new $runtime.NonTerminal("complete_table", "t", ["functionName", 0, "functionName"])], $locale._("the {average|mean} ${p} of {|the|this|that} ${t}"), ((p, t) => {
                const arg = t.schema.getArgument(p.name);
                if (!arg || arg.is_input || !arg.type.isNumeric())
                    return null;
                if (!t.schema.is_list)
                    return null;
                const newSchema = t.schema.filterArguments((arg) => arg.direction !== thingtalk_1.Ast.ArgDirection.OUT || arg.name === p.name);
                newSchema.is_list = false;
                const agg = new thingtalk_1.Ast.AggregationExpression(null, t, p.name, 'avg', newSchema);
                return new thingtalk_1.Ast.ProjectionExpression(null, agg, [p.name], [], [], newSchema);
            }), C.expressionKeyFn, {});
        }
        if ($options.flags.turking) {
            $grammar.addRule("projection_Any", [new $runtime.NonTerminal("out_param_Any", "p", ["is_numeric", (true)]), new $runtime.NonTerminal("complete_table", "t", ["functionName", 0, "functionName"])], $locale._("the average ${p} of {|the|this|that} ${t}"), ((p, t) => {
                const arg = t.schema.getArgument(p.name);
                if (!arg || arg.is_input || !arg.type.isNumeric())
                    return null;
                if (!t.schema.is_list)
                    return null;
                const newSchema = t.schema.filterArguments((arg) => arg.direction !== thingtalk_1.Ast.ArgDirection.OUT || arg.name === p.name);
                newSchema.is_list = false;
                const agg = new thingtalk_1.Ast.AggregationExpression(null, t, p.name, 'avg', newSchema);
                return new thingtalk_1.Ast.ProjectionExpression(null, agg, [p.name], [], [], newSchema);
            }), C.expressionKeyFn, {});
        }
        $grammar.addRule("projection_Any", [new $runtime.NonTerminal("out_param_Any", "p", ["is_numeric", (true)]), new $runtime.NonTerminal("complete_table", "t", ["functionName", 0, "functionName"])], $locale._("the {minimum|lowest} ${p} of {|the|this|that} ${t}"), ((p, t) => {
            const arg = t.schema.getArgument(p.name);
            if (!arg || arg.is_input || !arg.type.isNumeric())
                return null;
            if (!t.schema.is_list)
                return null;
            const newSchema = t.schema.filterArguments((arg) => arg.direction !== thingtalk_1.Ast.ArgDirection.OUT || arg.name === p.name);
            newSchema.is_list = false;
            const agg = new thingtalk_1.Ast.AggregationExpression(null, t, p.name, 'min', newSchema);
            return new thingtalk_1.Ast.ProjectionExpression(null, agg, [p.name], [], [], newSchema);
        }), C.expressionKeyFn, {});
        $grammar.addRule("projection_Any", [new $runtime.NonTerminal("out_param_Any", "p", ["is_numeric", (true)]), new $runtime.NonTerminal("complete_table", "t", ["functionName", 0, "functionName"])], $locale._("the {maximum|highest} ${p} of {|the|this|that} ${t}"), ((p, t) => {
            const arg = t.schema.getArgument(p.name);
            if (!arg || arg.is_input || !arg.type.isNumeric())
                return null;
            if (!t.schema.is_list)
                return null;
            const newSchema = t.schema.filterArguments((arg) => arg.direction !== thingtalk_1.Ast.ArgDirection.OUT || arg.name === p.name);
            newSchema.is_list = false;
            const agg = new thingtalk_1.Ast.AggregationExpression(null, t, p.name, 'max', newSchema);
            return new thingtalk_1.Ast.ProjectionExpression(null, agg, [p.name], [], [], newSchema);
        }), C.expressionKeyFn, {});
    }
}
exports.$load = $load;
;
//# sourceMappingURL=aggregation.genie.out.js.map