"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2019-2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.coref_constant = exports.list_context_coref = exports.context_coref = exports.same_sentence_coref = exports.thingpedia_user_question = exports.thingpedia_slot_fill_question = exports.thingpedia_search_question = exports.thingpedia_who_question = exports.thingpedia_complete_program = exports.thingpedia_complete_join_action_past = exports.thingpedia_complete_action_past = exports.thingpedia_complete_action = exports.thingpedia_complete_stream = exports.thingpedia_complete_get_command = exports.thingpedia_complete_query = exports.constant_Numeric = exports.constant_Any = exports.constant_Measure_dBm = exports.constant_Measure_dB = exports.constant_Measure_lm = exports.constant_Measure_lx = exports.constant_Measure_W = exports.constant_Measure_kcal = exports.constant_Measure_Pa = exports.constant_Measure_mps = exports.constant_Measure_m3 = exports.constant_Measure_m2 = exports.constant_Measure_m = exports.constant_Measure_C = exports.constant_Measure_kg = exports.constant_Measure_byte = exports.constant_Measure_ms = exports.constant_RecurrentTimeSpecification = exports.constant_Boolean = exports.constant_Entity__tt__device = exports.constant_Entity__tt__program = exports.constant_Entity__tt__function = exports.constant_Entity__tt__picture = exports.constant_Location = exports.constant_Date = exports.constant_Time = exports.constant_Currency = exports.constant_Entity__tt__path_name = exports.constant_Entity__tt__email_address = exports.constant_Entity__tt__phone_number = exports.constant_Entity__tt__hashtag = exports.constant_Entity__tt__username = exports.constant_Entity__tt__url = exports.constant_String = exports.constant_Number = void 0;
exports.npi_symmetric_join_condition = exports.npi_join_condition = exports.npi_filter = exports.npp_boolean_projection = exports.coref_npp_input_param = exports.coref_npp_filter = exports.npp_argminmax = exports.npp_input_param = exports.npp_symmetric_join_condition = exports.npp_join_condition = exports.npp_filter = exports.each_other = exports.pronoun_the_second = exports.pronoun_the_first = exports.both_prefix = exports.input_param = exports.out_param_apv = exports.out_param_npv = exports.out_param_pvp = exports.out_param_avp = exports.out_param_npi = exports.out_param_npp = exports.out_param_NotArray__Any = exports.out_param_ArrayCount = exports.out_param_Array__Compound = exports.out_param_Array__Any = exports.the_out_param_Any = exports.out_param_Any_hidden = exports.out_param_Any = exports.get_command_coref_list_context = exports.get_command_coref_context = exports.get_command_coref_same_sentence = exports.query_coref_list_context = exports.query_coref_context = exports.query_coref_same_sentence = exports.action_coref_list_context = exports.action_coref_context = exports.action_coref_same_sentence = exports.stream_coref_list_context = exports.stream_coref_context = exports.stream_coref_same_sentence = exports.stream_projection_Any = exports.projection_Any = exports.with_arg_min_max_table = exports.with_filtered_table = exports.action_replace_param_with_stream = exports.action_replace_param_with_table = exports.table_join_replace_placeholder = exports.constant_or_undefined = exports.placeholder = void 0;
exports.coref_reverse_verb_filter = exports.reverse_verb_input_param = exports.reverse_verb_symmetric_join_condition = exports.reverse_verb_join_condition = exports.reverse_verb_filter = exports.apv_boolean_projection = exports.coref_apv_input_param = exports.coref_apv_filter = exports.apv_argminmax = exports.apv_input_param = exports.apv_symmetric_join_condition = exports.apv_join_condition = exports.apv_filter = exports.npv_boolean_projection = exports.coref_npv_input_param = exports.coref_npv_filter = exports.npv_argminmax = exports.npv_input_pconstant_namearam = exports.npv_symmetric_join_condition = exports.npv_join_condition = exports.npv_filter = exports.avp_boolean_projection = exports.coref_avp_input_param = exports.coref_avp_filter = exports.avp_argminmax = exports.avp_input_param = exports.avp_symmetric_join_condition = exports.avp_join_condition = exports.avp_filter = exports.preposition_boolean_projection = exports.coref_preposition_input_param = exports.coref_preposition_filter = exports.preposition_argminmax = exports.preposition_input_param = exports.preposition_symmetric_join_condition = exports.preposition_join_condition = exports.preposition_filter = exports.pvp_boolean_projection = exports.coref_pvp_input_param = exports.coref_pvp_filter = exports.pvp_argminmax = exports.pvp_input_param = exports.pvp_symmetric_join_condition = exports.pvp_join_condition = exports.pvp_filter = exports.npi_boolean_projection = exports.coref_npi_input_param = exports.coref_npi_filter = exports.npi_argminmax = exports.npi_input_param = void 0;
exports.$load = exports.qualified_preposition_filter = exports.qualified_reverse_verb_filter = exports.qualified_npv_filter = exports.qualified_apv_filter = exports.qualified_avp_filter = exports.qualified_pvp_filter = exports.qualified_npi_filter = exports.qualified_npp_filter = exports.qualified_with_filter = exports.time_qualifier = exports.generic_base_noun_phrase = exports.generic_anything_noun_phrase = exports.base_noun_phrase = exports.base_table_hidden = exports.base_table = exports.the_base_table = exports.constant_name = exports.entity_table = exports.command_projection_table = exports.question_projection_table = exports.coref_reverse_verb_input_param = void 0;
const $runtime = __importStar(require("../sentence-generator/runtime"));
const thingtalk_1 = require("thingtalk");
const C = __importStar(require("./ast_manip"));
const common_constants_genie_out_1 = require("./common-constants.genie.out");
Object.defineProperty(exports, "constant_Number", { enumerable: true, get: function () { return common_constants_genie_out_1.constant_Number; } });
Object.defineProperty(exports, "constant_String", { enumerable: true, get: function () { return common_constants_genie_out_1.constant_String; } });
Object.defineProperty(exports, "constant_Entity__tt__url", { enumerable: true, get: function () { return common_constants_genie_out_1.constant_Entity__tt__url; } });
Object.defineProperty(exports, "constant_Entity__tt__username", { enumerable: true, get: function () { return common_constants_genie_out_1.constant_Entity__tt__username; } });
Object.defineProperty(exports, "constant_Entity__tt__hashtag", { enumerable: true, get: function () { return common_constants_genie_out_1.constant_Entity__tt__hashtag; } });
Object.defineProperty(exports, "constant_Entity__tt__phone_number", { enumerable: true, get: function () { return common_constants_genie_out_1.constant_Entity__tt__phone_number; } });
Object.defineProperty(exports, "constant_Entity__tt__email_address", { enumerable: true, get: function () { return common_constants_genie_out_1.constant_Entity__tt__email_address; } });
Object.defineProperty(exports, "constant_Entity__tt__path_name", { enumerable: true, get: function () { return common_constants_genie_out_1.constant_Entity__tt__path_name; } });
Object.defineProperty(exports, "constant_Currency", { enumerable: true, get: function () { return common_constants_genie_out_1.constant_Currency; } });
Object.defineProperty(exports, "constant_Time", { enumerable: true, get: function () { return common_constants_genie_out_1.constant_Time; } });
Object.defineProperty(exports, "constant_Date", { enumerable: true, get: function () { return common_constants_genie_out_1.constant_Date; } });
Object.defineProperty(exports, "constant_Location", { enumerable: true, get: function () { return common_constants_genie_out_1.constant_Location; } });
Object.defineProperty(exports, "constant_Entity__tt__picture", { enumerable: true, get: function () { return common_constants_genie_out_1.constant_Entity__tt__picture; } });
Object.defineProperty(exports, "constant_Entity__tt__function", { enumerable: true, get: function () { return common_constants_genie_out_1.constant_Entity__tt__function; } });
Object.defineProperty(exports, "constant_Entity__tt__program", { enumerable: true, get: function () { return common_constants_genie_out_1.constant_Entity__tt__program; } });
Object.defineProperty(exports, "constant_Entity__tt__device", { enumerable: true, get: function () { return common_constants_genie_out_1.constant_Entity__tt__device; } });
Object.defineProperty(exports, "constant_Boolean", { enumerable: true, get: function () { return common_constants_genie_out_1.constant_Boolean; } });
Object.defineProperty(exports, "constant_RecurrentTimeSpecification", { enumerable: true, get: function () { return common_constants_genie_out_1.constant_RecurrentTimeSpecification; } });
Object.defineProperty(exports, "constant_Measure_ms", { enumerable: true, get: function () { return common_constants_genie_out_1.constant_Measure_ms; } });
Object.defineProperty(exports, "constant_Measure_byte", { enumerable: true, get: function () { return common_constants_genie_out_1.constant_Measure_byte; } });
Object.defineProperty(exports, "constant_Measure_kg", { enumerable: true, get: function () { return common_constants_genie_out_1.constant_Measure_kg; } });
Object.defineProperty(exports, "constant_Measure_C", { enumerable: true, get: function () { return common_constants_genie_out_1.constant_Measure_C; } });
Object.defineProperty(exports, "constant_Measure_m", { enumerable: true, get: function () { return common_constants_genie_out_1.constant_Measure_m; } });
Object.defineProperty(exports, "constant_Measure_m2", { enumerable: true, get: function () { return common_constants_genie_out_1.constant_Measure_m2; } });
Object.defineProperty(exports, "constant_Measure_m3", { enumerable: true, get: function () { return common_constants_genie_out_1.constant_Measure_m3; } });
Object.defineProperty(exports, "constant_Measure_mps", { enumerable: true, get: function () { return common_constants_genie_out_1.constant_Measure_mps; } });
Object.defineProperty(exports, "constant_Measure_Pa", { enumerable: true, get: function () { return common_constants_genie_out_1.constant_Measure_Pa; } });
Object.defineProperty(exports, "constant_Measure_kcal", { enumerable: true, get: function () { return common_constants_genie_out_1.constant_Measure_kcal; } });
Object.defineProperty(exports, "constant_Measure_W", { enumerable: true, get: function () { return common_constants_genie_out_1.constant_Measure_W; } });
Object.defineProperty(exports, "constant_Measure_lx", { enumerable: true, get: function () { return common_constants_genie_out_1.constant_Measure_lx; } });
Object.defineProperty(exports, "constant_Measure_lm", { enumerable: true, get: function () { return common_constants_genie_out_1.constant_Measure_lm; } });
Object.defineProperty(exports, "constant_Measure_dB", { enumerable: true, get: function () { return common_constants_genie_out_1.constant_Measure_dB; } });
Object.defineProperty(exports, "constant_Measure_dBm", { enumerable: true, get: function () { return common_constants_genie_out_1.constant_Measure_dBm; } });
Object.defineProperty(exports, "constant_Any", { enumerable: true, get: function () { return common_constants_genie_out_1.constant_Any; } });
Object.defineProperty(exports, "constant_Numeric", { enumerable: true, get: function () { return common_constants_genie_out_1.constant_Numeric; } });
exports.thingpedia_complete_query = "thingpedia_complete_query";
exports.thingpedia_complete_get_command = "thingpedia_complete_get_command";
exports.thingpedia_complete_stream = "thingpedia_complete_stream";
exports.thingpedia_complete_action = "thingpedia_complete_action";
exports.thingpedia_complete_action_past = "thingpedia_complete_action_past";
exports.thingpedia_complete_join_action_past = "thingpedia_complete_join_action_past";
exports.thingpedia_complete_program = "thingpedia_complete_program";
exports.thingpedia_who_question = "thingpedia_who_question";
exports.thingpedia_search_question = "thingpedia_search_question";
exports.thingpedia_slot_fill_question = "thingpedia_slot_fill_question";
exports.thingpedia_user_question = "thingpedia_user_question";
exports.same_sentence_coref = "same_sentence_coref";
exports.context_coref = "context_coref";
exports.list_context_coref = "list_context_coref";
exports.coref_constant = "coref_constant";
exports.placeholder = "placeholder";
exports.constant_or_undefined = "constant_or_undefined";
exports.table_join_replace_placeholder = "table_join_replace_placeholder";
exports.action_replace_param_with_table = "action_replace_param_with_table";
exports.action_replace_param_with_stream = "action_replace_param_with_stream";
exports.with_filtered_table = "with_filtered_table";
exports.with_arg_min_max_table = "with_arg_min_max_table";
exports.projection_Any = "projection_Any";
exports.stream_projection_Any = "stream_projection_Any";
exports.stream_coref_same_sentence = "stream_coref_same_sentence";
exports.stream_coref_context = "stream_coref_context";
exports.stream_coref_list_context = "stream_coref_list_context";
exports.action_coref_same_sentence = "action_coref_same_sentence";
exports.action_coref_context = "action_coref_context";
exports.action_coref_list_context = "action_coref_list_context";
exports.query_coref_same_sentence = "query_coref_same_sentence";
exports.query_coref_context = "query_coref_context";
exports.query_coref_list_context = "query_coref_list_context";
exports.get_command_coref_same_sentence = "get_command_coref_same_sentence";
exports.get_command_coref_context = "get_command_coref_context";
exports.get_command_coref_list_context = "get_command_coref_list_context";
exports.out_param_Any = "out_param_Any";
exports.out_param_Any_hidden = "out_param_Any_hidden";
exports.the_out_param_Any = "the_out_param_Any";
exports.out_param_Array__Any = "out_param_Array__Any";
exports.out_param_Array__Compound = "out_param_Array__Compound";
exports.out_param_ArrayCount = "out_param_ArrayCount";
exports.out_param_NotArray__Any = "out_param_NotArray__Any";
exports.out_param_npp = "out_param_npp";
exports.out_param_npi = "out_param_npi";
exports.out_param_avp = "out_param_avp";
exports.out_param_pvp = "out_param_pvp";
exports.out_param_npv = "out_param_npv";
exports.out_param_apv = "out_param_apv";
exports.input_param = "input_param";
exports.both_prefix = "both_prefix";
exports.pronoun_the_first = "pronoun_the_first";
exports.pronoun_the_second = "pronoun_the_second";
exports.each_other = "each_other";
exports.npp_filter = "npp_filter";
exports.npp_join_condition = "npp_join_condition";
exports.npp_symmetric_join_condition = "npp_symmetric_join_condition";
exports.npp_input_param = "npp_input_param";
exports.npp_argminmax = "npp_argminmax";
exports.coref_npp_filter = "coref_npp_filter";
exports.coref_npp_input_param = "coref_npp_input_param";
exports.npp_boolean_projection = "npp_boolean_projection";
exports.npi_filter = "npi_filter";
exports.npi_join_condition = "npi_join_condition";
exports.npi_symmetric_join_condition = "npi_symmetric_join_condition";
exports.npi_input_param = "npi_input_param";
exports.npi_argminmax = "npi_argminmax";
exports.coref_npi_filter = "coref_npi_filter";
exports.coref_npi_input_param = "coref_npi_input_param";
exports.npi_boolean_projection = "npi_boolean_projection";
exports.pvp_filter = "pvp_filter";
exports.pvp_join_condition = "pvp_join_condition";
exports.pvp_symmetric_join_condition = "pvp_symmetric_join_condition";
exports.pvp_input_param = "pvp_input_param";
exports.pvp_argminmax = "pvp_argminmax";
exports.coref_pvp_filter = "coref_pvp_filter";
exports.coref_pvp_input_param = "coref_pvp_input_param";
exports.pvp_boolean_projection = "pvp_boolean_projection";
exports.preposition_filter = "preposition_filter";
exports.preposition_join_condition = "preposition_join_condition";
exports.preposition_symmetric_join_condition = "preposition_symmetric_join_condition";
exports.preposition_input_param = "preposition_input_param";
exports.preposition_argminmax = "preposition_argminmax";
exports.coref_preposition_filter = "coref_preposition_filter";
exports.coref_preposition_input_param = "coref_preposition_input_param";
exports.preposition_boolean_projection = "preposition_boolean_projection";
exports.avp_filter = "avp_filter";
exports.avp_join_condition = "avp_join_condition";
exports.avp_symmetric_join_condition = "avp_symmetric_join_condition";
exports.avp_input_param = "avp_input_param";
exports.avp_argminmax = "avp_argminmax";
exports.coref_avp_filter = "coref_avp_filter";
exports.coref_avp_input_param = "coref_avp_input_param";
exports.avp_boolean_projection = "avp_boolean_projection";
exports.npv_filter = "npv_filter";
exports.npv_join_condition = "npv_join_condition";
exports.npv_symmetric_join_condition = "npv_symmetric_join_condition";
exports.npv_input_pconstant_namearam = "npv_input_pconstant_namearam";
exports.npv_argminmax = "npv_argminmax";
exports.coref_npv_filter = "coref_npv_filter";
exports.coref_npv_input_param = "coref_npv_input_param";
exports.npv_boolean_projection = "npv_boolean_projection";
exports.apv_filter = "apv_filter";
exports.apv_join_condition = "apv_join_condition";
exports.apv_symmetric_join_condition = "apv_symmetric_join_condition";
exports.apv_input_param = "apv_input_param";
exports.apv_argminmax = "apv_argminmax";
exports.coref_apv_filter = "coref_apv_filter";
exports.coref_apv_input_param = "coref_apv_input_param";
exports.apv_boolean_projection = "apv_boolean_projection";
exports.reverse_verb_filter = "reverse_verb_filter";
exports.reverse_verb_join_condition = "reverse_verb_join_condition";
exports.reverse_verb_symmetric_join_condition = "reverse_verb_symmetric_join_condition";
exports.reverse_verb_input_param = "reverse_verb_input_param";
exports.coref_reverse_verb_filter = "coref_reverse_verb_filter";
exports.coref_reverse_verb_input_param = "coref_reverse_verb_input_param";
exports.question_projection_table = "question_projection_table";
exports.command_projection_table = "command_projection_table";
exports.entity_table = "entity_table";
exports.constant_name = "constant_name";
exports.the_base_table = "the_base_table";
exports.base_table = "base_table";
exports.base_table_hidden = "base_table_hidden";
exports.base_noun_phrase = "base_noun_phrase";
exports.generic_anything_noun_phrase = "generic_anything_noun_phrase";
exports.generic_base_noun_phrase = "generic_base_noun_phrase";
exports.time_qualifier = "time_qualifier";
exports.qualified_with_filter = "qualified_with_filter";
exports.qualified_npp_filter = "qualified_npp_filter";
exports.qualified_npi_filter = "qualified_npi_filter";
exports.qualified_pvp_filter = "qualified_pvp_filter";
exports.qualified_avp_filter = "qualified_avp_filter";
exports.qualified_apv_filter = "qualified_apv_filter";
exports.qualified_npv_filter = "qualified_npv_filter";
exports.qualified_reverse_verb_filter = "qualified_reverse_verb_filter";
exports.qualified_preposition_filter = "qualified_preposition_filter";
/**
 * Load the templates in this file.
 *
 * This is an autogenerated method that will be called by the {@link SentenceGenerator}
 * when the templates are imported.
 */
async function $load($options, $locale, $grammar, $loader) {
    await (0, common_constants_genie_out_1.$load)($options, $locale, $grammar, $loader);
    $grammar.declareSymbol("thingpedia_complete_query");
    $grammar.declareSymbol("thingpedia_complete_get_command");
    $grammar.declareSymbol("thingpedia_complete_stream");
    $grammar.declareSymbol("thingpedia_complete_action");
    $grammar.declareSymbol("thingpedia_complete_action_past");
    $grammar.declareSymbol("thingpedia_complete_join_action_past");
    $grammar.declareSymbol("thingpedia_complete_program");
    $grammar.declareSymbol("thingpedia_who_question");
    $grammar.declareSymbol("thingpedia_search_question");
    $grammar.declareSymbol("thingpedia_slot_fill_question");
    $grammar.declareSymbol("thingpedia_user_question");
    $grammar.declareSymbol("same_sentence_coref");
    $grammar.declareSymbol("context_coref");
    $grammar.declareSymbol("list_context_coref");
    $grammar.declareSymbol("coref_constant");
    $grammar.declareSymbol("placeholder");
    $grammar.declareSymbol("constant_or_undefined");
    $grammar.addRule("constant_or_undefined", [new $runtime.NonTerminal("placeholder", "pl", undefined)], "${pl}", ((pl) => {
        const v = new thingtalk_1.Ast.Value.Undefined(true);
        // override getType() so we can do type-checks
        v.getType = () => pl.type;
        return v;
    }), C.valueKeyFn, {});
    $grammar.declareSymbol("table_join_replace_placeholder");
    $grammar.declareSymbol("action_replace_param_with_table");
    $grammar.declareSymbol("action_replace_param_with_stream");
    $grammar.declareSymbol("with_filtered_table");
    $grammar.declareSymbol("with_arg_min_max_table");
    $grammar.declareSymbol("projection_Any");
    $grammar.declareSymbol("stream_projection_Any");
    $grammar.declareSymbol("stream_coref_same_sentence");
    $grammar.declareSymbol("stream_coref_context");
    $grammar.declareSymbol("stream_coref_list_context");
    $grammar.declareSymbol("action_coref_same_sentence");
    $grammar.declareSymbol("action_coref_context");
    $grammar.declareSymbol("action_coref_list_context");
    $grammar.declareSymbol("query_coref_same_sentence");
    $grammar.declareSymbol("query_coref_context");
    $grammar.declareSymbol("query_coref_list_context");
    $grammar.declareSymbol("get_command_coref_same_sentence");
    $grammar.declareSymbol("get_command_coref_context");
    $grammar.declareSymbol("get_command_coref_list_context");
    $grammar.declareSymbol("out_param_Any");
    $grammar.declareSymbol("out_param_Any_hidden");
    $grammar.declareSymbol("the_out_param_Any");
    $grammar.declareSymbol("out_param_Array__Any");
    $grammar.declareSymbol("out_param_Array__Compound");
    $grammar.declareSymbol("out_param_ArrayCount");
    $grammar.declareSymbol("out_param_NotArray__Any");
    $grammar.declareSymbol("out_param_npp");
    $grammar.declareSymbol("out_param_npi");
    $grammar.declareSymbol("out_param_avp");
    $grammar.declareSymbol("out_param_pvp");
    $grammar.declareSymbol("out_param_npv");
    $grammar.declareSymbol("out_param_apv");
    $grammar.declareSymbol("input_param");
    $grammar.declareSymbol("both_prefix");
    $grammar.addRule("both_prefix", [], "", (() => ""), undefined, { identity: (true) });
    $grammar.declareSymbol("pronoun_the_first");
    $grammar.declareSymbol("pronoun_the_second");
    $grammar.declareSymbol("each_other");
    $grammar.declareSymbol("npp_filter");
    $grammar.declareSymbol("npp_join_condition");
    $grammar.declareSymbol("npp_symmetric_join_condition");
    $grammar.declareSymbol("npp_input_param");
    $grammar.declareSymbol("npp_argminmax");
    $grammar.declareSymbol("coref_npp_filter");
    $grammar.declareSymbol("coref_npp_input_param");
    $grammar.declareSymbol("npp_boolean_projection");
    $grammar.declareSymbol("npi_filter");
    $grammar.declareSymbol("npi_join_condition");
    $grammar.declareSymbol("npi_symmetric_join_condition");
    $grammar.declareSymbol("npi_input_param");
    $grammar.declareSymbol("npi_argminmax");
    $grammar.declareSymbol("coref_npi_filter");
    $grammar.declareSymbol("coref_npi_input_param");
    $grammar.declareSymbol("npi_boolean_projection");
    $grammar.declareSymbol("pvp_filter");
    $grammar.declareSymbol("pvp_join_condition");
    $grammar.declareSymbol("pvp_symmetric_join_condition");
    $grammar.declareSymbol("pvp_input_param");
    $grammar.declareSymbol("pvp_argminmax");
    $grammar.declareSymbol("coref_pvp_filter");
    $grammar.declareSymbol("coref_pvp_input_param");
    $grammar.declareSymbol("pvp_boolean_projection");
    $grammar.declareSymbol("preposition_filter");
    $grammar.declareSymbol("preposition_join_condition");
    $grammar.declareSymbol("preposition_symmetric_join_condition");
    $grammar.declareSymbol("preposition_input_param");
    $grammar.declareSymbol("preposition_argminmax");
    $grammar.declareSymbol("coref_preposition_filter");
    $grammar.declareSymbol("coref_preposition_input_param");
    $grammar.declareSymbol("preposition_boolean_projection");
    $grammar.declareSymbol("avp_filter");
    $grammar.declareSymbol("avp_join_condition");
    $grammar.declareSymbol("avp_symmetric_join_condition");
    $grammar.declareSymbol("avp_input_param");
    $grammar.declareSymbol("avp_argminmax");
    $grammar.declareSymbol("coref_avp_filter");
    $grammar.declareSymbol("coref_avp_input_param");
    $grammar.declareSymbol("avp_boolean_projection");
    $grammar.declareSymbol("npv_filter");
    $grammar.declareSymbol("npv_join_condition");
    $grammar.declareSymbol("npv_symmetric_join_condition");
    $grammar.declareSymbol("npv_input_pconstant_namearam");
    $grammar.declareSymbol("npv_argminmax");
    $grammar.declareSymbol("coref_npv_filter");
    $grammar.declareSymbol("coref_npv_input_param");
    $grammar.declareSymbol("npv_boolean_projection");
    $grammar.declareSymbol("apv_filter");
    $grammar.declareSymbol("apv_join_condition");
    $grammar.declareSymbol("apv_symmetric_join_condition");
    $grammar.declareSymbol("apv_input_param");
    $grammar.declareSymbol("apv_argminmax");
    $grammar.declareSymbol("coref_apv_filter");
    $grammar.declareSymbol("coref_apv_input_param");
    $grammar.declareSymbol("apv_boolean_projection");
    $grammar.declareSymbol("reverse_verb_filter");
    $grammar.declareSymbol("reverse_verb_join_condition");
    $grammar.declareSymbol("reverse_verb_symmetric_join_condition");
    $grammar.declareSymbol("reverse_verb_input_param");
    $grammar.declareSymbol("coref_reverse_verb_filter");
    $grammar.declareSymbol("coref_reverse_verb_input_param");
    $grammar.declareSymbol("question_projection_table");
    $grammar.declareSymbol("command_projection_table");
    $grammar.declareSymbol("entity_table");
    $grammar.declareSymbol("constant_name");
    $grammar.addRule("constant_name", [new $runtime.NonTerminal("constant_Number", undefined, undefined)], "${constant_Number}", (($0) => { return $0; }), C.entityOrNumberValueKeyFn, { identity: (true) });
    $grammar.declareSymbol("the_base_table");
    $grammar.declareSymbol("base_table");
    $grammar.declareSymbol("base_table_hidden");
    $grammar.declareSymbol("base_noun_phrase");
    $grammar.declareSymbol("generic_anything_noun_phrase");
    $grammar.declareSymbol("generic_base_noun_phrase");
    $grammar.declareSymbol("time_qualifier");
    $grammar.declareSymbol("qualified_with_filter");
    $grammar.declareSymbol("qualified_npp_filter");
    $grammar.declareSymbol("qualified_npi_filter");
    $grammar.declareSymbol("qualified_pvp_filter");
    $grammar.declareSymbol("qualified_avp_filter");
    $grammar.declareSymbol("qualified_apv_filter");
    $grammar.declareSymbol("qualified_npv_filter");
    $grammar.declareSymbol("qualified_reverse_verb_filter");
    $grammar.declareSymbol("qualified_preposition_filter");
}
exports.$load = $load;
;
//# sourceMappingURL=common.genie.out.js.map