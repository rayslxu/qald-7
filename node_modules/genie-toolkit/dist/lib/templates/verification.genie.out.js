"use strict";
// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2022 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Silei Xu <silei@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$load = exports.boolean_question = void 0;
const $runtime = __importStar(require("../sentence-generator/runtime"));
const thingtalk_1 = require("thingtalk");
const C = __importStar(require("./ast_manip"));
exports.boolean_question = "boolean_question";
/**
 * Load the templates in this file.
 *
 * This is an autogenerated method that will be called by the {@link SentenceGenerator}
 * when the templates are imported.
 */
async function $load($options, $locale, $grammar, $loader) {
    $grammar.declareSymbol("boolean_question");
    $grammar.addRule("boolean_question", [new $runtime.NonTerminal("entity_table", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("{does|do|did} ${table} have ${filter}"), ((table, filter) => C.makeVerificationQuestion($loader, table, filter)), undefined, {});
    $grammar.addRule("boolean_question", [new $runtime.NonTerminal("entity_table", "table", undefined), new $runtime.NonTerminal("with_filter", "filter", ["functionName", 0, "functionName"])], $locale._("{does|do|did} ${table} have ${filter}"), ((table, filter) => C.makeVerificationQuestion($loader, table, filter)), undefined, {});
    $grammar.addRule("boolean_question", [new $runtime.NonTerminal("entity_table", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName", 0, "functionName"])], $locale._("{are|is|was|were} ${table} {a|an|} ${filter}"), ((table, filter) => C.makeVerificationQuestion($loader, table, filter)), undefined, {});
    $grammar.addRule("boolean_question", [new $runtime.NonTerminal("entity_table", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("{are|is|was|were} ${table} ${filter}"), ((table, filter) => C.makeVerificationQuestion($loader, table, filter)), undefined, {});
    $grammar.addRule("boolean_question", [new $runtime.NonTerminal("entity_table", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("{are|is|was|were} ${table} ${filter}"), ((table, filter) => C.makeVerificationQuestion($loader, table, filter)), undefined, {});
    $grammar.addRule("boolean_question", [new $runtime.NonTerminal("entity_table", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("{does|do|did} not ${table} have ${filter}"), ((table, filter) => C.makeVerificationQuestion($loader, table, filter)), undefined, { weight: (0.1) });
    $grammar.addRule("boolean_question", [new $runtime.NonTerminal("entity_table", "table", undefined), new $runtime.NonTerminal("with_filter", "filter", ["functionName", 0, "functionName"])], $locale._("{does|do|did} not ${table} have ${filter}"), ((table, filter) => C.makeVerificationQuestion($loader, table, filter)), undefined, { weight: (0.1) });
    $grammar.addRule("boolean_question", [new $runtime.NonTerminal("entity_table", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName", 0, "functionName"])], $locale._("{are|is|was|were} not ${table} {a|an|} ${filter}"), ((table, filter) => C.makeVerificationQuestion($loader, table, filter)), undefined, { weight: (0.1) });
    $grammar.addRule("boolean_question", [new $runtime.NonTerminal("entity_table", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("{are|is|was|were} not ${table} ${filter}"), ((table, filter) => C.makeVerificationQuestion($loader, table, filter)), undefined, { weight: (0.1) });
    $grammar.addRule("boolean_question", [new $runtime.NonTerminal("entity_table", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("{are|is|was|were} not ${table} ${filter}"), ((table, filter) => C.makeVerificationQuestion($loader, table, filter)), undefined, { weight: (0.1) });
    $grammar.addRule("boolean_question", [new $runtime.NonTerminal("entity_table", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("{does|do|did} ${table} have no ${filter}"), ((table, filter) => C.makeVerificationQuestion($loader, table, filter, true)), undefined, { weight: (0.1) });
    $grammar.addRule("boolean_question", [new $runtime.NonTerminal("entity_table", "table", undefined), new $runtime.NonTerminal("with_filter", "filter", ["functionName", 0, "functionName"])], $locale._("{does|do|did} ${table} have no ${filter}"), ((table, filter) => C.makeVerificationQuestion($loader, table, filter, true)), undefined, { weight: (0.1) });
    $grammar.addRule("boolean_question", [new $runtime.NonTerminal("entity_table", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName", 0, "functionName"])], $locale._("{are|is|was|were} ${table} not {a|an|} ${filter}"), ((table, filter) => C.makeVerificationQuestion($loader, table, filter, true)), undefined, { weight: (0.1) });
    $grammar.addRule("boolean_question", [new $runtime.NonTerminal("entity_table", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("{are|is|was|were} ${table} not ${filter}"), ((table, filter) => C.makeVerificationQuestion($loader, table, filter, true)), undefined, { weight: (0.1) });
    $grammar.addRule("boolean_question", [new $runtime.NonTerminal("entity_table", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("{are|is|was|were} ${table} not ${filter}"), ((table, filter) => C.makeVerificationQuestion($loader, table, filter, true)), undefined, { weight: (0.1) });
    $grammar.addRule("boolean_question", [new $runtime.NonTerminal("entity_table", "table", undefined), new $runtime.NonTerminal("out_param_NotArray__Any", "p", ["functionName", 0, "functionName"])], $locale._("{does|do|did} ${table} have ${p}"), ((table, p) => {
        const projection = C.makeFilter($loader, p, '==', new thingtalk_1.Ast.Value.Null);
        if (!projection)
            return null;
        return C.makeVerificationQuestion($loader, table, projection);
    }), undefined, {});
    $grammar.addRule("boolean_question", [new $runtime.NonTerminal("entity_table", "table", undefined), new $runtime.NonTerminal("out_param_NotArray__Any", "p", ["functionName", 0, "functionName"])], $locale._("{does|do|did} not ${table} have ${p}"), ((table, p) => {
        const projection = C.makeFilter($loader, p, '==', new thingtalk_1.Ast.Value.Null);
        if (!projection)
            return null;
        return C.makeVerificationQuestion($loader, table, projection);
    }), undefined, { weight: (0.1) });
    $grammar.addRule("boolean_question", [new $runtime.NonTerminal("entity_table", "table", undefined), new $runtime.NonTerminal("out_param_NotArray__Any", "p", ["functionName", 0, "functionName"])], $locale._("{does|do|did} {the|} ${table} have no ${p}"), ((table, p) => {
        const projection = C.makeFilter($loader, p, '==', new thingtalk_1.Ast.Value.Null, true);
        if (!projection)
            return null;
        return C.makeVerificationQuestion($loader, table, projection);
    }), undefined, { weight: (0.1) });
}
exports.$load = $load;
;
//# sourceMappingURL=verification.genie.out.js.map