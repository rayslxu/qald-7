import type $SentenceGenerator from "../sentence-generator/generator";
import * as $SentenceGeneratorTypes from "../sentence-generator/types";
import * as $I18n from "../i18n/index";
import { Ast } from 'thingtalk';
import ThingpediaLoader from './load-thingpedia';
export {};
import { at_time, constant_date_point, constant_date_range, constant_day_of_week, unit_Measure_ms, constant_pairs, constant_or_pairs, constant_nor_pairs, constant_String_ContextRef } from "./constants.genie.out";
export { at_time, constant_date_point, constant_date_range, constant_day_of_week, unit_Measure_ms, constant_pairs, constant_or_pairs, constant_nor_pairs, constant_String_ContextRef };
import { timer } from "./timers.genie.out";
export { timer };
import { get_predicate_filter, if_filter, edge_filter, either_filter, range, range_filter, with_filter, range_with_filter, nearby_filter, whose_npp_filter, quality_filter, within_filter, npp_id_soft_filter, pvp_id_soft_filter } from "./filters.genie.out";
export { get_predicate_filter, if_filter, edge_filter, either_filter, range, range_filter, with_filter, range_with_filter, nearby_filter, whose_npp_filter, quality_filter, within_filter, npp_id_soft_filter, pvp_id_soft_filter };
import { the_out_param_pair, the_out_param_triple, pair_projection, where_question, boolean_projection, verb_projection_Any } from "./projections.genie.out";
export { the_out_param_pair, the_out_param_triple, pair_projection, where_question, boolean_projection, verb_projection_Any };
import { projection_Number } from "./aggregation.genie.out";
export { projection_Number };
import { projection_Measure_m, compute_question } from "./computation.genie.out";
export { projection_Measure_m, compute_question };
import { who_complete_table, who_with_filtered_table, who_one_with_filter_table, who_one_which_filter_table, who_one_clean_filter_table, who_two_with_filter_table, who_two_which_filter_table, who_two_clean_filter_table, who_verb_filtered_table, who_one_be_filter_table, who_one_have_filter_table, who_one_verb_filter_table, who_two_be_filter_table, who_two_have_filter_table, who_two_verb_filter_table, whose_filtered_table } from "./who_questions.genie.out";
export { who_complete_table, who_with_filtered_table, who_one_with_filter_table, who_one_which_filter_table, who_one_clean_filter_table, who_two_with_filter_table, who_two_which_filter_table, who_two_clean_filter_table, who_verb_filtered_table, who_one_be_filter_table, who_one_have_filter_table, who_one_verb_filter_table, who_two_be_filter_table, who_two_have_filter_table, who_two_verb_filter_table, whose_filtered_table };
import { forward_get_do_command, backward_get_do_command, forward_when_do_rule, backward_when_do_rule, when_get_stream, when_get_do_rule, timer_rule, generic_preamble_for_answer, generic_preamble_for_action, generic_verb_for_search, imperative_verb_for_search, generic_search_preamble, generic_lookup_preamble, generic_article, search_command, complete_question, projection_question, explicit_when_condition, when_command, monitor_command, complete_action, say_command } from "./commands.genie.out";
export { forward_get_do_command, backward_get_do_command, forward_when_do_rule, backward_when_do_rule, when_get_stream, when_get_do_rule, timer_rule, generic_preamble_for_answer, generic_preamble_for_action, generic_verb_for_search, imperative_verb_for_search, generic_search_preamble, generic_lookup_preamble, generic_article, search_command, complete_question, projection_question, explicit_when_condition, when_command, monitor_command, complete_action, say_command };
import { complete_table, complete_get_command, if_filtered_table, one_if_filter_table, two_if_filter_table, answer_noun_phrase, one_with_filter_table, one_which_filter_table, one_clean_filter_table, two_with_filter_table, two_which_filter_table, two_clean_filter_table, three_with_filter_table, three_which_filter_table, three_clean_filter_table, anything_phrase, anything_with_filter_phrase, anything_which_filter_phrase, anything_clean_filter_phrase, verb_filtered_table, one_be_filter_table, one_have_filter_table, one_verb_filter_table, two_be_filter_table, two_have_filter_table, two_verb_filter_table, generic_argminmax, have_arg_min_max_table, edge_stream, stream, with_filtered_table_join, have_filtered_table_join } from "./stream_tables.genie.out";
export { complete_table, complete_get_command, if_filtered_table, one_if_filter_table, two_if_filter_table, answer_noun_phrase, one_with_filter_table, one_which_filter_table, one_clean_filter_table, two_with_filter_table, two_which_filter_table, two_clean_filter_table, three_with_filter_table, three_which_filter_table, three_clean_filter_table, anything_phrase, anything_with_filter_phrase, anything_which_filter_phrase, anything_clean_filter_phrase, verb_filtered_table, one_be_filter_table, one_have_filter_table, one_verb_filter_table, two_be_filter_table, two_have_filter_table, two_verb_filter_table, generic_argminmax, have_arg_min_max_table, edge_stream, stream, with_filtered_table_join, have_filtered_table_join };
import { short_phrase_table, out_param_symmetric, self_join_table, generic_join_table } from "./joins.genie.out";
export { short_phrase_table, out_param_symmetric, self_join_table, generic_join_table };
import { boolean_question } from "./verification.genie.out";
export { boolean_question };
export {};
export {};
export declare const $root: $SentenceGeneratorTypes.NonTerminal<Ast.Input>;
/**
 * Load the templates in this file.
 *
 * This is an autogenerated method that will be called by the {@link SentenceGenerator}
 * when the templates are imported.
 */
export declare function $load($options: $SentenceGeneratorTypes.GrammarOptions, $locale: $I18n.LanguagePack, $grammar: $SentenceGenerator, $loader: ThingpediaLoader): Promise<void>;
