"use strict";
// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2019-2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Silei Xu <silei@cs.stanford.edu>
//         Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$load = exports.have_filtered_table_join = exports.with_filtered_table_join = exports.stream = exports.edge_stream = exports.have_arg_min_max_table = exports.with_arg_min_max_table = exports.generic_argminmax = exports.two_verb_filter_table = exports.two_have_filter_table = exports.two_be_filter_table = exports.one_verb_filter_table = exports.one_have_filter_table = exports.one_be_filter_table = exports.verb_filtered_table = exports.anything_clean_filter_phrase = exports.anything_which_filter_phrase = exports.anything_with_filter_phrase = exports.anything_phrase = exports.three_clean_filter_table = exports.three_which_filter_table = exports.three_with_filter_table = exports.two_clean_filter_table = exports.two_which_filter_table = exports.two_with_filter_table = exports.one_clean_filter_table = exports.one_which_filter_table = exports.one_with_filter_table = exports.answer_noun_phrase = exports.with_filtered_table = exports.two_if_filter_table = exports.one_if_filter_table = exports.if_filtered_table = exports.complete_get_command = exports.complete_table = void 0;
const $runtime = __importStar(require("../sentence-generator/runtime"));
const thingtalk_1 = require("thingtalk");
const C = __importStar(require("./ast_manip"));
exports.complete_table = "complete_table";
exports.complete_get_command = "complete_get_command";
exports.if_filtered_table = "if_filtered_table";
exports.one_if_filter_table = "one_if_filter_table";
exports.two_if_filter_table = "two_if_filter_table";
exports.with_filtered_table = "with_filtered_table";
exports.answer_noun_phrase = "answer_noun_phrase";
exports.one_with_filter_table = "one_with_filter_table";
exports.one_which_filter_table = "one_which_filter_table";
exports.one_clean_filter_table = "one_clean_filter_table";
exports.two_with_filter_table = "two_with_filter_table";
exports.two_which_filter_table = "two_which_filter_table";
exports.two_clean_filter_table = "two_clean_filter_table";
exports.three_with_filter_table = "three_with_filter_table";
exports.three_which_filter_table = "three_which_filter_table";
exports.three_clean_filter_table = "three_clean_filter_table";
exports.anything_phrase = "anything_phrase";
exports.anything_with_filter_phrase = "anything_with_filter_phrase";
exports.anything_which_filter_phrase = "anything_which_filter_phrase";
exports.anything_clean_filter_phrase = "anything_clean_filter_phrase";
exports.verb_filtered_table = "verb_filtered_table";
exports.one_be_filter_table = "one_be_filter_table";
exports.one_have_filter_table = "one_have_filter_table";
exports.one_verb_filter_table = "one_verb_filter_table";
exports.two_be_filter_table = "two_be_filter_table";
exports.two_have_filter_table = "two_have_filter_table";
exports.two_verb_filter_table = "two_verb_filter_table";
exports.generic_argminmax = "generic_argminmax";
exports.with_arg_min_max_table = "with_arg_min_max_table";
exports.have_arg_min_max_table = "have_arg_min_max_table";
exports.edge_stream = "edge_stream";
exports.stream = "stream";
exports.with_filtered_table_join = "with_filtered_table_join";
exports.have_filtered_table_join = "have_filtered_table_join";
/**
 * Load the templates in this file.
 *
 * This is an autogenerated method that will be called by the {@link SentenceGenerator}
 * when the templates are imported.
 */
async function $load($options, $locale, $grammar, $loader) {
    $grammar.declareSymbol("complete_table");
    $grammar.addRule("complete_table", [new $runtime.NonTerminal("thingpedia_complete_query", "q", undefined)], "${q}", ((q) => {
        if (q instanceof thingtalk_1.Ast.AggregationExpression)
            return null;
        return q;
    }), C.expressionKeyFn, {});
    if (!$options.flags.notablejoin) {
        $grammar.addRule("complete_table", [new $runtime.NonTerminal("table_join_replace_placeholder", undefined, undefined)], "${table_join_replace_placeholder}", (($0) => { return $0; }), C.expressionKeyFn, { identity: (true) });
    }
    $grammar.addRule("complete_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("preposition_input_param", "param", ["functionName", 0, "functionName"])], $locale._("${table} ${param}"), ((table, param) => C.addActionInputParam($loader, table, param)), C.expressionKeyFn, {});
    $grammar.addRule("complete_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("npp_input_param", "param", ["functionName", 0, "functionName"])], $locale._("${table} {with|having} ${param}"), ((table, param) => C.addActionInputParam($loader, table, param)), C.expressionKeyFn, {});
    $grammar.addRule("complete_table", [new $runtime.NonTerminal("apv_input_param", "param", undefined), new $runtime.NonTerminal("complete_table", "table", ["functionName", 0, "functionName"])], $locale._("${param} ${table}"), ((param, table) => C.addActionInputParam($loader, table, param)), C.expressionKeyFn, {});
    $grammar.addRule("complete_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("pvp_input_param", "param", ["functionName", 0, "functionName"])], $locale._("${table} ${param}"), ((table, param) => C.addActionInputParam($loader, table, param)), C.expressionKeyFn, {});
    $grammar.declareSymbol("complete_get_command");
    $grammar.addRule("complete_get_command", [new $runtime.NonTerminal("thingpedia_complete_get_command", undefined, undefined)], "${thingpedia_complete_get_command}", (($0) => { return $0; }), C.expressionKeyFn, { identity: (true) });
    $grammar.addRule("complete_get_command", [new $runtime.NonTerminal("complete_get_command", "table", undefined), new $runtime.NonTerminal("preposition_input_param", "param", ["functionName", 0, "functionName"])], $locale._("${table} ${param}"), ((table, param) => C.addActionInputParam($loader, table, param)), C.expressionKeyFn, {});
    $grammar.addRule("complete_get_command", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("npp_input_param", "param", ["functionName", 0, "functionName"])], $locale._("${table} {with|having} ${param}"), ((table, param) => C.addActionInputParam($loader, table, param)), C.expressionKeyFn, {});
    $grammar.declareSymbol("if_filtered_table");
    if (!$options.flags.always_filter) {
        $grammar.addRule("if_filtered_table", [new $runtime.NonTerminal("complete_table", undefined, undefined)], "${complete_table}", (($0) => { return $0; }), C.expressionKeyFn, { identity: (true) });
    }
    $grammar.addRule("if_filtered_table", [new $runtime.NonTerminal("one_if_filter_table", undefined, undefined)], "${one_if_filter_table}", (($0) => { return $0; }), C.expressionKeyFn, { identity: (true) });
    if (!$options.flags.turking) {
        $grammar.addRule("if_filtered_table", [new $runtime.NonTerminal("two_if_filter_table", undefined, undefined)], "${two_if_filter_table}", (($0) => { return $0; }), C.expressionKeyFn, { identity: (true) });
    }
    $grammar.declareSymbol("one_if_filter_table");
    if (!$options.flags.nofilter) {
        $grammar.addRule("one_if_filter_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("if_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} if ${filter}"), ((table, filter) => C.addFilter($loader, table, filter, { ifFilter: true })), C.expressionKeyFn, {});
        $grammar.addRule("one_if_filter_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("if_filter", "filter", ["functionName", (null)])], $locale._("${table} if ${filter}"), ((table, filter) => C.addFilter($loader, table, filter, { ifFilter: true })), C.expressionKeyFn, {});
    }
    $grammar.declareSymbol("two_if_filter_table");
    if (!$options.flags.nofilter) {
        $grammar.addRule("two_if_filter_table", [new $runtime.NonTerminal("one_if_filter_table", "table", undefined), new $runtime.NonTerminal("if_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} and ${filter}"), ((table, filter) => C.addFilter($loader, table, filter, { ifFilter: true })), C.expressionKeyFn, {});
        $grammar.addRule("two_if_filter_table", [new $runtime.NonTerminal("one_if_filter_table", "table", undefined), new $runtime.NonTerminal("if_filter", "filter", ["functionName", (null)])], $locale._("${table} and ${filter}"), ((table, filter) => C.addFilter($loader, table, filter, { ifFilter: true })), C.expressionKeyFn, {});
    }
    $grammar.declareSymbol("with_filtered_table");
    $grammar.addRule("with_filtered_table", [new $runtime.NonTerminal("complete_table", undefined, undefined)], "${complete_table}", (($0) => { return $0; }), C.expressionKeyFn, { weight: (3), identity: (true) });
    $grammar.addRule("with_filtered_table", [new $runtime.NonTerminal("one_with_filter_table", undefined, undefined)], "${one_with_filter_table}", (($0) => { return $0; }), C.expressionKeyFn, { identity: (true) });
    $grammar.addRule("with_filtered_table", [new $runtime.NonTerminal("one_which_filter_table", undefined, undefined)], "${one_which_filter_table}", (($0) => { return $0; }), C.expressionKeyFn, { identity: (true) });
    $grammar.addRule("with_filtered_table", [new $runtime.NonTerminal("one_clean_filter_table", undefined, undefined)], "${one_clean_filter_table}", (($0) => { return $0; }), C.expressionKeyFn, { identity: (true) });
    $grammar.addRule("with_filtered_table", [new $runtime.NonTerminal("two_with_filter_table", undefined, undefined)], "${two_with_filter_table}", (($0) => { return $0; }), C.expressionKeyFn, { identity: (true) });
    $grammar.addRule("with_filtered_table", [new $runtime.NonTerminal("two_which_filter_table", undefined, undefined)], "${two_which_filter_table}", (($0) => { return $0; }), C.expressionKeyFn, { identity: (true) });
    $grammar.addRule("with_filtered_table", [new $runtime.NonTerminal("two_clean_filter_table", undefined, undefined)], "${two_clean_filter_table}", (($0) => { return $0; }), C.expressionKeyFn, { identity: (true) });
    $grammar.addRule("with_filtered_table", [new $runtime.NonTerminal("three_with_filter_table", undefined, undefined)], "${three_with_filter_table}", (($0) => { return $0; }), C.expressionKeyFn, { weight: (0.1), identity: (true) });
    $grammar.addRule("with_filtered_table", [new $runtime.NonTerminal("three_which_filter_table", undefined, undefined)], "${three_which_filter_table}", (($0) => { return $0; }), C.expressionKeyFn, { weight: (0.1), identity: (true) });
    $grammar.addRule("with_filtered_table", [new $runtime.NonTerminal("three_clean_filter_table", undefined, undefined)], "${three_clean_filter_table}", (($0) => { return $0; }), C.expressionKeyFn, { weight: (0.1), identity: (true) });
    $grammar.declareSymbol("answer_noun_phrase");
    $grammar.addRule("answer_noun_phrase", [new $runtime.NonTerminal("one_with_filter_table", undefined, undefined)], "${one_with_filter_table}", (($0) => { return $0; }), C.expressionKeyFn, { weight: (10), identity: (true) });
    $grammar.addRule("answer_noun_phrase", [new $runtime.NonTerminal("one_which_filter_table", undefined, undefined)], "${one_which_filter_table}", (($0) => { return $0; }), C.expressionKeyFn, { weight: (10), identity: (true) });
    $grammar.addRule("answer_noun_phrase", [new $runtime.NonTerminal("one_clean_filter_table", undefined, undefined)], "${one_clean_filter_table}", (($0) => { return $0; }), C.expressionKeyFn, { weight: (10), identity: (true) });
    $grammar.addRule("answer_noun_phrase", [new $runtime.NonTerminal("two_with_filter_table", undefined, undefined)], "${two_with_filter_table}", (($0) => { return $0; }), C.expressionKeyFn, { identity: (true) });
    $grammar.addRule("answer_noun_phrase", [new $runtime.NonTerminal("two_which_filter_table", undefined, undefined)], "${two_which_filter_table}", (($0) => { return $0; }), C.expressionKeyFn, { identity: (true) });
    $grammar.addRule("answer_noun_phrase", [new $runtime.NonTerminal("two_clean_filter_table", undefined, undefined)], "${two_clean_filter_table}", (($0) => { return $0; }), C.expressionKeyFn, { identity: (true) });
    $grammar.declareSymbol("one_with_filter_table");
    if (!$options.flags.nofilter) {
        $grammar.addRule("one_with_filter_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("with_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {with|having} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("one_with_filter_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {with|having} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
    }
    if (!$options.flags.turking) {
        if (!$options.flags.nofilter) {
            $grammar.addRule("one_with_filter_table", [new $runtime.NonTerminal("complete_table", "table", ["has_geo", (true)]), new $runtime.NonTerminal("within_filter", "filter", undefined)], $locale._("${table} ${filter}"), ((table, filter) => C.makeWithinGeoDistanceExpression($loader, table, filter.place, filter.distance)), C.expressionKeyFn, {});
        }
    }
    $grammar.declareSymbol("one_which_filter_table");
    if (!$options.flags.nofilter) {
        $grammar.addRule("one_which_filter_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("one_which_filter_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("one_which_filter_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("one_which_filter_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("one_which_filter_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} have ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("one_which_filter_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("with_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} have ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("one_which_filter_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("reverse_verb_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {which|that} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
    }
    $grammar.declareSymbol("one_clean_filter_table");
    if (!$options.flags.nofilter) {
        $grammar.addRule("one_clean_filter_table", [new $runtime.NonTerminal("apv_filter", "filter", undefined), new $runtime.NonTerminal("complete_table", "table", ["functionName", 0, "functionName"])], $locale._("${filter} ${table}"), ((filter, table) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("one_clean_filter_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("pvp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("one_clean_filter_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("preposition_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("one_clean_filter_table", [new $runtime.NonTerminal("quality_filter", "filter", undefined), new $runtime.NonTerminal("complete_table", "table", undefined)], $locale._("${filter} ${table}"), ((filter, table) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("one_clean_filter_table", [new $runtime.NonTerminal("complete_table", "table", ["has_geo", (true)]), new $runtime.NonTerminal("nearby_filter", "filter", undefined)], $locale._("${table} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
    }
    $grammar.declareSymbol("two_with_filter_table");
    if (!$options.flags.nofilter) {
        $grammar.addRule("two_with_filter_table", [new $runtime.NonTerminal("one_with_filter_table", "table", undefined), new $runtime.NonTerminal("with_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} and ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_with_filter_table", [new $runtime.NonTerminal("one_which_filter_table", "table", undefined), new $runtime.NonTerminal("with_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {and having|and with|, with|and have} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_with_filter_table", [new $runtime.NonTerminal("one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("with_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {with|having|that have} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_with_filter_table", [new $runtime.NonTerminal("one_with_filter_table", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} and ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_with_filter_table", [new $runtime.NonTerminal("one_which_filter_table", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {and having|and with|, with|and have} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_with_filter_table", [new $runtime.NonTerminal("one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {with|having|that have} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
    }
    if (!$options.flags.nofilter) {
        $grammar.addRule("two_with_filter_table", [new $runtime.NonTerminal("apv_filter", "filter", undefined), new $runtime.NonTerminal("one_with_filter_table", "table", ["functionName", 0, "functionName"])], $locale._("${filter} ${table}"), ((filter, table) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
    }
    if (!$options.flags.turking) {
        if (!$options.flags.nofilter) {
            $grammar.addRule("two_with_filter_table", [new $runtime.NonTerminal("one_with_filter_table", "table", ["has_geo", (true)]), new $runtime.NonTerminal("within_filter", "filter", undefined)], $locale._("${table} ${filter}"), ((table, filter) => C.makeWithinGeoDistanceExpression($loader, table, filter.place, filter.distance)), C.expressionKeyFn, {});
        }
        if (!$options.flags.nofilter) {
            $grammar.addRule("two_with_filter_table", [new $runtime.NonTerminal("one_which_filter_table", "table", ["has_geo", (true)]), new $runtime.NonTerminal("within_filter", "filter", undefined)], $locale._("${table} ${filter}"), ((table, filter) => C.makeWithinGeoDistanceExpression($loader, table, filter.place, filter.distance)), C.expressionKeyFn, {});
        }
        if (!$options.flags.nofilter) {
            $grammar.addRule("two_with_filter_table", [new $runtime.NonTerminal("one_clean_filter_table", "table", ["has_geo", (true)]), new $runtime.NonTerminal("within_filter", "filter", undefined)], $locale._("${table} ${filter}"), ((table, filter) => C.makeWithinGeoDistanceExpression($loader, table, filter.place, filter.distance)), C.expressionKeyFn, {});
        }
    }
    $grammar.declareSymbol("two_which_filter_table");
    if (!$options.flags.nofilter) {
        $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_with_filter_table", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {which|that} {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_with_filter_table", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {which|that} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_with_filter_table", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {which|that} {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_with_filter_table", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {which|that} {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_with_filter_table", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {which|that} have ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_with_filter_table", "table", undefined), new $runtime.NonTerminal("with_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {which|that} have ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_with_filter_table", "table", undefined), new $runtime.NonTerminal("reverse_verb_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {which|that} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_which_filter_table", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} and {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_which_filter_table", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} and ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_which_filter_table", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} and {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_which_filter_table", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} and {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_which_filter_table", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} and have ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_which_filter_table", "table", undefined), new $runtime.NonTerminal("with_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} and have ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_which_filter_table", "table", undefined), new $runtime.NonTerminal("reverse_verb_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} and ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {which|that} {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {which|that} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {which|that} {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {which|that} {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {which|that} have ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("with_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {which|that} have ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("reverse_verb_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {which|that} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        if (!$options.flags.nofilter) {
            $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("apv_filter", "filter", undefined), new $runtime.NonTerminal("one_which_filter_table", "table", ["functionName", 0, "functionName"])], $locale._("${filter} ${table}"), ((filter, table) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        }
    }
    $grammar.declareSymbol("two_clean_filter_table");
    if (!$options.flags.nofilter) {
        $grammar.addRule("two_clean_filter_table", [new $runtime.NonTerminal("apv_filter", "filter", undefined), new $runtime.NonTerminal("one_clean_filter_table", "table", ["functionName", 0, "functionName"])], $locale._("${filter} ${table}"), ((filter, table) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_clean_filter_table", [new $runtime.NonTerminal("one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("pvp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_clean_filter_table", [new $runtime.NonTerminal("one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("preposition_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_clean_filter_table", [new $runtime.NonTerminal("quality_filter", "filter", undefined), new $runtime.NonTerminal("one_clean_filter_table", "table", undefined)], $locale._("${filter} ${table}"), ((filter, table) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_clean_filter_table", [new $runtime.NonTerminal("one_clean_filter_table", "table", ["has_geo", (true)]), new $runtime.NonTerminal("nearby_filter", "filter", undefined)], $locale._("${table} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
    }
    $grammar.declareSymbol("three_with_filter_table");
    if (!$options.flags.nofilter) {
        $grammar.addRule("three_with_filter_table", [new $runtime.NonTerminal("two_with_filter_table", "table", undefined), new $runtime.NonTerminal("with_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} and ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("three_with_filter_table", [new $runtime.NonTerminal("two_which_filter_table", "table", undefined), new $runtime.NonTerminal("with_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {and having|and with|, with|and have} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("three_with_filter_table", [new $runtime.NonTerminal("two_clean_filter_table", "table", undefined), new $runtime.NonTerminal("with_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {with|having|that have} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("three_with_filter_table", [new $runtime.NonTerminal("two_with_filter_table", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} and ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("three_with_filter_table", [new $runtime.NonTerminal("two_which_filter_table", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {and having|and with|, with|and have} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("three_with_filter_table", [new $runtime.NonTerminal("two_clean_filter_table", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {with|having|that have} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
    }
    if (!$options.flags.nofilter) {
        $grammar.addRule("three_with_filter_table", [new $runtime.NonTerminal("apv_filter", "filter", undefined), new $runtime.NonTerminal("two_with_filter_table", "table", ["functionName", 0, "functionName"])], $locale._("${filter} ${table}"), ((filter, table) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
    }
    if (!$options.flags.turking) {
        if (!$options.flags.nofilter) {
            $grammar.addRule("three_with_filter_table", [new $runtime.NonTerminal("two_with_filter_table", "table", ["has_geo", (true)]), new $runtime.NonTerminal("within_filter", "filter", undefined)], $locale._("${table} ${filter}"), ((table, filter) => C.makeWithinGeoDistanceExpression($loader, table, filter.place, filter.distance)), C.expressionKeyFn, {});
        }
        if (!$options.flags.nofilter) {
            $grammar.addRule("three_with_filter_table", [new $runtime.NonTerminal("two_which_filter_table", "table", ["has_geo", (true)]), new $runtime.NonTerminal("within_filter", "filter", undefined)], $locale._("${table} ${filter}"), ((table, filter) => C.makeWithinGeoDistanceExpression($loader, table, filter.place, filter.distance)), C.expressionKeyFn, {});
        }
        if (!$options.flags.nofilter) {
            $grammar.addRule("three_with_filter_table", [new $runtime.NonTerminal("two_clean_filter_table", "table", ["has_geo", (true)]), new $runtime.NonTerminal("within_filter", "filter", undefined)], $locale._("${table} ${filter}"), ((table, filter) => C.makeWithinGeoDistanceExpression($loader, table, filter.place, filter.distance)), C.expressionKeyFn, {});
        }
    }
    $grammar.declareSymbol("three_which_filter_table");
    if (!$options.flags.nofilter) {
        $grammar.addRule("three_which_filter_table", [new $runtime.NonTerminal("two_with_filter_table", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {which|that} {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("three_which_filter_table", [new $runtime.NonTerminal("two_with_filter_table", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {which|that} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("three_which_filter_table", [new $runtime.NonTerminal("two_with_filter_table", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {which|that} {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("three_which_filter_table", [new $runtime.NonTerminal("two_with_filter_table", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {which|that} {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("three_which_filter_table", [new $runtime.NonTerminal("two_with_filter_table", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {which|that} have ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("three_which_filter_table", [new $runtime.NonTerminal("two_with_filter_table", "table", undefined), new $runtime.NonTerminal("with_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {which|that} have ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("three_which_filter_table", [new $runtime.NonTerminal("two_with_filter_table", "table", undefined), new $runtime.NonTerminal("reverse_verb_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {which|that} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("three_which_filter_table", [new $runtime.NonTerminal("two_which_filter_table", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} and {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("three_which_filter_table", [new $runtime.NonTerminal("two_which_filter_table", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} and ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("three_which_filter_table", [new $runtime.NonTerminal("two_which_filter_table", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} and {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("three_which_filter_table", [new $runtime.NonTerminal("two_which_filter_table", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} and {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("three_which_filter_table", [new $runtime.NonTerminal("two_which_filter_table", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} and have ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("three_which_filter_table", [new $runtime.NonTerminal("two_which_filter_table", "table", undefined), new $runtime.NonTerminal("with_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} and have ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("three_which_filter_table", [new $runtime.NonTerminal("two_which_filter_table", "table", undefined), new $runtime.NonTerminal("reverse_verb_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} and ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("three_which_filter_table", [new $runtime.NonTerminal("two_clean_filter_table", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {which|that} {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("three_which_filter_table", [new $runtime.NonTerminal("two_clean_filter_table", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {which|that} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("three_which_filter_table", [new $runtime.NonTerminal("two_clean_filter_table", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {which|that} {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("three_which_filter_table", [new $runtime.NonTerminal("two_clean_filter_table", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {which|that} {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("three_which_filter_table", [new $runtime.NonTerminal("two_clean_filter_table", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {which|that} have ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("three_which_filter_table", [new $runtime.NonTerminal("two_clean_filter_table", "table", undefined), new $runtime.NonTerminal("with_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {which|that} have ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("three_which_filter_table", [new $runtime.NonTerminal("two_clean_filter_table", "table", undefined), new $runtime.NonTerminal("reverse_verb_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} {which|that} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
    }
    if (!$options.flags.nofilter) {
        $grammar.addRule("three_which_filter_table", [new $runtime.NonTerminal("apv_filter", "filter", undefined), new $runtime.NonTerminal("two_which_filter_table", "table", ["functionName", 0, "functionName"])], $locale._("${filter} ${table}"), ((filter, table) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
    }
    $grammar.declareSymbol("three_clean_filter_table");
    if (!$options.flags.nofilter) {
        $grammar.addRule("three_clean_filter_table", [new $runtime.NonTerminal("apv_filter", "filter", undefined), new $runtime.NonTerminal("two_clean_filter_table", "table", ["functionName", 0, "functionName"])], $locale._("${filter} ${table}"), ((filter, table) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("three_clean_filter_table", [new $runtime.NonTerminal("two_clean_filter_table", "table", undefined), new $runtime.NonTerminal("pvp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("three_clean_filter_table", [new $runtime.NonTerminal("two_clean_filter_table", "table", undefined), new $runtime.NonTerminal("preposition_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("three_clean_filter_table", [new $runtime.NonTerminal("quality_filter", "filter", undefined), new $runtime.NonTerminal("two_clean_filter_table", "table", undefined)], $locale._("${filter} ${table}"), ((filter, table) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("three_clean_filter_table", [new $runtime.NonTerminal("two_clean_filter_table", "table", ["has_geo", (true)]), new $runtime.NonTerminal("nearby_filter", "filter", undefined)], $locale._("${table} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
    }
    $grammar.declareSymbol("anything_phrase");
    $grammar.addRule("anything_phrase", [new $runtime.NonTerminal("anything_with_filter_phrase", undefined, undefined)], "${anything_with_filter_phrase}", (($0) => { return $0; }), C.expressionKeyFn, { identity: (true) });
    $grammar.addRule("anything_phrase", [new $runtime.NonTerminal("anything_which_filter_phrase", undefined, undefined)], "${anything_which_filter_phrase}", (($0) => { return $0; }), C.expressionKeyFn, { identity: (true) });
    $grammar.addRule("anything_phrase", [new $runtime.NonTerminal("anything_clean_filter_phrase", undefined, undefined)], "${anything_clean_filter_phrase}", (($0) => { return $0; }), C.expressionKeyFn, { identity: (true) });
    $grammar.declareSymbol("anything_with_filter_phrase");
    $grammar.addRule("anything_with_filter_phrase", [new $runtime.NonTerminal("generic_base_noun_phrase", "phrase", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("{any|some} ${phrase} {with|having} ${filter}"), ((phrase, filter) => C.addFilter($loader, phrase, filter)), C.expressionKeyFn, {});
    $grammar.addRule("anything_with_filter_phrase", [new $runtime.NonTerminal("generic_anything_noun_phrase", "phrase", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${phrase} {with|having} ${filter}"), ((phrase, filter) => C.addFilter($loader, phrase, filter)), C.expressionKeyFn, {});
    $grammar.declareSymbol("anything_which_filter_phrase");
    $grammar.addRule("anything_which_filter_phrase", [new $runtime.NonTerminal("generic_base_noun_phrase", "phrase", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("{any|some} ${phrase} {which|that} {has|have} ${filter}"), ((phrase, filter) => C.addFilter($loader, phrase, filter)), C.expressionKeyFn, {});
    $grammar.addRule("anything_which_filter_phrase", [new $runtime.NonTerminal("generic_base_noun_phrase", "phrase", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName", 0, "functionName"])], $locale._("{any|some} ${phrase} {which|that} {is|are} ${filter}"), ((phrase, filter) => C.addFilter($loader, phrase, filter)), C.expressionKeyFn, {});
    $grammar.addRule("anything_which_filter_phrase", [new $runtime.NonTerminal("generic_base_noun_phrase", "phrase", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("{any|some} ${phrase} {which|that} ${filter}"), ((phrase, filter) => C.addFilter($loader, phrase, filter)), C.expressionKeyFn, {});
    $grammar.addRule("anything_which_filter_phrase", [new $runtime.NonTerminal("generic_base_noun_phrase", "phrase", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("{any|some} ${phrase} {which|that} {is|are} ${filter}"), ((phrase, filter) => C.addFilter($loader, phrase, filter)), C.expressionKeyFn, {});
    $grammar.addRule("anything_which_filter_phrase", [new $runtime.NonTerminal("generic_anything_noun_phrase", "phrase", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${phrase} {which|that} {has|have} ${filter}"), ((phrase, filter) => C.addFilter($loader, phrase, filter)), C.expressionKeyFn, {});
    $grammar.addRule("anything_which_filter_phrase", [new $runtime.NonTerminal("generic_anything_noun_phrase", "phrase", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${phrase} {which|that} {is|are} ${filter}"), ((phrase, filter) => C.addFilter($loader, phrase, filter)), C.expressionKeyFn, {});
    $grammar.addRule("anything_which_filter_phrase", [new $runtime.NonTerminal("generic_anything_noun_phrase", "phrase", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${phrase} {which|that} ${filter}"), ((phrase, filter) => C.addFilter($loader, phrase, filter)), C.expressionKeyFn, {});
    $grammar.addRule("anything_which_filter_phrase", [new $runtime.NonTerminal("generic_anything_noun_phrase", "phrase", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${phrase} {which|that} {is|are} ${filter}"), ((phrase, filter) => C.addFilter($loader, phrase, filter)), C.expressionKeyFn, {});
    $grammar.declareSymbol("anything_clean_filter_phrase");
    $grammar.addRule("anything_clean_filter_phrase", [new $runtime.NonTerminal("apv_filter", "filter", undefined), new $runtime.NonTerminal("generic_base_noun_phrase", "phrase", ["functionName", 0, "functionName"])], $locale._("{any|some} ${filter} ${phrase}"), ((filter, phrase) => C.addFilter($loader, phrase, filter)), C.expressionKeyFn, {});
    $grammar.addRule("anything_clean_filter_phrase", [new $runtime.NonTerminal("generic_base_noun_phrase", "phrase", undefined), new $runtime.NonTerminal("pvp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("{any|some} ${phrase} ${filter}"), ((phrase, filter) => C.addFilter($loader, phrase, filter)), C.expressionKeyFn, {});
    $grammar.addRule("anything_clean_filter_phrase", [new $runtime.NonTerminal("generic_base_noun_phrase", "phrase", undefined), new $runtime.NonTerminal("preposition_filter", "filter", ["functionName", 0, "functionName"])], $locale._("{any|some} ${phrase} ${filter}"), ((phrase, filter) => C.addFilter($loader, phrase, filter)), C.expressionKeyFn, {});
    $grammar.addRule("anything_clean_filter_phrase", [new $runtime.NonTerminal("generic_anything_noun_phrase", "phrase", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${phrase} ${filter}"), ((phrase, filter) => C.addFilter($loader, phrase, filter)), C.expressionKeyFn, {});
    $grammar.addRule("anything_clean_filter_phrase", [new $runtime.NonTerminal("generic_anything_noun_phrase", "phrase", undefined), new $runtime.NonTerminal("pvp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${phrase} ${filter}"), ((phrase, filter) => C.addFilter($loader, phrase, filter)), C.expressionKeyFn, {});
    $grammar.addRule("anything_clean_filter_phrase", [new $runtime.NonTerminal("generic_anything_noun_phrase", "phrase", undefined), new $runtime.NonTerminal("preposition_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${phrase} ${filter}"), ((phrase, filter) => C.addFilter($loader, phrase, filter)), C.expressionKeyFn, {});
    $grammar.addRule("anything_clean_filter_phrase", [new $runtime.NonTerminal("generic_anything_noun_phrase", "phrase", ["has_geo", (true)]), new $runtime.NonTerminal("nearby_filter", "filter", undefined)], $locale._("${phrase} ${filter}"), ((phrase, filter) => C.addFilter($loader, phrase, filter)), C.expressionKeyFn, {});
    $grammar.addRule("anything_clean_filter_phrase", [new $runtime.NonTerminal("quality_filter", "filter", undefined), new $runtime.NonTerminal("generic_anything_noun_phrase", "phrase", undefined)], $locale._("${filter} ${phrase}"), ((filter, phrase) => C.addFilter($loader, phrase, filter)), C.expressionKeyFn, {});
    $grammar.declareSymbol("verb_filtered_table");
    $grammar.addRule("verb_filtered_table", [new $runtime.NonTerminal("one_be_filter_table", undefined, undefined)], "${one_be_filter_table}", (($0) => { return $0; }), C.expressionKeyFn, { identity: (true) });
    $grammar.addRule("verb_filtered_table", [new $runtime.NonTerminal("one_have_filter_table", undefined, undefined)], "${one_have_filter_table}", (($0) => { return $0; }), C.expressionKeyFn, { identity: (true) });
    $grammar.addRule("verb_filtered_table", [new $runtime.NonTerminal("one_verb_filter_table", undefined, undefined)], "${one_verb_filter_table}", (($0) => { return $0; }), C.expressionKeyFn, { identity: (true) });
    $grammar.addRule("verb_filtered_table", [new $runtime.NonTerminal("two_be_filter_table", undefined, undefined)], "${two_be_filter_table}", (($0) => { return $0; }), C.expressionKeyFn, { identity: (true) });
    $grammar.addRule("verb_filtered_table", [new $runtime.NonTerminal("two_have_filter_table", undefined, undefined)], "${two_have_filter_table}", (($0) => { return $0; }), C.expressionKeyFn, { identity: (true) });
    $grammar.addRule("verb_filtered_table", [new $runtime.NonTerminal("two_verb_filter_table", undefined, undefined)], "${two_verb_filter_table}", (($0) => { return $0; }), C.expressionKeyFn, { identity: (true) });
    $grammar.declareSymbol("one_be_filter_table");
    if (!$options.flags.nofilter) {
        $grammar.addRule("one_be_filter_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("one_be_filter_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("pvp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("one_be_filter_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("one_be_filter_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
    }
    $grammar.declareSymbol("one_have_filter_table");
    if (!$options.flags.nofilter) {
        $grammar.addRule("one_have_filter_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("with_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {get|have} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
    }
    if (!$options.flags.nofilter) {
        $grammar.addRule("one_have_filter_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {get|have} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
    }
    $grammar.declareSymbol("one_verb_filter_table");
    if (!$options.flags.nofilter) {
        $grammar.addRule("one_verb_filter_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
    }
    $grammar.declareSymbol("two_be_filter_table");
    if (!$options.flags.nofilter) {
        $grammar.addRule("two_be_filter_table", [new $runtime.NonTerminal("one_be_filter_table", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} and ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_be_filter_table", [new $runtime.NonTerminal("one_be_filter_table", "table", undefined), new $runtime.NonTerminal("pvp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} and ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_be_filter_table", [new $runtime.NonTerminal("one_be_filter_table", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} and ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_be_filter_table", [new $runtime.NonTerminal("one_be_filter_table", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} and ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_be_filter_table", [new $runtime.NonTerminal("one_have_filter_table", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} and {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_be_filter_table", [new $runtime.NonTerminal("one_have_filter_table", "table", undefined), new $runtime.NonTerminal("pvp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} and {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_be_filter_table", [new $runtime.NonTerminal("one_have_filter_table", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} and {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_be_filter_table", [new $runtime.NonTerminal("one_have_filter_table", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} and {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_be_filter_table", [new $runtime.NonTerminal("one_verb_filter_table", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} and {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_be_filter_table", [new $runtime.NonTerminal("one_verb_filter_table", "table", undefined), new $runtime.NonTerminal("pvp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} and {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_be_filter_table", [new $runtime.NonTerminal("one_verb_filter_table", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} and {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_be_filter_table", [new $runtime.NonTerminal("one_verb_filter_table", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} and {is|are} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
    }
    $grammar.declareSymbol("two_have_filter_table");
    if (!$options.flags.nofilter) {
        $grammar.addRule("two_have_filter_table", [new $runtime.NonTerminal("one_be_filter_table", "table", undefined), new $runtime.NonTerminal("with_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} and {get|have} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_have_filter_table", [new $runtime.NonTerminal("one_have_filter_table", "table", undefined), new $runtime.NonTerminal("with_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} and ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_have_filter_table", [new $runtime.NonTerminal("one_verb_filter_table", "table", undefined), new $runtime.NonTerminal("with_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} and {get|have} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_have_filter_table", [new $runtime.NonTerminal("one_be_filter_table", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} and {get|have} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_have_filter_table", [new $runtime.NonTerminal("one_have_filter_table", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} and ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_have_filter_table", [new $runtime.NonTerminal("one_verb_filter_table", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} {|,} and {get|have} ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
    }
    $grammar.declareSymbol("two_verb_filter_table");
    if (!$options.flags.nofilter) {
        $grammar.addRule("two_verb_filter_table", [new $runtime.NonTerminal("one_be_filter_table", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} and ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_verb_filter_table", [new $runtime.NonTerminal("one_have_filter_table", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} and ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
        $grammar.addRule("two_verb_filter_table", [new $runtime.NonTerminal("one_verb_filter_table", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName", 0, "functionName"])], $locale._("${table} and ${filter}"), ((table, filter) => C.addFilter($loader, table, filter)), C.expressionKeyFn, {});
    }
    $grammar.declareSymbol("generic_argminmax");
    $grammar.addRule("generic_argminmax", [new $runtime.NonTerminal("out_param_Any", "p", ["type", ((thingtalk_1.Type.Number))])], $locale._("{maximum|highest} ${p}"), ((p) => [p, 'desc']), C.argMinMaxKeyFn, {});
    $grammar.addRule("generic_argminmax", [new $runtime.NonTerminal("out_param_Any", "p", ["type", ((thingtalk_1.Type.Number))])], $locale._("{minimum|lowest} ${p}"), ((p) => [p, 'asc']), C.argMinMaxKeyFn, {});
    $grammar.addRule("generic_argminmax", [new $runtime.NonTerminal("out_param_Any", "p", ["type", ((thingtalk_1.Type.Currency))])], $locale._("{most costly|most expensive|maximum} ${p}"), ((p) => [p, 'desc']), C.argMinMaxKeyFn, {});
    $grammar.addRule("generic_argminmax", [new $runtime.NonTerminal("out_param_Any", "p", ["type", ((thingtalk_1.Type.Currency))])], $locale._("{least costly|cheapest|minimum} ${p}"), ((p) => [p, 'asc']), C.argMinMaxKeyFn, {});
    $grammar.addRule("generic_argminmax", [new $runtime.NonTerminal("out_param_Any", "p", ["type", ((new thingtalk_1.Type.Measure('ms')))])], $locale._("{longest|most lasting} ${p}"), ((p) => [p, 'desc']), C.argMinMaxKeyFn, {});
    $grammar.addRule("generic_argminmax", [new $runtime.NonTerminal("out_param_Any", "p", ["type", ((new thingtalk_1.Type.Measure('ms')))])], $locale._("shortest ${p}"), ((p) => [p, 'asc']), C.argMinMaxKeyFn, {});
    $grammar.addRule("generic_argminmax", [new $runtime.NonTerminal("out_param_Any", "p", ["type", ((new thingtalk_1.Type.Measure('byte')))])], $locale._("{maximum|largest} ${p}"), ((p) => [p, 'desc']), C.argMinMaxKeyFn, {});
    $grammar.addRule("generic_argminmax", [new $runtime.NonTerminal("out_param_Any", "p", ["type", ((new thingtalk_1.Type.Measure('byte')))])], $locale._("{minimum|smallest} ${p}"), ((p) => [p, 'asc']), C.argMinMaxKeyFn, {});
    $grammar.addRule("generic_argminmax", [new $runtime.NonTerminal("out_param_Any", "p", ["type", ((new thingtalk_1.Type.Measure('kg')))])], $locale._("{heaviest|largest|maximum} ${p}"), ((p) => [p, 'desc']), C.argMinMaxKeyFn, {});
    $grammar.addRule("generic_argminmax", [new $runtime.NonTerminal("out_param_Any", "p", ["type", ((new thingtalk_1.Type.Measure('kg')))])], $locale._("{lightest|smallest|minimum} ${p}"), ((p) => [p, 'asc']), C.argMinMaxKeyFn, {});
    $grammar.addRule("generic_argminmax", [new $runtime.NonTerminal("out_param_Any", "p", ["type", ((new thingtalk_1.Type.Measure('C')))])], $locale._("{hottest|highest|maximum} ${p}"), ((p) => [p, 'desc']), C.argMinMaxKeyFn, {});
    $grammar.addRule("generic_argminmax", [new $runtime.NonTerminal("out_param_Any", "p", ["type", ((new thingtalk_1.Type.Measure('C')))])], $locale._("{coolest|lowest|minimum} ${p}"), ((p) => [p, 'asc']), C.argMinMaxKeyFn, {});
    $grammar.addRule("generic_argminmax", [new $runtime.NonTerminal("out_param_Any", "p", ["type", ((new thingtalk_1.Type.Measure('m')))])], $locale._("{farthest|most distant|longest} ${p}"), ((p) => [p, 'desc']), C.argMinMaxKeyFn, {});
    $grammar.addRule("generic_argminmax", [new $runtime.NonTerminal("out_param_Any", "p", ["type", ((new thingtalk_1.Type.Measure('m')))])], $locale._("{nearest|closest|shortest} ${p}"), ((p) => [p, 'asc']), C.argMinMaxKeyFn, {});
    $grammar.addRule("generic_argminmax", [new $runtime.NonTerminal("out_param_Any", "p", ["type", ((new thingtalk_1.Type.Measure('m2')))])], $locale._("{largest|biggest} ${p}"), ((p) => [p, 'desc']), C.argMinMaxKeyFn, {});
    $grammar.addRule("generic_argminmax", [new $runtime.NonTerminal("out_param_Any", "p", ["type", ((new thingtalk_1.Type.Measure('m2')))])], $locale._("smallest ${p}"), ((p) => [p, 'asc']), C.argMinMaxKeyFn, {});
    $grammar.addRule("generic_argminmax", [new $runtime.NonTerminal("out_param_Any", "p", ["type", ((new thingtalk_1.Type.Measure('m3')))])], $locale._("{largest|biggest} ${p}"), ((p) => [p, 'desc']), C.argMinMaxKeyFn, {});
    $grammar.addRule("generic_argminmax", [new $runtime.NonTerminal("out_param_Any", "p", ["type", ((new thingtalk_1.Type.Measure('m3')))])], $locale._("smallest ${p}"), ((p) => [p, 'asc']), C.argMinMaxKeyFn, {});
    $grammar.addRule("generic_argminmax", [new $runtime.NonTerminal("out_param_Any", "p", ["type", ((new thingtalk_1.Type.Measure('mps')))])], $locale._("{fastest|quickest|speediest} ${p}"), ((p) => [p, 'desc']), C.argMinMaxKeyFn, {});
    $grammar.addRule("generic_argminmax", [new $runtime.NonTerminal("out_param_Any", "p", ["type", ((new thingtalk_1.Type.Measure('mps')))])], $locale._("{slowest|most slowly} ${p}"), ((p) => [p, 'asc']), C.argMinMaxKeyFn, {});
    $grammar.addRule("generic_argminmax", [new $runtime.NonTerminal("out_param_Any", "p", ["type", ((thingtalk_1.Type.Date))])], $locale._("{latest|most recent} ${p}"), ((p) => [p, 'desc']), C.argMinMaxKeyFn, {});
    $grammar.addRule("generic_argminmax", [new $runtime.NonTerminal("out_param_Any", "p", ["type", ((thingtalk_1.Type.Date))])], $locale._("{earliest|soonest} ${p}"), ((p) => [p, 'asc']), C.argMinMaxKeyFn, {});
    $grammar.addRule("generic_argminmax", [new $runtime.NonTerminal("out_param_Any", "p", ["type", ((thingtalk_1.Type.Time))])], $locale._("{latest|most recent} ${p}"), ((p) => [p, 'desc']), C.argMinMaxKeyFn, {});
    $grammar.addRule("generic_argminmax", [new $runtime.NonTerminal("out_param_Any", "p", ["type", ((thingtalk_1.Type.Time))])], $locale._("{earliest|soonest} ${p}"), ((p) => [p, 'asc']), C.argMinMaxKeyFn, {});
    $grammar.declareSymbol("with_arg_min_max_table");
    if ($options.flags.aggregation) {
        $grammar.addRule("with_arg_min_max_table", [new $runtime.NonTerminal("complete_table", "t", undefined), new $runtime.NonTerminal("generic_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} {with|which has|which have} the ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("with_arg_min_max_table", [new $runtime.NonTerminal("complete_table", "t", undefined), new $runtime.NonTerminal("npp_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} {with|which has|which have} the ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("with_arg_min_max_table", [new $runtime.NonTerminal("complete_table", "t", undefined), new $runtime.NonTerminal("avp_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} {that|which} ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("with_arg_min_max_table", [new $runtime.NonTerminal("complete_table", "t", undefined), new $runtime.NonTerminal("pvp_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} {that|which} {is|are} ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("with_arg_min_max_table", [new $runtime.NonTerminal("complete_table", "t", undefined), new $runtime.NonTerminal("apv_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} {that|which} {is|are} the ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("with_arg_min_max_table", [new $runtime.NonTerminal("apv_argminmax", "argminmax", undefined), new $runtime.NonTerminal("complete_table", "t", ["functionName", 0, "functionName"])], $locale._("${argminmax} ${t}"), ((argminmax, t) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("with_arg_min_max_table", [new $runtime.NonTerminal("complete_table", "t", undefined), new $runtime.NonTerminal("preposition_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} {that|which} {is|are} ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("with_arg_min_max_table", [new $runtime.NonTerminal("one_clean_filter_table", "t", undefined), new $runtime.NonTerminal("generic_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} {with|which has|which have} the ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("with_arg_min_max_table", [new $runtime.NonTerminal("one_clean_filter_table", "t", undefined), new $runtime.NonTerminal("npp_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} {with|which has|which have} ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("with_arg_min_max_table", [new $runtime.NonTerminal("one_clean_filter_table", "t", undefined), new $runtime.NonTerminal("avp_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} {that|which} ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("with_arg_min_max_table", [new $runtime.NonTerminal("one_clean_filter_table", "t", undefined), new $runtime.NonTerminal("pvp_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} {that|which} {is|are} ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("with_arg_min_max_table", [new $runtime.NonTerminal("one_clean_filter_table", "t", undefined), new $runtime.NonTerminal("apv_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} {that|which} {is|are} the ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("with_arg_min_max_table", [new $runtime.NonTerminal("apv_argminmax", "argminmax", undefined), new $runtime.NonTerminal("one_clean_filter_table", "t", ["functionName", 0, "functionName"])], $locale._("${argminmax} ${t}"), ((argminmax, t) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("with_arg_min_max_table", [new $runtime.NonTerminal("one_clean_filter_table", "t", undefined), new $runtime.NonTerminal("preposition_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} {that|which} {is|are} ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("with_arg_min_max_table", [new $runtime.NonTerminal("one_with_filter_table", "t", undefined), new $runtime.NonTerminal("generic_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} and the ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("with_arg_min_max_table", [new $runtime.NonTerminal("one_with_filter_table", "t", undefined), new $runtime.NonTerminal("npp_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} and the ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("with_arg_min_max_table", [new $runtime.NonTerminal("one_with_filter_table", "t", undefined), new $runtime.NonTerminal("avp_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} {that|which} ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("with_arg_min_max_table", [new $runtime.NonTerminal("one_with_filter_table", "t", undefined), new $runtime.NonTerminal("pvp_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} {that|which} {is|are} ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("with_arg_min_max_table", [new $runtime.NonTerminal("one_with_filter_table", "t", undefined), new $runtime.NonTerminal("apv_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} {that|which} {is|are} the ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("with_arg_min_max_table", [new $runtime.NonTerminal("apv_argminmax", "argminmax", undefined), new $runtime.NonTerminal("one_with_filter_table", "t", ["functionName", 0, "functionName"])], $locale._("${argminmax} ${t}"), ((argminmax, t) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("with_arg_min_max_table", [new $runtime.NonTerminal("one_with_filter_table", "t", undefined), new $runtime.NonTerminal("preposition_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} {that|which} {is|are} ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("with_arg_min_max_table", [new $runtime.NonTerminal("two_with_filter_table", "t", undefined), new $runtime.NonTerminal("generic_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} and the ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("with_arg_min_max_table", [new $runtime.NonTerminal("two_with_filter_table", "t", undefined), new $runtime.NonTerminal("npp_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} and the ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("with_arg_min_max_table", [new $runtime.NonTerminal("two_with_filter_table", "t", undefined), new $runtime.NonTerminal("avp_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} {that|which} ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("with_arg_min_max_table", [new $runtime.NonTerminal("two_with_filter_table", "t", undefined), new $runtime.NonTerminal("pvp_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} {that|which} {is|are} ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("with_arg_min_max_table", [new $runtime.NonTerminal("two_with_filter_table", "t", undefined), new $runtime.NonTerminal("apv_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} {that|which} {is|are} the ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("with_arg_min_max_table", [new $runtime.NonTerminal("apv_argminmax", "argminmax", undefined), new $runtime.NonTerminal("two_with_filter_table", "t", ["functionName", 0, "functionName"])], $locale._("${argminmax} ${t}"), ((argminmax, t) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("with_arg_min_max_table", [new $runtime.NonTerminal("two_with_filter_table", "t", undefined), new $runtime.NonTerminal("preposition_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} {that|which} {is|are} ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("with_arg_min_max_table", [new $runtime.NonTerminal("one_which_filter_table", "t", undefined), new $runtime.NonTerminal("generic_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} and have the ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("with_arg_min_max_table", [new $runtime.NonTerminal("one_which_filter_table", "t", undefined), new $runtime.NonTerminal("npp_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} and have the ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("with_arg_min_max_table", [new $runtime.NonTerminal("one_which_filter_table", "t", undefined), new $runtime.NonTerminal("avp_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} and ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("with_arg_min_max_table", [new $runtime.NonTerminal("one_which_filter_table", "t", undefined), new $runtime.NonTerminal("pvp_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} and {is|are} ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("with_arg_min_max_table", [new $runtime.NonTerminal("one_which_filter_table", "t", undefined), new $runtime.NonTerminal("apv_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} and {is|are} the ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("with_arg_min_max_table", [new $runtime.NonTerminal("apv_argminmax", "argminmax", undefined), new $runtime.NonTerminal("one_which_filter_table", "t", ["functionName", 0, "functionName"])], $locale._("${argminmax} ${t}"), ((argminmax, t) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("with_arg_min_max_table", [new $runtime.NonTerminal("one_which_filter_table", "t", undefined), new $runtime.NonTerminal("preposition_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} and {is|are} ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("with_arg_min_max_table", [new $runtime.NonTerminal("two_which_filter_table", "t", undefined), new $runtime.NonTerminal("generic_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} and have the ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("with_arg_min_max_table", [new $runtime.NonTerminal("two_which_filter_table", "t", undefined), new $runtime.NonTerminal("npp_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} and have the ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("with_arg_min_max_table", [new $runtime.NonTerminal("two_which_filter_table", "t", undefined), new $runtime.NonTerminal("avp_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} and ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("with_arg_min_max_table", [new $runtime.NonTerminal("two_which_filter_table", "t", undefined), new $runtime.NonTerminal("pvp_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} and {is|are} ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("with_arg_min_max_table", [new $runtime.NonTerminal("two_which_filter_table", "t", undefined), new $runtime.NonTerminal("apv_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} and {is|are} the ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("with_arg_min_max_table", [new $runtime.NonTerminal("apv_argminmax", "argminmax", undefined), new $runtime.NonTerminal("two_which_filter_table", "t", ["functionName", 0, "functionName"])], $locale._("${argminmax} ${t}"), ((argminmax, t) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("with_arg_min_max_table", [new $runtime.NonTerminal("two_which_filter_table", "t", undefined), new $runtime.NonTerminal("preposition_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} and {is|are} ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("with_arg_min_max_table", [new $runtime.NonTerminal("apv_argminmax", "argminmax", undefined), new $runtime.NonTerminal("constant_Number", "count", undefined), new $runtime.NonTerminal("with_filtered_table", "t", ["functionName", 0, "functionName"])], $locale._("${argminmax} ${count} ${t}"), ((argminmax, count, t) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1], count)), C.expressionKeyFn, {});
        $grammar.addRule("with_arg_min_max_table", [new $runtime.NonTerminal("constant_Number", "count", undefined), new $runtime.NonTerminal("apv_argminmax", "argminmax", undefined), new $runtime.NonTerminal("with_filtered_table", "t", ["functionName", 1, "functionName"])], $locale._("${count} ${argminmax} ${t}"), ((count, argminmax, t) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1], count)), C.expressionKeyFn, {});
    }
    $grammar.declareSymbol("have_arg_min_max_table");
    if ($options.flags.aggregation) {
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("complete_table", "t", undefined), new $runtime.NonTerminal("generic_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} {has|gets} the ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("complete_table", "t", undefined), new $runtime.NonTerminal("npp_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} {has|gets} the ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("complete_table", "t", undefined), new $runtime.NonTerminal("avp_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("complete_table", "t", undefined), new $runtime.NonTerminal("pvp_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} {is|are} ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("complete_table", "t", undefined), new $runtime.NonTerminal("apv_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} {is|are} the ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("complete_table", "t", undefined), new $runtime.NonTerminal("preposition_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} {is|are} ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("with_filtered_table", "t", undefined), new $runtime.NonTerminal("generic_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} {has|gets} the ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("with_filtered_table", "t", undefined), new $runtime.NonTerminal("npp_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} {has|gets} the ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("with_filtered_table", "t", undefined), new $runtime.NonTerminal("avp_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("with_filtered_table", "t", undefined), new $runtime.NonTerminal("pvp_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} {is|are} ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("with_filtered_table", "t", undefined), new $runtime.NonTerminal("apv_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} {is|are} the ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("with_filtered_table", "t", undefined), new $runtime.NonTerminal("preposition_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} {is|are} ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("one_have_filter_table", "t", undefined), new $runtime.NonTerminal("generic_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} {and|and has} the ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("one_have_filter_table", "t", undefined), new $runtime.NonTerminal("npp_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} {and|and has} the ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("one_have_filter_table", "t", undefined), new $runtime.NonTerminal("avp_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} and ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("one_have_filter_table", "t", undefined), new $runtime.NonTerminal("pvp_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} and {is|are} ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("one_have_filter_table", "t", undefined), new $runtime.NonTerminal("apv_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} and {is|are} the ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("one_have_filter_table", "t", undefined), new $runtime.NonTerminal("preposition_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} and {is|are} ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("one_verb_filter_table", "t", undefined), new $runtime.NonTerminal("generic_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} {and|and has} the ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("one_verb_filter_table", "t", undefined), new $runtime.NonTerminal("npp_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} {and|and has} the ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("one_verb_filter_table", "t", undefined), new $runtime.NonTerminal("avp_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} and ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("one_verb_filter_table", "t", undefined), new $runtime.NonTerminal("pvp_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} and {is|are} ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("one_verb_filter_table", "t", undefined), new $runtime.NonTerminal("apv_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} and {is|are} the ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("one_verb_filter_table", "t", undefined), new $runtime.NonTerminal("preposition_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} and {is|are} ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("one_be_filter_table", "t", undefined), new $runtime.NonTerminal("generic_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} {and|and has} the ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("one_be_filter_table", "t", undefined), new $runtime.NonTerminal("npp_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} {and|and has} the ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("one_be_filter_table", "t", undefined), new $runtime.NonTerminal("avp_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} and ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("one_be_filter_table", "t", undefined), new $runtime.NonTerminal("pvp_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} and {|is|are} ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("one_be_filter_table", "t", undefined), new $runtime.NonTerminal("apv_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} and {|is|are} the ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("one_be_filter_table", "t", undefined), new $runtime.NonTerminal("preposition_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} and {|is|are} ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("two_have_filter_table", "t", undefined), new $runtime.NonTerminal("generic_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} {and|and has} the ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("two_have_filter_table", "t", undefined), new $runtime.NonTerminal("npp_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} {and|and has} the ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("two_have_filter_table", "t", undefined), new $runtime.NonTerminal("avp_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} and ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("two_have_filter_table", "t", undefined), new $runtime.NonTerminal("pvp_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} and {is|are} ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("two_have_filter_table", "t", undefined), new $runtime.NonTerminal("apv_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} and {is|are} the ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("two_have_filter_table", "t", undefined), new $runtime.NonTerminal("preposition_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} and {is|are} ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("two_verb_filter_table", "t", undefined), new $runtime.NonTerminal("generic_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} {and|and has} the ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("two_verb_filter_table", "t", undefined), new $runtime.NonTerminal("npp_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} {and|and has} the ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("two_verb_filter_table", "t", undefined), new $runtime.NonTerminal("avp_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} and ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("two_verb_filter_table", "t", undefined), new $runtime.NonTerminal("pvp_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} and {is|are} ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("two_verb_filter_table", "t", undefined), new $runtime.NonTerminal("apv_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} and {is|are} the ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("two_verb_filter_table", "t", undefined), new $runtime.NonTerminal("preposition_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} and {is|are} ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("two_be_filter_table", "t", undefined), new $runtime.NonTerminal("generic_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} {and|and has} the ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("two_be_filter_table", "t", undefined), new $runtime.NonTerminal("npp_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} {and|and has} the ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("two_be_filter_table", "t", undefined), new $runtime.NonTerminal("avp_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} and ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("two_be_filter_table", "t", undefined), new $runtime.NonTerminal("pvp_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} and {|is|are} ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("two_be_filter_table", "t", undefined), new $runtime.NonTerminal("apv_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} and {|is|are} the ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
        $grammar.addRule("have_arg_min_max_table", [new $runtime.NonTerminal("two_be_filter_table", "t", undefined), new $runtime.NonTerminal("preposition_argminmax", "argminmax", ["functionName", 0, "functionName"])], $locale._("${t} and {|is|are} ${argminmax}"), ((t, argminmax) => C.makeArgMaxMinTable(t, argminmax[0].name, argminmax[1])), C.expressionKeyFn, {});
    }
    $grammar.declareSymbol("edge_stream");
    $grammar.addRule("edge_stream", [new $runtime.NonTerminal("projection_Any", "p", ["is_monitorable", (true)]), new $runtime.NonTerminal("constant_Any", "x", ["type", 0, "projectionType"])], $locale._("{when|if} the ${p} {becomes|becomes equal to} ${x}"), ((p, x) => C.makeEdgeFilterStream($loader, p, '==', x)), C.expressionKeyFn, {});
    $grammar.addRule("edge_stream", [new $runtime.NonTerminal("projection_Any", "p", ["is_monitorable", (true)]), new $runtime.NonTerminal("constant_Numeric", "x", ["type", 0, "projectionType"])], $locale._("{when|if} the ${p} {becomes greater than|becomes higher than|goes above|increases above} ${x}"), ((p, x) => C.makeEdgeFilterStream($loader, p, '>=', x)), C.expressionKeyFn, {});
    $grammar.addRule("edge_stream", [new $runtime.NonTerminal("projection_Any", "p", ["is_monitorable", (true)]), new $runtime.NonTerminal("constant_Numeric", "x", ["type", 0, "projectionType"])], $locale._("{when|if} the ${p} {becomes smaller than|becomes lower than|goes below|decreases above} ${x}"), ((p, x) => C.makeEdgeFilterStream($loader, p, '<=', x)), C.expressionKeyFn, {});
    $grammar.declareSymbol("stream");
    $grammar.addRule("stream", [new $runtime.NonTerminal("thingpedia_complete_stream", undefined, undefined)], "${thingpedia_complete_stream}", (($0) => { return $0; }), C.expressionKeyFn, { identity: (true) });
    if (!$options.flags.turking) {
        $grammar.addRule("stream", [new $runtime.NonTerminal("with_filtered_table", "table", ["is_monitorable", (true)])], $locale._("{when|if|in case|whenever|any time|should|anytime} ${table} {change|update}"), ((table) => C.tableToStream(table, { monitorItemID: false })), C.expressionKeyFn, {});
    }
    if ($options.flags.turking) {
        $grammar.addRule("stream", [new $runtime.NonTerminal("with_filtered_table", "table", ["is_monitorable", (true)])], $locale._("{when|if|in case|whenever|any time|should|anytime} ${table} update"), ((table) => C.tableToStream(table, { monitorItemID: false })), C.expressionKeyFn, {});
    }
    if (!$options.flags.turking) {
        $grammar.addRule("stream", [new $runtime.NonTerminal("with_filtered_table", "table", ["is_monitorable", (true)])], $locale._("{in case of changes|in case of variations|in case of updates|if something changes|when something changes|if there are changes|if there are updates} in ${table}"), ((table) => C.tableToStream(table, { monitorItemID: false })), C.expressionKeyFn, {});
        $grammar.addRule("stream", [new $runtime.NonTerminal("projection_Any", "proj", ["is_monitorable", (true)])], $locale._("{when|if|in case|whenever|any time|anytime} ${proj} changes"), ((proj) => C.tableToStream(proj, { monitorItemID: false })), C.expressionKeyFn, {});
    }
    if (!$options.flags.nofilter) {
        $grammar.addRule("stream", [new $runtime.NonTerminal("complete_table", "table", ["is_monitorable", (true)]), new $runtime.NonTerminal("edge_filter", "filter", ["functionName", 0, "functionName"])], $locale._("{when|if|in case|whenever|any time|should|anytime} ${table} change and ${filter}"), ((table, filter) => {
            if (!table.schema.is_monitorable || !C.checkFilter($loader, table, filter) || table.schema.is_list)
                return null;
            const withFilter = C.addFilter($loader, table, filter, { ifFilter: true });
            if (!withFilter)
                return null;
            return C.tableToStream(withFilter, { monitorItemID: false });
        }), C.expressionKeyFn, {});
    }
    if (!$options.flags.nofilter) {
        $grammar.addRule("stream", [new $runtime.NonTerminal("complete_table", "table", ["is_monitorable", (true)]), new $runtime.NonTerminal("if_filter", "filter", ["functionName", 0, "functionName"])], $locale._("{when|if|in case|whenever|any time|should|anytime} ${table} change and ${filter}"), ((table, filter) => {
            if (!table.schema.is_monitorable || !C.checkFilter($loader, table, filter))
                return null;
            if ($loader.flags.turking && table.schema.is_list)
                return null;
            const withFilter = C.addFilter($loader, table, filter, { ifFilter: true });
            if (!withFilter)
                return null;
            return C.tableToStream(withFilter, { monitorItemID: false });
        }), C.expressionKeyFn, {});
    }
    if (!$options.flags.nofilter) {
        $grammar.addRule("stream", [new $runtime.NonTerminal("edge_stream", undefined, undefined)], "${edge_stream}", (($0) => { return $0; }), C.expressionKeyFn, { identity: (true) });
    }
    $grammar.declareSymbol("with_filtered_table_join");
    if (!$options.flags.notablejoin) {
        $grammar.addRule("with_filtered_table_join", [new $runtime.NonTerminal("with_filtered_table", "table", undefined), new $runtime.NonTerminal("out_param_Any_hidden", "p", ["functionName", 0, "functionName"]), new $runtime.NonTerminal("with_filtered_table", "subquery", ["idType", 1, "elem"])], $locale._("${table} {with|having|that has|that have|which has|which have} ${p} ${subquery}"), ((table, p, subquery) => C.addComparisonSubquery(table, subquery, p.name)), C.expressionKeyFn, {});
        $grammar.addRule("with_filtered_table_join", [new $runtime.NonTerminal("with_filtered_table", "table", undefined), new $runtime.NonTerminal("out_param_Any", "p", ["functionName", 0, "functionName"]), new $runtime.NonTerminal("with_filtered_table", "subquery", ["idType", 1, "elem"])], $locale._("${table} with ${p} ${subquery}"), ((table, p, subquery) => C.addComparisonSubquery(table, subquery, p.name)), C.expressionKeyFn, {});
        $grammar.addRule("with_filtered_table_join", [new $runtime.NonTerminal("with_filtered_table", "table", undefined), new $runtime.NonTerminal("out_param_pvp", "p", ["functionName", 0, "functionName"]), new $runtime.NonTerminal("with_filtered_table", "subquery", ["idType", 1, "elem"])], $locale._("${table} ${p} ${subquery}"), ((table, p, subquery) => C.addComparisonSubquery(table, subquery, p.name)), C.expressionKeyFn, {});
        $grammar.addRule("with_filtered_table_join", [new $runtime.NonTerminal("with_filtered_table", "table", undefined), new $runtime.NonTerminal("out_param_avp", "p", ["functionName", 0, "functionName"]), new $runtime.NonTerminal("with_filtered_table", "subquery", ["idType", 1, "elem"])], $locale._("${table} {who|which|that} ${p} ${subquery}"), ((table, p, subquery) => C.addComparisonSubquery(table, subquery, p.name)), C.expressionKeyFn, {});
        $grammar.addRule("with_filtered_table_join", [new $runtime.NonTerminal("with_filtered_table", "table", undefined), new $runtime.NonTerminal("out_param_Any_hidden", "p", ["functionName", 0, "functionName"]), new $runtime.NonTerminal("with_filtered_table", "subquery", ["idType", 1, "elem"])], $locale._("${table} {of|for|in} ${p} ${subquery}"), ((table, p, subquery) => C.addReverseComparisonSubquery(table, subquery, null)), C.expressionKeyFn, {});
        if (!$options.flags.turking) {
            $grammar.addRule("with_filtered_table_join", [new $runtime.NonTerminal("with_filtered_table", "table", undefined), new $runtime.NonTerminal("out_param_Any_hidden", "p", ["functionName", 0, "functionName"]), new $runtime.NonTerminal("with_filtered_table", "subquery", ["idType", 1, "elem"])], $locale._("${table} 's ${p} ${subquery}"), ((table, p, subquery) => C.addReverseComparisonSubquery(table, subquery, null)), C.expressionKeyFn, {});
        }
    }
    $grammar.declareSymbol("have_filtered_table_join");
    if (!$options.flags.notablejoin) {
        $grammar.addRule("have_filtered_table_join", [new $runtime.NonTerminal("verb_filtered_table", "table", undefined), new $runtime.NonTerminal("out_param_Any_hidden", "p", ["functionName", 0, "functionName"]), new $runtime.NonTerminal("with_filtered_table", "subquery", ["idType", 1, "elem"])], $locale._("${table} {and|and have|and also|and in addition|but also} ${p} ${subquery}"), ((table, p, subquery) => C.addComparisonSubquery(table, subquery, p.name)), C.expressionKeyFn, {});
    }
}
exports.$load = $load;
;
//# sourceMappingURL=stream_tables.genie.out.js.map