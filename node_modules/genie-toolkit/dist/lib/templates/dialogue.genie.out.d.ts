import type $SentenceGenerator from "../sentence-generator/generator";
import * as $SentenceGeneratorTypes from "../sentence-generator/types";
import * as $I18n from "../i18n/index";
import { Ast } from 'thingtalk';
import * as S from './state_manip';
import ThingpediaLoader from './load-thingpedia';
export {};
import { at_time, constant_date_point, constant_date_range, constant_day_of_week, unit_Measure_ms, constant_pairs, constant_or_pairs, constant_nor_pairs, constant_String_ContextRef } from "./constants.genie.out";
export { at_time, constant_date_point, constant_date_range, constant_day_of_week, unit_Measure_ms, constant_pairs, constant_or_pairs, constant_nor_pairs, constant_String_ContextRef };
import { timer } from "./timers.genie.out";
export { timer };
import { get_predicate_filter, if_filter, edge_filter, either_filter, range, range_filter, with_filter, range_with_filter, nearby_filter, whose_npp_filter, quality_filter, within_filter, npp_id_soft_filter, pvp_id_soft_filter } from "./filters.genie.out";
export { get_predicate_filter, if_filter, edge_filter, either_filter, range, range_filter, with_filter, range_with_filter, nearby_filter, whose_npp_filter, quality_filter, within_filter, npp_id_soft_filter, pvp_id_soft_filter };
import { the_out_param_pair, the_out_param_triple, pair_projection, where_question, boolean_projection, verb_projection_Any } from "./projections.genie.out";
export { the_out_param_pair, the_out_param_triple, pair_projection, where_question, boolean_projection, verb_projection_Any };
import { projection_Number } from "./aggregation.genie.out";
export { projection_Number };
import { projection_Measure_m, compute_question } from "./computation.genie.out";
export { projection_Measure_m, compute_question };
import { who_complete_table, who_with_filtered_table, who_one_with_filter_table, who_one_which_filter_table, who_one_clean_filter_table, who_two_with_filter_table, who_two_which_filter_table, who_two_clean_filter_table, who_verb_filtered_table, who_one_be_filter_table, who_one_have_filter_table, who_one_verb_filter_table, who_two_be_filter_table, who_two_have_filter_table, who_two_verb_filter_table, whose_filtered_table } from "./who_questions.genie.out";
export { who_complete_table, who_with_filtered_table, who_one_with_filter_table, who_one_which_filter_table, who_one_clean_filter_table, who_two_with_filter_table, who_two_which_filter_table, who_two_clean_filter_table, who_verb_filtered_table, who_one_be_filter_table, who_one_have_filter_table, who_one_verb_filter_table, who_two_be_filter_table, who_two_have_filter_table, who_two_verb_filter_table, whose_filtered_table };
import { complete_table, complete_get_command, if_filtered_table, one_if_filter_table, two_if_filter_table, answer_noun_phrase, one_with_filter_table, one_which_filter_table, one_clean_filter_table, two_with_filter_table, two_which_filter_table, two_clean_filter_table, three_with_filter_table, three_which_filter_table, three_clean_filter_table, anything_phrase, anything_with_filter_phrase, anything_which_filter_phrase, anything_clean_filter_phrase, verb_filtered_table, one_be_filter_table, one_have_filter_table, one_verb_filter_table, two_be_filter_table, two_have_filter_table, two_verb_filter_table, generic_argminmax, have_arg_min_max_table, edge_stream, stream, with_filtered_table_join, have_filtered_table_join } from "./stream_tables.genie.out";
export { complete_table, complete_get_command, if_filtered_table, one_if_filter_table, two_if_filter_table, answer_noun_phrase, one_with_filter_table, one_which_filter_table, one_clean_filter_table, two_with_filter_table, two_which_filter_table, two_clean_filter_table, three_with_filter_table, three_which_filter_table, three_clean_filter_table, anything_phrase, anything_with_filter_phrase, anything_which_filter_phrase, anything_clean_filter_phrase, verb_filtered_table, one_be_filter_table, one_have_filter_table, one_verb_filter_table, two_be_filter_table, two_have_filter_table, two_verb_filter_table, generic_argminmax, have_arg_min_max_table, edge_stream, stream, with_filtered_table_join, have_filtered_table_join };
import { forward_get_do_command, backward_get_do_command, forward_when_do_rule, backward_when_do_rule, when_get_stream, when_get_do_rule, timer_rule, generic_preamble_for_answer, generic_preamble_for_action, generic_verb_for_search, imperative_verb_for_search, generic_search_preamble, generic_lookup_preamble, generic_article, search_command, complete_question, projection_question, explicit_when_condition, when_command, monitor_command, complete_action, say_command } from "./commands.genie.out";
export { forward_get_do_command, backward_get_do_command, forward_when_do_rule, backward_when_do_rule, when_get_stream, when_get_do_rule, timer_rule, generic_preamble_for_answer, generic_preamble_for_action, generic_verb_for_search, imperative_verb_for_search, generic_search_preamble, generic_lookup_preamble, generic_article, search_command, complete_question, projection_question, explicit_when_condition, when_command, monitor_command, complete_action, say_command };
import { counterproposal_preamble, the_base_noun_phrase, generic_excitement_phrase, generic_excitement2_phrase, greeting, generic_negative_proposal_reply, accept_phrase, reject_phrase, tell_me_more_phrase, learn_more_offer, yes_please_phrase, ok_thanks_phrase, thanks_phrase, no_thanks_phrase, anything_else_phrase, sorry_preamble, nevermind_phrase, ask_recommend_phrase, generic_dontcare_phrase, no_dontcare_phrase, prefer_question_phrase, system_learn_more, repeat_command_phrase, repeat_command_on_error_phrase, make_monitor_phrase } from "./dlg/shared.genie.out";
export { counterproposal_preamble, the_base_noun_phrase, generic_excitement_phrase, generic_excitement2_phrase, greeting, generic_negative_proposal_reply, accept_phrase, reject_phrase, tell_me_more_phrase, learn_more_offer, yes_please_phrase, ok_thanks_phrase, thanks_phrase, no_thanks_phrase, anything_else_phrase, sorry_preamble, nevermind_phrase, ask_recommend_phrase, generic_dontcare_phrase, no_dontcare_phrase, prefer_question_phrase, system_learn_more, repeat_command_phrase, repeat_command_on_error_phrase, make_monitor_phrase };
import { direct_answer_phrase, direct_answer_phrase_0, direct_answer_phrase_1, direct_answer_phrase_2, direct_answer_phrase_3, direct_result_info_phrase, one_param_direct_result_info_phrase, two_param_direct_result_info_phrase, three_param_direct_result_info_phrase, four_param_direct_result_info_phrase, result_info_phrase, base_result_phrase, equal_with_filter, one_with_info_phrase, one_which_info_phrase, one_clean_info_phrase, two_with_info_phrase, two_which_info_phrase, two_clean_info_phrase, three_with_info_phrase, three_which_info_phrase, three_clean_info_phrase, n_with_info_phrase, n_which_info_phrase, n_clean_info_phrase } from "./dlg/results.genie.out";
export { direct_answer_phrase, direct_answer_phrase_0, direct_answer_phrase_1, direct_answer_phrase_2, direct_answer_phrase_3, direct_result_info_phrase, one_param_direct_result_info_phrase, two_param_direct_result_info_phrase, three_param_direct_result_info_phrase, four_param_direct_result_info_phrase, result_info_phrase, base_result_phrase, equal_with_filter, one_with_info_phrase, one_which_info_phrase, one_clean_info_phrase, two_with_info_phrase, two_which_info_phrase, two_clean_info_phrase, three_with_info_phrase, three_which_info_phrase, three_clean_info_phrase, n_with_info_phrase, n_which_info_phrase, n_clean_info_phrase };
import { coref_action_phrase, list_coref_action_phrase, contextual_action_phrase, action_coref_recommendation, action_coref_list_proposal, coref_action_command, action_by_name_command, action_continuation_command, continuation_query, action_description_phrase } from "./dlg/coref-actions.genie.out";
export { coref_action_phrase, list_coref_action_phrase, contextual_action_phrase, action_coref_recommendation, action_coref_list_proposal, coref_action_command, action_by_name_command, action_continuation_command, continuation_query, action_description_phrase };
import { action_confirm_phrase } from "./dlg/action-confirm.genie.out";
export { action_confirm_phrase };
import { complete_past_action_phrase, generic_action_success_phrase, action_success_phrase_with_result, action_success_phrase, action_notification_phrase, short_action_error_message, long_action_error_message, one_param_try_different_param_question, two_param_try_different_param_question, action_error_phrase } from "./dlg/action-results.genie.out";
export { complete_past_action_phrase, generic_action_success_phrase, action_success_phrase_with_result, action_success_phrase, action_notification_phrase, short_action_error_message, long_action_error_message, one_param_try_different_param_question, two_param_try_different_param_question, action_error_phrase };
import { count_aggregation_reply, agg_operator_for_reply, other_aggregation_reply } from "./dlg/aggregation-results.genie.out";
export { count_aggregation_reply, agg_operator_for_reply, other_aggregation_reply };
import { out_param_list_for_coref_question, simple_user_search_question, simple_user_search_question_for_list, boolean_user_search_question, boolean_user_search_question_for_list, user_search_question_with_name, boolean_user_search_question_with_name, user_search_question, user_search_question_for_list } from "./dlg/coref-questions.genie.out";
export { out_param_list_for_coref_question, simple_user_search_question, simple_user_search_question_for_list, boolean_user_search_question, boolean_user_search_question_for_list, user_search_question_with_name, boolean_user_search_question_with_name, user_search_question, user_search_question_for_list };
import { empty_search_error, precise_empty_search_change_request, imprecise_empty_search_change_request } from "./dlg/empty-search.genie.out";
export { empty_search_error, precise_empty_search_change_request, imprecise_empty_search_change_request };
import { initial_command } from "./dlg/initial-request.genie.out";
export { initial_command };
import { system_list_proposal, concat_list_description, generic_list_proposal_accept_phrase, list_proposal_accept_phrase_must_have_action, list_proposal_accept_phrase_with_action, list_proposal_accept_phrase_with_action_by_name, list_proposal_tell_me_more, positive_list_proposal_reply } from "./dlg/list-proposal.genie.out";
export { system_list_proposal, concat_list_description, generic_list_proposal_accept_phrase, list_proposal_accept_phrase_must_have_action, list_proposal_accept_phrase_with_action, list_proposal_accept_phrase_with_action_by_name, list_proposal_tell_me_more, positive_list_proposal_reply };
import { question_system_recommendation_short, action_recommendation, actionable_system_recommendation_short, proposal_info_action_pair, direct_user_question_answer, actionable_system_display_result_short, system_nonlist_result, system_recommendation, recommendation_accept_phrase_with_action, recommendation_accept_phrase_by_name } from "./dlg/recommendation.genie.out";
export { question_system_recommendation_short, action_recommendation, actionable_system_recommendation_short, proposal_info_action_pair, direct_user_question_answer, actionable_system_display_result_short, system_nonlist_result, system_recommendation, recommendation_accept_phrase_with_action, recommendation_accept_phrase_by_name };
import { search_result_preamble, system_generic_proposal, negative_proposal_request, negative_proposal_answer_preamble, negative_proposal_reply } from "./dlg/refinement.genie.out";
export { search_result_preamble, system_generic_proposal, negative_proposal_request, negative_proposal_answer_preamble, negative_proposal_reply };
import { related_question } from "./dlg/related-questions.genie.out";
export { related_question };
import { one_param_direct_search_question, one_param_direct_search_question_with_preamble, two_param_direct_search_question, one_param_yesno_direct_search_question, one_param_yesno_direct_search_question_with_preamble, two_param_yesno_direct_search_question, question_npp_filter_pair, question_apv_filter_pair, question_avp_filter_pair, question_preposition_filter_pair, question_pvp_filter_pair, disjunctive_search_question, generic_question, simple_search_question, search_question, verbose_search_answer, verbose_search_answer_with_action, precise_search_question_answer, specific_dontcare_phrase, imprecise_search_coref_answer, imprecise_search_answer_phrase, imprecise_search_answer, imprecise_search_question_answer } from "./dlg/search-questions.genie.out";
export { one_param_direct_search_question, one_param_direct_search_question_with_preamble, two_param_direct_search_question, one_param_yesno_direct_search_question, one_param_yesno_direct_search_question_with_preamble, two_param_yesno_direct_search_question, question_npp_filter_pair, question_apv_filter_pair, question_avp_filter_pair, question_preposition_filter_pair, question_pvp_filter_pair, disjunctive_search_question, generic_question, simple_search_question, search_question, verbose_search_answer, verbose_search_answer_with_action, precise_search_question_answer, specific_dontcare_phrase, imprecise_search_coref_answer, imprecise_search_answer_phrase, imprecise_search_answer, imprecise_search_question_answer };
import { one_param_slot_fill_question, two_param_slot_fill_question, slot_fill_question, imprecise_slot_fill_answer_phrase, imprecise_slot_fill_coref_answer, imprecise_slot_fill_answer, precise_slot_fill_answer } from "./dlg/slot-fill.genie.out";
export { one_param_slot_fill_question, two_param_slot_fill_question, slot_fill_question, imprecise_slot_fill_answer_phrase, imprecise_slot_fill_coref_answer, imprecise_slot_fill_answer, precise_slot_fill_answer };
import { notification_preamble, notification_error_preamble, add_separate_stream_to_query, add_separate_stream } from "./dlg/streams.genie.out";
export { notification_preamble, notification_error_preamble, add_separate_stream_to_query, add_separate_stream };
export declare const initial_request_preamble: $SentenceGeneratorTypes.NonTerminal<S.ContextInfo>;
/**
 * The root of the agent generation.
 *
 * This non-terminal contains the entire reply of the agent.
 */
export declare const $agent: $SentenceGeneratorTypes.NonTerminal<S.AgentReplyRecord>;
/**
 * The root of the user generation.
 *
 * This non-terminal contains a single user turn in its entirety.
 */
export declare const $user: $SentenceGeneratorTypes.NonTerminal<Ast.DialogueState>;
/**
 * Load the templates in this file.
 *
 * This is an autogenerated method that will be called by the {@link SentenceGenerator}
 * when the templates are imported.
 */
export declare function $load($options: $SentenceGeneratorTypes.GrammarOptions, $locale: $I18n.LanguagePack, $grammar: $SentenceGenerator, $loader: ThingpediaLoader): Promise<void>;
