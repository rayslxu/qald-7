"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.params = exports.values = void 0;
const ThingTalk = __importStar(require("thingtalk"));
const ValueProto = {
    makeString(value) {
        if (value === null || value === undefined)
            return '';
        if (value instanceof Array)
            return '[' + value.map(ValueProto.makeString).join(',') + ']';
        else if (value instanceof Date)
            return String(value.getTime());
        else if (typeof value === 'object' && value.toString === Object.prototype.toString)
            return ParamsProto.makeString(value);
        else
            return String(value);
    },
    marshal(value) {
        if (value === null || value === undefined)
            return null;
        if (value instanceof Array)
            return value.map(ValueProto.marshal);
        else if (value instanceof ThingTalk.Builtin.Entity)
            return { tag: 'entity', v: value.value, d: value.display };
        else if (value instanceof ThingTalk.Builtin.Currency)
            return { tag: 'currency', v: value.value, c: value.code };
        else if (value instanceof ThingTalk.Builtin.Location)
            return { tag: 'loc', x: value.x, y: value.y, d: value.display };
        else if (value instanceof ThingTalk.Builtin.Time)
            return { tag: 'time', h: value.hour, m: value.minute, s: value.second };
        else if (value instanceof Date)
            return { tag: 'date', v: value.getTime() };
        else
            return value;
    },
    unmarshal(value) {
        if (value === null || value === undefined)
            return null;
        if (value instanceof Array) {
            return value.map(ValueProto.unmarshal);
        }
        else {
            const anyValue = value;
            switch (anyValue.tag) {
                case 'date':
                    return new Date(anyValue.v);
                case 'currency':
                    return new ThingTalk.Builtin.Currency(anyValue.v, anyValue.c);
                case 'entity':
                    return new ThingTalk.Builtin.Entity(anyValue.v, anyValue.d);
                case 'loc':
                    return new ThingTalk.Builtin.Location(anyValue.y, anyValue.x, anyValue.d);
                case 'time':
                    return new ThingTalk.Builtin.Time(anyValue.h, anyValue.m, anyValue.s);
                default:
                    return value;
            }
        }
    }
};
exports.values = ValueProto;
const ParamsProto = {
    makeString(params) {
        if (params === undefined)
            return '';
        return Object.keys(params).map((key) => `${key}=${ValueProto.makeString(params[key])}`).join(':');
    },
    marshal(params) {
        if (params === undefined)
            return undefined;
        if (params === null)
            return null;
        const obj = {};
        Object.keys(params).forEach((key) => {
            obj[key] = ValueProto.marshal(params[key]);
        });
        return obj;
    },
    unmarshal(params) {
        if (params === undefined)
            return undefined;
        if (params === null)
            return null;
        const obj = {};
        Object.keys(params).forEach((key) => {
            obj[key] = ValueProto.unmarshal(params[key]);
        });
        return obj;
    }
};
exports.params = ParamsProto;
//# sourceMappingURL=protocol.js.map