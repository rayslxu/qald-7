import { Runtime } from 'thingtalk';
import type ExecWrapper from './exec_wrapper';
import type DeviceView from '../devices/device_view';
declare type MonitorEvent = Record<string, unknown> & {
    __timestamp: number;
};
export default class MonitorRunner {
    private _env;
    private _devices;
    private _channel;
    private _fn;
    private _params;
    private _hints;
    private _stateId;
    private _rateLimiter;
    private _streams;
    private _ended;
    private _stopped;
    private _queue;
    private _dataListener;
    private _endListener;
    private _errorListener;
    constructor(env: ExecWrapper, devices: DeviceView, channel: string, params: Record<string, unknown>, hints: Runtime.CompiledQueryHints);
    next(): Promise<IteratorResult<[string, MonitorEvent], void>>;
    private _onTriggerError;
    private _onTriggerData;
    private _onTriggerEnd;
    private _makeStateUniqueId;
    private _onDeviceAdded;
    private _onDeviceRemoved;
    end(): void;
    stop(): void;
    start(): void;
}
export {};
