"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChannelStateBinder = exports.ChannelState = void 0;
const Tp = __importStar(require("thingpedia"));
class ChannelState {
    constructor(db, uniqueId) {
        this._store = db.getLocalTable('channel');
        this._uniqueId = uniqueId;
        this._cached = null;
    }
    read() {
        if (this._cached !== null)
            return this._cached;
        return this._cached = this._store.getOne(this._uniqueId).then((row) => {
            if (row === undefined)
                return null;
            else
                return JSON.parse(row.value) || null;
        });
    }
    async write(value) {
        this._cached = Promise.resolve(value);
        const valueStr = JSON.stringify(value);
        if (valueStr === 'null' || valueStr === '{}')
            await this._store.deleteOne(this._uniqueId);
        else
            await this._store.insertOne(this._uniqueId, { value: valueStr });
        return value;
    }
}
exports.ChannelState = ChannelState;
class ChannelStateBinder extends Tp.Helpers.RefCounted {
    constructor(db, uniqueId) {
        super();
        this.uniqueId = uniqueId;
        this._state = new ChannelState(db, uniqueId);
        this._cached = {};
        this._updateTimeout = null;
    }
    get(name) {
        return this._cached[name];
    }
    set(name, value) {
        this._cached[name] = value;
        this.changed();
    }
    durableSet(name, value) {
        this._cached[name] = value;
        if (this._updateTimeout)
            clearTimeout(this._updateTimeout);
        return this.flushToDisk();
    }
    changed() {
        if (this._updateTimeout)
            clearTimeout(this._updateTimeout);
        this._updateTimeout = setTimeout(this.flushToDisk.bind(this), 500);
    }
    async flushToDisk() {
        if (!this._updateTimeout)
            return;
        this._updateTimeout = null;
        await this._state.write(this._cached);
    }
    _doOpen() {
        return this._state.read().then((value) => {
            this._cached = (value || {});
        });
    }
    _doClose() {
        if (this._updateTimeout)
            clearTimeout(this._updateTimeout);
        return this.flushToDisk();
    }
}
exports.ChannelStateBinder = ChannelStateBinder;
//# sourceMappingURL=channel_state_binder.js.map