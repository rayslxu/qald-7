"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const events = __importStar(require("events"));
const Tp = __importStar(require("thingpedia"));
// SyncDatabase is a database that automatically syncs its changes across
// all tiers
class SyncDatabase extends events.EventEmitter {
    constructor(platform, db, tablename, syncManager) {
        super();
        this._platform = platform;
        this._table = db.getSyncTable(tablename);
        this._syncManager = syncManager;
        this._syncManager.registerHandler('syncdb-' + tablename, this._handleMessage.bind(this));
        this._debug = false;
        this._connectedHandler = this._onConnected.bind(this);
    }
    open() {
        this._syncManager.on('connected', this._connectedHandler);
        // sync with the servers that we're connected to
        // sync is always client-driven, because clients generate the
        // bulk of changes and servers are expected to have a more clearer
        // picture of what's right and what not
        const connected = this._syncManager.getClientConnections();
        if (connected.length === 0) {
            if (this._debug)
                console.log('Not connected to any server, not syncing ' + this._table.name);
        }
        else {
            for (const address of connected)
                this.sync(address);
        }
        return Promise.resolve();
    }
    close() {
        this._syncManager.removeListener('connected', this._connectedHandler);
        return Promise.resolve();
    }
    _onConnected(tier) {
        if (!this._syncManager.isClientTier(tier))
            return;
        this.sync(tier);
    }
    _handleMessage(fromTier, msg) {
        switch (msg.op) {
            case 'change':
                this._handleChange(fromTier, msg.uniqueId, msg.lastModified, msg.row);
                break;
            case 'sync-request':
                this._handleSyncRequest(fromTier, msg.lastSyncTime, msg.values);
                break;
            case 'sync-reply':
                this._handleSyncReply(fromTier, msg.lastModified, msg.values);
                break;
            case 'force-sync':
                this._handleForceSync(fromTier);
                break;
            case 'force-sync-data':
                this._handleForceSyncData(fromTier, msg.values);
                break;
            case 'do-force-sync':
                this._forceSyncWith(fromTier);
                break;
        }
    }
    _sendMessage(targetTier, msg) {
        //console.log('Sending one message ' + JSON.stringify(msg));
        // target the syncb of the remote tier
        msg.target = 'syncdb-' + this._table.name;
        this._syncManager.sendTo(targetTier, msg);
    }
    _sendMessageToAll(msg) {
        //console.log('Sending one broadcast ' + JSON.stringify(msg));
        // target the syncb of the remote tier
        msg.target = 'syncdb-' + this._table.name;
        this._syncManager.sendToAll(msg);
    }
    _forceSyncWith(targetTier) {
        console.log(`Forcing syncdb full sync for ${this._table.name} with ${targetTier}`);
        this._sendMessage(targetTier, { op: 'force-sync' });
    }
    sync(targetTier) {
        const prefs = this._platform.getSharedPreferences();
        const prefName = 'syncdb-time-' + this._table.name + '-' + targetTier;
        let lastSyncTime = prefs.get(prefName);
        if (lastSyncTime === undefined)
            lastSyncTime = 0;
        if (this._debug)
            console.log(`syncdb sync for ${this._table.name} with ${targetTier} at ${lastSyncTime}`);
        // batch up the changes that happened after lastSyncTime,
        // then ask the server for more
        this._table.getChangesAfter(lastSyncTime).then((changes) => {
            this._sendMessage(targetTier, {
                op: 'sync-request',
                lastSyncTime: lastSyncTime,
                values: changes
            });
        });
    }
    // Called in case of conflicts
    // phone and server sync with cloud, cloud wins the conflict
    _handleConflict(withTier) {
        const ownTier = this._syncManager.ownTier;
        if (ownTier !== Tp.Tier.CLOUD)
            this._forceSyncWith(Tp.Tier.CLOUD);
        else
            this._sendMessage(withTier, { op: 'do-force-sync' });
    }
    getAll() {
        return this._table.getAll();
    }
    getOne(uniqueId) {
        return this._table.getOne(uniqueId);
    }
    insertOne(uniqueId, row) {
        if (this._debug)
            console.log('Inserting one object in DB: ' + JSON.stringify(row));
        return this._table.insertOne(uniqueId, row).then((lastModified) => {
            this._sendMessageToAll({
                op: 'change',
                uniqueId: uniqueId,
                row: row,
                lastModified: lastModified
            });
        });
    }
    deleteOne(uniqueId) {
        if (this._debug)
            console.log('Deleting one object from DB: ' + uniqueId);
        return this._table.deleteOne(uniqueId).then((lastModified) => {
            this._sendMessageToAll({
                op: 'change',
                uniqueId: uniqueId,
                row: undefined,
                lastModified: lastModified
            });
        });
    }
    objectAdded(uniqueId, row) {
        this.emit('object-added', uniqueId, row);
    }
    objectDeleted(uniqueId) {
        this.emit('object-deleted', uniqueId);
    }
    _reportChange(fromTier, uniqueId, lastModified, row, done) {
        if (!done) {
            // stale change
            if (this._debug)
                console.log(`Change for ${uniqueId} in syncdb for ${this._table.name} was stale, ignored`);
            return;
        }
        if (row !== undefined) {
            try {
                this.objectAdded(uniqueId, row);
            }
            catch (e) {
                console.log('Failed to report syncdb change: ' + e);
            }
        }
        else {
            this.objectDeleted(uniqueId);
        }
    }
    _makeRow(change) {
        // deletion
        if (change[this._table.fields[0]] === null)
            return undefined;
        const row = {};
        for (const f of this._table.fields)
            row[f] = change[f];
        return row;
    }
    _reportChanges(fromTier, changes, done) {
        for (let i = 0; i < changes.length; i++) {
            this._reportChange(fromTier, changes[i].uniqueId, changes[i].lastModified, this._makeRow(changes[i]), done[i]);
        }
    }
    _handleChange(fromTier, uniqueId, lastModified, row) {
        if (this._debug)
            console.log(`Received syncdb change for ${this._table.name}: ${row !== undefined ? 'added' : 'deleted'} ${uniqueId}`);
        // version skew between client and server can cause one party or the other
        // to try and delete thingengine-own-* which breaks everything because
        // it loses the sync configuration
        // prevent it from happening
        if (uniqueId === 'thingengine-own-' + this._syncManager.ownAddress) {
            if (this._debug)
                console.log('Ignored change for object under our exclusive control');
            return;
        }
        Promise.resolve().then(() => {
            if (row !== undefined)
                return this._table.insertIfRecent(uniqueId, lastModified, row);
            else
                return this._table.deleteIfRecent(uniqueId, lastModified);
        }).then((done) => {
            this._reportChange(fromTier, uniqueId, lastModified, row, done);
        }).catch((e) => {
            console.log(`Processing syncdb change for ${this._table.name} failed`, e);
            console.log('Forcing a full resync');
            return this._handleConflict(fromTier);
        });
    }
    _handleSyncReply(fromTier, lastModified, changes) {
        const prefs = this._platform.getSharedPreferences();
        const prefName = 'syncdb-time-' + this._table.name + '-' + fromTier;
        prefs.set(prefName, lastModified);
        this._table.handleChanges(changes).then((done) => {
            this._reportChanges(fromTier, changes, done);
        }).catch((e) => {
            console.log(`Processing syncdb change for ${this._table.name} failed`, e);
            console.log('Forcing a full resync');
            return this._handleConflict(fromTier);
        });
    }
    _handleSyncRequest(fromTier, lastModified, pushedChanges) {
        if (this._debug)
            console.log(`syncdb sync request for ${this._table.name} from ${fromTier} at ${lastModified}`);
        this._table.syncAt(lastModified, pushedChanges).then(({ lastModified, ourChanges, done }) => {
            this._reportChanges(fromTier, pushedChanges, done);
            this._sendMessage(fromTier, {
                op: 'sync-reply',
                lastModified: lastModified,
                values: ourChanges
            });
        });
    }
    _handleForceSyncData(fromTier, data) {
        const prefs = this._platform.getSharedPreferences();
        const prefName = 'syncdb-time-' + this._table.name + '-' + fromTier;
        prefs.set(prefName, (new Date).getTime());
        this._table.replaceAll(data);
    }
    _handleForceSync(fromTier) {
        this._table.getRaw().then((data) => {
            this._sendMessage(fromTier, {
                op: 'force-sync-data',
                values: data
            });
        });
    }
}
exports.default = SyncDatabase;
//# sourceMappingURL=syncdb.js.map