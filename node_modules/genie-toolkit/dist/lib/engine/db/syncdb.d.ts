/// <reference types="node" />
import * as events from 'events';
import * as Tp from 'thingpedia';
import { AbstractDatabase, SyncTables } from '.';
import SyncManager from '../sync/manager';
export default class SyncDatabase<K extends keyof SyncTables> extends events.EventEmitter {
    private _platform;
    private _table;
    private _syncManager;
    private _debug;
    private _connectedHandler;
    constructor(platform: Tp.BasePlatform, db: AbstractDatabase, tablename: K, syncManager: SyncManager);
    open(): Promise<void>;
    close(): Promise<void>;
    private _onConnected;
    private _handleMessage;
    private _sendMessage;
    private _sendMessageToAll;
    private _forceSyncWith;
    sync(targetTier: string): void;
    private _handleConflict;
    getAll(): Promise<SyncTables[K][]>;
    getOne(uniqueId: string): Promise<SyncTables[K] | undefined>;
    insertOne(uniqueId: string, row: Omit<SyncTables[K], "uniqueId">): Promise<void>;
    deleteOne(uniqueId: string): Promise<void>;
    private objectAdded;
    private objectDeleted;
    private _reportChange;
    private _makeRow;
    private _reportChanges;
    private _handleChange;
    private _handleSyncReply;
    private _handleSyncRequest;
    private _handleForceSyncData;
    private _handleForceSync;
}
