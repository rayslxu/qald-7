import * as sql from '.';
import type { SyncRecord, SyncAtReply } from '..';
declare type Field<RowType> = Exclude<keyof RowType & string, "uniqueId">;
export default class SyncTable<RowType extends {
    uniqueId: string;
}> {
    name: string;
    fields: ReadonlyArray<Field<RowType>>;
    private _db;
    private _discriminator;
    constructor(db: sql.SQLiteDatabase, name: string, fields: ReadonlyArray<Field<RowType>>);
    private _getLastModifiedInternal;
    getAll(): Promise<RowType[]>;
    getOne(uniqueId: string): Promise<RowType>;
    getRaw(): Promise<Array<SyncRecord<RowType>>>;
    getChangesAfter(lastModified: number): Promise<Array<SyncRecord<RowType>>>;
    private _handleChangesInternal;
    handleChanges(changes: Array<SyncRecord<RowType>>): Promise<boolean[]>;
    syncAt(theirLastModified: number, pushedChanges: Array<SyncRecord<RowType>>): Promise<SyncAtReply<RowType>>;
    private _insertInternal;
    replaceAll(data: Array<SyncRecord<RowType>>): Promise<void>;
    private _insertIfRecentInternal;
    insertIfRecent(uniqueId: string, lastModified: number, row: Omit<RowType, "uniqueId">): Promise<boolean>;
    insertOne(uniqueId: string, row: Omit<RowType, "uniqueId">): Promise<number>;
    private _deleteInternal;
    private _deleteIfRecentInternal;
    deleteIfRecent(uniqueId: string, lastModified: number): Promise<boolean>;
    deleteOne(uniqueId: string): Promise<number>;
}
export {};
