import * as sqlite3 from 'sqlite3';
import * as Tp from 'thingpedia';
import type * as DB from '..';
import LocalTable from './local_table';
import SyncTable from './sync_table';
export interface SQLitePlatform extends Tp.BasePlatform {
    getSqliteDB(): string;
    getSqliteKey(): string | null;
}
export declare function makeKeyPragma(key: string): string;
export declare function query(client: sqlite3.Database, string: string, args: unknown[]): Promise<void>;
export declare function selectAll(client: sqlite3.Database, string: string, args: unknown[]): Promise<any[]>;
export declare function selectOne(client: sqlite3.Database, string: string, args: unknown[]): Promise<any>;
export declare function insertOne(client: sqlite3.Database, string: string, args: unknown[]): Promise<unknown>;
export declare class SQLiteDatabase implements DB.AbstractDatabase {
    platform: SQLitePlatform;
    private _transactionQueue;
    constructor(platform: SQLitePlatform);
    withClient<T>(callback: (client: sqlite3.Database) => Promise<T>): Promise<T>;
    withTransaction<T>(transaction: (client: sqlite3.Database) => Promise<T>): Promise<T>;
    ensureSchema(): Promise<void>;
    getLocalTable<T extends keyof DB.LocalTables>(name: T): LocalTable<DB.LocalTables[T]>;
    getSyncTable<T extends keyof DB.SyncTables>(name: T): SyncTable<DB.SyncTables[T]>;
}
