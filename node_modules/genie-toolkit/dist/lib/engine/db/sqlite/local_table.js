"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020-2021 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const sql = __importStar(require("."));
class LocalTable {
    constructor(db, name, fields) {
        this.name = name;
        this._db = db;
        this._fields = fields;
    }
    getAll() {
        return this._db.withClient((client) => {
            return sql.selectAll(client, `select * from ${this.name}`, []);
        });
    }
    getOne(uniqueId) {
        return this._db.withClient((client) => {
            return sql.selectOne(client, `select * from ${this.name} where uniqueId = ?`, [uniqueId]);
        });
    }
    getBy(field, value) {
        return this._db.withClient((client) => {
            return sql.selectAll(client, `select * from ${this.name} where ${field} = ?`, [value]);
        });
    }
    search(search) {
        return this._db.withClient((client) => {
            const values = search.filter.map((f) => f.v);
            const filter = search.filter.map((f) => `${f.k} ${f.o} ?`).join(' and ');
            return sql.selectAll(client, `select * from ${this.name} where ${filter || 'true'} order by ${search.sort[0]} ${search.sort[1]} limit ${search.limit}`, values);
        });
    }
    insertOne(uniqueId, row) {
        return this._db.withTransaction(async (client) => {
            const insertSql = `insert or replace into ${this.name}(uniqueId, ${this._fields}) values(?,${this._fields.map(() => '?')})`;
            const param = [uniqueId].concat(this._fields.map((f) => row[f]));
            await sql.insertOne(client, insertSql, param);
        });
    }
    deleteOne(uniqueId) {
        return this._db.withTransaction(async (client) => {
            await sql.query(client, `delete from ${this.name} where uniqueId = ?`, [uniqueId]);
        });
    }
}
exports.default = LocalTable;
//# sourceMappingURL=local_table.js.map