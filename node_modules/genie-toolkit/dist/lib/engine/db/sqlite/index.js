"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2021 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SQLiteDatabase = exports.insertOne = exports.selectOne = exports.selectAll = exports.query = exports.makeKeyPragma = void 0;
const sqlite3 = __importStar(require("sqlite3"));
const fs = __importStar(require("fs"));
const local_table_1 = __importDefault(require("./local_table"));
const sync_table_1 = __importDefault(require("./sync_table"));
const migration_1 = require("./migration");
// PRAGMA key = ? does not work, so we have to use string pasting
// this is ok because the key should be trusted
// (and if the key can be manipulated by an attacker, either it will
// be invalid or we have already lost)
function makeKeyPragma(key) {
    return 'PRAGMA key = "x\'' + key.toUpperCase() + '\'"';
}
exports.makeKeyPragma = makeKeyPragma;
const connectionPool = {};
function connectNow(filename, key) {
    const db = new sqlite3.Database(filename, sqlite3.OPEN_READWRITE);
    db.serialize(() => {
        db.run('PRAGMA busy_timeout = 1000');
        if (key)
            db.run(makeKeyPragma(key));
    });
    return db;
}
function acquireConnection(filename, key) {
    if (connectionPool[filename])
        return connectionPool[filename];
    return connectionPool[filename] = connectNow(filename, key);
}
function query(client, string, args) {
    return new Promise((resolve, reject) => {
        client.run(string, args, (err) => {
            if (err)
                reject(err);
            else
                resolve();
        });
    });
}
exports.query = query;
function selectAll(client, string, args) {
    return new Promise((resolve, reject) => {
        client.all(string, args, (err, rows) => {
            if (err)
                reject(err);
            else
                resolve(rows);
        });
    });
}
exports.selectAll = selectAll;
function selectOne(client, string, args) {
    return new Promise((resolve, reject) => {
        client.get(string, args, (err, row) => {
            if (err)
                reject(err);
            else
                resolve(row);
        });
    });
}
exports.selectOne = selectOne;
function insertOne(client, string, args) {
    return new Promise((callback, errback) => {
        client.run(string, args, function (err) {
            /* eslint-disable no-invalid-this */
            if (err) {
                errback(err);
                return;
            }
            if (this.lastID === undefined)
                errback(new Error("Row does not have ID"));
            else
                callback(this.lastID);
        });
    });
}
exports.insertOne = insertOne;
const FIELD_NAMES = {
    app: ['code', 'state', 'name', 'description'],
    device: ['state'],
    channel: ['value'],
    conversation: [
        'conversationId',
        'previousId',
        'dialogueId',
        'context',
        'agent',
        'agentTimestamp',
        'agentTarget',
        'intermediateContext',
        'user',
        'userTimestamp',
        'userTarget',
        'vote',
        'comment'
    ],
    conversation_state: [
        'dialogueState',
        'lastMessageId',
        'recording',
    ],
    conversation_history: [
        'conversationId',
        'messageId',
        'message'
    ]
};
class SQLiteDatabase {
    constructor(platform) {
        this.platform = platform;
        this._transactionQueue = new WeakMap();
    }
    withClient(callback) {
        const client = acquireConnection(this.platform.getSqliteDB(), this.platform.getSqliteKey());
        return callback(client);
    }
    withTransaction(transaction) {
        return this.withClient((client) => {
            const queue = this._transactionQueue.get(client) || Promise.resolve();
            return new Promise((callback, errback) => {
                const newqueue = queue.then(async () => {
                    await query(client, 'begin transaction', []);
                    try {
                        const result = await transaction(client);
                        await query(client, 'commit', []);
                        callback(result);
                    }
                    catch (err) {
                        try {
                            await query(client, 'rollback', []);
                            errback(err);
                        }
                        catch (rollerr) {
                            console.error('Ignored error from ROLLBACK', rollerr);
                            errback(err);
                        }
                    }
                    // continue with the queue
                });
                this._transactionQueue.set(client, newqueue);
            });
        });
    }
    ensureSchema() {
        if (!fs.existsSync(this.platform.getSqliteDB()))
            return (0, migration_1.initializeDB)(this.platform);
        else
            return (0, migration_1.migrateDB)(this.platform);
    }
    getLocalTable(name) {
        return new local_table_1.default(this, name, FIELD_NAMES[name]);
    }
    getSyncTable(name) {
        return new sync_table_1.default(this, name, FIELD_NAMES[name]);
    }
}
exports.SQLiteDatabase = SQLiteDatabase;
//# sourceMappingURL=index.js.map