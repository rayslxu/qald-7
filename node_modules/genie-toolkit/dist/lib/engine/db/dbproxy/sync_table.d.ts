import { SyncRecord, SyncAtReply } from '..';
declare type Field<RowType> = Exclude<keyof RowType & string, "uniqueId">;
export default class SyncTable<RowType> {
    name: string;
    fields: ReadonlyArray<Field<RowType>>;
    private _baseUrl;
    private _auth;
    constructor(name: string, baseUrl: string, accessToken: string | undefined, fields: ReadonlyArray<Field<RowType>>);
    getAll(): Promise<RowType[]>;
    getOne(uniqueId: string): Promise<RowType | undefined>;
    getRaw(): Promise<Array<SyncRecord<RowType>>>;
    getChangesAfter(lastModified: number): Promise<Array<SyncRecord<RowType>>>;
    handleChanges(changes: Array<SyncRecord<RowType>>): Promise<boolean[]>;
    syncAt(lastModified: number, pushedChanges: Array<SyncRecord<RowType>>): Promise<SyncAtReply<RowType>>;
    replaceAll(data: Array<SyncRecord<RowType>>): Promise<void>;
    insertIfRecent(uniqueId: string, lastModified: number, row: Omit<RowType, "uniqueId">): Promise<boolean>;
    insertOne(uniqueId: string, row: Omit<RowType, "uniqueId">): Promise<number>;
    deleteIfRecent(uniqueId: string, lastModified: number): Promise<boolean>;
    deleteOne(uniqueId: string): Promise<number>;
}
export {};
