"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2021 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const Tp = __importStar(require("thingpedia"));
class SyncTable {
    constructor(name, baseUrl, accessToken, fields) {
        this.name = name;
        this.fields = fields;
        this._baseUrl = baseUrl;
        this._auth = accessToken !== undefined ? `Bearer ${accessToken}` : undefined;
    }
    async getAll() {
        const resp = await Tp.Helpers.Http.get(`${this._baseUrl}/synctable/user_${this.name}`, { auth: this._auth });
        return JSON.parse(resp)['data'];
    }
    async getOne(uniqueId) {
        try {
            const resp = await Tp.Helpers.Http.get(`${this._baseUrl}/synctable/user_${this.name}/${encodeURIComponent(uniqueId)}`, { auth: this._auth });
            return JSON.parse(resp)['data'];
        }
        catch (err) {
            if (err.code === 404)
                return undefined;
            throw err;
        }
    }
    async getRaw() {
        const resp = await Tp.Helpers.Http.get(`${this._baseUrl}/synctable/raw/user_${this.name}`, { auth: this._auth });
        return JSON.parse(resp)['data'];
    }
    async getChangesAfter(lastModified) {
        const resp = await Tp.Helpers.Http.get(`${this._baseUrl}/synctable/changes/user_${this.name}/${lastModified}`, { auth: this._auth });
        return JSON.parse(resp)['data'];
    }
    async handleChanges(changes) {
        const resp = await Tp.Helpers.Http.post(`${this._baseUrl}/synctable/changes/user_${this.name}`, JSON.stringify(changes), { dataContentType: 'application/json', auth: this._auth });
        return JSON.parse(resp)['data'];
    }
    async syncAt(lastModified, pushedChanges) {
        const resp = await Tp.Helpers.Http.post(`${this._baseUrl}/synctable/sync/user_${this.name}/${lastModified}`, JSON.stringify(pushedChanges), { dataContentType: 'application/json', auth: this._auth });
        return JSON.parse(resp)['data'];
    }
    async replaceAll(data) {
        await Tp.Helpers.Http.post(`${this._baseUrl}/synctable/replace/user_${this.name}/`, JSON.stringify(data), { dataContentType: 'application/json', auth: this._auth });
    }
    async insertIfRecent(uniqueId, lastModified, row) {
        const resp = await Tp.Helpers.Http.post(`${this._baseUrl}/synctable/user_${this.name}/${encodeURIComponent(uniqueId)}/${lastModified}`, JSON.stringify(row), { dataContentType: 'application/json', auth: this._auth });
        return JSON.parse(resp)['data'];
    }
    async insertOne(uniqueId, row) {
        const resp = await Tp.Helpers.Http.post(`${this._baseUrl}/synctable/user_${this.name}/${encodeURIComponent(uniqueId)}`, JSON.stringify(row), { dataContentType: 'application/json', auth: this._auth });
        return JSON.parse(resp)['data'];
    }
    async deleteIfRecent(uniqueId, lastModified) {
        const resp = await Tp.Helpers.Http.request(`${this._baseUrl}/synctable/user_${this.name}/${encodeURIComponent(uniqueId)}/${lastModified}`, 'DELETE', null, { auth: this._auth });
        return JSON.parse(resp)['data'];
    }
    async deleteOne(uniqueId) {
        const resp = await Tp.Helpers.Http.request(`${this._baseUrl}/synctable/user_${this.name}/${encodeURIComponent(uniqueId)}`, 'DELETE', null, { auth: this._auth });
        return JSON.parse(resp)['data'];
    }
}
exports.default = SyncTable;
//# sourceMappingURL=sync_table.js.map