/**
 * An async iterable data-structure that wraps another async-iterable
 * so that iteration happens lazily, but can be restarted at any time.
 *
 * Multiple callers can iterate the same iterable concurrently.
 */
export default class RestartableAsyncIterable<T> {
    private _cache;
    private _done;
    private _iterator;
    private _nextPromise;
    constructor(inner: Iterable<T> | AsyncIterable<T>);
    [Symbol.asyncIterator](): AsyncIterator<T>;
    private _internalNextElement;
    private _next;
}
