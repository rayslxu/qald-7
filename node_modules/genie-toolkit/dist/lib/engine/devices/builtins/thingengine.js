"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const Tp = __importStar(require("thingpedia"));
// The running thingengine, as a device. This is mostly a
// placeholder for syncdb credentials, that ConfigPairing can
// pick up and pass to TierManager.
class ThingEngineDevice extends Tp.BaseDevice {
    constructor(engine, state) {
        super(engine, state);
        this.tier = state.tier;
        // for compat with the currently deployed cloud server (which does not understand
        // identity) we normalize identity to ''
        this.identity = state.identity || '';
        this.address = this.tier + this.identity;
        this.own = true;
        // This is a built-in device so we're allowed some
        // "friendly" API access
        this._syncManager = engine._sync;
        this.cloudId = undefined;
        this.developerKey = undefined;
        if (this.tier === Tp.Tier.CLOUD) {
            this.cloudId = state.cloudId;
            this.developerKey = state.developerKey;
            this._checkCloudIdDevKey(state);
            if (this._syncManager.ownTier !== Tp.Tier.CLOUD)
                engine.platform.setDeveloperKey(state.developerKey);
        }
        else if (this.tier === Tp.Tier.SERVER) {
            this.host = state.host;
            if (typeof state.port !== 'number' || isNaN(state.port))
                throw new TypeError('Invalid port number ' + state.port);
            this.port = state.port;
        }
        this.uniqueId = 'thingengine-own-' + this.address;
    }
    updateState(state) {
        super.updateState(state);
        if (this.tier === Tp.Tier.CLOUD)
            this.engine.platform.setDeveloperKey(state.developerKey);
    }
    _checkCloudIdDevKey(state) {
        if (this._syncManager.ownTier !== Tp.Tier.CLOUD)
            return;
        let changed = false;
        if (state.cloudId !== this.engine.platform.getCloudId()) {
            state.cloudId = this.engine.platform.getCloudId();
            changed = true;
        }
        if (state.developerKey !== this.engine.platform.getDeveloperKey()) {
            state.developerKey = this.engine.platform.getDeveloperKey();
            changed = true;
        }
        if (changed) {
            setTimeout(() => {
                this.stateChanged();
            }, 1000);
        }
    }
    get ownerTier() {
        return this.tier;
    }
    async checkAvailable() {
        if (this.tier === this._syncManager.ownTier) {
            return Tp.Availability.AVAILABLE;
        }
        else {
            return (this._syncManager.isConnected(this.address) ?
                Tp.Availability.AVAILABLE :
                Tp.Availability.OWNER_UNAVAILABLE);
        }
    }
}
exports.default = ThingEngineDevice;
//# sourceMappingURL=thingengine.js.map