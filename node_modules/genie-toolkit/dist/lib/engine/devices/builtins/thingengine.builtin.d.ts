/// <reference types="node" />
import * as Tp from 'thingpedia';
import * as TT from 'thingtalk';
import * as stream from 'stream';
import type ExecWrapper from '../../apps/exec_wrapper';
export default class MiscellaneousDevice extends Tp.BaseDevice {
    constructor(engine: Tp.BaseEngine, state: {
        kind: string;
    });
    get ownerTier(): Tp.Tier;
    checkAvailable(): Promise<Tp.Availability>;
    get_get_date(): {
        date: Date;
    }[];
    get_get_time(): {
        time: TT.Builtin.Time;
    }[];
    get_get_random_between({ low, high }: {
        low: number | null | undefined;
        high: number | null | undefined;
    }): {
        random: number;
    }[];
    get_get_name(): {
        name: unknown;
    }[];
    get_get_gps(): Promise<{
        location: {
            x: number;
            y: number;
            display: string | undefined;
        };
        altitude: number | undefined;
        bearing: number | undefined;
        speed: number | undefined;
    }[]>;
    subscribe_get_gps(): stream.Readable;
    get_device(): AsyncGenerator<{
        id: TT.Builtin.Entity;
        description: string;
        category: string;
    }, void, unknown>;
    get_device_info({ id }: {
        id: unknown;
    }): Promise<{
        help: unknown;
        description: unknown;
        thingpedia_url: unknown;
        website: unknown;
        category: unknown;
        issue_tracker: unknown;
    }[]>;
    get_configured_device_info(params: unknown, hints?: TT.Runtime.CompiledQueryHints): Promise<{
        id: TT.Builtin.Entity;
        description: string;
        kind: TT.Builtin.Entity;
        version: number;
        category: "data" | "online" | "physical" | "system";
        is_transient: boolean;
        auth_type: string;
    }[]>;
    get_commands(params: unknown, hints?: TT.Runtime.CompiledQueryHints): Promise<{
        id: string;
        device: undefined;
        program: TT.Builtin.Entity;
    }[]>;
    do_faq_reply({ question }: {
        question: string;
    }): {
        reply: string;
    };
    do_debug_log(args: {
        message: string;
    }): void;
    do_say(args: {
        message: string;
    }): {
        message_output: string;
    };
    do_open_url({ url }: {
        url: unknown;
    }): Promise<void>;
    do_alert(): {
        time: TT.Builtin.Time;
    };
    do_timer_expire(params: unknown, env: ExecWrapper): {
        duration: number;
    };
    do_configure({ device }: {
        device: unknown;
    }): Promise<never>;
    do_discover(args: unknown, env: ExecWrapper): never;
    do_set_language(): never;
    do_set_timezone(): never;
    do_set_wake_word(): never;
    do_set_voice_output({ status }: {
        status: 'on' | 'off';
    }, env: ExecWrapper): Promise<void>;
    do_set_voice_input({ status }: {
        status: 'on' | 'off';
    }, env: ExecWrapper): Promise<void>;
    do_set_name({ name }: {
        name: string;
    }): void;
    do_set_location({ type, location }: {
        type: 'current' | 'home' | 'work';
        location: Tp.Value.Location;
    }): void;
    do_set_temperature_unit({ unit }: {
        unit: string;
    }): void;
    do_stop(params: unknown, env: ExecWrapper): Promise<void>;
    do_pause(params: unknown, env: ExecWrapper): Promise<void>;
    do_resume(params: unknown, env: ExecWrapper): Promise<void>;
    do_raise_volume(params: unknown, env: ExecWrapper): Promise<void>;
    do_lower_volume(params: unknown, env: ExecWrapper): Promise<void>;
    do_set_volume({ volume }: {
        volume: number;
    }, env: ExecWrapper): Promise<void>;
    do_mute(params: unknown, env: ExecWrapper): Promise<void>;
    do_unmute(params: unknown, env: ExecWrapper): Promise<void>;
}
