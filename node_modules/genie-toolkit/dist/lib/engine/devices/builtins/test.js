"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const Tp = __importStar(require("thingpedia"));
const PollingStream = Tp.Helpers.PollingStream;
function genFakeData(size, fill) {
    return String(Buffer.alloc(size, fill));
}
class TestDevice extends Tp.BaseDevice {
    constructor(engine, state) {
        super(engine, state);
        this.uniqueId = 'org.thingpedia.builtin.test';
        this.isTransient = true;
        this._sequenceNumber = 0;
    }
    async *get_next_sequence() {
        yield { number: this._sequenceNumber++ };
    }
    async *get_get_data({ size, count }) {
        if (!(count >= 0))
            count = 1;
        console.log(`Generating ${size} bytes of fake data, ${count} times`);
        for (let i = 0; i < count; i++)
            yield { data: genFakeData(size, '!'.charCodeAt(0) + i) };
    }
    /**
     * @returns {stream.Readable}
     */
    subscribe_get_data(args, state) {
        let count = 0;
        return new PollingStream(state, 1000, () => {
            console.log(`Triggering ${args.size} bytes of data`);
            return [{ data: genFakeData(args.size, '!'.charCodeAt(0) + (count++)) }];
        });
    }
    async *get_get_data2({ size, count }) {
        if (!(count >= 0))
            count = 1;
        for (let i = 0; i < count; i++)
            yield ({ data: genFakeData(size, 'A'.charCodeAt(0) + i) });
    }
    async get_dup_data({ data_in }) {
        return [{ data_out: data_in + data_in }];
    }
    do_eat_data(args) {
        console.log(`Ate data`, args.data);
    }
}
exports.default = TestDevice;
//# sourceMappingURL=test.js.map