import * as Tp from 'thingpedia';
interface TriggerStateBinder {
    get(k: 'last-poll'): number | undefined;
    get(k: string): unknown | undefined;
    set(k: 'last-poll', v: number): void;
    set(k: string, v: unknown): void;
}
export default class TestDevice extends Tp.BaseDevice {
    private _sequenceNumber;
    constructor(engine: Tp.BaseEngine, state: {
        kind: string;
    });
    get_next_sequence(): AsyncGenerator<{
        number: number;
    }, void, unknown>;
    get_get_data({ size, count }: {
        size: number;
        count: number;
    }): AsyncGenerator<{
        data: string;
    }, void, unknown>;
    /**
     * @returns {stream.Readable}
     */
    subscribe_get_data(args: {
        size: number;
    }, state: TriggerStateBinder): Tp.Helpers.PollingStream<{
        data: string;
    }>;
    get_get_data2({ size, count }: {
        size: number;
        count: number;
    }): AsyncGenerator<{
        data: string;
    }, void, unknown>;
    get_dup_data({ data_in }: {
        data_in: string;
    }): Promise<{
        data_out: string;
    }[]>;
    do_eat_data(args: {
        data: string;
    }): void;
}
export {};
