import { specialTokens } from "./infix-to-postfix";
interface Transition {
    token: string;
    from: State;
    to: State;
    capturing: boolean;
}
declare class State {
    id: number;
    isEnd: boolean;
    transitions: Record<string, Transition[]>;
    constructor(isEnd?: boolean);
    addTransition(token: string, to: State, capturing?: boolean): void;
}
export declare class NFA {
    start: State;
    end: State;
    private languagePack;
    private tokenizer;
    constructor(start?: State, end?: State);
    private preprocess;
    match(utterance: string, domainCanonical: string[], value: string): string | null;
    print(): void;
    private static getClosure;
}
declare function toNFA(template: string[]): NFA;
export { specialTokens, toNFA };
