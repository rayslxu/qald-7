import * as ThingTalk from 'thingtalk';
import { Ast, ExecEnvironment, SchemaRetriever, Runtime } from 'thingtalk';
import { SimulationDatabase } from './types';
declare class ResultGenerator {
    private _rng;
    private _timezone;
    private _overrides;
    private _candidates;
    private _constants;
    constructor(rng: () => number, timezone: string, overrides: Map<string, unknown>);
    private _doAddCandidate;
    addCandidate(value: Ast.Value): void;
    generate(schema: Ast.FunctionDef, params: Record<string, unknown>, index: number): Record<string, unknown>;
    private _generateValue;
    private _generateTime;
    private _generateDate;
    private _generateLocation;
    private _generateNumber;
    private _generateString;
    generateString(): string;
    private _reuseConstant;
}
declare class SimulatedError extends Error {
    code: string | undefined;
    constructor(message: string, code?: string);
}
interface OutputDelegate {
    output(outputType: string, outputValue: Record<string, unknown>): void;
    error(error: Error): void;
}
declare class SimulationExecEnvironment extends ExecEnvironment {
    private _schemas;
    private _database;
    private _rng;
    private _simulateErrors;
    private _testDevice;
    private _delegate;
    private _locale;
    private _timezone;
    private _execCache;
    generator: ResultGenerator | null;
    constructor(locale: string, timezone: string | undefined, schemas: SchemaRetriever, database: SimulationDatabase | undefined, { rng, simulateErrors }: {
        rng: () => number;
        simulateErrors?: boolean;
    });
    setOutputDelegate(delegate: OutputDelegate): void;
    get program_id(): ThingTalk.Builtin.Entity;
    get locale(): string;
    get timezone(): string;
    clearGetCache(): void;
    reportError(message: string, error: Error & {
        code?: string;
    }): Promise<void>;
    output(outputType: string, outputValues: Record<string, unknown>): Promise<void>;
    private _findInCache;
    private _failAction;
    private _getDevices;
    invokeAction(kind: string, attrs: Record<string, string>, fname: string, params: Record<string, unknown>): AsyncIterable<[string, Record<string, unknown>]>;
    private _tryFromSimulationDatabase;
    private _doInvokeQuery;
    invokeQuery(kind: string, attrs: Record<string, string>, fname: string, params: Record<string, unknown>, hints: Runtime.CompiledQueryHints): AsyncIterable<[string, Record<string, unknown>]>;
    invokeDBQuery(kind: string, attrs: Record<string, string>, query: Ast.Program): AsyncIterable<[string, Record<string, unknown>]>;
    formatEvent(outputType: string, output: Record<string, unknown>, hint: string): Promise<string>;
}
export { ResultGenerator, SimulationExecEnvironment, SimulatedError };
