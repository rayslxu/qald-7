import * as Tp from 'thingpedia';
import { Ast, SchemaRetriever } from 'thingtalk';
import AbstractDialogueAgent, { DeviceInfo, DisambiguationHints } from '../abstract_dialogue_agent';
import { EntityRecord } from '../entity-linking/entity-finder';
import ValueCategory from '../value-category';
import StatementSimulator, { ThingTalkSimulatorState } from './statement_simulator';
import { SimulationDatabase } from './types';
export interface SimulationDialogueAgentOptions {
    schemaRetriever?: SchemaRetriever;
    thingpediaClient?: Tp.BaseClient;
    locale: string;
    timezone: string | undefined;
    rng: () => number;
    database?: SimulationDatabase;
    overrides?: Map<string, string>;
    interactive: boolean;
}
/**
 * The dialogue agent used at simulation time.
 *
 * This is a completely stateless class, as it handles many possible dialogues at the same
 * time.
 */
export default class SimulationDialogueAgent extends AbstractDialogueAgent<ThingTalkSimulatorState> {
    private _executor;
    private _rng;
    private _database?;
    private _interactive;
    constructor(options: SimulationDialogueAgentOptions);
    protected get executor(): StatementSimulator;
    protected configureNotifications(): Promise<undefined>;
    protected checkForPermission(stmt: Ast.ExpressionStatement): Promise<void>;
    protected getAllDevicesOfKind(kind: string): Promise<DeviceInfo[]>;
    protected tryConfigureDevice(kind: string): Promise<never>;
    disambiguate(type: string, name: string | null, choices: string[], hint?: string): Promise<number>;
    lookupContact(category: ValueCategory, name: string): Promise<never>;
    protected addDisplayToContact(contact: Ast.EntityValue): Promise<void>;
    askMissingContact(category: ValueCategory, name: string): Promise<never>;
    protected lookupLocation(searchKey: string, previousLocations: Ast.AbsoluteLocation[]): Promise<Ast.LocationValue>;
    private _getIDs;
    protected resolveEntity(entityType: string, entityDisplay: string, hints: DisambiguationHints): Promise<EntityRecord>;
    protected resolveUserContext(variable: string): Promise<Ast.Value>;
    getPreferredUnit(type: string): string;
}
