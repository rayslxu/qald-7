"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2021 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = require(".");
const message_type_1 = require("./message_type");
const custom_error_1 = __importDefault(require("../../utils/custom_error"));
const protocol_impl_1 = __importDefault(require("../audio/protocol_impl"));
/**
 * A single connection from a conversation API client.
 *
 * This class implements the websocket-based protocol used by the server
 * and cloud platforms. It extends the conversation protocol with options
 * related to synchronizing devices, controlling audio, accessing the
 * user's location, and more.
 */
class ConversationWebSocketConnection {
    constructor(conversation, sendCallback, options = {}) {
        var _a, _b;
        this._subprotocols = new Map;
        this._conversation = conversation;
        this._engine = conversation.engine;
        this.send = sendCallback;
        this._syncDevices = (_a = options.syncDevices) !== null && _a !== void 0 ? _a : false;
        this._replayHistory = (_b = options.replayHistory) !== null && _b !== void 0 ? _b : true;
        this._deviceAddedListener = (d) => {
            this._sendNewDevice(d).catch((e) => {
                console.error(`Failed to send notification of new device to client: ${e.message}`);
                if (e.code === 'ERR_SOCKET_CLOSED')
                    this.destroy();
            });
        };
        this._pingListener = () => {
            this.send({ type: _1.MessageType.PING });
        };
    }
    get conversationId() {
        return this._conversation.id;
    }
    get engine() {
        return this._engine;
    }
    async start() {
        await this.send({ type: _1.MessageType.ID, id: this._conversation.id });
        if (this._syncDevices) {
            for (const d of this._engine.devices.getAllDevices())
                await this._sendNewDevice(d);
            this._engine.devices.on('device-added', this._deviceAddedListener);
            this._engine.devices.on('device-changed', this._deviceAddedListener);
        }
        this._engine.activityMonitor.on('ping', this._pingListener);
        await this._conversation.addOutput(this, this._replayHistory);
    }
    destroy() {
        this._engine.assistant.closeConversation(this._conversation.id);
        this._conversation.removeOutput(this);
        if (this._syncDevices) {
            this._engine.devices.removeListener('device-added', this._deviceAddedListener);
            this._engine.devices.removeListener('device-changed', this._deviceAddedListener);
        }
        this._engine.activityMonitor.removeListener('ping', this._pingListener);
        for (const impl of this._subprotocols.values())
            impl.destroy();
    }
    async _requestSubprotocol(proto, caps) {
        if (this._subprotocols.has(proto))
            throw new custom_error_1.default('EEXIST', `Subprotocol was already initialized`);
        switch (proto) {
            case message_type_1.SubprotocolType.AUDIO:
                this._subprotocols.set(message_type_1.SubprotocolType.AUDIO, new protocol_impl_1.default(this, caps));
                break;
            default:
                throw new custom_error_1.default('EINVAL', `Invalid subprotocol type`);
        }
    }
    _dispatchSubprotocol(proto, msg) {
        const impl = this._subprotocols.get(proto);
        if (!impl)
            throw new custom_error_1.default('EINVAL', `Subprotocol not initialized`);
        return impl.handle(msg);
    }
    async handle(msg) {
        try {
            switch (msg.type) {
                case _1.MessageType.COMMAND:
                    await this._conversation.handleCommand(msg.text, msg.platformData);
                    break;
                case _1.MessageType.PARSED_COMMAND:
                    await this._conversation.handleParsedCommand(msg.json, msg.title, msg.platformData);
                    break;
                case _1.MessageType.THINGTALK_COMMAND:
                    await this._conversation.handleThingTalk(msg.code, msg.platformData);
                    break;
                case _1.MessageType.PING:
                    await this._engine.updateActivity();
                    break;
                case _1.MessageType.REQUEST_SUBPROTOCOL:
                    await this._requestSubprotocol(msg.proto, msg.caps);
                    break;
                case _1.MessageType.AUDIO_SUBPROTOCOL:
                    await this._dispatchSubprotocol(message_type_1.SubprotocolType.AUDIO, msg);
                    break;
                default:
                    await this.send({ type: _1.MessageType.ERROR, message: 'Invalid message type', code: 'EINVAL' });
            }
        }
        catch (e) {
            await this.send({ type: _1.MessageType.ERROR, message: e.message, code: e.code });
        }
    }
    setHypothesis(hypothesis) {
        return this.send({ type: _1.MessageType.HYPOTHESIS, hypothesis });
    }
    setExpected(what, context) {
        return this.send({ type: _1.MessageType.ASK_SPECIAL, ask: what, context });
    }
    addMessage(msg) {
        return this.send(msg);
    }
    async _sendNewDevice(device) {
        return this.send({ type: _1.MessageType.NEW_DEVICE, uniqueId: device.uniqueId, state: device.serialize() });
    }
}
exports.default = ConversationWebSocketConnection;
//# sourceMappingURL=connection.js.map