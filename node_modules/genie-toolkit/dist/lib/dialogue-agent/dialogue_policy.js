"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const assert_1 = __importDefault(require("assert"));
const thingtalk_1 = require("thingtalk");
const I18n = __importStar(require("../i18n"));
const generator_1 = __importDefault(require("../sentence-generator/generator"));
const ThingTalkUtils = __importStar(require("../utils/thingtalk"));
const TransactionPolicy = __importStar(require("../templates/transactions"));
const MAX_DEPTH = 8;
const TARGET_PRUNING_SIZES = [15, 50, 100, 200];
function arrayEqual(a, b) {
    if (a.length !== b.length)
        return false;
    for (let i = 0; i < a.length; i++) {
        if (a[i] !== b[i])
            return false;
    }
    return true;
}
class DialoguePolicy {
    constructor(options) {
        this._thingpedia = options.thingpedia;
        this._schemas = options.schemas;
        this._locale = options.locale;
        this._timezone = options.timezone;
        this._langPack = I18n.get(options.locale);
        this._entityAllocator = new thingtalk_1.Syntax.SequentialEntityAllocator({}, { timezone: this._timezone });
        this._rng = options.rng;
        (0, assert_1.default)(this._rng);
        this._debug = options.debug;
        this._anonymous = options.anonymous;
        this._extraFlags = options.extraFlags;
        this._policyModuleName = options.policyModule;
        this._sentenceGenerator = null;
        this._generatorDevices = null;
        this._generatorOptions = undefined;
    }
    async initialize() {
        if (this._policyModule)
            return;
        if (this._policyModuleName)
            this._policyModule = await Promise.resolve().then(() => __importStar(require(path_1.default.resolve(this._policyModuleName))));
        else
            this._policyModule = TransactionPolicy;
    }
    async _initializeGenerator(forDevices) {
        console.log('Initializing dialogue policy for devices: ' + forDevices.join(', '));
        this._generatorOptions = {
            contextual: true,
            rootSymbol: '$agent',
            forSide: 'agent',
            flags: {
                dialogues: true,
                inference: true,
                anonymous: this._anonymous,
                ...this._extraFlags
            },
            rng: this._rng,
            locale: this._locale,
            timezone: this._timezone,
            thingpediaClient: this._thingpedia,
            schemaRetriever: this._schemas,
            entityAllocator: this._entityAllocator,
            onlyDevices: forDevices,
            maxDepth: MAX_DEPTH,
            maxConstants: 5,
            targetPruningSize: TARGET_PRUNING_SIZES[0],
            debug: this._debug,
        };
        const sentenceGenerator = new generator_1.default(this._generatorOptions);
        this._sentenceGenerator = sentenceGenerator;
        this._generatorDevices = forDevices;
        await this._sentenceGenerator.initialize();
        await this._policyModule.initializeTemplates(this._generatorOptions, this._langPack, this._sentenceGenerator, this._sentenceGenerator.tpLoader);
    }
    _extractDevices(state) {
        if (state === null)
            return [];
        const devices = new Set();
        state.visit(new class extends thingtalk_1.Ast.NodeVisitor {
            visitDeviceSelector(selector) {
                devices.add(selector.kind);
                return true;
            }
        });
        const deviceArray = Array.from(devices);
        deviceArray.sort();
        return deviceArray;
    }
    async _ensureGeneratorForState(state) {
        const devices = this._extractDevices(state);
        if (this._generatorDevices && arrayEqual(this._generatorDevices, devices))
            return;
        await this._initializeGenerator(devices);
    }
    async handleAnswer(state, value) {
        if (state === null)
            return null;
        if (!this._policyModule.interpretAnswer)
            return null;
        await this._ensureGeneratorForState(state);
        return this._policyModule.interpretAnswer(state, value, this._sentenceGenerator.tpLoader, this._sentenceGenerator.contextTable);
    }
    _generateDerivation(state) {
        let derivation;
        // try with a low pruning size first, because that's faster, and then increase
        // the pruning size if we don't find anything useful
        for (const pruningSize of TARGET_PRUNING_SIZES) {
            this._generatorOptions.targetPruningSize = pruningSize;
            this._sentenceGenerator.reset(true);
            this._entityAllocator.reset();
            if (state !== null) {
                const constants = ThingTalkUtils.extractConstants(state, this._sentenceGenerator.tpLoader.describer);
                this._sentenceGenerator.addConstantsFromContext(constants);
            }
            const contextPhrases = this._policyModule.getContextPhrasesForState(state, this._sentenceGenerator.tpLoader, this._sentenceGenerator.contextTable);
            if (contextPhrases === null)
                return undefined;
            derivation = this._sentenceGenerator.generateOne(contextPhrases, '$agent');
            if (derivation !== undefined)
                break;
        }
        return derivation;
    }
    async chooseAction(state) {
        await this._ensureGeneratorForState(state);
        const derivation = this._generateDerivation(state);
        if (derivation === undefined)
            return derivation;
        let utterance = derivation.chooseBestSentence();
        utterance = this._langPack.postprocessSynthetic(utterance, derivation.value.state, this._rng, 'agent');
        return {
            state: derivation.value.state,
            end: derivation.value.end,
            expect: derivation.value.expect,
            raw: derivation.value.raw,
            utterance,
            entities: this._entityAllocator.entities,
            numResults: derivation.value.numResults
        };
    }
    async getFollowUp(state) {
        await this._ensureGeneratorForState(state);
        if (!this._policyModule.getFollowUp)
            return null;
        return this._policyModule.getFollowUp(state, this._sentenceGenerator.tpLoader, this._sentenceGenerator.contextTable);
    }
    async getNotificationState(appName, program, result) {
        var _a;
        await this._ensureGeneratorForState(program);
        return ((_a = this._policyModule.notification) !== null && _a !== void 0 ? _a : TransactionPolicy.notification)(appName, program, result);
    }
    async getAsyncErrorState(appName, program, error) {
        var _a;
        await this._ensureGeneratorForState(program);
        return ((_a = this._policyModule.notifyError) !== null && _a !== void 0 ? _a : TransactionPolicy.notifyError)(appName, program, error);
    }
    async getInitialState() {
        await this._ensureGeneratorForState(null);
        if (!this._policyModule.initialState)
            return null;
        return this._policyModule.initialState(this._sentenceGenerator.tpLoader);
    }
}
exports.default = DialoguePolicy;
//# sourceMappingURL=dialogue_policy.js.map