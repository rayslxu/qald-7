"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2018-2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const ThingTalk = __importStar(require("thingtalk"));
const I18n = __importStar(require("../../i18n"));
const statement_executor_1 = __importDefault(require("../statement_executor"));
const dialogue_policy_1 = __importDefault(require("../dialogue_policy"));
const card_formatter_1 = __importDefault(require("../card-output/card-formatter"));
const format_objects_1 = require("../card-output/format_objects");
/**
 * An object that is able to convert structured ThingTalk results
 * into a textual representation suitable to send as a notification
 * or a message.
 *
 * This is used to implement `$result` ThingTalk, and to dispatch
 * notifications to third-party services like Twilio.
 *
 * Internally, it uses the transaction state machine, which is
 * instantiated with a special state for every result.
 */
class NotificationFormatter {
    /**
     * Construct a new formatter for a given Genie engine.
     */
    constructor(engine) {
        this._engine = engine;
        this._cardFormatter = new card_formatter_1.default(engine.platform.locale, engine.platform.timezone, engine.schemas);
        this._langPack = I18n.get(engine.platform.locale);
        this._executor = new statement_executor_1.default(engine, 'internal');
        this._policy = new dialogue_policy_1.default({
            thingpedia: engine.thingpedia,
            schemas: engine.schemas,
            locale: engine.platform.locale,
            timezone: engine.platform.timezone,
            rng: Math.random,
            debug: 0,
            anonymous: false,
            extraFlags: {}
        });
    }
    async initialize() {
        await this._policy.initialize();
    }
    async formatNotification(appName, program, outputType, outputValue) {
        (0, assert_1.default)(program.statements.length === 1);
        const stmt = program.statements[0];
        (0, assert_1.default)(stmt instanceof ThingTalk.Ast.ExpressionStatement);
        (0, assert_1.default)(stmt.expression.schema);
        const mappedResult = await this._executor.mapResult(stmt.expression.schema, outputValue);
        const dialogueState = await this._policy.getNotificationState(appName, program, mappedResult);
        const policyResult = await this._policy.chooseAction(dialogueState);
        if (!policyResult) {
            console.log(dialogueState.prettyprint());
            throw new Error(`Unexpected invalid state from agent during notification`);
        }
        const postprocessed = this._langPack.postprocessNLG(policyResult.utterance, policyResult.entities, {
            timezone: this._engine.platform.timezone,
            getPreferredUnit: (type) => {
                const pref = this._engine.platform.getSharedPreferences();
                return pref.get('preferred-' + type);
            }
        });
        const output = [
            new format_objects_1.FORMAT_TYPES.text({ type: 'text', text: postprocessed })
        ];
        const formatted = await this._cardFormatter.formatForType(outputType, outputValue);
        for (const card of formatted)
            output.push(card);
        return output;
    }
}
exports.default = NotificationFormatter;
//# sourceMappingURL=formatter.js.map