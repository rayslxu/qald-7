"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2018-2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const twilio = __importStar(require("twilio"));
class TwilioNotificationBackend {
    constructor(engine, config) {
        this.name = 'SMS';
        this.uniqueId = 'twilio';
        this._platform = engine.platform;
        this._client = new twilio.Twilio(config.accountSid, config.authToken);
        this._from = config.fromByLocale ? (config.fromByLocale[this._platform.locale] || config.from)
            : config.from;
    }
    get requiredSettings() {
        return { to: '$context.self.phone_number' };
    }
    async notify(data, config) {
        let to;
        if (config) {
            to = config.to;
        }
        else {
            const profile = this._platform.getProfile();
            if (!profile.phone || !profile.phone_verified)
                return;
            to = profile.phone;
        }
        let body = data.formatted.map((x) => x.toLocaleString(this._platform.locale)).join('\n');
        body += ' To stop these messages, say STOP.';
        try {
            await this._client.messages.create({
                to, from: this._from, body
            });
        }
        catch (e) {
            // can happen e.g. if unsubscribed
            console.error(`Failed to send SMS to ${to}: ${e.message}`);
        }
    }
    async notifyError(data) {
        // do nothing, and swallow the error...
    }
}
exports.default = TwilioNotificationBackend;
//# sourceMappingURL=twilio.js.map