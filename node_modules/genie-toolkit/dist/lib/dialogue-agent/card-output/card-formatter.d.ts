import * as Tp from 'thingpedia';
import { SchemaRetriever } from 'thingtalk';
declare type PlainObject = {
    [key: string]: unknown;
};
declare type FormatSpecChunk = string | Tp.FormatObjects.FormattedObject;
export declare type FormatSpec = FormatSpecChunk[];
/**
 * An object that is able to convert structured ThingTalk results
 * into interactive cards suitable to supplement text or speech output.
 */
export default class CardFormatter {
    private _locale;
    private _timezone;
    private _schemas;
    private _;
    /**
     * Construct a new formatter.
     *
     * @param locale - the user's locale, as a BCP47 tag
     * @param timezone - the user's timezone, as a string in the IANA timezone database (e.g. America/Los_Angeles, Europe/Rome)
     * @param schemaRetriever - the interface to access Thingpedia for formatting information
     */
    constructor(locale: string, timezone: string | undefined, schemaRetriever: SchemaRetriever);
    replaceInString(str: unknown, argMap: PlainObject): string | null;
    private _getFormatMetadata;
    formatForType(outputType: string, outputValue: PlainObject): Promise<Tp.FormatObjects.FormattedObject[]>;
}
export {};
