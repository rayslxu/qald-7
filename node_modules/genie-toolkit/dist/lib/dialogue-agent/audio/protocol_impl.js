"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2021 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const custom_error_1 = __importDefault(require("../../utils/custom_error"));
const protocol_1 = require("../protocol");
const protocol_2 = require("./protocol");
/**
 * Implementation of the audio control protocol over the conversation
 * websocket connection.
 */
class AudioSubprotocolImplementation {
    constructor(connection, caps) {
        this._nextReq = 0;
        this._conn = connection;
        this._requests = new Map;
        this._conn.engine.audio.addPlayer(this);
    }
    get conversationId() {
        return this._conn.conversationId;
    }
    destroy() {
        this._conn.engine.audio.removePlayer(this);
    }
    async handle(msg) {
        const request = this._requests.get(msg.req);
        if (!request)
            throw new custom_error_1.default('EINVAL', `Invalid request number`);
        request.resolve(msg);
    }
    _req(msg) {
        return new Promise((resolve, reject) => {
            this._requests.set(msg.req, { resolve, reject });
            this._conn.send(msg).catch((e) => {
                reject(e);
            });
        });
    }
    async _simpleReq(msg) {
        const reply = (await this._req(msg));
        if (reply.error) {
            if (reply.error.code)
                throw new custom_error_1.default(reply.error.code, reply.error.message);
            else
                throw new Error(reply.error.message);
        }
    }
    async checkCustomPlayer(spec) {
        const msg = (await this._req({
            type: protocol_1.MessageType.AUDIO_SUBPROTOCOL,
            req: this._nextReq++,
            op: protocol_2.RequestType.CHECK_BACKEND,
            spec
        }));
        if (msg.error) {
            if (msg.error.code)
                throw new custom_error_1.default(msg.error.code, msg.error.message);
            else
                throw new Error(msg.error.message);
        }
        if (typeof msg.ok !== 'boolean') {
            this._conn.send({ type: protocol_1.MessageType.ERROR, code: 'EINVAL', message: `Invalid reply to check request` });
            return false;
        }
        if (!msg.ok)
            console.log(`Player of type ${spec.type} is not available on ${this.conversationId}: ${msg.detail}`);
        return msg.ok;
    }
    prepare(spec) {
        return this._simpleReq({
            type: protocol_1.MessageType.AUDIO_SUBPROTOCOL,
            req: this._nextReq++,
            op: protocol_2.RequestType.PREPARE,
            spec
        });
    }
    stop() {
        return this._simpleReq({
            type: protocol_1.MessageType.AUDIO_SUBPROTOCOL,
            req: this._nextReq++,
            op: protocol_2.RequestType.STOP,
        });
    }
    pause() {
        return this._simpleReq({
            type: protocol_1.MessageType.AUDIO_SUBPROTOCOL,
            req: this._nextReq++,
            op: protocol_2.RequestType.PAUSE,
        });
    }
    resume() {
        return this._simpleReq({
            type: protocol_1.MessageType.AUDIO_SUBPROTOCOL,
            req: this._nextReq++,
            op: protocol_2.RequestType.RESUME,
        });
    }
    playURLs(urls) {
        return this._simpleReq({
            type: protocol_1.MessageType.AUDIO_SUBPROTOCOL,
            req: this._nextReq++,
            op: protocol_2.RequestType.PLAY_URLS,
            urls,
        });
    }
    setVolume(volume) {
        return this._simpleReq({
            type: protocol_1.MessageType.AUDIO_SUBPROTOCOL,
            req: this._nextReq++,
            op: protocol_2.RequestType.SET_VOLUME,
            volume
        });
    }
    adjustVolume(delta) {
        return this._simpleReq({
            type: protocol_1.MessageType.AUDIO_SUBPROTOCOL,
            req: this._nextReq++,
            op: protocol_2.RequestType.ADJUST_VOLUME,
            delta
        });
    }
    setMute(mute) {
        return this._simpleReq({
            type: protocol_1.MessageType.AUDIO_SUBPROTOCOL,
            req: this._nextReq++,
            op: protocol_2.RequestType.SET_MUTE,
            mute
        });
    }
    setVoiceInput(input) {
        return this._simpleReq({
            type: protocol_1.MessageType.AUDIO_SUBPROTOCOL,
            req: this._nextReq++,
            op: protocol_2.RequestType.SET_VOICE_INPUT,
            input
        });
    }
    setVoiceOutput(output) {
        return this._simpleReq({
            type: protocol_1.MessageType.AUDIO_SUBPROTOCOL,
            req: this._nextReq++,
            op: protocol_2.RequestType.SET_VOICE_OUTPUT,
            output
        });
    }
}
exports.default = AudioSubprotocolImplementation;
//# sourceMappingURL=protocol_impl.js.map