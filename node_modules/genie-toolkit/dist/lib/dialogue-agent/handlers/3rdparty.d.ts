import * as Tp from 'thingpedia';
import { DialogueHandler, ReplyResult, CommandAnalysisResult } from '../dialogue-loop';
import { UserInput } from '../user-input';
interface AnalysisTypeAdapter<InnerAnalysisType extends Tp.DialogueHandler.CommandAnalysisResult> extends CommandAnalysisResult {
    inner: InnerAnalysisType | null;
}
/**
 * Helper class to adapt a Thingpedia device into a Genie dialogue handler.
 *
 * Thingpedia dialogue handlers are simplified to avoid leaking some details
 * of the ThingTalk dialogue loop.
 */
export default class ThingpediaDialogueHandler<AnalysisType extends Tp.DialogueHandler.CommandAnalysisResult, StateType> implements DialogueHandler<AnalysisTypeAdapter<AnalysisType>, StateType> {
    private _iface;
    uniqueId: string;
    constructor(device: Tp.BaseDevice);
    get priority(): Tp.DialogueHandler.Priority;
    get icon(): string | null;
    private _mapReplyResult;
    private _mapConfidence;
    initialize(initialState: StateType | undefined, showWelcome: boolean): Promise<ReplyResult | null>;
    getState(): StateType;
    reset(): void;
    analyzeCommand(command: UserInput): Promise<AnalysisTypeAdapter<AnalysisType>>;
    getReply(command: AnalysisTypeAdapter<AnalysisType>): Promise<ReplyResult>;
    getFollowUp(): Promise<ReplyResult | null>;
}
export {};
