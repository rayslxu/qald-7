"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2021 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const Tp = __importStar(require("thingpedia"));
const I18n = __importStar(require("../../i18n"));
const dialogue_loop_1 = require("../dialogue-loop");
const HIGH_CONFIDENCE_THRESHOLD = 0.4;
const LOW_CONFIDENCE_THRESHOLD = 0;
class FAQDialogueHandler {
    constructor(loop, uniqueId, model, options) {
        var _a, _b;
        this.priority = Tp.DialogueHandler.Priority.SECONDARY;
        this.icon = null;
        this.uniqueId = 'faq/' + uniqueId;
        this._loop = loop;
        this._url = model.url;
        this._highConfidence = (_a = model.highConfidence) !== null && _a !== void 0 ? _a : HIGH_CONFIDENCE_THRESHOLD;
        this._lowConfidence = (_b = model.lowConfidence) !== null && _b !== void 0 ? _b : LOW_CONFIDENCE_THRESHOLD;
        // TRANSLATORS: this is a regular expression that should match commands that
        // "look like questions" - and thus are candidate for lookup in the FAQ database
        this._looksLikeQuestion = new RegExp(I18n.get(options.locale)._("^(what|who|where|when|why|how)|\\?\\s*$"), 'i');
    }
    async initialize() {
        return null;
    }
    getState() {
        return undefined;
    }
    reset() {
    }
    async analyzeCommand(command) {
        if (command.type !== 'command')
            return { type: dialogue_loop_1.CommandAnalysisType.OUT_OF_DOMAIN_COMMAND, utterance: '', user_target: '', answer: '' };
        if (!this._looksLikeQuestion.test(command.utterance))
            return { type: dialogue_loop_1.CommandAnalysisType.OUT_OF_DOMAIN_COMMAND, utterance: '', user_target: '', answer: '' };
        const response = await Tp.Helpers.Http.post(this._url, JSON.stringify({
            instances: [command.utterance]
        }), { dataContentType: 'application/json' });
        const best = JSON.parse(response).predictions[0];
        this._loop.debug(`Best FAQ answer for ${this.uniqueId} has score ${best.score}`);
        const confidence = best.score >= this._highConfidence ?
            dialogue_loop_1.CommandAnalysisType.CONFIDENT_IN_DOMAIN_COMMAND :
            best.score >= this._lowConfidence ?
                dialogue_loop_1.CommandAnalysisType.NONCONFIDENT_IN_DOMAIN_COMMAND :
                dialogue_loop_1.CommandAnalysisType.OUT_OF_DOMAIN_COMMAND;
        return {
            type: confidence,
            utterance: command.utterance,
            user_target: '$dialogue @org.thingpedia.dialogue.faq.question;',
            answer: best.answer
        };
    }
    async getReply(command) {
        return {
            messages: [command.answer],
            context: '$dialogue @org.thingpedia.dialogue.faq.question;',
            agent_target: '$dialogue @org.thingpedia.dialogue.faq.answer;',
            expecting: null,
        };
    }
    async getFollowUp() {
        return null;
    }
}
exports.default = FAQDialogueHandler;
//# sourceMappingURL=faq.js.map