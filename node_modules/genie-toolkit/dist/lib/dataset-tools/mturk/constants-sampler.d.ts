import { SchemaRetriever } from 'thingtalk';
interface EntityRecord {
    type: string;
    value: string;
    canonical: string;
    name: string;
}
interface ParameterRecord {
    preprocessed: string;
    value: string;
    weight: number;
}
interface ParameterProvider {
    get(type: 'entity' | 'string', key: string): Promise<ParameterRecord[]>;
    getEntity(key: string): Promise<EntityRecord[]>;
}
interface ConstantSamplerOptions {
    locale: string;
    rng: () => number;
    devices: string;
    sample_size: number;
}
export default class ConstantSampler {
    private _schemaRetriever;
    private _constProvider;
    private _options;
    private _langPack;
    private _cachedStrings;
    private _cachedEntities;
    constructor(schemaRetriever: SchemaRetriever, constProvider: ParameterProvider, options: ConstantSamplerOptions);
    private _sampleEntities;
    private _sampleStrings;
    private _retrieveStringSamples;
    private _retrieveEntitySamples;
    private _sampleOneDevice;
    sample(): Promise<string[][]>;
}
export {};
