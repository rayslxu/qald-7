"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeLookupKeys = exports.entityTypeToTTType = void 0;
const thingtalk_1 = require("thingtalk");
const TYPES = {
    QUOTED_STRING: thingtalk_1.Type.String,
    NUMBER: thingtalk_1.Type.Number,
    CURRENCY: thingtalk_1.Type.Currency,
    DURATION: new thingtalk_1.Type.Measure('ms'),
    LOCATION: thingtalk_1.Type.Location,
    DATE: thingtalk_1.Type.Date,
    TIME: thingtalk_1.Type.Time,
    EMAIL_ADDRESS: new thingtalk_1.Type.Entity('tt:email_address'),
    PHONE_NUMBER: new thingtalk_1.Type.Entity('tt:phone_number'),
    HASHTAG: new thingtalk_1.Type.Entity('tt:hashtag'),
    USERNAME: new thingtalk_1.Type.Entity('tt:username'),
    URL: new thingtalk_1.Type.Entity('tt:url'),
    PATH_NAME: new thingtalk_1.Type.Entity('tt:path_name'),
};
function entityTypeToTTType(entityType, unit) {
    if (entityType === 'NUMBER' && !!unit)
        return new thingtalk_1.Type.Measure(unit);
    else if (entityType.startsWith('GENERIC_ENTITY_'))
        return new thingtalk_1.Type.Entity(entityType.substring('GENERIC_ENTITY_'.length));
    else if (entityType.startsWith('MEASURE_'))
        return new thingtalk_1.Type.Measure(entityType.substring('MEASURE_'.length));
    else
        return TYPES[entityType];
}
exports.entityTypeToTTType = entityTypeToTTType;
function makeLookupKeys(deviceFunctionName, param, type) {
    const keys = [];
    if (type instanceof thingtalk_1.Type.Array)
        type = type.elem;
    keys.push(String(type));
    if (param)
        keys.push(`param:${param}:${type}`);
    if (param && deviceFunctionName) {
        const dot = deviceFunctionName.lastIndexOf('.');
        const deviceName = deviceFunctionName.substring(0, dot);
        const functionName = deviceFunctionName.substring(dot + 1);
        keys.push(`param:${deviceName}.*:${param}:${type}`);
        keys.push(`param:${deviceName}.${functionName}:${param}:${type}`);
    }
    keys.reverse();
    return keys;
}
exports.makeLookupKeys = makeLookupKeys;
//# sourceMappingURL=sample-utils.js.map