"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2019-2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.initArgparse = void 0;
const fs = __importStar(require("fs"));
const stream_1 = __importDefault(require("stream"));
const csv_parse_1 = __importDefault(require("csv-parse"));
const csv_stringify_1 = __importDefault(require("csv-stringify"));
const StreamUtils = __importStar(require("../lib/utils/stream-utils"));
const constants_1 = require("./lib/constants");
const misc_utils_1 = require("../lib/utils/misc-utils");
class ParaphraseHITCreator extends stream_1.default.Transform {
    constructor(sentencesPerTask) {
        super({
            readableObjectMode: true,
            writableObjectMode: true,
        });
        this._sentencesPerTask = sentencesPerTask;
        this._i = 0;
        this._buffer = {};
    }
    _transform(row, encoding, callback) {
        const i = ++this._i;
        this._buffer[`id${i}`] = row.id;
        if (row.context) {
            this._buffer[`context${i}`] = row.context;
            this._buffer[`context_utterance${i}`] = row.context_utterance;
            if (row.assistant_action.startsWith('slot-fill:')) {
                const param = row.assistant_action.split(':')[1];
                this._buffer[`assistant_action${i}`] = `The assistant asks for the value of ${(0, misc_utils_1.clean)(param)} parameter.`;
            }
            else if (row.assistant_action === 'result') {
                this._buffer[`assistant_action${i}`] = `The assistant shows the result.`;
            }
            else if (row.assistant_action === 'confirm') {
                this._buffer[`assistant_action${i}`] = `The assistant confirms the command before executing it.`;
            }
            else {
                throw new Error(`Invalid assistant action ${row.assistant_action}`);
            }
        }
        this._buffer[`thingtalk${i}`] = row.target_code;
        this._buffer[`sentence${i}`] = row.utterance;
        if (i === this._sentencesPerTask) {
            callback(null, this._buffer);
            this._i = 0;
            this._buffer = {};
        }
        else {
            callback();
        }
    }
    _flush(callback) {
        process.nextTick(callback);
    }
}
function initArgparse(subparsers) {
    const parser = subparsers.add_parser('mturk-make-paraphrase-hits', {
        add_help: true,
        description: "Prepare the input file for the manual paraphrase HITs."
    });
    parser.add_argument('-o', '--output', {
        required: true,
        type: fs.createWriteStream
    });
    parser.add_argument('--sentences-per-task', {
        required: false,
        type: Number,
        default: constants_1.NUM_SENTENCES_PER_TASK,
        help: "Number of sentences in each HIT"
    });
}
exports.initArgparse = initArgparse;
async function execute(args) {
    process.stdin.setEncoding('utf8');
    process.stdin
        .pipe((0, csv_parse_1.default)({ columns: true, delimiter: '\t' }))
        .pipe(new ParaphraseHITCreator(args.sentences_per_task))
        .pipe((0, csv_stringify_1.default)({ header: true, delimiter: ',' }))
        .pipe(args.output);
    return StreamUtils.waitFinish(args.output);
}
exports.execute = execute;
//# sourceMappingURL=mturk-make-paraphrase-hits.js.map