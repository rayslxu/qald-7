"use strict";
// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Silei Xu <silei@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.initArgparse = void 0;
const Tp = __importStar(require("thingpedia"));
const URL = 'https://query.wikidata.org/sparql';
const query = `SELECT ?property ?propertyType ?propertyLabel ?propertyDescription ?propertyAltLabel ?schemaProperty WHERE {
  ?property wikibase:propertyType ?propertyType .
  ?property wdt:P1628 ?schemaProperty .
  FILTER(STRSTARTS(STR(?schemaProperty), "http://schema.org")) .
  SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE],en". }
}
ORDER BY ASC(xsd:integer(STRAFTER(STR(?property), 'P')))`;
async function retrieveProperties() {
    const result = await Tp.Helpers.Http.get(`${URL}?query=${encodeURIComponent(query)}`, {
        accept: 'application/json'
    });
    return JSON.parse(result).results.bindings;
}
function clean(raw) {
    const cleaned = {};
    raw.forEach((p) => {
        const label = p.propertyLabel.value;
        const altLabel = p.propertyAltLabel ? p.propertyAltLabel.value.split(', ') : null;
        const schemaProperty = p.schemaProperty.value.slice('http://schema.org/'.length);
        cleaned[schemaProperty] = {
            property: p.property.value,
            labels: altLabel ? [label, ...altLabel] : [label]
        };
    });
    return cleaned;
}
function initArgparse(subparsers) {
    subparsers.add_parser('schemaorg-retrieve-wikidata-labels', {
        add_help: true,
        description: "Retrieve the labels of schema.org properties from wikidata."
    });
}
exports.initArgparse = initArgparse;
async function execute() {
    const labels = await retrieveProperties();
    console.log(JSON.stringify(clean(labels), null, 2));
}
exports.execute = execute;
//# sourceMappingURL=retrieve-wikidata-labels.js.map