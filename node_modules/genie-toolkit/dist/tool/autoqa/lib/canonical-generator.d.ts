import { Ast } from 'thingtalk';
import * as Tp from 'thingpedia';
interface AutoCanonicalGeneratorOptions {
    dataset: 'schemaorg' | 'sgd' | 'multiwoz' | 'wikidata' | 'custom';
    paraphraser_model: string;
    remove_existing_canonicals: boolean;
    type_based_projection: boolean;
    max_per_pos?: number;
    annotate_property_canonical: boolean;
    annotate_query_canonical: boolean;
    batch_size: number;
    filtering: boolean;
    debug: boolean;
    cache?: string;
    cache_type: 'by-device' | 'by-function';
}
export declare class CanonicalCache {
    private cache;
    private cachePath;
    private cacheLoaded;
    constructor(path: string);
    private _loadCache;
    get(key: string): Promise<string>;
    set(key: string, value: string): Promise<unknown>;
}
export default class AutoCanonicalGenerator {
    private class;
    private entities;
    private constants;
    private functions;
    private paraphraserModel;
    private annotatedProperties;
    private langPack;
    private options;
    private entityNames;
    private childEntities;
    private cache;
    constructor(classDef: Ast.ClassDef, entities: Tp.BaseClient.EntityTypeRecord[], constants: Record<string, any[]>, functions: string[], options: AutoCanonicalGeneratorOptions);
    generate(): Promise<Ast.ClassDef>;
    private _loadManualCanonicalOverride;
    private _generateBaseCanonicalAnnotation;
    private _addProjectionCanonicals;
    private _processProjectionCanonical;
    private _retrieveSamples;
    private _trimAnnotations;
}
export {};
