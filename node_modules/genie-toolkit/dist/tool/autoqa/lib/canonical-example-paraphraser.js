"use strict";
// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Silei Xu <silei@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const util_1 = __importDefault(require("util"));
const child_process = __importStar(require("child_process"));
class Paraphraser {
    constructor(model, options) {
        this.model = model;
        this.options = options;
    }
    async paraphrase(examples) {
        // skip paraphrase when no input generated
        if (examples.length === 0)
            return;
        // in travis, we skip the paraphrasing step because it's too memory intensive
        if (process.env.CI || process.env.TRAVIS)
            return;
        // output paraphrase input 
        if (this.options.debug) {
            const output = util_1.default.promisify(fs_1.default.writeFile);
            await output('./paraphraser-in.json', JSON.stringify(examples.map((e) => {
                var _a;
                return { utterance: e.utterance, arg: e.argument, value: (_a = e.value) !== null && _a !== void 0 ? _a : null };
            }), null, 2));
        }
        // call genienlp to run paraphrase
        const args = [
            `run-paraphrase`,
            `--task`, `paraphrase`,
            `--input_column`, `0`,
            `--skip_heuristics`,
            `--model_name_or_path`, this.model,
            `--temperature`, `1`, `1`, `1`,
            `--num_beams`, `4`,
            `--pipe_mode`,
            `--batch_size`, this.options.batch_size.toString()
        ];
        const child = child_process.spawn(`genienlp`, args, { stdio: ['pipe', 'pipe', 'inherit'] });
        const stdout = await new Promise((resolve, reject) => {
            child.stdin.write(examples.map((ex) => ex.utterance).join('\n'));
            child.stdin.end();
            child.on('error', reject);
            child.stdout.on('error', reject);
            child.stdout.setEncoding('utf8');
            let buffer = '';
            child.stdout.on('data', (data) => {
                buffer += data;
            });
            child.stdout.on('end', () => resolve(buffer));
        });
        const paraphrases = JSON.parse(stdout);
        for (let i = 0; i < examples.length; i++)
            examples[i].paraphrases = paraphrases[i];
        // output paraphrase result 
        if (this.options.debug) {
            const output = util_1.default.promisify(fs_1.default.writeFile);
            try {
                await output(`./paraphraser-out.json`, JSON.stringify(JSON.parse(stdout), null, 2));
            }
            catch (e) {
                await output(`./paraphraser-out.txt`, stdout);
                throw new Error(e);
            }
        }
    }
}
exports.default = Paraphraser;
//# sourceMappingURL=canonical-example-paraphraser.js.map