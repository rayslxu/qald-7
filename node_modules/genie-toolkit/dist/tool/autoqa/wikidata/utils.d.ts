import * as ThingTalk from 'thingtalk';
declare const Type: typeof ThingTalk.Type;
/**
 * Covert wikidata unit into thingtalk unit
 * @param wikidataUnit
 */
declare function unitConverter(wikidataUnit: string): string;
/**
 * Run SPARQL query on wikidata endpoint and retrieve results
 * @param {string} query: SPARQL query
 * @returns {Promise<*>}
 */
declare function wikidataQuery(query: string): Promise<any[]>;
/**
 * Get the label of a given property
 * @param {string} propertyId: the id of the property
 * @returns {Promise<null|string>}: the label of the property
 */
declare function getPropertyLabel(propertyId: string): Promise<string | null>;
/**
 * Get alternative labels of a given property
 * @param {string} propertyId: the id of the property
 * @returns {Promise<Array.string>}: the label of the property
 */
declare function getPropertyAltLabels(propertyId: string): Promise<string[] | null>;
/**
 * Get the label of a given item
 * @param {string} itemId: the id of the item
 * @returns {Promise<null|string>}: the label of the item
 */
declare function getItemLabel(itemId: string): Promise<string | null>;
/**
 * Get a list of common properties given a domain
 * @param {string} domainId: the id of the domain, e.g. "Q5" for human domain
 * @returns {Promise<Array.string>}: a list of property ids
 */
declare function getPropertyList(domainId: string): Promise<string[]>;
/**
 * Get the value type constraint (Q21510865) of a property
 * @param {string} propertyId
 * @returns {Promise<Array.Object<id,value>>} A list of allowed value types and their labels
 */
declare function getValueTypeConstraint(propertyId: string): Promise<Array<Record<string, string>>>;
/**
 * Get the one-of constraint (Q21510859) of a property
 * This allows to detect Enum types
 *
 * @param propertyId
 * @returns {Promise<Array.String>} A list of enum values
 */
declare function getOneOfConstraint(propertyId: string): Promise<string[]>;
/**
 * Get the allowed units (Q21514353) of a property
 * This allows to detect Measure types
 *
 * @param propertyId
 * @returns {Promise<Array.String>} A list of allowed units
 */
declare function getAllowedUnits(propertyId: string): Promise<string[]>;
/**
 * Get the range of a numeric field
 *
 * @param propertyId
 * @returns {Object<max, min>|null} A list of allowed units
 */
declare function getRangeConstraint(propertyId: string): Promise<Record<string, number> | null>;
/**
 * Get the class (instance of) of a given wikidata property or entity
 * @param {string} id: the id of a property or an entity
 * @returns {Promise<Array.string>}: list of classes
 */
declare function getClasses(id: string): Promise<string[]>;
/**
 * Get wikidata equivalent of a given wikidata property or entity
 * @param {string} id: the id of a property or an entity
 * @returns {Promise<Array.string>}: list of classes
 */
declare function getEquivalent(id: string): Promise<string[]>;
declare function getType(property: string): Promise<InstanceType<typeof Type>>;
declare function argnameFromLabel(label: string): string;
declare function getElementType(type: InstanceType<typeof Type>): InstanceType<typeof Type>;
declare function readJson(file: string): Promise<Map<any, any>>;
declare function dumpMap(file: string, map: Map<string, any>): Promise<void>;
declare class Domains {
    private _path;
    private _map;
    private _domains;
    private _csqaTypes;
    private _wikidataTypes;
    constructor(options: {
        path: string;
    });
    get domains(): string[];
    get wikidataTypes(): string[];
    init(): Promise<void>;
    getCSQAType(domain: string): string;
    getWikidataTypes(domain: string): string[];
    getWikidataTypeLabels(domain: string): string[];
    getWikidataSubjects(domain: string): string[];
    getDomainByCSQAType(csqaType: string): string | null;
    getDomainsByWikidataType(wikidataType: string): string[];
    getDomainsByWikidataTypes(wikidataTypes: string[]): string[];
}
export { unitConverter, wikidataQuery, getPropertyLabel, getPropertyAltLabels, getItemLabel, getPropertyList, getValueTypeConstraint, getOneOfConstraint, getAllowedUnits, getRangeConstraint, getClasses, getEquivalent, getType, getElementType, readJson, dumpMap, argnameFromLabel, Domains };
