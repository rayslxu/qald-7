"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2019-2021 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Silei Xu <silei@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.initArgparse = void 0;
const fs = __importStar(require("fs"));
const JSONStream_1 = __importDefault(require("JSONStream"));
const utils_1 = require("./utils");
const StreamUtils = __importStar(require("../../../lib/utils/stream-utils"));
function initArgparse(subparsers) {
    const parser = subparsers.add_parser('wikidata-preprocess-bootleg', {
        add_help: true,
        description: "Preprocess bootleg types. "
    });
    parser.add_argument('--types', {
        required: true,
        help: "Path to the json file that map QID to its type ids"
    });
    parser.add_argument('--type-vocab', {
        required: true,
        help: "Path to the json file that map type names to type id"
    });
    parser.add_argument('--type-vocab-to-qid', {
        required: true,
        help: "Path to the json file that map type names to wikidata QID"
    });
    parser.add_argument('--bootleg-types', {
        required: true,
        help: "Path to the output json file that map each entity to its types (QIDs)"
    });
    parser.add_argument('--bootleg-type-canonicals', {
        help: "Path to the output json file that map bootleg types to its canonical (Wikidata label)"
    });
}
exports.initArgparse = initArgparse;
async function execute(args) {
    const typeVocab = await (0, utils_1.readJson)(args.type_vocab);
    const typeQID = new Map();
    const typeCanonical = new Map();
    for (const [name, qid] of await (0, utils_1.readJson)(args.type_vocab_to_qid)) {
        const typeid = typeVocab.get(name);
        typeQID.set(typeid, qid);
        typeCanonical.set(qid, name.replace(/_Q[0-9]*/, ''));
    }
    const types = new Map();
    const pipeline = fs.createReadStream(args.types).pipe(JSONStream_1.default.parse('$*'));
    pipeline.on('data', async (item) => {
        types.set(item.key, item.value.map((typeId) => typeQID.get(typeId)));
    });
    pipeline.on('error', (error) => console.error(error));
    await StreamUtils.waitEnd(pipeline);
    await (0, utils_1.dumpMap)(args.bootleg_types, types);
    await (0, utils_1.dumpMap)(args.bootleg_type_canonicals, typeCanonical);
}
exports.execute = execute;
//# sourceMappingURL=preprocess-bootleg.js.map