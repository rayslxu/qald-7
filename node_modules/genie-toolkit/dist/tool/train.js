"use strict";
// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2019 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.initArgparse = void 0;
const util_1 = __importDefault(require("util"));
const fs = __importStar(require("fs"));
const path_1 = __importDefault(require("path"));
const Training = __importStar(require("../lib/training"));
const progress_bar_1 = __importDefault(require("./lib/progress_bar"));
function initArgparse(subparsers) {
    const parser = subparsers.add_parser('train', {
        add_help: true,
        description: "Train a model on a Genie-generated dataset."
    });
    parser.add_argument('--datadir', {
        required: true,
        help: "Directory containing the train/eval/test set to train with."
    });
    parser.add_argument('--outputdir', {
        required: true,
        help: "Directory where the final trained model will be placed."
    });
    parser.add_argument('--workdir', {
        required: true,
        help: "Temporary directory for preprocessed datasets, checkpoints and Tensorboard files."
    });
    parser.add_argument('--config-file', {
        required: false,
        help: "JSON configuration file setting hyper-parameters and parser options."
    });
    parser.add_argument('--backend', {
        required: false,
        default: Training.DEFAULT_BACKEND,
        choices: Object.keys(Training.BACKENDS),
        help: "Which training backend to use (experimental)"
    });
    parser.add_argument('--debug', {
        action: 'store_true',
        help: 'Enable debugging.',
    });
    parser.add_argument('--no-debug', {
        action: 'store_false',
        dest: 'debug',
        help: 'Disable debugging.',
    });
}
exports.initArgparse = initArgparse;
async function execute(args) {
    let config = {};
    if (args.config_file)
        config = JSON.parse(await util_1.default.promisify(fs.readFile)(args.config_file));
    const job = Training.createJob({
        backend: args.backend,
        config,
        datadir: args.datadir,
        workdir: args.workdir,
        outputdir: args.outputdir,
        debug: !!args.debug
    });
    if (!args.debug) {
        const progbar = new progress_bar_1.default(1);
        job.on('progress', (value) => {
            progbar.update(value);
        });
        // issue an update now to show the progress bar
        progbar.update(0);
    }
    await job.train();
    console.log('Training complete');
    console.log('Evaluation result (on validation set)');
    for (let key in job.metrics)
        console.log(` ${key} = ${job.metrics[key]}`);
    await util_1.default.promisify(fs.writeFile)(path_1.default.resolve(args.workdir, 'eval-metrics.json'), JSON.stringify(job.metrics, undefined, 2));
}
exports.execute = execute;
//# sourceMappingURL=train.js.map