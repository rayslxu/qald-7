"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2019-2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.initArgparse = void 0;
const fs = __importStar(require("fs"));
const stream_1 = __importDefault(require("stream"));
const csv_parse_1 = __importDefault(require("csv-parse"));
const csv_stringify_1 = __importDefault(require("csv-stringify"));
const StreamUtils = __importStar(require("../lib/utils/stream-utils"));
class Parser extends stream_1.default.Transform {
    constructor(options) {
        super({
            readableObjectMode: true,
            writableObjectMode: true
        });
        this._sentencesPerTask = options.sentencesPerTask;
        this._idPrefix = options.idPrefix;
        this._idOffset = options.idOffset;
        this._id = this._idOffset;
    }
    _transform(row, encoding, callback) {
        for (let i = 0; i < this._sentencesPerTask; i++) {
            const sentence = row[`Answer.command-${i + 1}`];
            if (!sentence || !sentence.trim())
                continue;
            this.push({
                id: this._idPrefix + String(this._id++),
                utterance: sentence.replace(/\n/g, ' ').replace(/"/g, '')
            });
        }
        callback();
    }
    _flush(callback) {
        process.nextTick(callback);
    }
}
function initArgparse(subparsers) {
    const parser = subparsers.add_parser('mturk-process-eval-data', {
        add_help: true,
        description: "Extract the answers of an MTurk task collecting validation/test data."
    });
    parser.add_argument('-o', '--output', {
        required: true,
        type: fs.createWriteStream
    });
    parser.add_argument('--sentences-per-task', {
        required: false,
        type: Number,
        default: 5,
        help: "Number of sentences in each HIT"
    });
    parser.add_argument('--id-prefix', {
        required: false,
        default: '',
        help: "Prefix for all sentence IDs (to distinguish batches)"
    });
    parser.add_argument('--id-offset', {
        required: false,
        type: Number,
        default: 0,
        help: 'The number to start the id suffix'
    });
    parser.add_argument('input_file', {
        nargs: '+',
        help: 'MTurk result file to choose contexts from, split'
    });
}
exports.initArgparse = initArgparse;
async function execute(args) {
    const inputs = args.input_file.map((file) => {
        return fs.createReadStream(file, { encoding: 'utf8' })
            .pipe((0, csv_parse_1.default)({ columns: true, delimiter: ',', relax_column_count: true }));
    });
    await StreamUtils.waitFinish(StreamUtils.chain(inputs, { objectMode: true })
        .pipe(new Parser({ sentencesPerTask: args.sentences_per_task, idPrefix: args.id_prefix, idOffset: args.id_offset }))
        .pipe((0, csv_stringify_1.default)({ header: true, delimiter: '\t' }))
        .pipe(args.output));
}
exports.execute = execute;
//# sourceMappingURL=mturk-process-eval-data.js.map