"use strict";
// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2021 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.initArgparse = void 0;
const gettextParser = __importStar(require("gettext-parser"));
const fs_1 = require("fs");
const path = __importStar(require("path"));
const I18n = __importStar(require("../lib/i18n"));
const template_string_1 = require("../lib/utils/template-string");
function getNonTermNames(tmpl) {
    const names = [];
    const parsed = template_string_1.Replaceable.parse(tmpl);
    parsed.visit((elem) => {
        if (elem instanceof template_string_1.Placeholder ||
            elem instanceof template_string_1.ValueSelect ||
            elem instanceof template_string_1.FlagSelect ||
            elem instanceof template_string_1.Plural) {
            const param = elem.param;
            if (names.includes(param))
                return true;
            names.push(param);
        }
        return true;
    });
    return names;
}
function initArgparse(subparsers) {
    subparsers.add_parser('lint-po-files', {
        add_help: true,
        description: "Check the syntax of translations in a PO directory."
    });
}
exports.initArgparse = initArgparse;
async function execute() {
    let anyError = false;
    for (const filename of await fs_1.promises.readdir('./po')) {
        if (!filename.endsWith('.po'))
            continue;
        const pathname = path.resolve('./po', filename);
        const locale = path.basename(filename, '.po').replace(/[-_.@]/g, '-');
        console.log();
        console.log('##########');
        console.log(`Validating ${locale}`);
        const langPack = I18n.get(locale);
        const pofile = gettextParser.po.parse(await fs_1.promises.readFile(pathname, { encoding: 'utf8' }));
        for (const msgctx in pofile.translations) {
            const msgctxtranslation = pofile.translations[msgctx];
            for (const msgid in msgctxtranslation) {
                const translation = msgctxtranslation[msgid];
                // get the placeholder names from the english string
                let names;
                try {
                    names = getNonTermNames(msgid);
                }
                catch (e) {
                    console.error(`WARNING: failed to parse English string "${msgid}": ${e.message}`);
                    continue;
                }
                if (translation.comments && translation.comments.flag === 'fuzzy')
                    continue;
                for (const msgstr of translation.msgstr) {
                    try {
                        template_string_1.Replaceable.parse(msgstr).preprocess(langPack, names);
                    }
                    catch (e) {
                        console.error(`Failed to validate translation "${msgstr}" for "${msgid}": ${e.message}`);
                        anyError = true;
                    }
                }
            }
        }
    }
    if (anyError)
        process.exit(1);
}
exports.execute = execute;
//# sourceMappingURL=lint-po-files.js.map