"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2019-2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.initArgparse = void 0;
const fs = __importStar(require("fs"));
const stream_1 = __importDefault(require("stream"));
const csv_parse_1 = __importDefault(require("csv-parse"));
const english_1 = __importDefault(require("../lib/i18n/tokenizer/english"));
const lib_1 = require("../lib");
const rawUtterances = [];
class Validator extends stream_1.default.Transform {
    constructor(options) {
        super({
            readableObjectMode: true,
            writableObjectMode: true
        });
        this._tokenizer = new english_1.default();
        this._update_id = options.update_id;
        this._id_prefix = options.id_prefix || '';
        this._counter = 0;
    }
    _transform(row, encoding, callback) {
        const id = this._update_id ? this._newID() : row.id;
        const raw = rawUtterances[this._counter];
        const tokenized = this._tokenizer.tokenize(raw).tokens;
        this.push({ id, raw, preprocessed: tokenized.join(' '), target_code: row.thingtalk });
        this._counter += 1;
        callback();
    }
    _newID() {
        let id = String(this._counter + 1);
        while (id.length < 3)
            id = '0' + id;
        return this._id_prefix + id;
    }
    _flush(callback) {
        process.nextTick(callback);
    }
}
class RawUttearnceLoader extends stream_1.default.Transform {
    constructor() {
        super({
            readableObjectMode: true,
            writableObjectMode: true
        });
    }
    _transform(row, encoding, callback) {
        rawUtterances.push(row.raw.normalize('NFD').replace(/[\u0300-\u036f]/g, ''));
        callback();
    }
    _flush(callback) {
        process.nextTick(callback);
    }
}
function initArgparse(subparsers) {
    const parser = subparsers.add_parser('retokenize-eval', {
        add_help: true,
        description: "Retokenize the evaluation dataset."
    });
    parser.add_argument('-o', '--output', {
        required: true,
        type: fs.createWriteStream,
        help: 'Path to the updated evaluation dataset'
    });
    parser.add_argument('input', {
        type: fs.createReadStream,
        help: 'Path to the original evaluation dataset'
    });
    parser.add_argument('--raw', {
        type: fs.createReadStream,
        help: 'Path to the file with raw utterances for the evaluation dataset'
    });
    parser.add_argument('--update-id', {
        action: 'store_true',
        default: false,
        help: 'reorder ids for the examples starting from 1'
    });
    parser.add_argument('--id-prefix', {
        default: '',
        required: false,
        help: 'prefix of new id'
    });
}
exports.initArgparse = initArgparse;
async function execute(args) {
    const loader = new RawUttearnceLoader();
    await args.raw
        .pipe((0, csv_parse_1.default)({ columns: ['id', 'raw'], delimiter: '\t', relax: true }))
        .pipe(loader);
    await lib_1.StreamUtils.waitFinish(loader);
    await args.input
        .pipe((0, csv_parse_1.default)({ columns: ['id', 'tokenized', 'thingtalk'], delimiter: '\t', relax: true }))
        .pipe(new Validator(args))
        .pipe(new lib_1.DatasetStringifier())
        .pipe(args.output);
}
exports.execute = execute;
//# sourceMappingURL=retokenize-evaluation-data.js.map