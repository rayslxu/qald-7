"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.initArgparse = void 0;
const assert_1 = __importDefault(require("assert"));
const fs = __importStar(require("fs"));
const fs_1 = require("fs");
const ThingTalk = __importStar(require("thingtalk"));
const seedrandom_1 = __importDefault(require("seedrandom"));
const StreamUtils = __importStar(require("../lib/utils/stream-utils"));
const random_1 = require("../lib/utils/random");
function initArgparse(subparsers) {
    const parser = subparsers.add_parser('subsample-thingpedia', {
        add_help: true,
        description: "Subsample a Thingpedia library."
    });
    parser.add_argument('-o', '--output', {
        required: true,
        type: fs.createWriteStream
    });
    parser.add_argument('-l', '--locale', {
        required: false,
        default: 'en-US',
        help: `BGP 47 locale tag of the language to evaluate (defaults to 'en-US', English)`
    });
    parser.add_argument('--timezone', {
        required: false,
        default: undefined,
        help: `Timezone to use to interpret dates and times (defaults to the current timezone).`
    });
    parser.add_argument('--fraction', {
        required: true,
        type: Number,
        help: "The portion of the library to sample."
    });
    parser.add_argument('input_file', {
        help: 'Input Thingpedia file to subsample'
    });
    parser.add_argument('--random-seed', {
        default: 'almond is awesome',
        help: 'Random seed'
    });
}
exports.initArgparse = initArgparse;
async function execute(args) {
    const rng = seedrandom_1.default.alea(args.random_seed);
    const parsed = ThingTalk.Syntax.parse(await fs_1.promises.readFile(args.input_file, { encoding: 'utf8' }), ThingTalk.Syntax.SyntaxType.Normal, { locale: args.locale, timezone: args.timezone });
    (0, assert_1.default)(parsed instanceof ThingTalk.Ast.Library);
    parsed.classes = parsed.classes.filter(() => (0, random_1.coin)(args.fraction, rng));
    args.output.end(parsed.prettyprint());
    await StreamUtils.waitFinish(args.output);
}
exports.execute = execute;
//# sourceMappingURL=subsample-thingpedia.js.map