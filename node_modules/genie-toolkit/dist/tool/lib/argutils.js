"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2019-2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_NLP_URL = exports.DEFAULT_THINGPEDIA_URL = exports.getConfig = exports.ActionSetFlag = exports.readAllLines = exports.maybeCreateReadStream = void 0;
const fs = __importStar(require("fs"));
const byline_1 = __importDefault(require("byline"));
const argparse = __importStar(require("argparse"));
const child_process = __importStar(require("child_process"));
const util = __importStar(require("util"));
const StreamUtils = __importStar(require("../../lib/utils/stream-utils"));
const config_1 = require("../../lib/config");
Object.defineProperty(exports, "DEFAULT_NLP_URL", { enumerable: true, get: function () { return config_1.NLP_URL; } });
Object.defineProperty(exports, "DEFAULT_THINGPEDIA_URL", { enumerable: true, get: function () { return config_1.THINGPEDIA_URL; } });
function maybeCreateReadStream(filename) {
    if (filename === '-')
        return process.stdin;
    else
        return fs.createReadStream(filename);
}
exports.maybeCreateReadStream = maybeCreateReadStream;
function readAllLines(files, separator = '') {
    return StreamUtils.chain(files.map((s) => s.setEncoding('utf8').pipe((0, byline_1.default)())), { objectMode: true, separator });
}
exports.readAllLines = readAllLines;
class ActionSetFlag extends argparse.Action {
    call(parser, namespace, values) {
        if (!namespace.flags)
            namespace.flags = {};
        for (const value of values)
            namespace.flags[value] = this.const;
    }
}
exports.ActionSetFlag = ActionSetFlag;
async function getConfig(key, _default) {
    try {
        const args = ['config', '--get', key];
        const { stdout, stderr } = await util.promisify(child_process.execFile)('git', args);
        process.stderr.write(stderr);
        return stdout.trim() || _default;
    }
    catch (e) {
        // ignore error if git is not installed
        // also ignore error if the key is not present
        if (e.code !== 'ENOENT' && e.code !== 1)
            throw e;
        return _default;
    }
}
exports.getConfig = getConfig;
//# sourceMappingURL=argutils.js.map