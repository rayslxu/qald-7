"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const util = __importStar(require("util"));
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
/**
 * Parse a TSV file in a format similar to shared-parameter-datasets.tsv
 * with one line per Thingpedia query, pointing to a JSON file for each.
 */
class MultiJSONDatabase {
    constructor(filename) {
        this._filename = filename;
        this._dirname = path.dirname(filename);
        this._store = new Map;
    }
    async load() {
        const lines = (await util.promisify(fs.readFile)(this._filename, { encoding: 'utf8' })).split(/\r?\n/g);
        await Promise.all(lines.map(async (line) => {
            if (!line.trim() || line.startsWith('#'))
                return;
            const [functionKey, filepath] = line.trim().split('\t');
            const resolvedpath = path.resolve(this._dirname, filepath);
            const file = JSON.parse(await util.promisify(fs.readFile)(resolvedpath, { encoding: 'utf8' }));
            this._store.set(functionKey, file);
        }));
    }
    get size() {
        return this._store.size;
    }
    has(key) {
        return this._store.has(key);
    }
    get(key) {
        return this._store.get(key);
    }
}
exports.default = MultiJSONDatabase;
//# sourceMappingURL=multi_json_database.js.map