"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.initArgparse = void 0;
const Tp = __importStar(require("thingpedia"));
const Stream = __importStar(require("stream"));
const assert_1 = __importDefault(require("assert"));
const fs = __importStar(require("fs"));
const JSONStream_1 = __importDefault(require("JSONStream"));
const thingtalk_1 = require("thingtalk");
const StreamUtils = __importStar(require("../lib/utils/stream-utils"));
const Utils = __importStar(require("../lib/utils/misc-utils"));
const I18n = __importStar(require("../lib/i18n"));
const ThingTalkUtils = __importStar(require("../lib/utils/thingtalk"));
const parsers_1 = require("../lib/dataset-tools/parsers");
const slot_extractor_1 = __importDefault(require("../lib/dataset-tools/evaluation/slot_extractor"));
const argutils_1 = require("./lib/argutils");
const multi_json_database_1 = __importDefault(require("./lib/multi_json_database"));
const ParserClient = __importStar(require("../lib/prediction/parserclient"));
class DialogueToDSTStream extends Stream.Transform {
    constructor(options) {
        super({ objectMode: true });
        if (!options.schemaRetriever)
            options.schemaRetriever = new thingtalk_1.SchemaRetriever(options.thingpediaClient, null, true);
        this._slotExtractor = new slot_extractor_1.default(options.locale, options.thingpediaClient, options.schemaRetriever, options.database);
        this._tokenized = options.tokenized;
        this._tokenizer = I18n.get(options.locale).getTokenizer();
        this._parser = options.parser;
        this._options = options;
    }
    _preprocess(sentence, contextEntities) {
        let tokenized;
        if (this._tokenized) {
            const tokens = sentence.split(' ');
            const entities = Utils.makeDummyEntities(sentence);
            tokenized = { tokens, entities };
        }
        else {
            tokenized = this._tokenizer.tokenize(sentence);
        }
        Utils.renumberEntities(tokenized, contextEntities);
        return tokenized;
    }
    async _checkTurn(id, turn, turnIndex) {
        let context, contextCode, contextEntities;
        if (turnIndex > 0) {
            if (turn.intermediate_context) {
                context = await ThingTalkUtils.parse(turn.intermediate_context, this._options);
                (0, assert_1.default)(context instanceof thingtalk_1.Ast.DialogueState);
            }
            else {
                context = await ThingTalkUtils.parse(turn.context, this._options);
                (0, assert_1.default)(context instanceof thingtalk_1.Ast.DialogueState);
                // apply the agent prediction to the context to get the state of the dialogue before
                // the user speaks
                const agentPrediction = await ThingTalkUtils.parse(turn.agent_target, this._options);
                (0, assert_1.default)(agentPrediction instanceof thingtalk_1.Ast.DialogueState);
                context = ThingTalkUtils.computeNewState(context, agentPrediction, 'agent');
            }
            const userContext = ThingTalkUtils.prepareContextForPrediction(context, 'user');
            [contextCode, contextEntities] = ThingTalkUtils.serializeNormalized(userContext);
        }
        else {
            context = null;
            contextCode = ['null'];
            contextEntities = {};
        }
        const { tokens, entities } = this._preprocess(turn.user, contextEntities);
        const goldUserTarget = await ThingTalkUtils.parse(turn.user_target, this._options);
        (0, assert_1.default)(goldUserTarget instanceof thingtalk_1.Ast.DialogueState);
        const goldUserState = ThingTalkUtils.computeNewState(context, goldUserTarget, 'user');
        const goldSlots = await this._slotExtractor.extractSlots(goldUserState);
        const parsed = await this._parser.sendUtterance(tokens.join(' '), contextCode, contextEntities, {
            tokenized: true,
            skip_typechecking: true
        });
        const predictions = parsed.candidates
            .filter((beam) => beam.score !== 'Infinity') // ignore exact matches
            .map((beam) => beam.code);
        if (predictions.length === 0)
            return [goldSlots, {}];
        const choice = predictions[0];
        let predictedUserTarget;
        try {
            predictedUserTarget = await ThingTalkUtils.parsePrediction(choice, entities, this._options);
        }
        catch (e) {
            return [goldSlots, {}];
        }
        if (predictedUserTarget === null)
            return [goldSlots, {}];
        (0, assert_1.default)(predictedUserTarget instanceof thingtalk_1.Ast.DialogueState);
        const predictedUserState = ThingTalkUtils.computeNewState(context, predictedUserTarget, 'user');
        let predictedSlots;
        try {
            predictedSlots = await this._slotExtractor.extractSlots(predictedUserState);
        }
        catch (e) {
            console.error(predictedUserTarget.prettyprint());
            throw e;
        }
        return [goldSlots, predictedSlots];
    }
    async _doDialogue(dlg) {
        const output = [];
        for (let i = 0; i < dlg.length; i++) {
            const turn = dlg[i];
            const [goldSlots, predictedSlots] = await this._checkTurn(dlg.id, turn, i);
            output[i] = {
                turn_belief: goldSlots,
                pred_bs_ptr: predictedSlots
            };
        }
        return [dlg.id, output];
    }
    _transform(dlg, encoding, callback) {
        this._doDialogue(dlg).then((result) => callback(null, result), callback);
    }
    _flush(callback) {
        process.nextTick(callback);
    }
}
function initArgparse(subparsers) {
    const parser = subparsers.add_parser('extract-predicted-slots', {
        add_help: true,
        description: "Transform a dialog input file in ThingTalk format into a dialogue state tracking prediction file."
    });
    parser.add_argument('-o', '--output', {
        required: false,
        default: process.stdout,
        type: fs.createWriteStream,
        help: "Write results to this file instead of stdout"
    });
    parser.add_argument('-l', '--locale', {
        required: false,
        default: 'en-US',
        help: `BGP 47 locale tag of the language to evaluate (defaults to 'en-US', English)`
    });
    parser.add_argument('--timezone', {
        required: false,
        default: undefined,
        help: `Timezone to use to interpret dates and times (defaults to the current timezone).`
    });
    parser.add_argument('--url', {
        required: true,
        help: "URL of the server to evaluate. Use a file:// URL pointing to a model directory to evaluate using a local instance of genienlp",
    });
    parser.add_argument('--tokenized', {
        required: false,
        action: 'store_true',
        default: false,
        help: "The dataset is already tokenized."
    });
    parser.add_argument('--no-tokenized', {
        required: false,
        dest: 'tokenized',
        action: 'store_false',
        help: "The dataset is not already tokenized (this is the default)."
    });
    parser.add_argument('--thingpedia', {
        required: true,
        help: 'Path to ThingTalk file containing class definitions.'
    });
    parser.add_argument('input_file', {
        nargs: '+',
        type: argutils_1.maybeCreateReadStream,
        help: 'Input datasets to evaluate (in dialog format); use - for standard input'
    });
    parser.add_argument('--debug', {
        action: 'store_true',
        help: 'Enable debugging.',
        default: true
    });
    parser.add_argument('--no-debug', {
        action: 'store_false',
        dest: 'debug',
        help: 'Disable debugging.',
    });
    parser.add_argument('--database-file', {
        required: false,
        help: `Path to a file pointing to JSON databases used to simulate queries.`,
    });
}
exports.initArgparse = initArgparse;
async function execute(args) {
    const tpClient = new Tp.FileClient(args);
    const parser = ParserClient.get(args.url, args.locale);
    await parser.start();
    let database;
    if (args.database_file) {
        database = new multi_json_database_1.default(args.database_file);
        await database.load();
    }
    (0, argutils_1.readAllLines)(args.input_file, '====')
        .pipe(new parsers_1.DialogueParser())
        .pipe(new DialogueToDSTStream({
        locale: args.locale,
        timezone: args.timezone,
        debug: args.debug,
        tokenized: args.tokenized,
        thingpediaClient: tpClient,
        database: database,
        parser: parser,
    }))
        .pipe(JSONStream_1.default /* FIXME bad type declaration */.stringifyObject(undefined, undefined, undefined, 2))
        .pipe(args.output);
    await StreamUtils.waitFinish(args.output);
    await parser.stop();
}
exports.execute = execute;
//# sourceMappingURL=extract-predicted-slots.js.map