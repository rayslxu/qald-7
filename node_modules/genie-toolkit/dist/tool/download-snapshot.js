"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2019-2021 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.initArgparse = void 0;
const ThingTalk = __importStar(require("thingtalk"));
const fs = __importStar(require("fs"));
const Tp = __importStar(require("thingpedia"));
const StreamUtils = __importStar(require("../lib/utils/stream-utils"));
const argutils_1 = require("./lib/argutils");
function initArgparse(subparsers) {
    const parser = subparsers.add_parser('download-snapshot', {
        add_help: true,
        description: "Download a snapshot of Thingpedia."
    });
    parser.add_argument('-l', '--locale', {
        required: false,
        default: 'en-US',
        help: `BGP 47 locale tag of the natural language to download the snapshot for (defaults to 'en-US', American English)`
    });
    parser.add_argument('--thingpedia-url', {
        required: false,
        help: `base URL of Thingpedia server to contact; defaults to '${argutils_1.DEFAULT_THINGPEDIA_URL}'`
    });
    parser.add_argument('--developer-key', {
        required: false,
        default: '',
        help: `developer key to use when contacting Thingpedia`
    });
    parser.add_argument('-o', '--output', {
        required: true,
        type: fs.createWriteStream
    });
    parser.add_argument('--entities', {
        required: false,
        type: fs.createWriteStream,
        help: `Filename where entities should be saved`
    });
    parser.add_argument('--snapshot', {
        required: false,
        default: '-1',
        help: `identifier of the Thingpedia snapshot to download (or -1 for the latest snapshot)`
    });
}
exports.initArgparse = initArgparse;
async function execute(args) {
    if (!args.thingpedia_url)
        args.thingpedia_url = await (0, argutils_1.getConfig)('thingpedia.url', process.env.THINGPEDIA_URL || argutils_1.DEFAULT_THINGPEDIA_URL);
    if (!args.developer_key)
        args.developer_key = await (0, argutils_1.getConfig)('thingpedia.developer-key', process.env.THINGPEDIA_DEVELOPER_KEY || null);
    let deviceUrl = `${args.thingpedia_url}/api/v3/snapshot/${args.snapshot}?meta=1&locale=${args.locale}&thingtalk_version=${ThingTalk.version}`;
    if (args.developer_key)
        deviceUrl += '&developer_key=' + args.developer_key;
    const devices = await Tp.Helpers.Http.get(deviceUrl, { accept: 'application/x-thingtalk' });
    args.output.end(devices);
    await StreamUtils.waitFinish(args.output);
    if (args.entities) {
        let entityUrl = `${args.thingpedia_url}/api/v3/entities/all?snapshot=${args.snapshot}&locale=${args.locale}&thingtalk_version=${ThingTalk.version}`;
        if (args.developer_key)
            entityUrl += '&developer_key=' + args.developer_key;
        const entities = await Tp.Helpers.Http.get(entityUrl, { accept: 'application/json' });
        args.entities.end(JSON.stringify(JSON.parse(entities), undefined, 2));
        await StreamUtils.waitFinish(args.entities);
    }
}
exports.execute = execute;
//# sourceMappingURL=download-snapshot.js.map