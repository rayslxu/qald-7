"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2019-2021 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Silei Xu <silei@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.initArgparse = void 0;
const Tp = __importStar(require("thingpedia"));
const fs = __importStar(require("fs"));
const form_data_1 = __importDefault(require("form-data"));
const csv_stringify_1 = __importDefault(require("csv-stringify"));
const argutils_1 = require("./lib/argutils");
function initArgparse(subparsers) {
    const parser = subparsers.add_parser('upload-entity-values', {
        add_help: true,
        description: "Upload a new entity type to Thingpedia."
    });
    parser.add_argument('-l', '--locale', {
        required: false,
        default: 'en-US',
        help: `BGP 47 locale tag of the natural language (defaults to 'en-US', American English)`
    });
    parser.add_argument('--thingpedia-url', {
        required: false,
        help: `base URL of Thingpedia server to contact; defaults to '${argutils_1.DEFAULT_THINGPEDIA_URL}'`
    });
    parser.add_argument('--access-token', {
        required: false,
        help: `OAuth access token to use when contacting Thingpedia`
    });
    parser.add_argument('--csv', {
        required: false,
        help: "The .csv file of the entity values to upload."
    });
    parser.add_argument('--json', {
        required: false,
        help: "The .json file of the entity values to upload"
    });
    parser.add_argument('--entity-id', {
        required: true,
        help: "The id (type) of the string dataset."
    });
    parser.add_argument('--entity-name', {
        required: true,
        help: "The name of the string dataset."
    });
    parser.add_argument('--no-ner-support', {
        action: 'store_true',
        help: 'If this entity is an opaque identifier that cannot be used from natural language.',
        default: false
    });
}
exports.initArgparse = initArgparse;
function createUpload(args) {
    const fd = new form_data_1.default();
    if (args.no_ner_support !== '1') {
        if (args.csv) {
            fd.append('upload', fs.createReadStream(args.csv), {
                filename: 'entity.csv',
                contentType: 'text/csv;charset=utf8'
            });
        }
        else if (args.json) {
            const json = JSON.parse(fs.readFileSync(args.json, 'utf8'));
            const csv = json.data.map((row) => [row.value, row.name]);
            const string = (0, csv_stringify_1.default)(csv, { delimiter: ',' });
            fd.append('upload', string, {
                filename: 'entity.csv',
                contentType: 'text/csv;charset=utf8'
            });
        }
        else {
            throw new Error(`Either a json file or a csv file is needed.`);
        }
    }
    for (const key of ['entity_id', 'entity_name', 'no_ner_support'])
        fd.append(key, args[key]);
    return fd;
}
async function execute(args) {
    if (!args.thingpedia_url)
        args.thingpedia_url = await (0, argutils_1.getConfig)('thingpedia.url', process.env.THINGPEDIA_URL || argutils_1.DEFAULT_THINGPEDIA_URL);
    if (!args.access_token)
        args.access_token = await (0, argutils_1.getConfig)('thingpedia.access-token', process.env.THINGPEDIA_ACCESS_TOKEN || null);
    if (!args.access_token)
        throw new Error(`You must pass a valid OAuth access token to talk to Thingpedia`);
    args.no_ner_support = args.no_ner_support ? '1' : '';
    const fd = createUpload(args);
    await Tp.Helpers.Http.postStream(args.thingpedia_url + '/api/v3/entities/create', fd, {
        dataContentType: 'multipart/form-data; boundary=' + fd.getBoundary(),
        auth: 'Bearer ' + args.access_token
    });
    console.log('Success!');
}
exports.execute = execute;
//# sourceMappingURL=upload-entity-values.js.map