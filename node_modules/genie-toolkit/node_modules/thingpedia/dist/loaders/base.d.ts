import * as ThingTalk from 'thingtalk';
import BaseDevice from '../base_device';
/**
 * Base class for all Thingpedia loaders.
 *
 * Thingpedia loaders are responsible for constructing device classes given
 * the manifest and other information.
 */
export default abstract class BaseLoader {
    protected _id: string;
    protected _manifest: ThingTalk.Ast.ClassDef;
    protected _parents: Record<string, ThingTalk.Ast.ClassDef>;
    constructor(kind: string, manifest: ThingTalk.Ast.ClassDef, parents: Record<string, ThingTalk.Ast.ClassDef>);
    /**
     * The ID of the device class.
     *
     * This is the same as the Thingpedia device kind.
     */
    get id(): string;
    /**
     * The version of the device class.
     */
    get version(): number;
    /**
     * The manifest associated with this device class.
     */
    get manifest(): ThingTalk.Ast.ClassDef;
    /**
     * Clear any node.js caches associated with this device class.
     */
    abstract clearCache(): void;
    /**
     * Retrieve the fully initialized device class.
     */
    abstract getDeviceClass(): Promise<BaseDevice.DeviceClass<BaseDevice>>;
    protected _iterateFunctions(classDef: ThingTalk.Ast.ClassDef, ftype: 'actions' | 'queries', visited?: Set<string>): IterableIterator<readonly [string, ThingTalk.Ast.FunctionDef]>;
}
