import * as ThingTalk from 'thingtalk';
import BaseClient from './base_client';
import BasePlatform from './base_platform';
/**
 * A Thingpedia Client that communicates with Thingpedia over HTTP(S).
 *
 * If the developer-dir shared preference is set, HTTP results are overridden
 * with the manifest.tt in the developer directory.
 *
 */
export default class HttpClient extends BaseClient {
    platform: BasePlatform;
    private _url;
    private _localEntityProvider;
    /**
     * Construct a new HttpClient.
     *
     * @param {BasePlatform} platform - the platform owning this client
     * @param {string} [url] - the Thingpedia URL to use
     */
    constructor(platform: BasePlatform, url?: string);
    /**
     * Retrieve the current user's developer key.
     *
     */
    get developerKey(): string | null;
    get locale(): string;
    private _jsonToAstValue;
    private _addConfigFromSecretsJSON;
    private _addConfigFromThingpedia;
    private _getLocalDeviceManifest;
    private _getDeveloperDirs;
    private _tryGetLocalDeviceManifest;
    getDeviceCode(kind: string): Promise<string>;
    getModuleLocation(id: string): Promise<string>;
    getSchemas(kinds: string[], withMetadata?: boolean): Promise<string>;
    private _getLocalFactory;
    getDeviceSetup(kinds: string[]): Promise<{
        [key: string]: BaseClient.DeviceFactory | null;
    }>;
    private _getModuleLocationHttp;
    private _simpleRequest;
    private _getDeviceCodeHttp;
    private _checkSnapshot;
    private _cacheSnapshot;
    private _getSchemasHttp;
    getDeviceList(klass?: string, page?: number, page_size?: number): Promise<BaseClient.DeviceListRecord[]>;
    searchDevice(q: string): Promise<BaseClient.DeviceListRecord[]>;
    getDeviceFactories(klass?: string): Promise<BaseClient.DeviceFactory[]>;
    private _getDeviceSetupHttp;
    getKindByDiscovery(publicData: any): Promise<string>;
    getExamplesByKey(key: string): Promise<string>;
    getExamplesByKinds(kinds: string[]): Promise<string>;
    private _getExamplesByKinds;
    clickExample(exampleId: number): Promise<void>;
    private _getLocalEntityProvider;
    private _getParameterDatasetsFile;
    private _doGetLocalEntityProvider;
    lookupEntity(entityType: string, searchTerm: string): Promise<BaseClient.EntityLookupResult>;
    lookupLocation(searchTerm: string, around?: {
        latitude: number;
        longitude: number;
    }): Promise<BaseClient.LocationRecord[]>;
    getAllExamples(): Promise<string>;
    getAllEntityTypes(): Promise<BaseClient.EntityTypeRecord[]>;
    getAllDeviceNames(): Promise<BaseClient.DeviceNameRecord[]>;
    invokeQuery(kind: string, uniqueId: string, query: string, params: Record<string, unknown>, hints: ThingTalk.Runtime.CompiledQueryHints): AsyncIterable<Record<string, unknown>>;
}
