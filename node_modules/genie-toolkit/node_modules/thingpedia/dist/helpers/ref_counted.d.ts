/// <reference types="node" />
import * as events from 'events';
/**
 * Base class for an object that has reference-counting.
 *
 * This class can be used to manage the lifetime of some resource (like
 * a file or a socket) in a deterministic manner among multiple users.
 *
 */
export default class RefCounted extends events.EventEmitter {
    private _useCount;
    private _openPromise;
    private _closePromise;
    /**
     * Construct a new reference counted object.
     *
     * The object has initial reference count of 0. You must call {@link Helpers.RefCounted.open} before use.
     *
     * @protected
     */
    constructor();
    /**
     * Open a reference to the underlying resource.
     *
     * This method is called when the reference count goes from 0 to 1.
     */
    protected _doOpen(): Promise<void>;
    /**
     * Release the underlying resource.
     *
     * This method is called when the reference count goes from 1 to 0.
     */
    protected _doClose(): Promise<void>;
    /**
     * Obtain a reference to the underlying resource.
     *
     * This method ensures that the resource is initialized, and increases
     * the reference count.
     *
     */
    open(): Promise<void>;
    /**
     * Release a reference to the underlying resource.
     *
     * This method decreases the reference count, and releases the resource
     * if there are no other users.
     *
     */
    close(): Promise<void>;
}
