/// <reference types="node" />
import * as stream from 'stream';
import type BasePlatform from '../base_platform';
/**
 * Utilities to download and stream content.
 *
 * These APIs should be used in preference to other libraries to support platform-specific
 * URLs, like `file:///` or `content://` URLs.
 *
 * @namespace
 */
/**
 * Check if the given URL is publicly accessible, that is, if it can be accessed on
 * by a different server not running inside the current Almond.
 *
 * Use this method to skip calling {@link Helpers.Content.getStream} or similar APIs if the
 * underlying API also support taking a URL instead of a data stream.
 * This method returns `true` for private, pre-authenticated URLs.
 *
 * @param {string} url - the URL to check
 * @return {boolean} `true` if the URL is an http(s) URL for a public hostname or IP
 */
export declare function isPubliclyAccessible(url: string): boolean;
export interface ContentTypeStream extends stream.Readable {
    contentType?: string;
}
/**
 * Stream the content of the given URL.
 *
 * This method to should be used in preference to {@link Helpers.Http} or other
 * libraries, in order to support platform-specific URLs.
 *
 * @param {BasePlatform} platform - the current Almond platform
 * @param {string} url - the URL to retrieve
 * @return {stream.Readable} - a nodejs Readable stream, which also has a `contentType` string property
 */
export declare function getStream(platform: BasePlatform, url: string): Promise<ContentTypeStream>;
export interface ContentTypeBuffer extends Buffer {
    contentType?: string;
}
/**
 * Buffer the content of the given URL.
 *
 * This method is identical to {@link Helpers.Content.getStream} but returns a `Buffer` instead of a `stream.Readable`.
 *
 * @param {BasePlatform} platform - the current Almond platform
 * @param {string} url - the URL to retrieve
 * @return {Buffer} - the buffered URL content; it also has a `contentType` string property
 */
export declare function getData(platform: BasePlatform, url: string): Promise<ContentTypeBuffer>;
