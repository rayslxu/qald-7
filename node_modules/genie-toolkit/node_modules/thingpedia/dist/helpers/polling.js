"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Thingpedia
//
// Copyright 2017-2019 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const stream = __importStar(require("stream"));
/**
 * Maximum number of items that can be returned by a single polling call.
 *
 * This is used to avoid iterating infinite results if a query is implemented
 * using lazy async iterables.
 */
const MAX_ITEMS = 50;
/**
 * A stream.Readable implementation that emits new values at specific interval.
 *
 */
class PollingStream extends stream.Readable {
    /**
     * Construct a new polling stream.
     *
     * @param state - a state binder object
     * @param interval - polling interval, in milliseconds
     * @param callback - function to call every poll interval
     */
    constructor(state, interval, callback) {
        super({ objectMode: true });
        this._timeout = null;
        this.state = state;
        this.interval = interval;
        this._callback = callback;
        this._destroyed = false;
    }
    /**
     * Destroy the current stream (stop polling).
     */
    destroy() {
        if (this._timeout === null)
            return;
        clearTimeout(this._timeout);
        this._timeout = null;
        this._destroyed = true;
    }
    _nextTick() {
        const lastPoll = this.state.get('last-poll');
        const now = Date.now();
        let nextPoll;
        if (lastPoll === undefined)
            nextPoll = now;
        else
            nextPoll = lastPoll + this.interval;
        return Math.max(1, nextPoll - now);
    }
    _nextTimeout() {
        if (this._destroyed)
            return;
        this._timeout = setTimeout(() => {
            const now = Date.now();
            this.state.set('last-poll', now);
            Promise.resolve(this._onTick(now)).catch((e) => this.emit('error', e));
            this._nextTimeout();
        }, this._nextTick());
    }
    async _onTick(now) {
        let maxItems = MAX_ITEMS;
        for await (const item of await this._callback()) {
            item.__timestamp = now;
            this.push(item);
            maxItems--;
            if (maxItems <= 0)
                break;
        }
    }
    _read() {
        if (this._timeout === null)
            this._nextTimeout();
    }
}
exports.default = PollingStream;
//# sourceMappingURL=polling.js.map