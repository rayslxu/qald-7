/// <reference types="node" />
import * as stream from 'stream';
import * as http from 'http';
import type BaseDevice from '../base_device';
export interface HTTPRequestOptions {
    dataContentType?: string;
    auth?: string;
    accept?: string;
    useOAuth2?: BaseDevice;
    authMethod?: string;
    'user-agent'?: string;
    extraHeaders?: {
        [key: string]: string;
    };
    ignoreErrors?: boolean;
    followRedirects?: boolean;
    raw?: boolean;
    debug?: boolean;
    timeout?: number;
}
export declare class HTTPError extends Error {
    code: number;
    detail: string;
    url: string;
    redirect?: string;
    constructor(statusCode: number, url: string, data: string);
}
/**
 * Perform a buffered HTTP request with a custom method.
 *
 * @param {string} url - the URL to POST to
 * @param {string} method - the HTTP method to use
 * @param {string|null} data - the content of the request body; you can pass `null` for an empty body
 * @param {Object} [options] - request options
 * @param {string} [options.dataContentType] - the value of the `Content-Type` request header
 * @param {string} [options.auth] - the value of `Authorization` header
 * @param {string} [options.accept] - the value of `Accept` header
 * @param {BaseDevice} [options.useOAuth2] - if set, the `Authorization` header will be computed for the passed
 *                                           device based on the OAuth 2.0 standard; using this option also enables
 *                                           automatic refresh token handling (if the refresh token exists); this
 *                                           option is ignored if `auth` is also set
 * @param {string} [options.authMethod=Bearer] - set this to override the prefix of the `Authorization` header;
 *                                        this option is ignored unless `useOAuth2` is set
 * @param {string} [options.user-agent] - set the `User-Agent` header; if unset a default user agent is used
 * @param {Object.<string,string>} [options.extraHeaders] - other request headers to set
 * @param {boolean} [options.ignoreErrors=false] - set to `true` to ignore errors (HTTP statuses 300 and higher)
 * @param {boolean} [options.followRedirects=true] - set to `false` to disable automatic handling of HTTP redirects (status 301, 302 and 303)
 * @param {boolean} [options.raw=false] - return the binary response body instead of converting to a string
 * @return {Promise<string>|Promise<Array>} either the string response body, or a tuple with `Buffer` and content type.
 */
export declare function request(url: string, method: string, data: string | Buffer | null, options: HTTPRequestOptions & {
    raw: true;
}): Promise<[Buffer, string]>;
export declare function request(url: string, method: string, data: string | Buffer | null, options?: HTTPRequestOptions): Promise<string>;
/**
 * Perform a buffered HTTP GET.
 *
 * If `options.raw` is set, returns a tuple of the response (as a `Buffer`) and the `Content-Type` header.
 * Otherwise, it returns the response body as a string.
 * If the HTTP request fails (returns a status code greater or equal to 300), the promise is rejected.
 * The resulting `Error` object will have a `code` property containing the actual HTTP status code.
 * If the HTTP status code is a redirect (between 300 and 399 inclusive), the `redirect` property
 * on the error will contain the value of the `Location` header.
 *
 * @param {string} url - the URL to retrieve
 * @param {Object} [options] - request options
 * @param {string} [options.auth] - the value of `Authorization` header
 * @param {string} [options.accept] - the value of `Accept` header
 * @param {BaseDevice} [options.useOAuth2] - if set, the `Authorization` header will be computed for the passed
 *                                           device based on the OAuth 2.0 standard; using this option also enables
 *                                           automatic refresh token handling (if the refresh token exists); this
 *                                           option is ignored if `auth` is also set
 * @param {string} [options.authMethod=Bearer] - set this to override the prefix of the `Authorization` header;
 *                                        this option is ignored unless `useOAuth2` is set
 * @param {string} [options.user-agent] - set the `User-Agent` header; if unset a default user agent is used
 * @param {Object.<string,string>} [options.extraHeaders] - other request headers to set
 * @param {boolean} [options.ignoreErrors=false] - set to `true` to ignore errors (HTTP statuses 300 and higher)
 * @param {boolean} [options.followRedirects=true] - set to `false` to disable automatic handling of HTTP redirects (status 301, 302 and 303)
 * @param {boolean} [options.raw=false] - return the binary response body instead of converting to a string
 * @return {Promise<string>|Promise<Array>} either the string response body, or a tuple with `Buffer` and content type.
 */
export declare function get(url: string, options: HTTPRequestOptions & {
    raw: true;
}): Promise<[Buffer, string]>;
export declare function get(url: string, options?: HTTPRequestOptions): Promise<string>;
/**
 * Perform a buffered HTTP POST.
 *
 * @param {string} url - the URL to POST to
 * @param {string|null} data - the content of the request body; you can pass `null` for an empty body
 * @param {Object} [options] - request options
 * @param {string} [options.dataContentType] - the value of the `Content-Type` request header
 * @param {string} [options.auth] - the value of `Authorization` header
 * @param {string} [options.accept] - the value of `Accept` header
 * @param {BaseDevice} [options.useOAuth2] - if set, the `Authorization` header will be computed for the passed
 *                                           device based on the OAuth 2.0 standard; using this option also enables
 *                                           automatic refresh token handling (if the refresh token exists); this
 *                                           option is ignored if `auth` is also set
 * @param {string} [options.authMethod=Bearer] - set this to override the prefix of the `Authorization` header;
 *                                        this option is ignored unless `useOAuth2` is set
 * @param {string} [options.user-agent] - set the `User-Agent` header; if unset a default user agent is used
 * @param {Object.<string,string>} [options.extraHeaders] - other request headers to set
 * @param {boolean} [options.ignoreErrors=false] - set to `true` to ignore errors (HTTP statuses 300 and higher)
 * @param {boolean} [options.followRedirects=true] - set to `false` to disable automatic handling of HTTP redirects (status 301, 302 and 303)
 * @param {boolean} [options.raw=false] - return the binary response body instead of converting to a string
 * @return {Promise<string>|Promise<Array>} either the string response body, or a tuple with `Buffer` and content type.
 */
export declare function post(url: string, data: string | Buffer, options: HTTPRequestOptions & {
    raw: true;
}): Promise<[Buffer, string]>;
export declare function post(url: string, data: string | Buffer, options?: HTTPRequestOptions): Promise<string>;
/**
 * Perform a stream HTTP POST request.
 *
 * The response will be buffered as with {@link Helpers.Http.post}.
 *
 * @param {string} url - the URL to POST to
 * @param {string|null} data - the content of the request body; you can pass `null` for an empty body
 * @param {Object} [options] - request options
 * @param {string} [options.dataContentType] - the value of the `Content-Type` request header
 * @param {string} [options.auth] - the value of `Authorization` header
 * @param {string} [options.accept] - the value of `Accept` header
 * @param {BaseDevice} [options.useOAuth2] - if set, the `Authorization` header will be computed for the passed
 *                                           device based on the OAuth 2.0 standard; using this option also enables
 *                                           automatic refresh token handling (if the refresh token exists); this
 *                                           option is ignored if `auth` is also set
 * @param {string} [options.authMethod=Bearer] - set this to override the prefix of the `Authorization` header;
 *                                        this option is ignored unless `useOAuth2` is set
 * @param {string} [options.user-agent] - set the `User-Agent` header; if unset a default user agent is used
 * @param {Object.<string,string>} [options.extraHeaders] - other request headers to set
 * @param {boolean} [options.ignoreErrors=false] - set to `true` to ignore errors (HTTP statuses 300 and higher)
 * @param {boolean} [options.followRedirects=true] - set to `false` to disable automatic handling of HTTP redirects (status 301, 302 and 303)
 * @param {boolean} [options.raw=false] - return the binary response body instead of converting to a string
 * @return {Promise<string>|Promise<Array>} either the string response body, or a tuple with `Buffer` and content type.
 */
export declare function postStream(url: string, data: stream.Readable, options: HTTPRequestOptions & {
    raw: true;
}): Promise<[Buffer, string]>;
export declare function postStream(url: string, data: stream.Readable, options?: HTTPRequestOptions): Promise<string>;
/**
 * Perform a streaming GET request.
 *
 *
 * The result is the [`http.IncomingMessage`](https://nodejs.org/api/http.html#http_class_http_incomingmessage)
 * from the underlying nodejs HTTP API. The result is also a `stream.Readable` and can be used as such.
 *
 * @param {string} url - the URL to retrieve
 * @param {Object} [options] - request options
 * @param {string} [options.auth] - the value of `Authorization` header
 * @param {string} [options.accept] - the value of `Accept` header
 * @param {BaseDevice} [options.useOAuth2] - if set, the `Authorization` header will be computed for the passed
 *                                           device based on the OAuth 2.0 standard; using this option also enables
 *                                           automatic refresh token handling (if the refresh token exists); this
 *                                           option is ignored if `auth` is also set
 * @param {string} [options.authMethod=Bearer] - set this to override the prefix of the `Authorization` header;
 *                                        this option is ignored unless `useOAuth2` is set
 * @param {string} [options.user-agent] - set the `User-Agent` header; if unset a default user agent is used
 * @param {Object.<string,string>} [options.extraHeaders] - other request headers to set
 * @param {boolean} [options.ignoreErrors=false] - set to `true` to ignore errors (HTTP statuses 300 and higher)
 * @param {boolean} [options.followRedirects=true] - set to `false` to disable automatic handling of HTTP redirects (status 301, 302 and 303)
 * @return {Promise<http.IncomingMessage>} the server response
 */
export declare function getStream(url: string, options?: HTTPRequestOptions): Promise<http.IncomingMessage>;
/**
 * Perform a streaming HTTP request with a custom method.
 *
 * @param {string} url - the URL to POST to
 * @param {string} method - the HTTP method to use
 * @param {string|null} data - the content of the request body; you can pass `null` for an empty body
 * @param {Object} [options] - request options
 * @param {string} [options.dataContentType] - the value of the `Content-Type` request header
 * @param {string} [options.auth] - the value of `Authorization` header
 * @param {string} [options.accept] - the value of `Accept` header
 * @param {BaseDevice} [options.useOAuth2] - if set, the `Authorization` header will be computed for the passed
 *                                           device based on the OAuth 2.0 standard; using this option also enables
 *                                           automatic refresh token handling (if the refresh token exists); this
 *                                           option is ignored if `auth` is also set
 * @param {string} [options.authMethod=Bearer] - set this to override the prefix of the `Authorization` header;
 *                                        this option is ignored unless `useOAuth2` is set
 * @param {string} [options.user-agent] - set the `User-Agent` header; if unset a default user agent is used
 * @param {Object.<string,string>} [options.extraHeaders] - other request headers to set
 * @param {boolean} [options.ignoreErrors=false] - set to `true` to ignore errors (HTTP statuses 300 and higher)
 * @param {boolean} [options.followRedirects=true] - set to `false` to disable automatic handling of HTTP redirects (status 301, 302 and 303)
 * @param {boolean} [options.raw=false] - return the binary response body instead of converting to a string
 * @return {Promise<string>|Promise<Array>} either the string response body, or a tuple with `Buffer` and content type.
 */
export declare function requestStream(url: string, method: string, data: string | Buffer | null, options?: HTTPRequestOptions): Promise<http.IncomingMessage>;
