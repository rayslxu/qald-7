/// <reference types="node" />
import * as events from 'events';
/**
 * The abstract interface that all ObjectSets must conform to.
 */
declare class AbstractObjectSet<T> extends events.EventEmitter {
    /**
     * Notifies that an object was to this set.
     *
     * @event Helpers.ObjectSet.Base#object-added
     * @param {Object} object - the added object
     */
    /**
     * Notifies that an object was removed from this set.
     *
     * @event Helpers.ObjectSet.Base#object-removed
     * @param {Object} object - the just-removed object
     */
    protected constructor();
    /**
     * Report the addition of an object.
     *
     * @param {Object} o - the added object
     * @fires Helpers.ObjectSet.Base#object-added
     */
    protected objectAdded(o: T): void;
    /**
     * Report the removal of an object.
     *
     * @param {Object} o - the removed object
     * @fires Helpers.ObjectSet.Base#object-removed
     */
    protected objectRemoved(o: T): void;
    /**
     * List all objects currently in the set.
     *
     * @return {Object[]} - the objects in the set
     */
    values(): T[];
    /**
     * Start this object set.
     *
     * This should be called for ObjectSets whose content
     * changes dynamically.
     */
    start(): Promise<void>;
    /**
     * Stop this object set.
     *
     * This should be called for ObjectSets whose content
     * changes dynamically.
     */
    stop(): Promise<void>;
}
/**
 * A simple implementation of {@link Helpers.ObjectSet.Base} backed by a {@link Map}.
 */
declare class SimpleObjectSet<T extends {
    uniqueId: string;
}> extends AbstractObjectSet<T> {
    private _objects;
    constructor();
    values(): T[];
    start(): Promise<void>;
    stop(): Promise<void>;
    addOne(o: T | PromiseLike<T> | null): Promise<void>;
    addMany(objs: Array<T | null>): Promise<void>;
    removeOne(o: T): void;
    getById(id: string): T | undefined;
    removeById(id: string): void;
    removeIf(predicate: (x: T) => boolean): T[];
    removeAll(): T[];
}
/**
 * ObjectSet is an abstract set data structure that can be monitored for additions
 * and removal.
 *
 * @namespace
 */
export { SimpleObjectSet as Simple, AbstractObjectSet as Base };
