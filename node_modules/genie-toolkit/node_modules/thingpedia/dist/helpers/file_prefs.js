"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Thingpedia
//
// Copyright 2019 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const util = __importStar(require("util"));
const fs = __importStar(require("fs"));
const prefs_1 = __importDefault(require("../prefs"));
/**
 * A simple implementation of {@link Preferences} that uses a single file.
 *
 */
class FilePreferences extends prefs_1.default {
    /**
     * Construct a new FilePreferences object.
     *
     * @param {string} file - the file to write to
     * @param {number} [writeTimeout=100] - timeout after which writes will be persisted on disk (in ms)
     */
    constructor(file, writeTimeout = 100) {
        super();
        this._file = file;
        this._writeTimeout = writeTimeout;
        this._prefs = {};
        try {
            this._prefs = JSON.parse(fs.readFileSync(file, 'utf8'));
        }
        catch (e) {
            if (e.name === 'SyntaxError')
                console.error('Syntax error loading preference file from disk: ' + e.message);
            else if (e.code !== 'ENOENT')
                throw e;
        }
        if (!this._prefs) {
            this._prefs = {};
            this._scheduleWrite();
        }
        this._dirty = false;
        this._writeScheduled = false;
    }
    keys() {
        return Object.keys(this._prefs);
    }
    get(name) {
        return this._prefs[name];
    }
    set(name, value) {
        const changed = this._prefs[name] !== value;
        this._prefs[name] = value;
        this._scheduleWrite();
        if (changed)
            this.emit('changed', name);
        return value;
    }
    delete(name) {
        delete this._prefs[name];
        this.emit('changed', name);
        this._scheduleWrite();
    }
    changed() {
        this._scheduleWrite();
        this.emit('changed', null);
    }
    flush() {
        if (!this._dirty)
            return Promise.resolve();
        return util.promisify(fs.writeFile)(this._file, JSON.stringify(this._prefs, undefined, 2));
    }
    saveCopy(to) {
        return util.promisify(fs.writeFile)(to, JSON.stringify(this._prefs));
    }
    _scheduleWrite() {
        this._dirty = true;
        if (this._writeScheduled)
            return;
        setTimeout(() => {
            this._writeScheduled = false;
            this.flush();
        }, this._writeTimeout);
    }
}
exports.default = FilePreferences;
//# sourceMappingURL=file_prefs.js.map