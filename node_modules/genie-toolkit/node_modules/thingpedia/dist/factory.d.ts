import * as ThingTalk from 'thingtalk';
import BaseClient from './base_client';
import BaseEngine from './base_engine';
import ConfigDelegate from './config_delegate';
import BaseDevice from './base_device';
/**
 * Factory class that can create device instances.
 *
 * Users of Thingpedia (that is, Almond engine implementors) must never create instances directly,
 * and must always use this class. This ensures that all Thingpedia interfaces have the correct
 * metadata and the correct default methods.
 */
export default class DeviceFactory {
    private _engine;
    private _downloader;
    /**
     * Construct a new DeviceFactory.
     *
     * @param engine - the engine that will be passed to newly constructed devices
     * @param client - the client to use to contact Thingpedia
     * @param builtins - implementation of builtin classes
     * @param options - additional configuration options
     * @param options.builtinGettext - gettext function to use to translate builtin devices
     */
    constructor(engine: BaseEngine, client: BaseClient, builtins?: Record<string, {
        class: ThingTalk.Ast.ClassDef;
        module: BaseDevice.DeviceClass<BaseDevice>;
    }>);
    /**
     * Retrieve the list of cached device classes.
     *
     * @return the list of device classes
     */
    getCachedDeviceClasses(): Promise<{
        name: string;
        version: number;
    }[]>;
    /**
     * Update the cached device class with the given ID.
     *
     * @param kind - the class identifier to update
     */
    updateDeviceClass(kind: string): Promise<void>;
    /**
     * Retrieve the device class with the given ID, fully initialized.
     *
     * @param kind - the class identifier to retrieve
     */
    getDeviceClass(kind: string): Promise<BaseDevice.DeviceClass<BaseDevice>>;
    /**
     * Load a new device of the given class ID using an OAuth-like flow.
     *
     * See {@link BaseDevice.loadFromCustomOAuth} for details
     *
     * @param kind - the class identifier to load
     * @return - a tuple with redirect URL and session
     */
    loadFromOAuth(kind: string): Promise<[string, BaseDevice.SessionMap]>;
    /**
     * Complete configuring a new device using an OAuth-like flow.
     *
     * See {@link BaseDevice.completeCustomOAuth} for details
     *
     * @param - the class identifier to load
     * @param - the OAuth redirect URL
     * @param - the session object
     * @return - the newly configured device
     */
    completeOAuth(kind: string, url: string, session: Record<string, string>): Promise<BaseDevice | null>;
    /**
     * Load a new device of the given class ID using an interactive flow.
     *
     * See {@link BaseDevice.loadInteractively} for details
     *
     * @param - the class identifier to load
     * @param - the delegate to use for configuration
     * @return - the newly configured device
     */
    loadInteractively(kind: string, delegate: ConfigDelegate): Promise<BaseDevice>;
    /**
     * Load a new device of the given class ID using a discovery protocol.
     *
     * The returned device is not fully initialized, and the caller must call
     * {@link BaseDevice.completeDiscovery} to finish initialization.
     * See {@link BaseDevice.loadFromDiscovery} for details.
     *
     * @param - the class identifier to load
     * @param publicData - protocol specific data that is public (e.g. Bluetooth UUIDs)
     * @param privateData - protocol specific data that is specific to the device and
     *                               private to the user (e.g. Bluetooth HW address)
     * @return - the partially configured device
     */
    loadFromDiscovery(kind: string, publicData: Record<string, unknown>, privateData: Record<string, unknown>): Promise<BaseDevice>;
    /**
     * Load a new device of the given class ID from its serialized state.
     *
     * @param - the class identifier to load
     * @param - the serialized state
     * @return - the initialized device
     */
    loadSerialized(kind: string, serializedDevice: Record<string, unknown>): Promise<BaseDevice>;
}
