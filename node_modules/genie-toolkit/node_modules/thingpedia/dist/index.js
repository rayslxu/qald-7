"use strict";
// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of ThingEngine
//
// Copyright 2015 The Board of Trustees of the Leland Stanford Junior University
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
//
// See LICENSE for details
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OAuthError = exports.UnsupportedError = exports.ImplementationError = exports.FileParameterProvider = exports.DeviceConfigUtils = exports.DeviceFactory = exports.FileClient = exports.HttpClient = exports.BaseClient = exports.BasePlatform = exports.BaseEngine = exports.ObjectSet = exports.FormatObjects = exports.DialogueHandler = exports.Capabilities = exports.Preferences = exports.ConfigDelegate = exports.Messaging = exports.Value = exports.Helpers = exports.Tier = exports.Availability = exports.BaseDevice = exports.version = void 0;
require("./string_format");
const messaging_1 = __importDefault(require("./messaging"));
exports.Messaging = messaging_1.default;
const prefs_1 = __importDefault(require("./prefs"));
exports.Preferences = prefs_1.default;
const base_device_1 = __importStar(require("./base_device"));
exports.BaseDevice = base_device_1.default;
Object.defineProperty(exports, "Availability", { enumerable: true, get: function () { return base_device_1.Availability; } });
Object.defineProperty(exports, "Tier", { enumerable: true, get: function () { return base_device_1.Tier; } });
const Helpers = __importStar(require("./helpers"));
exports.Helpers = Helpers;
const ObjectSet = __importStar(require("./helpers/object_set"));
exports.ObjectSet = ObjectSet;
const config_delegate_1 = __importDefault(require("./config_delegate"));
exports.ConfigDelegate = config_delegate_1.default;
const errors_1 = require("./errors");
Object.defineProperty(exports, "OAuthError", { enumerable: true, get: function () { return errors_1.OAuthError; } });
const base_client_1 = __importDefault(require("./base_client"));
exports.BaseClient = base_client_1.default;
const http_client_1 = __importDefault(require("./http_client"));
exports.HttpClient = http_client_1.default;
const file_thingpedia_client_1 = __importDefault(require("./file_thingpedia_client"));
exports.FileClient = file_thingpedia_client_1.default;
const factory_1 = __importDefault(require("./factory"));
exports.DeviceFactory = factory_1.default;
const errors_2 = require("./errors");
Object.defineProperty(exports, "ImplementationError", { enumerable: true, get: function () { return errors_2.ImplementationError; } });
Object.defineProperty(exports, "UnsupportedError", { enumerable: true, get: function () { return errors_2.UnsupportedError; } });
const base_engine_1 = __importDefault(require("./base_engine"));
exports.BaseEngine = base_engine_1.default;
const base_platform_1 = __importDefault(require("./base_platform"));
exports.BasePlatform = base_platform_1.default;
const DeviceConfigUtils = __importStar(require("./device_factory_utils"));
exports.DeviceConfigUtils = DeviceConfigUtils;
const Capabilities = __importStar(require("./capabilities"));
exports.Capabilities = Capabilities;
const dialogue_handler_1 = __importDefault(require("./dialogue-handler"));
exports.DialogueHandler = dialogue_handler_1.default;
const FormatObjects = __importStar(require("./format_objects"));
exports.FormatObjects = FormatObjects;
const ThingTalk = __importStar(require("thingtalk"));
const file_parameter_provider_1 = __importDefault(require("./file_parameter_provider"));
exports.FileParameterProvider = file_parameter_provider_1.default;
/**
 * Versioning information for the library.
 *
 * Use this object to check if the currently loaded Thingpedia SDK
 * is compatible with your device, and to dynamically check if a specific
 * feature is present.
 *
 * Note: you should never bundle the Thingpedia SDK with your device.
 *
 * @namespace
 */
const VERSION = {
    /** Major version number (incremented on incompatible changes) */
    major: 2,
    /** Minor version number (incremented on feature additions) */
    minor: 10,
    /** Full version string, in semantic version format */
    full: '2.10.0',
    /** Convert the version number to a number (for comparisons) */
    valueOf() {
        return this.major * 100 + this.minor;
    },
    toString() {
        return this.full;
    },
    /**
     * Check if the current version is compatible with the passed in version
     *
     * @param v - the version, as a number or object with `major` and minor properties
     * @return {Boolean}
     */
    compatible(v) {
        if (typeof v === 'number')
            return this.valueOf() >= v && Math.floor(v / 100) === this.major;
        else
            return this.major === v.major && this.minor >= v.minor;
    },
    /**
     * Check if the given feature is present.
     *
     * It is ok to pass invalid or unrecognized feature names to this function,
     * which will then return `false`.
     *
     * In this version of the library, the following feature names are recognized:
     * - `rss`: RSS helpers and loaders
     * - `value-types`: ThingTalk value types are re-exported
     * - `thingpedia-client`: Thingpedia Client APIs are present
     *
     * @param {String} f - a feature name
     * @return {Boolean} whether the named feature is supported.
     */
    hasFeature(f) {
        switch (f) {
            case 'rss':
            case 'value-types':
            case 'thingpedia-client':
                return true;
            default:
                return false;
        }
    }
};
exports.version = VERSION;
var Value;
(function (Value) {
    Value.Entity = ThingTalk.Builtin.Entity;
    Value.Currency = ThingTalk.Builtin.Currency;
    Value.Location = ThingTalk.Builtin.Location;
    Value.Time = ThingTalk.Builtin.Time;
})(Value || (Value = {}));
exports.Value = Value;
//# sourceMappingURL=index.js.map