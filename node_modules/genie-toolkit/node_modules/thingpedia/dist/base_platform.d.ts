import Preferences from './prefs';
import { CapabilityMap } from './capabilities';
import BaseDevice from './base_device';
/**
 * The profile of the user.
 */
export interface UserProfile {
    /**
     * Platform-specific account identifier.
     */
    account: string;
    /**
     * Locale identifier.
     */
    locale: string;
    /**
     * Timezone identifier.
     */
    timezone: string;
    /**
     * Real name of the user.
     */
    name?: string;
    email?: string;
    email_verified?: boolean;
    phone?: string;
    phone_verified?: boolean;
}
/**
 * The base class of the Almond platform layers.
 *
 * All platform specific APIs should be accessed through an instance of this class.
 */
export default abstract class BasePlatform {
    constructor();
    /**
     * A semi-opaque identifier of the type of platform.
     */
    get type(): string;
    /**
     * Retrieve the locale of the current user, as a BCP 47 tag.
     */
    get locale(): string;
    /**
     * Retrieve the preferred timezone of the current user.
     */
    get timezone(): string;
    /**
     * Retrieve the device to configure to provide platform-specific functionality.
     */
    getPlatformDevice(): {
        kind: string;
        class: string;
        module: BaseDevice.DeviceClass<BaseDevice>;
    } | null;
    /**
     * Retrieve the profile of the current user.
     */
    getProfile(): UserProfile;
    /**
     * Attempt to change some profile fields of the current user.
     *
     * Fields that are not present are not modified.
     *
     * @returns whether the modification actually occurred.
     */
    setProfile(newProfile: {
        locale?: string;
        timezone?: string;
        name?: string;
        email?: string;
        phone?: string;
    }): Promise<boolean>;
    /**
     * Check if this platform has the required capability
     * (e,g. long running, big storage, reliable connectivity, server
     * connectivity, stable IP, local device discovery, bluetooth, etc.)
     *
     * @param {string} cap - the capability name
     * @return {boolean} true if the capability name is known and supported, false otherwise
    */
    hasCapability(cap: keyof CapabilityMap): boolean;
    /**
     * Retrieve an interface to an optional functionality provided by the
     * platform.
     *
     * This will return `null` if {@link BasePlatform.hasCapability}(cap) is `false`.
     *
     * @param {string} cap - the capability name
     * @return {any|null} an interface implementing the given capability
     */
    getCapability<T extends keyof CapabilityMap>(cap: T): CapabilityMap[T] | null;
    /**
     * Obtain the shared preference store.
     *
     * Preferences are simple per-user key/value store which is shared across all devices
     * but private to this instance (tier) of the platform.
     *
     * @return {Preferences} the shared preference store.
     */
    getSharedPreferences(): Preferences;
    /**
     * Get a directory that is guaranteed to be writable
     * (in the private data space for Android)
     *
     * @return {string} a directory path
     */
    getWritableDir(): string;
    /**
     * Get a temporary directory.
     *
     * Guaranteed to be writable, but not guaranteed
     * to persist across reboots or for long times
     * (i.e., it could be periodically cleaned by the system).
     *
     * @return {string} a directory path
     */
    getTmpDir(): string;
    /**
     * Get a directory good for long term caching of code
     * and metadata.
     *
     * @return {string} a directory path
     */
    getCacheDir(): string;
    /**
     * Get the Thingpedia developer key, if one is configured.
     *
     * @return {string|null} the configured developer key, or null
     */
    getDeveloperKey(): string | null;
    /**
     * Retrieve the HTTP origin to use for OAuth redirects.
     *
     * This defaults to {@link BasePlatform.getOrigin} but can be overridden
     * by subclasses that need different origins for HTTP and OAuth.
     *
     * @return {string} an HTTP origin (protocol, hostname and port)
     */
    getOAuthRedirect(): string;
    /**
     * Retrieve the HTTP origin to use to refer to the current platform.
     *
     * @return {string} an HTTP origin (protocol, hostname and port)
     */
    getOrigin(): string;
    /**
     * Retrieve the unique ID of the user in the cloud platform.
     *
     * This is used to identify the same user across multiple devices
     * running Almond (e.g. a phone and a home server).
     *
     * @return {string|null} an opaque unique ID
     */
    getCloudId(): string | null;
    getAuthToken(): string | undefined;
    setAuthToken(token: string | undefined): boolean;
}
