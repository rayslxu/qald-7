// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2022 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Silei Xu <silei@cs.stanford.edu>

import * as $runtime from "../sentence-generator/runtime";
import type $SentenceGenerator from "../sentence-generator/generator";
import * as $SentenceGeneratorTypes from "../sentence-generator/types";
import * as $I18n from "../i18n/index";
import { Ast, } from 'thingtalk';
import * as C from './ast_manip';
import ThingpediaLoader from './load-thingpedia';
export const boolean_question : $SentenceGeneratorTypes.NonTerminal<undefined> = "boolean_question";
/**
 * Load the templates in this file.
 *
 * This is an autogenerated method that will be called by the {@link SentenceGenerator}
 * when the templates are imported.
 */
export async function $load($options : $SentenceGeneratorTypes.GrammarOptions, $locale : $I18n.LanguagePack, $grammar : $SentenceGenerator, $loader : ThingpediaLoader) : Promise<void> {
   $grammar.declareSymbol("boolean_question");
   $grammar.addRule("boolean_question", [new $runtime.NonTerminal("entity_table", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("{does|do|did} ${table} have ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (any)|null => C.makeVerificationQuestion($loader, table, filter)), undefined, {  });
   $grammar.addRule("boolean_question", [new $runtime.NonTerminal("entity_table", "table", undefined), new $runtime.NonTerminal("with_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("{does|do|did} ${table} have ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (any)|null => C.makeVerificationQuestion($loader, table, filter)), undefined, {  });
   $grammar.addRule("boolean_question", [new $runtime.NonTerminal("entity_table", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("{are|is|was|were} ${table} {a|an|} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (any)|null => C.makeVerificationQuestion($loader, table, filter)), undefined, {  });
   $grammar.addRule("boolean_question", [new $runtime.NonTerminal("entity_table", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("{are|is|was|were} ${table} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (any)|null => C.makeVerificationQuestion($loader, table, filter)), undefined, {  });
   $grammar.addRule("boolean_question", [new $runtime.NonTerminal("entity_table", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("{are|is|was|were} ${table} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (any)|null => C.makeVerificationQuestion($loader, table, filter)), undefined, {  });
   $grammar.addRule("boolean_question", [new $runtime.NonTerminal("entity_table", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("{does|do|did} not ${table} have ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (any)|null => C.makeVerificationQuestion($loader, table, filter)), undefined, { weight: (0.1) });
   $grammar.addRule("boolean_question", [new $runtime.NonTerminal("entity_table", "table", undefined), new $runtime.NonTerminal("with_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("{does|do|did} not ${table} have ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (any)|null => C.makeVerificationQuestion($loader, table, filter)), undefined, { weight: (0.1) });
   $grammar.addRule("boolean_question", [new $runtime.NonTerminal("entity_table", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("{are|is|was|were} not ${table} {a|an|} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (any)|null => C.makeVerificationQuestion($loader, table, filter)), undefined, { weight: (0.1) });
   $grammar.addRule("boolean_question", [new $runtime.NonTerminal("entity_table", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("{are|is|was|were} not ${table} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (any)|null => C.makeVerificationQuestion($loader, table, filter)), undefined, { weight: (0.1) });
   $grammar.addRule("boolean_question", [new $runtime.NonTerminal("entity_table", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("{are|is|was|were} not ${table} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (any)|null => C.makeVerificationQuestion($loader, table, filter)), undefined, { weight: (0.1) });
   $grammar.addRule("boolean_question", [new $runtime.NonTerminal("entity_table", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("{does|do|did} ${table} have no ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (any)|null => C.makeVerificationQuestion($loader, table, filter, true)), undefined, { weight: (0.1) });
   $grammar.addRule("boolean_question", [new $runtime.NonTerminal("entity_table", "table", undefined), new $runtime.NonTerminal("with_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("{does|do|did} ${table} have no ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (any)|null => C.makeVerificationQuestion($loader, table, filter, true)), undefined, { weight: (0.1) });
   $grammar.addRule("boolean_question", [new $runtime.NonTerminal("entity_table", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("{are|is|was|were} ${table} not {a|an|} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (any)|null => C.makeVerificationQuestion($loader, table, filter, true)), undefined, { weight: (0.1) });
   $grammar.addRule("boolean_question", [new $runtime.NonTerminal("entity_table", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("{are|is|was|were} ${table} not ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (any)|null => C.makeVerificationQuestion($loader, table, filter, true)), undefined, { weight: (0.1) });
   $grammar.addRule("boolean_question", [new $runtime.NonTerminal("entity_table", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("{are|is|was|were} ${table} not ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (any)|null => C.makeVerificationQuestion($loader, table, filter, true)), undefined, { weight: (0.1) });
   $grammar.addRule("boolean_question", [new $runtime.NonTerminal("entity_table", "table", undefined), new $runtime.NonTerminal("out_param_NotArray__Any", "p", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.paramKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("{does|do|did} ${table} have ${p}"), ((table : Ast.Expression, p : C.ParamSlot) : (any)|null => {
        const projection = C.makeFilter($loader, p, '==', new Ast.Value.Null);
        if (!projection)
            return null;
        return C.makeVerificationQuestion($loader, table, projection);
    }), undefined, {  });
   $grammar.addRule("boolean_question", [new $runtime.NonTerminal("entity_table", "table", undefined), new $runtime.NonTerminal("out_param_NotArray__Any", "p", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.paramKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("{does|do|did} not ${table} have ${p}"), ((table : Ast.Expression, p : C.ParamSlot) : (any)|null => {
        const projection = C.makeFilter($loader, p, '==', new Ast.Value.Null);
        if (!projection)
            return null;
        return C.makeVerificationQuestion($loader, table, projection);
    }), undefined, { weight: (0.1) });
   $grammar.addRule("boolean_question", [new $runtime.NonTerminal("entity_table", "table", undefined), new $runtime.NonTerminal("out_param_NotArray__Any", "p", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.paramKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("{does|do|did} {the|} ${table} have no ${p}"), ((table : Ast.Expression, p : C.ParamSlot) : (any)|null => {
        const projection = C.makeFilter($loader, p, '==', new Ast.Value.Null, true);
        if (!projection)
            return null;
        return C.makeVerificationQuestion($loader, table, projection);
    }), undefined, { weight: (0.1) });
};
