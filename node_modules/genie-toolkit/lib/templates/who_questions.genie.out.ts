// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2019-2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Silei Xu <silei@cs.stanford.edu>

import * as $runtime from "../sentence-generator/runtime";
import type $SentenceGenerator from "../sentence-generator/generator";
import * as $SentenceGeneratorTypes from "../sentence-generator/types";
import * as $I18n from "../i18n/index";
import { Ast, } from 'thingtalk';
import * as C from './ast_manip';
import ThingpediaLoader from './load-thingpedia';
export const who_complete_table : $SentenceGeneratorTypes.NonTerminal<Ast.Expression> = "who_complete_table";
export const who_with_filtered_table : $SentenceGeneratorTypes.NonTerminal<Ast.Expression> = "who_with_filtered_table";
export const who_one_with_filter_table : $SentenceGeneratorTypes.NonTerminal<Ast.Expression> = "who_one_with_filter_table";
export const who_one_which_filter_table : $SentenceGeneratorTypes.NonTerminal<Ast.Expression> = "who_one_which_filter_table";
export const who_one_clean_filter_table : $SentenceGeneratorTypes.NonTerminal<Ast.Expression> = "who_one_clean_filter_table";
export const who_two_with_filter_table : $SentenceGeneratorTypes.NonTerminal<Ast.Expression> = "who_two_with_filter_table";
export const who_two_which_filter_table : $SentenceGeneratorTypes.NonTerminal<Ast.Expression> = "who_two_which_filter_table";
export const who_two_clean_filter_table : $SentenceGeneratorTypes.NonTerminal<Ast.Expression> = "who_two_clean_filter_table";
export const who_verb_filtered_table : $SentenceGeneratorTypes.NonTerminal<Ast.Expression> = "who_verb_filtered_table";
export const who_one_be_filter_table : $SentenceGeneratorTypes.NonTerminal<Ast.Expression> = "who_one_be_filter_table";
export const who_one_have_filter_table : $SentenceGeneratorTypes.NonTerminal<Ast.Expression> = "who_one_have_filter_table";
export const who_one_verb_filter_table : $SentenceGeneratorTypes.NonTerminal<Ast.Expression> = "who_one_verb_filter_table";
export const who_two_be_filter_table : $SentenceGeneratorTypes.NonTerminal<Ast.Expression> = "who_two_be_filter_table";
export const who_two_have_filter_table : $SentenceGeneratorTypes.NonTerminal<Ast.Expression> = "who_two_have_filter_table";
export const who_two_verb_filter_table : $SentenceGeneratorTypes.NonTerminal<Ast.Expression> = "who_two_verb_filter_table";
export const whose_filtered_table : $SentenceGeneratorTypes.NonTerminal<Ast.Expression> = "whose_filtered_table";
/**
 * Load the templates in this file.
 *
 * This is an autogenerated method that will be called by the {@link SentenceGenerator}
 * when the templates are imported.
 */
export async function $load($options : $SentenceGeneratorTypes.GrammarOptions, $locale : $I18n.LanguagePack, $grammar : $SentenceGenerator, $loader : ThingpediaLoader) : Promise<void> {
   $grammar.declareSymbol("who_complete_table");
   $grammar.addRule("who_complete_table", [new $runtime.NonTerminal("thingpedia_who_question", undefined, undefined)], "${thingpedia_who_question}", (($0 : Ast.Expression) : (Ast.Expression)|null => { return $0; }), C.expressionKeyFn, { identity: (true) });
   $grammar.declareSymbol("who_with_filtered_table");
   if (!$options.flags.always_filter) {
       $grammar.addRule("who_with_filtered_table", [new $runtime.NonTerminal("who_complete_table", undefined, undefined)], "${who_complete_table}", (($0 : Ast.Expression) : (Ast.Expression)|null => { return $0; }), C.expressionKeyFn, { identity: (true) });
   }
   $grammar.addRule("who_with_filtered_table", [new $runtime.NonTerminal("who_one_with_filter_table", undefined, undefined)], "${who_one_with_filter_table}", (($0 : Ast.Expression) : (Ast.Expression)|null => { return $0; }), C.expressionKeyFn, { identity: (true) });
   $grammar.addRule("who_with_filtered_table", [new $runtime.NonTerminal("who_one_which_filter_table", undefined, undefined)], "${who_one_which_filter_table}", (($0 : Ast.Expression) : (Ast.Expression)|null => { return $0; }), C.expressionKeyFn, { identity: (true) });
   $grammar.addRule("who_with_filtered_table", [new $runtime.NonTerminal("who_one_clean_filter_table", undefined, undefined)], "${who_one_clean_filter_table}", (($0 : Ast.Expression) : (Ast.Expression)|null => { return $0; }), C.expressionKeyFn, { identity: (true) });
   $grammar.addRule("who_with_filtered_table", [new $runtime.NonTerminal("who_two_with_filter_table", undefined, undefined)], "${who_two_with_filter_table}", (($0 : Ast.Expression) : (Ast.Expression)|null => { return $0; }), C.expressionKeyFn, { identity: (true) });
   $grammar.addRule("who_with_filtered_table", [new $runtime.NonTerminal("who_two_which_filter_table", undefined, undefined)], "${who_two_which_filter_table}", (($0 : Ast.Expression) : (Ast.Expression)|null => { return $0; }), C.expressionKeyFn, { identity: (true) });
   $grammar.addRule("who_with_filtered_table", [new $runtime.NonTerminal("who_two_clean_filter_table", undefined, undefined)], "${who_two_clean_filter_table}", (($0 : Ast.Expression) : (Ast.Expression)|null => { return $0; }), C.expressionKeyFn, { identity: (true) });
   $grammar.declareSymbol("who_one_with_filter_table");
   $grammar.declareSymbol("who_one_which_filter_table");
   $grammar.declareSymbol("who_one_clean_filter_table");
   $grammar.declareSymbol("who_two_with_filter_table");
   $grammar.declareSymbol("who_two_which_filter_table");
   $grammar.declareSymbol("who_two_clean_filter_table");
   if (!$loader.flags.nofilter) {
       $grammar.declareSymbol("who_one_with_filter_table");
       $grammar.addRule("who_one_with_filter_table", [new $runtime.NonTerminal("thingpedia_who_question", "table", undefined), new $runtime.NonTerminal("with_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {with|having} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_one_with_filter_table", [new $runtime.NonTerminal("thingpedia_who_question", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {with|having} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.declareSymbol("who_one_which_filter_table");
       $grammar.addRule("who_one_which_filter_table", [new $runtime.NonTerminal("thingpedia_who_question", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {which|that} {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_one_which_filter_table", [new $runtime.NonTerminal("thingpedia_who_question", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {which|that} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_one_which_filter_table", [new $runtime.NonTerminal("thingpedia_who_question", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {which|that} {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_one_which_filter_table", [new $runtime.NonTerminal("thingpedia_who_question", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {which|that} {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_one_which_filter_table", [new $runtime.NonTerminal("thingpedia_who_question", "table", undefined), new $runtime.NonTerminal("pvp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {which|that} {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_one_which_filter_table", [new $runtime.NonTerminal("thingpedia_who_question", "table", undefined), new $runtime.NonTerminal("preposition_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {which|that} {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.declareSymbol("who_one_clean_filter_table");
       $grammar.addRule("who_one_clean_filter_table", [new $runtime.NonTerminal("thingpedia_who_question", "table", undefined), new $runtime.NonTerminal("pvp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_one_clean_filter_table", [new $runtime.NonTerminal("thingpedia_who_question", "table", undefined), new $runtime.NonTerminal("preposition_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.declareSymbol("who_two_with_filter_table");
       $grammar.addRule("who_two_with_filter_table", [new $runtime.NonTerminal("who_one_with_filter_table", "table", undefined), new $runtime.NonTerminal("with_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} and ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_two_with_filter_table", [new $runtime.NonTerminal("who_one_which_filter_table", "table", undefined), new $runtime.NonTerminal("with_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {and having|and with|, with} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_two_with_filter_table", [new $runtime.NonTerminal("who_one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("with_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {with|having} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_two_with_filter_table", [new $runtime.NonTerminal("who_one_with_filter_table", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} and ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_two_with_filter_table", [new $runtime.NonTerminal("who_one_which_filter_table", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {and having|and with|, with} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_two_with_filter_table", [new $runtime.NonTerminal("who_one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {with|having} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.declareSymbol("who_two_which_filter_table");
       $grammar.addRule("who_two_which_filter_table", [new $runtime.NonTerminal("who_one_with_filter_table", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {which|that} {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_two_which_filter_table", [new $runtime.NonTerminal("who_one_with_filter_table", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {which|that} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_two_which_filter_table", [new $runtime.NonTerminal("who_one_with_filter_table", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {which|that} {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_two_which_filter_table", [new $runtime.NonTerminal("who_one_with_filter_table", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {which|that} {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_two_which_filter_table", [new $runtime.NonTerminal("who_one_with_filter_table", "table", undefined), new $runtime.NonTerminal("pvp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {which|that} {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_two_which_filter_table", [new $runtime.NonTerminal("who_one_with_filter_table", "table", undefined), new $runtime.NonTerminal("preposition_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {which|that} {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_two_which_filter_table", [new $runtime.NonTerminal("who_one_which_filter_table", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} and {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_two_which_filter_table", [new $runtime.NonTerminal("who_one_which_filter_table", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} and ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_two_which_filter_table", [new $runtime.NonTerminal("who_one_which_filter_table", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} and {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_two_which_filter_table", [new $runtime.NonTerminal("who_one_which_filter_table", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} and {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_two_which_filter_table", [new $runtime.NonTerminal("who_one_which_filter_table", "table", undefined), new $runtime.NonTerminal("pvp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} and {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_two_which_filter_table", [new $runtime.NonTerminal("who_one_which_filter_table", "table", undefined), new $runtime.NonTerminal("preposition_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} and {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_two_which_filter_table", [new $runtime.NonTerminal("who_one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {which|that} {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_two_which_filter_table", [new $runtime.NonTerminal("who_one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {which|that} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_two_which_filter_table", [new $runtime.NonTerminal("who_one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {which|that} {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_two_which_filter_table", [new $runtime.NonTerminal("who_one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {which|that} {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_two_which_filter_table", [new $runtime.NonTerminal("who_one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("pvp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {which|that} {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_two_which_filter_table", [new $runtime.NonTerminal("who_one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("preposition_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {which|that} {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.declareSymbol("who_two_clean_filter_table");
       $grammar.addRule("who_two_clean_filter_table", [new $runtime.NonTerminal("who_one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("pvp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {and|} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_two_clean_filter_table", [new $runtime.NonTerminal("who_one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("preposition_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {and|} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
   }
   $grammar.declareSymbol("who_verb_filtered_table");
   $grammar.addRule("who_verb_filtered_table", [new $runtime.NonTerminal("who_one_be_filter_table", undefined, undefined)], "${who_one_be_filter_table}", (($0 : Ast.Expression) : (Ast.Expression)|null => { return $0; }), C.expressionKeyFn, { identity: (true) });
   $grammar.addRule("who_verb_filtered_table", [new $runtime.NonTerminal("who_one_have_filter_table", undefined, undefined)], "${who_one_have_filter_table}", (($0 : Ast.Expression) : (Ast.Expression)|null => { return $0; }), C.expressionKeyFn, { identity: (true) });
   $grammar.addRule("who_verb_filtered_table", [new $runtime.NonTerminal("who_one_verb_filter_table", undefined, undefined)], "${who_one_verb_filter_table}", (($0 : Ast.Expression) : (Ast.Expression)|null => { return $0; }), C.expressionKeyFn, { identity: (true) });
   $grammar.addRule("who_verb_filtered_table", [new $runtime.NonTerminal("who_two_be_filter_table", undefined, undefined)], "${who_two_be_filter_table}", (($0 : Ast.Expression) : (Ast.Expression)|null => { return $0; }), C.expressionKeyFn, { identity: (true) });
   $grammar.addRule("who_verb_filtered_table", [new $runtime.NonTerminal("who_two_have_filter_table", undefined, undefined)], "${who_two_have_filter_table}", (($0 : Ast.Expression) : (Ast.Expression)|null => { return $0; }), C.expressionKeyFn, { identity: (true) });
   $grammar.addRule("who_verb_filtered_table", [new $runtime.NonTerminal("who_two_verb_filter_table", undefined, undefined)], "${who_two_verb_filter_table}", (($0 : Ast.Expression) : (Ast.Expression)|null => { return $0; }), C.expressionKeyFn, { identity: (true) });
   $grammar.declareSymbol("who_one_be_filter_table");
   $grammar.declareSymbol("who_one_have_filter_table");
   $grammar.declareSymbol("who_one_verb_filter_table");
   $grammar.declareSymbol("who_two_be_filter_table");
   $grammar.declareSymbol("who_two_have_filter_table");
   $grammar.declareSymbol("who_two_verb_filter_table");
   $grammar.declareSymbol("whose_filtered_table");
   if (!$loader.flags.nofilter) {
       $grammar.declareSymbol("who_one_be_filter_table");
       if ($options.flags.turking) {
           $grammar.addRule("who_one_be_filter_table", [new $runtime.NonTerminal("who_complete_table", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       }
       $grammar.addRule("who_one_be_filter_table", [new $runtime.NonTerminal("who_complete_table", "table", undefined), new $runtime.NonTerminal("pvp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_one_be_filter_table", [new $runtime.NonTerminal("who_complete_table", "table", undefined), new $runtime.NonTerminal("preposition_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_one_be_filter_table", [new $runtime.NonTerminal("who_complete_table", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       if ($options.flags.turking) {
           $grammar.addRule("who_one_be_filter_table", [new $runtime.NonTerminal("who_complete_table", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       }
       if (!$options.flags.turking) {
           $grammar.addRule("who_one_be_filter_table", [new $runtime.NonTerminal("who_complete_table", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {is|are} {|a|the|an} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       }
       if (!$options.flags.turking) {
           $grammar.addRule("who_one_be_filter_table", [new $runtime.NonTerminal("who_complete_table", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {is|are} {|a|the|an} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       }
       $grammar.declareSymbol("who_one_have_filter_table");
       $grammar.addRule("who_one_have_filter_table", [new $runtime.NonTerminal("who_complete_table", "table", undefined), new $runtime.NonTerminal("with_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {get|have|gets|has} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_one_have_filter_table", [new $runtime.NonTerminal("who_complete_table", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {get|have|gets|has} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.declareSymbol("who_one_verb_filter_table");
       $grammar.addRule("who_one_verb_filter_table", [new $runtime.NonTerminal("who_complete_table", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.declareSymbol("who_two_be_filter_table");
       $grammar.addRule("who_two_be_filter_table", [new $runtime.NonTerminal("who_one_be_filter_table", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} and ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_two_be_filter_table", [new $runtime.NonTerminal("who_one_be_filter_table", "table", undefined), new $runtime.NonTerminal("pvp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} and ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_two_be_filter_table", [new $runtime.NonTerminal("who_one_be_filter_table", "table", undefined), new $runtime.NonTerminal("preposition_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} and ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_two_be_filter_table", [new $runtime.NonTerminal("who_one_be_filter_table", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} and ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_two_be_filter_table", [new $runtime.NonTerminal("who_one_be_filter_table", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} and ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_two_be_filter_table", [new $runtime.NonTerminal("who_one_have_filter_table", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} and {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_two_be_filter_table", [new $runtime.NonTerminal("who_one_have_filter_table", "table", undefined), new $runtime.NonTerminal("pvp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} and {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_two_be_filter_table", [new $runtime.NonTerminal("who_one_have_filter_table", "table", undefined), new $runtime.NonTerminal("preposition_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} and {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_two_be_filter_table", [new $runtime.NonTerminal("who_one_have_filter_table", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} and {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_two_be_filter_table", [new $runtime.NonTerminal("who_one_have_filter_table", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} and {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_two_be_filter_table", [new $runtime.NonTerminal("who_one_verb_filter_table", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} and {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_two_be_filter_table", [new $runtime.NonTerminal("who_one_verb_filter_table", "table", undefined), new $runtime.NonTerminal("pvp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} and {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_two_be_filter_table", [new $runtime.NonTerminal("who_one_verb_filter_table", "table", undefined), new $runtime.NonTerminal("preposition_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} and {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_two_be_filter_table", [new $runtime.NonTerminal("who_one_verb_filter_table", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} and {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_two_be_filter_table", [new $runtime.NonTerminal("who_one_verb_filter_table", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} and {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.declareSymbol("who_two_have_filter_table");
       $grammar.addRule("who_two_have_filter_table", [new $runtime.NonTerminal("who_one_be_filter_table", "table", undefined), new $runtime.NonTerminal("with_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} and {get|have|gets|has} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_two_have_filter_table", [new $runtime.NonTerminal("who_one_have_filter_table", "table", undefined), new $runtime.NonTerminal("with_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} and ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_two_have_filter_table", [new $runtime.NonTerminal("who_one_verb_filter_table", "table", undefined), new $runtime.NonTerminal("with_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} and {get|have|gets|has} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_two_have_filter_table", [new $runtime.NonTerminal("who_one_be_filter_table", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} and {get|have|gets|has} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_two_have_filter_table", [new $runtime.NonTerminal("who_one_have_filter_table", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} and ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_two_have_filter_table", [new $runtime.NonTerminal("who_one_verb_filter_table", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} and {get|have|gets|has} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.declareSymbol("who_two_verb_filter_table");
       $grammar.addRule("who_two_verb_filter_table", [new $runtime.NonTerminal("who_one_be_filter_table", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} and ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_two_verb_filter_table", [new $runtime.NonTerminal("who_one_have_filter_table", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} and ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("who_two_verb_filter_table", [new $runtime.NonTerminal("who_one_verb_filter_table", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} and ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.declareSymbol("whose_filtered_table");
       $grammar.addRule("whose_filtered_table", [new $runtime.NonTerminal("who_complete_table", "table", undefined), new $runtime.NonTerminal("whose_npp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
   }
};
