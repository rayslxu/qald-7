// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2022 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Silei Xu <silei@cs.stanford.edu>

import * as $runtime from "../sentence-generator/runtime";
import type $SentenceGenerator from "../sentence-generator/generator";
import * as $SentenceGeneratorTypes from "../sentence-generator/types";
import * as $I18n from "../i18n/index";
import { Ast, } from 'thingtalk';
import * as C from './ast_manip';
import ThingpediaLoader from './load-thingpedia';
export const one_with_filter_table : $SentenceGeneratorTypes.NonTerminal<Ast.Expression> = "one_with_filter_table";
export const one_clean_filter_table : $SentenceGeneratorTypes.NonTerminal<Ast.Expression> = "one_clean_filter_table";
export const two_with_filter_table : $SentenceGeneratorTypes.NonTerminal<Ast.Expression> = "two_with_filter_table";
export const two_clean_filter_table : $SentenceGeneratorTypes.NonTerminal<Ast.Expression> = "two_clean_filter_table";
export const boolean_question : $SentenceGeneratorTypes.NonTerminal<undefined> = "boolean_question";
/**
 * Load the templates in this file.
 *
 * This is an autogenerated method that will be called by the {@link SentenceGenerator}
 * when the templates are imported.
 */
export async function $load($options : $SentenceGeneratorTypes.GrammarOptions, $locale : $I18n.LanguagePack, $grammar : $SentenceGenerator, $loader : ThingpediaLoader) : Promise<void> {
   $grammar.declareSymbol("one_with_filter_table");
   if ($options.flags.wikidata) {
       $grammar.addRule("one_with_filter_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("npp_id_soft_filter", "filter", undefined)], $locale._("${table} {with|having} ${filter}"), ((table : Ast.Expression, filter : C.DomainIndependentFilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, { weight: (0.1) });
   }
   $grammar.declareSymbol("one_clean_filter_table");
   if ($options.flags.wikidata) {
       $grammar.addRule("one_clean_filter_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("pvp_id_soft_filter", "filter", undefined)], $locale._("${table} ${filter}"), ((table : Ast.Expression, filter : C.DomainIndependentFilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, { weight: (0.1) });
   }
   $grammar.declareSymbol("two_with_filter_table");
   if ($options.flags.wikidata) {
       $grammar.addRule("two_with_filter_table", [new $runtime.NonTerminal("one_with_filter_table", "table", undefined), new $runtime.NonTerminal("npp_id_soft_filter", "filter", undefined)], $locale._("${table} and ${filter}"), ((table : Ast.Expression, filter : C.DomainIndependentFilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, { weight: (0.1) });
       $grammar.addRule("two_with_filter_table", [new $runtime.NonTerminal("one_which_filter_table", "table", undefined), new $runtime.NonTerminal("npp_id_soft_filter", "filter", undefined)], $locale._("${table} {and having|and with|, with|and have} ${filter}"), ((table : Ast.Expression, filter : C.DomainIndependentFilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, { weight: (0.1) });
       $grammar.addRule("two_with_filter_table", [new $runtime.NonTerminal("one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("npp_id_soft_filter", "filter", undefined)], $locale._("${table} {with|having} ${filter}"), ((table : Ast.Expression, filter : C.DomainIndependentFilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, { weight: (0.1) });
   }
   $grammar.declareSymbol("two_clean_filter_table");
   if ($options.flags.wikidata) {
       $grammar.addRule("two_clean_filter_table", [new $runtime.NonTerminal("one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("pvp_id_soft_filter", "filter", undefined)], $locale._("${table} ${filter}"), ((table : Ast.Expression, filter : C.DomainIndependentFilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, { weight: (0.1) });
   }
   $grammar.declareSymbol("boolean_question");
   if ($options.flags.wikidata) {
       $grammar.addRule("boolean_question", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("pvp_id_soft_filter", "filter", undefined)], $locale._("{are|were|is|was} there {a|} ${table} ${filter}"), ((table : Ast.Expression, filter : C.DomainIndependentFilterSlot) : (any)|null => C.makeVerificationQuestion($loader, table, filter)), undefined, { weight: (0.2) });
       $grammar.addRule("boolean_question", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("npp_id_soft_filter", "filter", undefined)], $locale._("{are|were|is|was} there {a|} ${table} {with|having} ${filter}"), ((table : Ast.Expression, filter : C.DomainIndependentFilterSlot) : (any)|null => C.makeVerificationQuestion($loader, table, filter)), undefined, { weight: (0.2) });
       $grammar.addRule("boolean_question", [new $runtime.NonTerminal("with_filtered_table", "table", undefined), new $runtime.NonTerminal("pvp_id_soft_filter", "filter", undefined)], $locale._("{are|were|is|was} there {a|} ${table} ${filter}"), ((table : Ast.Expression, filter : C.DomainIndependentFilterSlot) : (any)|null => C.makeVerificationQuestion($loader, table, filter)), undefined, { weight: (0.1) });
       $grammar.addRule("boolean_question", [new $runtime.NonTerminal("with_filtered_table", "table", undefined), new $runtime.NonTerminal("npp_id_soft_filter", "filter", undefined)], $locale._("{are|were|is|was} there {a|} ${table} {with|having} ${filter}"), ((table : Ast.Expression, filter : C.DomainIndependentFilterSlot) : (any)|null => C.makeVerificationQuestion($loader, table, filter)), undefined, { weight: (0.1) });
   }
};
