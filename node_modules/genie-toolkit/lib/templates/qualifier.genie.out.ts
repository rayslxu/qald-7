// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2019-2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Silei Xu <silei@cs.stanford.edu>
//         Giovanni Campagna <gcampagn@cs.stanford.edu>

import * as $runtime from "../sentence-generator/runtime";
import type $SentenceGenerator from "../sentence-generator/generator";
import * as $SentenceGeneratorTypes from "../sentence-generator/types";
import * as $I18n from "../i18n/index";
import { Ast, Type } from 'thingtalk';
import * as C from './ast_manip';
import ThingpediaLoader from './load-thingpedia';
export const qualified_with_filter : $SentenceGeneratorTypes.NonTerminal<C.FilterSlot> = "qualified_with_filter";
export const qualified_npp_filter : $SentenceGeneratorTypes.NonTerminal<C.FilterSlot> = "qualified_npp_filter";
export const qualified_npi_filter : $SentenceGeneratorTypes.NonTerminal<C.FilterSlot> = "qualified_npi_filter";
export const qualified_avp_filter : $SentenceGeneratorTypes.NonTerminal<C.FilterSlot> = "qualified_avp_filter";
export const qualified_pvp_filter : $SentenceGeneratorTypes.NonTerminal<C.FilterSlot> = "qualified_pvp_filter";
export const qualified_npv_filter : $SentenceGeneratorTypes.NonTerminal<C.FilterSlot> = "qualified_npv_filter";
export const qualified_apv_filter : $SentenceGeneratorTypes.NonTerminal<C.FilterSlot> = "qualified_apv_filter";
export const qualified_reverse_verb_filter : $SentenceGeneratorTypes.NonTerminal<C.FilterSlot> = "qualified_reverse_verb_filter";
export const qualified_preposition_filter : $SentenceGeneratorTypes.NonTerminal<C.FilterSlot> = "qualified_preposition_filter";
export const one_with_filter_table : $SentenceGeneratorTypes.NonTerminal<Ast.Expression> = "one_with_filter_table";
export const one_which_filter_table : $SentenceGeneratorTypes.NonTerminal<Ast.Expression> = "one_which_filter_table";
export const one_clean_filter_table : $SentenceGeneratorTypes.NonTerminal<Ast.Expression> = "one_clean_filter_table";
export const two_with_filter_table : $SentenceGeneratorTypes.NonTerminal<Ast.Expression> = "two_with_filter_table";
export const two_which_filter_table : $SentenceGeneratorTypes.NonTerminal<Ast.Expression> = "two_which_filter_table";
export const two_clean_filter_table : $SentenceGeneratorTypes.NonTerminal<Ast.Expression> = "two_clean_filter_table";
/**
 * Load the templates in this file.
 *
 * This is an autogenerated method that will be called by the {@link SentenceGenerator}
 * when the templates are imported.
 */
export async function $load($options : $SentenceGeneratorTypes.GrammarOptions, $locale : $I18n.LanguagePack, $grammar : $SentenceGenerator, $loader : ThingpediaLoader) : Promise<void> {
   for (const qualifier of $loader.qualifiers) {
       if (qualifier.pslot.type === Type.Date) {
           $grammar.declareSymbol("time_qualifier");
           $grammar.addRule("time_qualifier", [new $runtime.NonTerminal("constant_date_range", "range", undefined)], $locale._("in ${range}"), ((range : [Ast.Value, Ast.Value]) : (C.FilterSlot)|null => C.makeWikidataTimeFilter(qualifier, '==', range)), C.filterKeyFn, {  });
           $grammar.addRule("time_qualifier", [new $runtime.NonTerminal("constant_Date", "date", undefined)], $locale._("{before|earlier than} ${date}"), ((date : Ast.Value) : (C.FilterSlot)|null => C.makeWikidataTimeFilter(qualifier, '<=', [date])), C.filterKeyFn, {  });
           $grammar.addRule("time_qualifier", [new $runtime.NonTerminal("constant_Date", "date", undefined)], $locale._("{after|later than} ${date}"), ((date : Ast.Value) : (C.FilterSlot)|null => C.makeWikidataTimeFilter(qualifier, '>=', [date])), C.filterKeyFn, {  });
       }
   }
   $grammar.declareSymbol("qualified_with_filter");
   $grammar.addRule("qualified_with_filter", [new $runtime.NonTerminal("with_filter", "filter", undefined), new $runtime.NonTerminal("time_qualifier", "qualifier", ["type" as ("type" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "type" as ("type" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void)])], $locale._("${filter} ${qualifier}"), ((filter : C.FilterSlot, qualifier : C.FilterSlot) : (C.FilterSlot)|null => C.makeQualifiedFilter(filter, qualifier)), C.filterKeyFn, {  });
   $grammar.declareSymbol("qualified_npp_filter");
   $grammar.addRule("qualified_npp_filter", [new $runtime.NonTerminal("npp_filter", "filter", undefined), new $runtime.NonTerminal("time_qualifier", "qualifier", ["type" as ("type" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "type" as ("type" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void)])], $locale._("${filter} ${qualifier}"), ((filter : C.FilterSlot, qualifier : C.FilterSlot) : (C.FilterSlot)|null => C.makeQualifiedFilter(filter, qualifier)), C.filterKeyFn, {  });
   $grammar.declareSymbol("qualified_npp_filter");
   $grammar.addRule("qualified_npp_filter", [new $runtime.NonTerminal("npp_filter", "filter", undefined), new $runtime.NonTerminal("time_qualifier", "qualifier", ["type" as ("type" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "type" as ("type" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void)])], $locale._("${filter} ${qualifier}"), ((filter : C.FilterSlot, qualifier : C.FilterSlot) : (C.FilterSlot)|null => C.makeQualifiedFilter(filter, qualifier)), C.filterKeyFn, {  });
   $grammar.declareSymbol("qualified_npi_filter");
   $grammar.addRule("qualified_npi_filter", [new $runtime.NonTerminal("npi_filter", "filter", undefined), new $runtime.NonTerminal("time_qualifier", "qualifier", ["type" as ("type" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "type" as ("type" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void)])], $locale._("${filter} ${qualifier}"), ((filter : C.FilterSlot, qualifier : C.FilterSlot) : (C.FilterSlot)|null => C.makeQualifiedFilter(filter, qualifier)), C.filterKeyFn, {  });
   $grammar.declareSymbol("qualified_avp_filter");
   $grammar.addRule("qualified_avp_filter", [new $runtime.NonTerminal("avp_filter", "filter", undefined), new $runtime.NonTerminal("time_qualifier", "qualifier", ["type" as ("type" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "type" as ("type" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void)])], $locale._("${filter} ${qualifier}"), ((filter : C.FilterSlot, qualifier : C.FilterSlot) : (C.FilterSlot)|null => C.makeQualifiedFilter(filter, qualifier)), C.filterKeyFn, {  });
   $grammar.declareSymbol("qualified_pvp_filter");
   $grammar.addRule("qualified_pvp_filter", [new $runtime.NonTerminal("pvp_filter", "filter", undefined), new $runtime.NonTerminal("time_qualifier", "qualifier", ["type" as ("type" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "type" as ("type" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void)])], $locale._("${filter} ${qualifier}"), ((filter : C.FilterSlot, qualifier : C.FilterSlot) : (C.FilterSlot)|null => C.makeQualifiedFilter(filter, qualifier)), C.filterKeyFn, {  });
   $grammar.declareSymbol("qualified_npv_filter");
   $grammar.addRule("qualified_npv_filter", [new $runtime.NonTerminal("npv_filter", "filter", undefined), new $runtime.NonTerminal("time_qualifier", "qualifier", ["type" as ("type" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "type" as ("type" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void)])], $locale._("${filter} ${qualifier}"), ((filter : C.FilterSlot, qualifier : C.FilterSlot) : (C.FilterSlot)|null => C.makeQualifiedFilter(filter, qualifier)), C.filterKeyFn, {  });
   $grammar.declareSymbol("qualified_apv_filter");
   $grammar.addRule("qualified_apv_filter", [new $runtime.NonTerminal("apv_filter", "filter", undefined), new $runtime.NonTerminal("time_qualifier", "qualifier", ["type" as ("type" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "type" as ("type" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void)])], $locale._("${filter} ${qualifier}"), ((filter : C.FilterSlot, qualifier : C.FilterSlot) : (C.FilterSlot)|null => C.makeQualifiedFilter(filter, qualifier)), C.filterKeyFn, {  });
   $grammar.declareSymbol("qualified_reverse_verb_filter");
   $grammar.addRule("qualified_reverse_verb_filter", [new $runtime.NonTerminal("reverse_verb_filter", "filter", undefined), new $runtime.NonTerminal("time_qualifier", "qualifier", ["type" as ("type" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "type" as ("type" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void)])], $locale._("${filter} ${qualifier}"), ((filter : C.FilterSlot, qualifier : C.FilterSlot) : (C.FilterSlot)|null => C.makeQualifiedFilter(filter, qualifier)), C.filterKeyFn, {  });
   $grammar.declareSymbol("qualified_preposition_filter");
   $grammar.addRule("qualified_preposition_filter", [new $runtime.NonTerminal("preposition_filter", "filter", undefined), new $runtime.NonTerminal("time_qualifier", "qualifier", ["type" as ("type" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "type" as ("type" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void)])], $locale._("${filter} ${qualifier}"), ((filter : C.FilterSlot, qualifier : C.FilterSlot) : (C.FilterSlot)|null => C.makeQualifiedFilter(filter, qualifier)), C.filterKeyFn, {  });
   $grammar.declareSymbol("one_with_filter_table");
   if (!$options.flags.nofilter) {
       $grammar.addRule("one_with_filter_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("qualified_with_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {with|having} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("one_with_filter_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("qualified_npp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {with|having} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
   }
   $grammar.declareSymbol("one_which_filter_table");
   if (!$options.flags.nofilter) {
       $grammar.addRule("one_which_filter_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("qualified_npi_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {which|that} {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("one_which_filter_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("qualified_avp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {which|that} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("one_which_filter_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("qualified_apv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {which|that} {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("one_which_filter_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("qualified_npv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {which|that} {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("one_which_filter_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("qualified_npp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {which|that} have ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("one_which_filter_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("qualified_with_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {which|that} have ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("one_which_filter_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("qualified_reverse_verb_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {which|that} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
   }
   $grammar.declareSymbol("one_clean_filter_table");
   if (!$options.flags.nofilter) {
       $grammar.addRule("one_clean_filter_table", [new $runtime.NonTerminal("qualified_apv_filter", "filter", undefined), new $runtime.NonTerminal("complete_table", "table", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void)])], $locale._("${filter} ${table}"), ((filter : C.FilterSlot, table : Ast.Expression) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("one_clean_filter_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("qualified_pvp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("one_clean_filter_table", [new $runtime.NonTerminal("complete_table", "table", undefined), new $runtime.NonTerminal("qualified_preposition_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
   }
   $grammar.declareSymbol("two_with_filter_table");
   if (!$options.flags.nofilter) {
       $grammar.addRule("two_with_filter_table", [new $runtime.NonTerminal("one_with_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_with_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} and ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("two_with_filter_table", [new $runtime.NonTerminal("one_which_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_with_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {|,} {and having|and with|, with|and have} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("two_with_filter_table", [new $runtime.NonTerminal("one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_with_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {|,} {with|having|that have} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("two_with_filter_table", [new $runtime.NonTerminal("one_with_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_npp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} and ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("two_with_filter_table", [new $runtime.NonTerminal("one_which_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_npp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {|,} {and having|and with|, with|and have} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("two_with_filter_table", [new $runtime.NonTerminal("one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_npp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {|,} {with|having|that have} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
   }
   if (!$options.flags.nofilter) {
       $grammar.addRule("two_with_filter_table", [new $runtime.NonTerminal("qualified_apv_filter", "filter", undefined), new $runtime.NonTerminal("one_with_filter_table", "table", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void)])], $locale._("${filter} ${table}"), ((filter : C.FilterSlot, table : Ast.Expression) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
   }
   $grammar.declareSymbol("two_which_filter_table");
   if (!$options.flags.nofilter) {
       $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_with_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_npi_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {|,} {which|that} {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_with_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_avp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {|,} {which|that} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_with_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_apv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {|,} {which|that} {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_with_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_npv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {|,} {which|that} {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_with_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_npp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {|,} {which|that} have ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_with_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_with_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {|,} {which|that} have ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_with_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_reverse_verb_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {|,} {which|that} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_which_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_npi_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {|,} and {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_which_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_avp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} and ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_which_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_apv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {|,} and {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_which_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_npv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {|,} and {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_which_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_npp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {|,} and have ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_which_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_with_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {|,} and have ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_which_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_reverse_verb_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {|,} and ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_npi_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {|,} {which|that} {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_avp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {|,} {which|that} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_apv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {|,} {which|that} {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_npv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {|,} {which|that} {is|are} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_npp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {|,} {which|that} have ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_with_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {|,} {which|that} have ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_reverse_verb_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} {|,} {which|that} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       if (!$options.flags.nofilter) {
           $grammar.addRule("two_which_filter_table", [new $runtime.NonTerminal("qualified_apv_filter", "filter", undefined), new $runtime.NonTerminal("one_which_filter_table", "table", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void)])], $locale._("${filter} ${table}"), ((filter : C.FilterSlot, table : Ast.Expression) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       }
   }
   $grammar.declareSymbol("two_clean_filter_table");
   if (!$options.flags.nofilter) {
       $grammar.addRule("two_clean_filter_table", [new $runtime.NonTerminal("qualified_apv_filter", "filter", undefined), new $runtime.NonTerminal("one_clean_filter_table", "table", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void)])], $locale._("${filter} ${table}"), ((filter : C.FilterSlot, table : Ast.Expression) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("two_clean_filter_table", [new $runtime.NonTerminal("one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_pvp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
       $grammar.addRule("two_clean_filter_table", [new $runtime.NonTerminal("one_clean_filter_table", "table", undefined), new $runtime.NonTerminal("qualified_preposition_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${table} ${filter}"), ((table : Ast.Expression, filter : C.FilterSlot) : (Ast.Expression)|null => C.addFilter($loader, table, filter)), C.expressionKeyFn, {  });
   }
};
