// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>

// Refinement templates: the search is NOT complete (0, or more than 1 result), and the
// agent doesn't want to show results
//
// These include proposals, and empty search errors.
// A proposal is when the agent proposed a refined search; the user answers:
// - some form of "yes"
// - some form of "no" followed by another search refinement

import * as $runtime from "../../sentence-generator/runtime";
import type $SentenceGenerator from "../../sentence-generator/generator";
import * as $SentenceGeneratorTypes from "../../sentence-generator/types";
import * as $I18n from "../../i18n/index";
import { Ast, } from 'thingtalk';
import * as C from '../ast_manip';
import ThingpediaLoader from '../load-thingpedia';
import { SlotBag } from '../slot_bag';
export const empty_search_error : $SentenceGeneratorTypes.NonTerminal<[Ast.InvocationExpression|null, C.ParamSlot|null, boolean]> = "empty_search_error";
export const precise_empty_search_change_request : $SentenceGeneratorTypes.NonTerminal<Ast.Expression> = "precise_empty_search_change_request";
export const imprecise_empty_search_change_request : $SentenceGeneratorTypes.NonTerminal<Ast.Value|C.FilterSlot> = "imprecise_empty_search_change_request";
/**
 * Load the templates in this file.
 *
 * This is an autogenerated method that will be called by the {@link SentenceGenerator}
 * when the templates are imported.
 */
export async function $load($options : $SentenceGeneratorTypes.GrammarOptions, $locale : $I18n.LanguagePack, $grammar : $SentenceGenerator, $loader : ThingpediaLoader) : Promise<void> {
   $grammar.declareSymbol("empty_search_error");
   $grammar.addRule("empty_search_error", [new $runtime.NonTerminal("sorry_preamble", undefined, undefined), new $runtime.NonTerminal("base_table", "base", undefined)], $locale._("${sorry_preamble} {there are no ${base[plural=other]}|i cannot find any ${base[plural=one]}} {matching your request|with those characteristics|like that}."), (($0 : string, base : Ast.InvocationExpression) : ([Ast.InvocationExpression|null, C.ParamSlot|null, boolean])|null => [base, null, false]), undefined, {  });
   $grammar.addRule("empty_search_error", [new $runtime.NonTerminal("sorry_preamble", undefined, undefined), new $runtime.NonTerminal("base_table", "base", ["is_monitorable" as ("is_monitorable" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void), (true) as ReturnType<typeof C.expressionKeyFn>["is_monitorable"]])], $locale._("${sorry_preamble} {there are no ${base[plural=other]}|i cannot find any ${base[plural=one]}} at the moment {matching your request|with those characteristics|like that}. would you like to be notified when {there are|i have|you have} new ${base[plural=other]}?"), (($0 : string, base : Ast.InvocationExpression) : ([Ast.InvocationExpression|null, C.ParamSlot|null, boolean])|null => [base, null, true]), undefined, { priority: (1) });
   if (!$options.flags.inference) {
       $grammar.addRule("empty_search_error", [new $runtime.NonTerminal("sorry_preamble", undefined, undefined), new $runtime.NonTerminal("base_table", "base", undefined), new $runtime.NonTerminal("out_param_Any", "p", undefined)], $locale._("${sorry_preamble} {there are no ${base[plural=other]}|i cannot find any ${base[plural=one]}} {matching your request|with those characteristics|like that}. would you like {a different|another} ${p}?"), (($0 : string, base : Ast.InvocationExpression, p : C.ParamSlot) : ([Ast.InvocationExpression|null, C.ParamSlot|null, boolean])|null => {
            if (!C.isSameFunction(base.schema!, p.schema))
                return null;
            if (p.name === 'id')
                return null;
            return [base, p, false];
        }), undefined, { priority: (1) });
       $grammar.addRule("empty_search_error", [new $runtime.NonTerminal("sorry_preamble", undefined, undefined), new $runtime.NonTerminal("out_param_Any", "p", undefined)], $locale._("${sorry_preamble} i cannot find any result for your search . would you like {a different|another} ${p}?"), (($0 : string, p : C.ParamSlot) : ([Ast.InvocationExpression|null, C.ParamSlot|null, boolean])|null => {
            if (p.name === 'id')
                return null;
            return [null, p, false];
        }), undefined, {  });
   }
   if ($options.flags.inference) {
       $grammar.addRule("empty_search_error", [new $runtime.NonTerminal("sorry_preamble", undefined, undefined)], $locale._("${sorry_preamble} i cannot find any result for your search. "), (($0 : string) : ([Ast.InvocationExpression|null, C.ParamSlot|null, boolean])|null => [null, null, false]), undefined, { priority: (-1) });
   }
   $grammar.addRule("empty_search_error", [new $runtime.NonTerminal("sorry_preamble", undefined, undefined), new $runtime.NonTerminal("ctx_thingpedia_empty_result", "message", undefined)], $locale._("${sorry_preamble} ${message}."), (($0 : string, message : SlotBag) : ([Ast.InvocationExpression|null, C.ParamSlot|null, boolean])|null => [null, null, false]), undefined, { priority: (5) });
   $grammar.addRule("empty_search_error", [new $runtime.NonTerminal("sorry_preamble", undefined, undefined), new $runtime.NonTerminal("ctx_thingpedia_empty_result", "ctx", undefined), new $runtime.NonTerminal("base_table", "base", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void), 1, "functionName" as ("functionName" extends keyof ReturnType<typeof C.slotBagKeyFn> ? string : void)])], $locale._("${sorry_preamble} ${ctx}. would you like to be notified when {there are|i have|you have} new ${base[plural=other]}?"), (($0 : string, ctx : SlotBag, base : Ast.InvocationExpression) : ([Ast.InvocationExpression|null, C.ParamSlot|null, boolean])|null => (base.schema!.is_monitorable ? [base, null, true] : null)), undefined, { priority: (6) });
   $grammar.declareSymbol("precise_empty_search_change_request");
   if ($options.flags.multiwoz) {
       $grammar.addRule("precise_empty_search_change_request", [new $runtime.NonTerminal("answer_noun_phrase", "phrase", undefined)], $locale._("{i see ,|okay|okay ,|yeah|yeah ,} {do you have|can you find|is there|how about} a ${phrase} ?"), ((phrase : Ast.Expression) : (Ast.Expression)|null => phrase), C.expressionKeyFn, {  });
   }
   $grammar.addRule("precise_empty_search_change_request", [new $runtime.NonTerminal("anything_phrase", "phrase", undefined)], $locale._("{i see ,|okay|okay ,|yeah|yeah ,} {do you have|can you find|is there|how about} ${phrase} ?"), ((phrase : Ast.Expression) : (Ast.Expression)|null => phrase), C.expressionKeyFn, {  });
   $grammar.declareSymbol("imprecise_empty_search_change_request");
   $grammar.addRule("imprecise_empty_search_change_request", [new $runtime.NonTerminal("imprecise_search_answer_phrase", "answer", undefined)], $locale._("{i see ,|okay|okay ,|yeah|yeah ,} {do you have|can you find|is there|how about} ${answer} ?"), ((answer : Ast.Value|C.FilterSlot) : (Ast.Value|C.FilterSlot)|null => answer), undefined, {  });
};
