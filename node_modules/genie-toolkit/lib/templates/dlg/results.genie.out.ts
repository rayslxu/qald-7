// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>

// Templates that describe results from a query

import * as $runtime from "../../sentence-generator/runtime";
import type $SentenceGenerator from "../../sentence-generator/generator";
import * as $SentenceGeneratorTypes from "../../sentence-generator/types";
import * as $I18n from "../../i18n/index";
import assert from 'assert';
import { Ast, } from 'thingtalk';
import * as C from '../ast_manip';
import * as D from '../dialogue_acts';
import * as S from '../state_manip';
import { SlotBag } from '../slot_bag';
import ThingpediaLoader from '../load-thingpedia';
export const direct_answer_phrase : $SentenceGeneratorTypes.NonTerminal<D.DirectAnswerPhrase> = "direct_answer_phrase";
export const direct_answer_phrase_0 : $SentenceGeneratorTypes.NonTerminal<D.DirectAnswerPhrase> = "direct_answer_phrase_0";
export const direct_answer_phrase_1 : $SentenceGeneratorTypes.NonTerminal<D.DirectAnswerPhrase> = "direct_answer_phrase_1";
export const direct_answer_phrase_2 : $SentenceGeneratorTypes.NonTerminal<D.DirectAnswerPhrase> = "direct_answer_phrase_2";
export const direct_answer_phrase_3 : $SentenceGeneratorTypes.NonTerminal<D.DirectAnswerPhrase> = "direct_answer_phrase_3";
export const direct_result_info_phrase : $SentenceGeneratorTypes.NonTerminal<D.ResultPhrase> = "direct_result_info_phrase";
export const one_param_direct_result_info_phrase : $SentenceGeneratorTypes.NonTerminal<D.ResultPhrase> = "one_param_direct_result_info_phrase";
export const two_param_direct_result_info_phrase : $SentenceGeneratorTypes.NonTerminal<D.ResultPhrase> = "two_param_direct_result_info_phrase";
export const three_param_direct_result_info_phrase : $SentenceGeneratorTypes.NonTerminal<D.ResultPhrase> = "three_param_direct_result_info_phrase";
export const four_param_direct_result_info_phrase : $SentenceGeneratorTypes.NonTerminal<D.ResultPhrase> = "four_param_direct_result_info_phrase";
export const result_info_phrase : $SentenceGeneratorTypes.NonTerminal<D.ResultPhrase> = "result_info_phrase";
export const base_result_phrase : $SentenceGeneratorTypes.NonTerminal<D.ResultPhrase> = "base_result_phrase";
export const equal_with_filter : $SentenceGeneratorTypes.NonTerminal<C.FilterSlot> = "equal_with_filter";
export const one_with_info_phrase : $SentenceGeneratorTypes.NonTerminal<D.ResultPhrase> = "one_with_info_phrase";
export const one_which_info_phrase : $SentenceGeneratorTypes.NonTerminal<D.ResultPhrase> = "one_which_info_phrase";
export const one_clean_info_phrase : $SentenceGeneratorTypes.NonTerminal<D.ResultPhrase> = "one_clean_info_phrase";
export const two_with_info_phrase : $SentenceGeneratorTypes.NonTerminal<D.ResultPhrase> = "two_with_info_phrase";
export const two_which_info_phrase : $SentenceGeneratorTypes.NonTerminal<D.ResultPhrase> = "two_which_info_phrase";
export const two_clean_info_phrase : $SentenceGeneratorTypes.NonTerminal<D.ResultPhrase> = "two_clean_info_phrase";
export const three_with_info_phrase : $SentenceGeneratorTypes.NonTerminal<D.ResultPhrase> = "three_with_info_phrase";
export const three_which_info_phrase : $SentenceGeneratorTypes.NonTerminal<D.ResultPhrase> = "three_which_info_phrase";
export const three_clean_info_phrase : $SentenceGeneratorTypes.NonTerminal<D.ResultPhrase> = "three_clean_info_phrase";
export const n_with_info_phrase : $SentenceGeneratorTypes.NonTerminal<D.ResultPhrase> = "n_with_info_phrase";
export const n_which_info_phrase : $SentenceGeneratorTypes.NonTerminal<D.ResultPhrase> = "n_which_info_phrase";
export const n_clean_info_phrase : $SentenceGeneratorTypes.NonTerminal<D.ResultPhrase> = "n_clean_info_phrase";
/**
 * Load the templates in this file.
 *
 * This is an autogenerated method that will be called by the {@link SentenceGenerator}
 * when the templates are imported.
 */
export async function $load($options : $SentenceGeneratorTypes.GrammarOptions, $locale : $I18n.LanguagePack, $grammar : $SentenceGenerator, $loader : ThingpediaLoader) : Promise<void> {
   $grammar.declareSymbol("direct_answer_phrase");
   $grammar.addRule("direct_answer_phrase", [new $runtime.NonTerminal("ctx_result_name", "name", undefined), new $runtime.NonTerminal("result_info_phrase", "info", undefined)], $locale._("${name} is a ${info[plural=one]}"), ((name : S.ContextName, info : D.ResultPhrase) : (D.DirectAnswerPhrase)|null => D.checkDirectAnswerPhrase(info, name.name)), D.directAnswerPhraseKeyFn, {  });
   $grammar.addRule("direct_answer_phrase", [new $runtime.NonTerminal("ctx_result_name", "name", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "currentFunction" as ("currentFunction" extends keyof ReturnType<typeof S.contextNameKeyFn> ? string : void)])], $locale._("${name} ${filter[plural=one]}"), ((name : S.ContextName, filter : C.FilterSlot) : (D.DirectAnswerPhrase)|null => D.makeFilterStyleDirectAnswerPhrase(name.ctx, name.name, filter)), D.directAnswerPhraseKeyFn, { priority: (1.1) });
   $grammar.addRule("direct_answer_phrase", [new $runtime.NonTerminal("ctx_result_name", "name", undefined), new $runtime.NonTerminal("pvp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "currentFunction" as ("currentFunction" extends keyof ReturnType<typeof S.contextNameKeyFn> ? string : void)])], $locale._("${name} is ${filter[plural=one]}"), ((name : S.ContextName, filter : C.FilterSlot) : (D.DirectAnswerPhrase)|null => D.makeFilterStyleDirectAnswerPhrase(name.ctx, name.name, filter)), D.directAnswerPhraseKeyFn, { priority: (1.1) });
   $grammar.addRule("direct_answer_phrase", [new $runtime.NonTerminal("ctx_result_name", "name", undefined), new $runtime.NonTerminal("preposition_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "currentFunction" as ("currentFunction" extends keyof ReturnType<typeof S.contextNameKeyFn> ? string : void)])], $locale._("${name} is ${filter[plural=one]}"), ((name : S.ContextName, filter : C.FilterSlot) : (D.DirectAnswerPhrase)|null => D.makeFilterStyleDirectAnswerPhrase(name.ctx, name.name, filter)), D.directAnswerPhraseKeyFn, { priority: (1) });
   $grammar.addRule("direct_answer_phrase", [new $runtime.NonTerminal("ctx_result_name", "name", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "currentFunction" as ("currentFunction" extends keyof ReturnType<typeof S.contextNameKeyFn> ? string : void)])], $locale._("${name} is ${filter[plural=one]}"), ((name : S.ContextName, filter : C.FilterSlot) : (D.DirectAnswerPhrase)|null => D.makeFilterStyleDirectAnswerPhrase(name.ctx, name.name, filter)), D.directAnswerPhraseKeyFn, { priority: (0.1) });
   $grammar.addRule("direct_answer_phrase", [new $runtime.NonTerminal("ctx_result_name", "name", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "currentFunction" as ("currentFunction" extends keyof ReturnType<typeof S.contextNameKeyFn> ? string : void)])], $locale._("${name} has ${filter[plural=one]}"), ((name : S.ContextName, filter : C.FilterSlot) : (D.DirectAnswerPhrase)|null => D.makeFilterStyleDirectAnswerPhrase(name.ctx, name.name, filter)), D.directAnswerPhraseKeyFn, { priority: (1.1) });
   $grammar.declareSymbol("direct_answer_phrase_0");
   $grammar.addRule("direct_answer_phrase_0", [new $runtime.NonTerminal("direct_answer_phrase", undefined, ["index" as ("index" extends keyof ReturnType<typeof D.directAnswerPhraseKeyFn> ? string : void), (0) as ReturnType<typeof D.directAnswerPhraseKeyFn>["index"]])], "${direct_answer_phrase}", (($0 : D.DirectAnswerPhrase) : (D.DirectAnswerPhrase)|null => { return $0; }), D.directAnswerPhraseKeyFn, { identity: (true) });
   $grammar.declareSymbol("direct_answer_phrase_1");
   $grammar.addRule("direct_answer_phrase_1", [new $runtime.NonTerminal("direct_answer_phrase", undefined, ["index" as ("index" extends keyof ReturnType<typeof D.directAnswerPhraseKeyFn> ? string : void), (1) as ReturnType<typeof D.directAnswerPhraseKeyFn>["index"]])], "${direct_answer_phrase}", (($0 : D.DirectAnswerPhrase) : (D.DirectAnswerPhrase)|null => { return $0; }), D.directAnswerPhraseKeyFn, { identity: (true) });
   $grammar.declareSymbol("direct_answer_phrase_2");
   $grammar.addRule("direct_answer_phrase_2", [new $runtime.NonTerminal("direct_answer_phrase", undefined, ["index" as ("index" extends keyof ReturnType<typeof D.directAnswerPhraseKeyFn> ? string : void), (2) as ReturnType<typeof D.directAnswerPhraseKeyFn>["index"]])], "${direct_answer_phrase}", (($0 : D.DirectAnswerPhrase) : (D.DirectAnswerPhrase)|null => { return $0; }), D.directAnswerPhraseKeyFn, { identity: (true) });
   $grammar.declareSymbol("direct_answer_phrase_3");
   $grammar.addRule("direct_answer_phrase_3", [new $runtime.NonTerminal("direct_answer_phrase", undefined, ["index" as ("index" extends keyof ReturnType<typeof D.directAnswerPhraseKeyFn> ? string : void), (3) as ReturnType<typeof D.directAnswerPhraseKeyFn>["index"]])], "${direct_answer_phrase}", (($0 : D.DirectAnswerPhrase) : (D.DirectAnswerPhrase)|null => { return $0; }), D.directAnswerPhraseKeyFn, { identity: (true) });
   $grammar.declareSymbol("direct_result_info_phrase");
   $grammar.addRule("direct_result_info_phrase", [new $runtime.NonTerminal("one_param_direct_result_info_phrase", undefined, undefined)], "${one_param_direct_result_info_phrase}", (($0 : D.ResultPhrase) : (D.ResultPhrase)|null => { return $0; }), D.resultPhraseKeyFn, { identity: (true) });
   $grammar.addRule("direct_result_info_phrase", [new $runtime.NonTerminal("two_param_direct_result_info_phrase", undefined, undefined)], "${two_param_direct_result_info_phrase}", (($0 : D.ResultPhrase) : (D.ResultPhrase)|null => { return $0; }), D.resultPhraseKeyFn, { identity: (true) });
   $grammar.addRule("direct_result_info_phrase", [new $runtime.NonTerminal("three_param_direct_result_info_phrase", undefined, undefined)], "${three_param_direct_result_info_phrase}", (($0 : D.ResultPhrase) : (D.ResultPhrase)|null => { return $0; }), D.resultPhraseKeyFn, { identity: (true) });
   if ($options.flags.long_projections) {
       $grammar.addRule("direct_result_info_phrase", [new $runtime.NonTerminal("four_param_direct_result_info_phrase", undefined, undefined)], "${four_param_direct_result_info_phrase}", (($0 : D.ResultPhrase) : (D.ResultPhrase)|null => { return $0; }), D.resultPhraseKeyFn, { identity: (true) });
   }
   $grammar.declareSymbol("one_param_direct_result_info_phrase");
   $grammar.addRule("one_param_direct_result_info_phrase", [new $runtime.NonTerminal("ctx_with_result", "ctx", undefined), new $runtime.NonTerminal("out_param_Any", "param", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.paramKeyFn> ? string : void), 0, "currentFunction" as ("currentFunction" extends keyof ReturnType<typeof S.contextKeyFn> ? string : void)]), new $runtime.NonTerminal("constant_Any", "v", ["type" as ("type" extends keyof ReturnType<typeof C.valueKeyFn> ? string : void), 1, "type" as ("type" extends keyof ReturnType<typeof C.paramKeyFn> ? string : void)])], $locale._("the ${param} is ${v}"), ((ctx : S.ContextInfo, param : C.ParamSlot, v : Ast.Value) : (D.ResultPhrase)|null => {
        assert(param.type.equals(v.getType()));
        const bag = new SlotBag(param.schema);
        bag.set(param.name, v);
        return D.makeResultPhrase(ctx, bag);
    }), D.resultPhraseKeyFn, {  });
   $grammar.addRule("one_param_direct_result_info_phrase", [new $runtime.NonTerminal("ctx_with_result", "ctx", undefined), new $runtime.NonTerminal("out_param_Any", "param", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.paramKeyFn> ? string : void), 0, "currentFunction" as ("currentFunction" extends keyof ReturnType<typeof S.contextKeyFn> ? string : void)]), new $runtime.NonTerminal("constant_Any", "v", ["type" as ("type" extends keyof ReturnType<typeof C.valueKeyFn> ? string : void), 1, "elem" as ("elem" extends keyof ReturnType<typeof C.paramKeyFn> ? string : void)])], $locale._("the ${param} is ${v}"), ((ctx : S.ContextInfo, param : C.ParamSlot, v : Ast.Value) : (D.ResultPhrase)|null => {
        const bag = new SlotBag(param.schema);
        bag.set(param.name, new Ast.Value.Array([v]));
        return D.makeResultPhrase(ctx, bag);
    }), D.resultPhraseKeyFn, {  });
   $grammar.addRule("one_param_direct_result_info_phrase", [new $runtime.NonTerminal("ctx_with_result", "ctx", undefined), new $runtime.NonTerminal("out_param_Any", "param", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.paramKeyFn> ? string : void), 0, "currentFunction" as ("currentFunction" extends keyof ReturnType<typeof S.contextKeyFn> ? string : void)]), new $runtime.NonTerminal("constant_pairs", "pair", ["type" as ("type" extends keyof ReturnType<typeof C.valueArrayKeyFn> ? string : void), 1, "elem" as ("elem" extends keyof ReturnType<typeof C.paramKeyFn> ? string : void)]), new $runtime.NonTerminal("constant_Any", "v1", ["type" as ("type" extends keyof ReturnType<typeof C.valueKeyFn> ? string : void), 1, "elem" as ("elem" extends keyof ReturnType<typeof C.paramKeyFn> ? string : void)])], $locale._("the ${param} are ${pair}"), ((ctx : S.ContextInfo, param : C.ParamSlot, pair : [Ast.Value, Ast.Value], v1 : Ast.Value) : (D.ResultPhrase)|null => {
        const bag = new SlotBag(param.schema);
        bag.set(param.name, new Ast.Value.Array(pair));
        return D.makeResultPhrase(ctx, bag);
    }), D.resultPhraseKeyFn, {  });
   $grammar.addRule("one_param_direct_result_info_phrase", [new $runtime.NonTerminal("ctx_with_result", "ctx", undefined), new $runtime.NonTerminal("constant_Measure_m", "v", undefined)], $locale._("the distance is ${v}"), ((ctx : S.ContextInfo, v : Ast.Value) : (D.ResultPhrase)|null => {
        const bag = new SlotBag(null);
        bag.set('distance', v);
        return D.makeResultPhrase(ctx, bag);
    }), D.resultPhraseKeyFn, {  });
   $grammar.declareSymbol("two_param_direct_result_info_phrase");
   $grammar.addRule("two_param_direct_result_info_phrase", [new $runtime.NonTerminal("one_param_direct_result_info_phrase", "b1", undefined), new $runtime.NonTerminal("one_param_direct_result_info_phrase", "b2", undefined)], $locale._("${b1} and ${b2}"), ((b1 : D.ResultPhrase, b2 : D.ResultPhrase) : (D.ResultPhrase)|null => D.mergeResultPhrase(b1, b2)), D.resultPhraseKeyFn, {  });
   $grammar.declareSymbol("three_param_direct_result_info_phrase");
   $grammar.addRule("three_param_direct_result_info_phrase", [new $runtime.NonTerminal("one_param_direct_result_info_phrase", "b1", undefined), new $runtime.NonTerminal("two_param_direct_result_info_phrase", "b2", undefined)], $locale._("${b1}, ${b2}"), ((b1 : D.ResultPhrase, b2 : D.ResultPhrase) : (D.ResultPhrase)|null => D.mergeResultPhrase(b1, b2)), D.resultPhraseKeyFn, {  });
   $grammar.declareSymbol("four_param_direct_result_info_phrase");
   $grammar.addRule("four_param_direct_result_info_phrase", [new $runtime.NonTerminal("one_param_direct_result_info_phrase", "b1", undefined), new $runtime.NonTerminal("one_param_direct_result_info_phrase", "b2", undefined), new $runtime.NonTerminal("two_param_direct_result_info_phrase", "b3", undefined)], $locale._("${b1}, ${b2}, ${b3}"), ((b1 : D.ResultPhrase, b2 : D.ResultPhrase, b3 : D.ResultPhrase) : (D.ResultPhrase)|null => {
        const b12 = D.mergeResultPhrase(b1, b2);
        if (b12 === null)
            return null;
        return D.mergeResultPhrase(b12, b3);
    }), D.resultPhraseKeyFn, {  });
   $grammar.declareSymbol("result_info_phrase");
   $grammar.addRule("result_info_phrase", [new $runtime.NonTerminal("one_with_info_phrase", undefined, undefined)], "${one_with_info_phrase}", (($0 : D.ResultPhrase) : (D.ResultPhrase)|null => { return $0; }), D.resultPhraseKeyFn, { weight: (0.33*2), priority: (1), identity: (true) });
   $grammar.addRule("result_info_phrase", [new $runtime.NonTerminal("one_which_info_phrase", undefined, undefined)], "${one_which_info_phrase}", (($0 : D.ResultPhrase) : (D.ResultPhrase)|null => { return $0; }), D.resultPhraseKeyFn, { weight: (0.33*2), priority: (1), identity: (true) });
   $grammar.addRule("result_info_phrase", [new $runtime.NonTerminal("one_clean_info_phrase", undefined, undefined)], "${one_clean_info_phrase}", (($0 : D.ResultPhrase) : (D.ResultPhrase)|null => { return $0; }), D.resultPhraseKeyFn, { weight: (0.33*2), priority: (1), identity: (true) });
   $grammar.addRule("result_info_phrase", [new $runtime.NonTerminal("two_with_info_phrase", undefined, undefined)], "${two_with_info_phrase}", (($0 : D.ResultPhrase) : (D.ResultPhrase)|null => { return $0; }), D.resultPhraseKeyFn, { weight: (0.33), priority: (2), identity: (true) });
   $grammar.addRule("result_info_phrase", [new $runtime.NonTerminal("two_which_info_phrase", undefined, undefined)], "${two_which_info_phrase}", (($0 : D.ResultPhrase) : (D.ResultPhrase)|null => { return $0; }), D.resultPhraseKeyFn, { weight: (0.33), priority: (2), identity: (true) });
   $grammar.addRule("result_info_phrase", [new $runtime.NonTerminal("two_clean_info_phrase", undefined, undefined)], "${two_clean_info_phrase}", (($0 : D.ResultPhrase) : (D.ResultPhrase)|null => { return $0; }), D.resultPhraseKeyFn, { weight: (0.33), priority: (2), identity: (true) });
   if (!$options.flags.inference) {
       $grammar.addRule("result_info_phrase", [new $runtime.NonTerminal("three_with_info_phrase", undefined, undefined)], "${three_with_info_phrase}", (($0 : D.ResultPhrase) : (D.ResultPhrase)|null => { return $0; }), D.resultPhraseKeyFn, { weight: (0.33*0.5), identity: (true) });
       $grammar.addRule("result_info_phrase", [new $runtime.NonTerminal("three_which_info_phrase", undefined, undefined)], "${three_which_info_phrase}", (($0 : D.ResultPhrase) : (D.ResultPhrase)|null => { return $0; }), D.resultPhraseKeyFn, { weight: (0.33*0.5), identity: (true) });
       $grammar.addRule("result_info_phrase", [new $runtime.NonTerminal("three_clean_info_phrase", undefined, undefined)], "${three_clean_info_phrase}", (($0 : D.ResultPhrase) : (D.ResultPhrase)|null => { return $0; }), D.resultPhraseKeyFn, { weight: (0.33*0.5), identity: (true) });
   }
   if ($options.flags.long_projections) {
       $grammar.addRule("result_info_phrase", [new $runtime.NonTerminal("n_with_info_phrase", undefined, undefined)], "${n_with_info_phrase}", (($0 : D.ResultPhrase) : (D.ResultPhrase)|null => { return $0; }), D.resultPhraseKeyFn, { identity: (true) });
       $grammar.addRule("result_info_phrase", [new $runtime.NonTerminal("n_with_info_phrase", undefined, undefined)], "${n_with_info_phrase}", (($0 : D.ResultPhrase) : (D.ResultPhrase)|null => { return $0; }), D.resultPhraseKeyFn, { identity: (true) });
       $grammar.addRule("result_info_phrase", [new $runtime.NonTerminal("n_with_info_phrase", undefined, undefined)], "${n_with_info_phrase}", (($0 : D.ResultPhrase) : (D.ResultPhrase)|null => { return $0; }), D.resultPhraseKeyFn, { identity: (true) });
   }
   $grammar.declareSymbol("base_result_phrase");
   $grammar.addRule("base_result_phrase", [new $runtime.NonTerminal("ctx_with_result", "ctx", undefined), new $runtime.NonTerminal("base_table", "table", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void), 0, "currentFunction" as ("currentFunction" extends keyof ReturnType<typeof S.contextKeyFn> ? string : void)])], $locale._("${table}"), ((ctx : S.ContextInfo, table : Ast.InvocationExpression) : (D.ResultPhrase)|null => {
        assert(table.schema instanceof Ast.FunctionDef);
        return D.makeResultPhrase(ctx, new SlotBag(table.schema));
    }), D.resultPhraseKeyFn, {  });
   $grammar.declareSymbol("equal_with_filter");
   $grammar.addRule("equal_with_filter", [new $runtime.NonTerminal("out_param_Any", "p", undefined), new $runtime.NonTerminal("constant_Any", "x", ["type" as ("type" extends keyof ReturnType<typeof C.valueKeyFn> ? string : void), 0, "type" as ("type" extends keyof ReturnType<typeof C.paramKeyFn> ? string : void)])], $locale._("the ${p} equal to ${x}"), ((p : C.ParamSlot, x : Ast.Value) : (C.FilterSlot)|null => C.makeFilter($loader, p, '==', x)), C.filterKeyFn, {  });
   $grammar.declareSymbol("one_with_info_phrase");
   $grammar.addRule("one_with_info_phrase", [new $runtime.NonTerminal("base_result_phrase", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {with|having} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("one_with_info_phrase", [new $runtime.NonTerminal("base_result_phrase", "table", undefined), new $runtime.NonTerminal("equal_with_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {with|having} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.declareSymbol("one_which_info_phrase");
   $grammar.addRule("one_which_info_phrase", [new $runtime.NonTerminal("base_result_phrase", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("one_which_info_phrase", [new $runtime.NonTerminal("base_result_phrase", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {which|that} ${table[plural]:select:one{${filter[plural=one]}}other{${filter[plural=other]}}} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("one_which_info_phrase", [new $runtime.NonTerminal("base_result_phrase", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, { priority: (-0.1) });
   $grammar.addRule("one_which_info_phrase", [new $runtime.NonTerminal("base_result_phrase", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.declareSymbol("one_clean_info_phrase");
   $grammar.addRule("one_clean_info_phrase", [new $runtime.NonTerminal("base_result_phrase", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${filter} ${table} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("one_clean_info_phrase", [new $runtime.NonTerminal("base_result_phrase", "table", undefined), new $runtime.NonTerminal("pvp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("one_clean_info_phrase", [new $runtime.NonTerminal("base_result_phrase", "table", undefined), new $runtime.NonTerminal("preposition_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.declareSymbol("two_with_info_phrase");
   $grammar.addRule("two_with_info_phrase", [new $runtime.NonTerminal("one_with_info_phrase", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} and ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("two_with_info_phrase", [new $runtime.NonTerminal("one_with_info_phrase", "table", undefined), new $runtime.NonTerminal("equal_with_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} and ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("two_with_info_phrase", [new $runtime.NonTerminal("one_which_info_phrase", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {and having|and with|, with} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("two_with_info_phrase", [new $runtime.NonTerminal("one_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {with|having} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.declareSymbol("two_which_info_phrase");
   $grammar.addRule("two_which_info_phrase", [new $runtime.NonTerminal("one_with_info_phrase", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("two_which_info_phrase", [new $runtime.NonTerminal("one_with_info_phrase", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {which|that} ${table[plural]:select:one{${filter[plural=one]}}other{${filter[plural=other]}}} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("two_which_info_phrase", [new $runtime.NonTerminal("one_with_info_phrase", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, { priority: (-0.1) });
   $grammar.addRule("two_which_info_phrase", [new $runtime.NonTerminal("one_with_info_phrase", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("two_which_info_phrase", [new $runtime.NonTerminal("one_which_info_phrase", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} and ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("two_which_info_phrase", [new $runtime.NonTerminal("one_which_info_phrase", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} and ${table[plural]:select:one{${filter[plural=one]}}other{${filter[plural=other]}}} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("two_which_info_phrase", [new $runtime.NonTerminal("one_which_info_phrase", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} and ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, { priority: (-0.1) });
   $grammar.addRule("two_which_info_phrase", [new $runtime.NonTerminal("one_which_info_phrase", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} and ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("two_which_info_phrase", [new $runtime.NonTerminal("one_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("two_which_info_phrase", [new $runtime.NonTerminal("one_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {which|that} ${table[plural]:select:one{${filter[plural=one]}}other{${filter[plural=other]}}} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("two_which_info_phrase", [new $runtime.NonTerminal("one_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, { priority: (-0.1) });
   $grammar.addRule("two_which_info_phrase", [new $runtime.NonTerminal("one_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.declareSymbol("two_clean_info_phrase");
   $grammar.addRule("two_clean_info_phrase", [new $runtime.NonTerminal("one_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${filter} ${table} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("two_clean_info_phrase", [new $runtime.NonTerminal("one_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("pvp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("two_clean_info_phrase", [new $runtime.NonTerminal("one_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("preposition_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.declareSymbol("three_with_info_phrase");
   $grammar.addRule("three_with_info_phrase", [new $runtime.NonTerminal("two_with_info_phrase", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} and ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("three_with_info_phrase", [new $runtime.NonTerminal("two_with_info_phrase", "table", undefined), new $runtime.NonTerminal("equal_with_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} and ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("three_with_info_phrase", [new $runtime.NonTerminal("two_which_info_phrase", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {and having|and with|, with} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("three_with_info_phrase", [new $runtime.NonTerminal("two_which_info_phrase", "table", undefined), new $runtime.NonTerminal("equal_with_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {and having|and with|, with} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("three_with_info_phrase", [new $runtime.NonTerminal("two_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {with|having} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("three_with_info_phrase", [new $runtime.NonTerminal("two_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("equal_with_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {with|having} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.declareSymbol("three_which_info_phrase");
   $grammar.addRule("three_which_info_phrase", [new $runtime.NonTerminal("two_with_info_phrase", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("three_which_info_phrase", [new $runtime.NonTerminal("two_with_info_phrase", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {which|that} ${table[plural]:select:one{${filter[plural=one]}}other{${filter[plural=other]}}} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("three_which_info_phrase", [new $runtime.NonTerminal("two_with_info_phrase", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, { priority: (-0.1) });
   $grammar.addRule("three_which_info_phrase", [new $runtime.NonTerminal("two_with_info_phrase", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("three_which_info_phrase", [new $runtime.NonTerminal("two_which_info_phrase", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} and ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("three_which_info_phrase", [new $runtime.NonTerminal("two_which_info_phrase", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} and ${table[plural]:select:one{${filter[plural=one]}}other{${filter[plural=other]}}} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("three_which_info_phrase", [new $runtime.NonTerminal("two_which_info_phrase", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} and ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, { priority: (-0.1) });
   $grammar.addRule("three_which_info_phrase", [new $runtime.NonTerminal("two_which_info_phrase", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} and ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("three_which_info_phrase", [new $runtime.NonTerminal("two_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("three_which_info_phrase", [new $runtime.NonTerminal("two_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {which|that} ${table[plural]:select:one{${filter[plural=one]}}other{${filter[plural=other]}}} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("three_which_info_phrase", [new $runtime.NonTerminal("two_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, { priority: (-0.1) });
   $grammar.addRule("three_which_info_phrase", [new $runtime.NonTerminal("two_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.declareSymbol("three_clean_info_phrase");
   $grammar.addRule("three_clean_info_phrase", [new $runtime.NonTerminal("two_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${filter} ${table} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("three_clean_info_phrase", [new $runtime.NonTerminal("two_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("pvp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("three_clean_info_phrase", [new $runtime.NonTerminal("two_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("preposition_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.declareSymbol("n_with_info_phrase");
   $grammar.addRule("n_with_info_phrase", [new $runtime.NonTerminal("one_with_info_phrase", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} and ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("n_with_info_phrase", [new $runtime.NonTerminal("one_with_info_phrase", "table", undefined), new $runtime.NonTerminal("equal_with_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} and ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("n_with_info_phrase", [new $runtime.NonTerminal("one_which_info_phrase", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {and having|and with|, with} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("n_with_info_phrase", [new $runtime.NonTerminal("one_which_info_phrase", "table", undefined), new $runtime.NonTerminal("equal_with_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {and having|and with|, with} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("n_with_info_phrase", [new $runtime.NonTerminal("one_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {with|having} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("n_with_info_phrase", [new $runtime.NonTerminal("one_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("equal_with_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {with|having} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("n_with_info_phrase", [new $runtime.NonTerminal("n_with_info_phrase", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} and ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("n_with_info_phrase", [new $runtime.NonTerminal("n_with_info_phrase", "table", undefined), new $runtime.NonTerminal("equal_with_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} and ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("n_with_info_phrase", [new $runtime.NonTerminal("n_which_info_phrase", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {and having|and with|, with} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("n_with_info_phrase", [new $runtime.NonTerminal("n_which_info_phrase", "table", undefined), new $runtime.NonTerminal("equal_with_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {and having|and with|, with} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("n_with_info_phrase", [new $runtime.NonTerminal("n_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("npp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {with|having} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("n_with_info_phrase", [new $runtime.NonTerminal("n_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("equal_with_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {with|having} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.declareSymbol("n_which_info_phrase");
   $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("one_with_info_phrase", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("one_with_info_phrase", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {which|that} ${table[plural]:select:one{${filter[plural=one]}}other{${filter[plural=other]}}} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("one_with_info_phrase", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, { priority: (-0.1) });
   $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("one_with_info_phrase", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("one_which_info_phrase", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} and ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("one_which_info_phrase", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} and ${table[plural]:select:one{${filter[plural=one]}}other{${filter[plural=other]}}} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("one_which_info_phrase", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} and ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, { priority: (-0.1) });
   $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("one_which_info_phrase", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} and ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("one_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("one_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {which|that} ${table[plural]:select:one{${filter[plural=one]}}other{${filter[plural=other]}}} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("one_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, { priority: (-0.1) });
   $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("one_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("n_with_info_phrase", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("n_with_info_phrase", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {which|that} ${table[plural]:select:one{${filter[plural=one]}}other{${filter[plural=other]}}} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("n_with_info_phrase", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, { priority: (-0.1) });
   $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("n_with_info_phrase", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("n_which_info_phrase", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} and ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("n_which_info_phrase", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} and ${table[plural]:select:one{${filter[plural=one]}}other{${filter[plural=other]}}} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("n_which_info_phrase", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} and ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, { priority: (-0.1) });
   $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("n_which_info_phrase", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} and ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("n_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("npi_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("n_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("avp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {which|that} ${table[plural]:select:one{${filter[plural=one]}}other{${filter[plural=other]}}} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("n_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, { priority: (-0.1) });
   $grammar.addRule("n_which_info_phrase", [new $runtime.NonTerminal("n_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("npv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} {which|that} ${table[plural]:select:one{is}other{are}} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.declareSymbol("n_clean_info_phrase");
   $grammar.addRule("n_clean_info_phrase", [new $runtime.NonTerminal("one_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${filter} ${table} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("n_clean_info_phrase", [new $runtime.NonTerminal("one_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("pvp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("n_clean_info_phrase", [new $runtime.NonTerminal("one_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("preposition_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("n_clean_info_phrase", [new $runtime.NonTerminal("n_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("apv_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${filter} ${table} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("n_clean_info_phrase", [new $runtime.NonTerminal("n_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("pvp_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
   $grammar.addRule("n_clean_info_phrase", [new $runtime.NonTerminal("n_clean_info_phrase", "table", undefined), new $runtime.NonTerminal("preposition_filter", "filter", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void)])], $locale._("${table} ${filter} [plural=table[plural]]"), ((table : D.ResultPhrase, filter : C.FilterSlot) : (D.ResultPhrase)|null => D.addSlotToResultPhrase(table, filter)), D.resultPhraseKeyFn, {  });
};
