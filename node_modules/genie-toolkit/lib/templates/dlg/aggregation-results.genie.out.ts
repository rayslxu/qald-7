// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>

// Templates that describe results from a query

import * as $runtime from "../../sentence-generator/runtime";
import type $SentenceGenerator from "../../sentence-generator/generator";
import * as $SentenceGeneratorTypes from "../../sentence-generator/types";
import * as $I18n from "../../i18n/index";
import { Ast, } from 'thingtalk';
import * as C from '../ast_manip';
import * as D from '../dialogue_acts';
import * as S from '../state_manip';
import ThingpediaLoader from '../load-thingpedia';
export const count_aggregation_reply : $SentenceGeneratorTypes.NonTerminal<S.AgentReplyRecord> = "count_aggregation_reply";
export const agg_operator_for_reply : $SentenceGeneratorTypes.NonTerminal<'min'|'max'|'avg'|'sum'> = "agg_operator_for_reply";
export const other_aggregation_reply : $SentenceGeneratorTypes.NonTerminal<S.AgentReplyRecord> = "other_aggregation_reply";
/**
 * Load the templates in this file.
 *
 * This is an autogenerated method that will be called by the {@link SentenceGenerator}
 * when the templates are imported.
 */
export async function $load($options : $SentenceGeneratorTypes.GrammarOptions, $locale : $I18n.LanguagePack, $grammar : $SentenceGenerator, $loader : ThingpediaLoader) : Promise<void> {
   $grammar.declareSymbol("count_aggregation_reply");
   $grammar.addRule("count_aggregation_reply", [new $runtime.NonTerminal("ctx_with_aggregation_result", "ctx", undefined), new $runtime.NonTerminal("base_table", "table", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void), 0, "currentFunction" as ("currentFunction" extends keyof ReturnType<typeof S.contextKeyFn> ? string : void)])], $locale._("{there ${ctx.aggregationCount:plural:one{is}other{are}}|i see|i have} ${ctx.aggregationCount} ${ctx.aggregationCount:plural:one{${table[plural=one]}}other{${table[plural=other]}}} {like that|with those characteristics}"), ((ctx : S.ContextInfo, table : Ast.InvocationExpression) : (S.AgentReplyRecord)|null => D.makeCountAggregationReply(ctx, table, false)), undefined, {  });
   $grammar.addRule("count_aggregation_reply", [new $runtime.NonTerminal("ctx_with_aggregation_result", "ctx", undefined), new $runtime.NonTerminal("one_with_filter_table", "table", undefined)], $locale._("{there ${ctx.aggregationCount:plural:one{is}other{are}}|i see|i have} ${ctx.aggregationCount} ${ctx.aggregationCount:plural:one{${table[plural=one]}}other{${table[plural=other]}}}"), ((ctx : S.ContextInfo, table : Ast.Expression) : (S.AgentReplyRecord)|null => D.makeCountAggregationReply(ctx, table, true)), undefined, { priority: (10) });
   $grammar.addRule("count_aggregation_reply", [new $runtime.NonTerminal("ctx_with_aggregation_result", "ctx", undefined), new $runtime.NonTerminal("two_with_filter_table", "table", undefined)], $locale._("{there ${ctx.aggregationCount:plural:one{is}other{are}}|i see|i have} ${ctx.aggregationCount} ${ctx.aggregationCount:plural:one{${table[plural=one]}}other{${table[plural=other]}}}"), ((ctx : S.ContextInfo, table : Ast.Expression) : (S.AgentReplyRecord)|null => D.makeCountAggregationReply(ctx, table, true)), undefined, { priority: (10) });
   $grammar.declareSymbol("agg_operator_for_reply");
   $grammar.addRule("agg_operator_for_reply", [], $locale._("minimum"), (() : ('min'|'max'|'avg'|'sum')|null => 'min'), undefined, {  });
   $grammar.addRule("agg_operator_for_reply", [], $locale._("smallest"), (() : ('min'|'max'|'avg'|'sum')|null => 'min'), undefined, {  });
   $grammar.addRule("agg_operator_for_reply", [], $locale._("maximum"), (() : ('min'|'max'|'avg'|'sum')|null => 'max'), undefined, {  });
   $grammar.addRule("agg_operator_for_reply", [], $locale._("largest"), (() : ('min'|'max'|'avg'|'sum')|null => 'max'), undefined, {  });
   $grammar.addRule("agg_operator_for_reply", [], $locale._("average"), (() : ('min'|'max'|'avg'|'sum')|null => 'avg'), undefined, {  });
   $grammar.addRule("agg_operator_for_reply", [], $locale._("total"), (() : ('min'|'max'|'avg'|'sum')|null => 'sum'), undefined, {  });
   $grammar.declareSymbol("other_aggregation_reply");
   $grammar.addRule("other_aggregation_reply", [new $runtime.NonTerminal("ctx_with_aggregation_result", "ctx", undefined), new $runtime.NonTerminal("agg_operator_for_reply", "op", undefined), new $runtime.NonTerminal("out_param_Any", "p", undefined), new $runtime.NonTerminal("constant_Any", "c", undefined)], $locale._("${ctx} the ${op} ${p} is ${c}"), ((ctx : S.ContextInfo, op : 'min'|'max'|'avg'|'sum', p : C.ParamSlot, c : Ast.Value) : (S.AgentReplyRecord)|null => D.makeOtherAggregationReply(ctx, op, p, c)), undefined, {  });
};
