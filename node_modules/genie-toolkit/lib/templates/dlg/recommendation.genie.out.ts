// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>

// Recommendation templates: the agent reads out or describe the top result from the search,
// optionally proposing an action to do on it

// A recommendation from the system is followed by:
// - yes (= "positive_recommendation_reply_pair")
// - some form of search refinement (= "negative_recommendation_reply_pair")
// - a question (= "recommendation_search_question_pair")
// - closing the dialogue (= "recommendation_cancel_pair")

import * as $runtime from "../../sentence-generator/runtime";
import type $SentenceGenerator from "../../sentence-generator/generator";
import * as $SentenceGeneratorTypes from "../../sentence-generator/types";
import * as $I18n from "../../i18n/index";
import { Ast, } from 'thingtalk';
import * as C from '../ast_manip';
import * as D from '../dialogue_acts';
import * as S from '../state_manip';
import ThingpediaLoader from '../load-thingpedia';
import { SlotBag } from '../slot_bag';
export const question_system_recommendation_short : $SentenceGeneratorTypes.NonTerminal<D.Recommendation> = "question_system_recommendation_short";
export const action_recommendation : $SentenceGeneratorTypes.NonTerminal<D.Recommendation> = "action_recommendation";
export const actionable_system_recommendation_short : $SentenceGeneratorTypes.NonTerminal<D.Recommendation> = "actionable_system_recommendation_short";
export const proposal_info_action_pair : $SentenceGeneratorTypes.NonTerminal<[D.ResultPhrase, Ast.Invocation|null]> = "proposal_info_action_pair";
export const direct_user_question_answer : $SentenceGeneratorTypes.NonTerminal<D.Recommendation> = "direct_user_question_answer";
export const actionable_system_display_result_short : $SentenceGeneratorTypes.NonTerminal<D.Recommendation> = "actionable_system_display_result_short";
export const system_nonlist_result : $SentenceGeneratorTypes.NonTerminal<D.Recommendation> = "system_nonlist_result";
export const system_recommendation : $SentenceGeneratorTypes.NonTerminal<D.Recommendation> = "system_recommendation";
export const recommendation_accept_phrase_with_action : $SentenceGeneratorTypes.NonTerminal<Ast.Invocation> = "recommendation_accept_phrase_with_action";
export const recommendation_accept_phrase_by_name : $SentenceGeneratorTypes.NonTerminal<[Ast.EntityValue|Ast.NumberValue, Ast.Invocation|null]> = "recommendation_accept_phrase_by_name";
/**
 * Load the templates in this file.
 *
 * This is an autogenerated method that will be called by the {@link SentenceGenerator}
 * when the templates are imported.
 */
export async function $load($options : $SentenceGeneratorTypes.GrammarOptions, $locale : $I18n.LanguagePack, $grammar : $SentenceGenerator, $loader : ThingpediaLoader) : Promise<void> {
   $grammar.declareSymbol("question_system_recommendation_short");
   $grammar.addRule("question_system_recommendation_short", [new $runtime.NonTerminal("ctx_with_result_and_action", "ctx", undefined), new $runtime.NonTerminal("constant_name", "proposal", ["value" as ("value" extends keyof ReturnType<typeof C.entityOrNumberValueKeyFn> ? string : void), 0, "id0" as ("id0" extends keyof ReturnType<typeof S.contextKeyFn> ? string : void)])], $locale._("how about ${proposal}"), ((ctx : S.ContextInfo, proposal : Ast.EntityValue|Ast.NumberValue) : (D.Recommendation)|null => D.makeRecommendation(ctx, proposal)), D.recommendationKeyFn, {  });
   $grammar.declareSymbol("action_recommendation");
   $grammar.addRule("action_recommendation", [new $runtime.NonTerminal("ctx_with_result_and_action", "ctx", undefined), new $runtime.NonTerminal("contextual_action_phrase", "action", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.invocationKeyFn> ? string : void), 0, "nextFunction" as ("nextFunction" extends keyof ReturnType<typeof S.contextKeyFn> ? string : void)])], $locale._("{would you like to|would you like me to} ${action}"), ((ctx : S.ContextInfo, action : Ast.Invocation) : (D.Recommendation)|null => D.makeActionRecommendation(ctx, action)), D.recommendationKeyFn, { weight: (0.1) });
   $grammar.declareSymbol("actionable_system_recommendation_short");
   $grammar.addRule("actionable_system_recommendation_short", [new $runtime.NonTerminal("ctx_with_result_noquestion", "ctx", undefined), new $runtime.NonTerminal("ctx_thingpedia_result", "proposal", undefined)], $locale._("${ctx} ${proposal}"), ((ctx : S.ContextInfo, proposal : SlotBag) : (D.Recommendation)|null => D.makeThingpediaRecommendation(ctx, proposal)), D.recommendationKeyFn, { priority: (2) });
   $grammar.addRule("actionable_system_recommendation_short", [new $runtime.NonTerminal("ctx_with_result_noquestion", "ctx", undefined), new $runtime.NonTerminal("ctx_thingpedia_result", "proposal", undefined)], $locale._("${ctx} ${proposal}"), ((ctx : S.ContextInfo, proposal : SlotBag) : (D.Recommendation)|null => D.makeThingpediaRecommendation(ctx, proposal)), D.recommendationKeyFn, { priority: (2) });
   $grammar.addRule("actionable_system_recommendation_short", [new $runtime.NonTerminal("ctx_with_result_and_action", "ctx", undefined), new $runtime.NonTerminal("constant_name", "proposal", ["value" as ("value" extends keyof ReturnType<typeof C.entityOrNumberValueKeyFn> ? string : void), 0, "id0" as ("id0" extends keyof ReturnType<typeof S.contextKeyFn> ? string : void)])], $locale._("i {recommend|suggest} ${proposal}"), ((ctx : S.ContextInfo, proposal : Ast.EntityValue|Ast.NumberValue) : (D.Recommendation)|null => D.makeRecommendation(ctx, proposal)), D.recommendationKeyFn, {  });
   $grammar.addRule("actionable_system_recommendation_short", [new $runtime.NonTerminal("ctx_with_result_noquestion", "ctx", undefined), new $runtime.NonTerminal("constant_name", "proposal", ["value" as ("value" extends keyof ReturnType<typeof C.entityOrNumberValueKeyFn> ? string : void), 0, "id0" as ("id0" extends keyof ReturnType<typeof S.contextKeyFn> ? string : void)])], $locale._("{i see|i have|i have found|i have one, it is} ${proposal}"), ((ctx : S.ContextInfo, proposal : Ast.EntityValue|Ast.NumberValue) : (D.Recommendation)|null => D.makeRecommendation(ctx, proposal)), D.recommendationKeyFn, {  });
   $grammar.addRule("actionable_system_recommendation_short", [new $runtime.NonTerminal("ctx_with_result_argminmax", "ctx", undefined), new $runtime.NonTerminal("constant_name", "proposal", ["value" as ("value" extends keyof ReturnType<typeof C.entityOrNumberValueKeyFn> ? string : void), 0, "id0" as ("id0" extends keyof ReturnType<typeof S.contextKeyFn> ? string : void)])], $locale._("the answer is ${proposal}"), ((ctx : S.ContextInfo, proposal : Ast.EntityValue|Ast.NumberValue) : (D.Recommendation)|null => D.makeRecommendation(ctx, proposal)), D.recommendationKeyFn, {  });
   $grammar.addRule("actionable_system_recommendation_short", [new $runtime.NonTerminal("ctx_with_result_argminmax", "ctx", undefined), new $runtime.NonTerminal("base_table", "base", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void), 0, "currentFunction" as ("currentFunction" extends keyof ReturnType<typeof S.contextKeyFn> ? string : void)]), new $runtime.NonTerminal("out_param_Any", "param", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.paramKeyFn> ? string : void), 0, "currentFunction" as ("currentFunction" extends keyof ReturnType<typeof S.contextKeyFn> ? string : void)]), new $runtime.NonTerminal("constant_name", "proposal", ["value" as ("value" extends keyof ReturnType<typeof C.entityOrNumberValueKeyFn> ? string : void), 0, "id0" as ("id0" extends keyof ReturnType<typeof S.contextKeyFn> ? string : void)])], $locale._("the ${base[plural=one]} with the highest ${param} is ${proposal}"), ((ctx : S.ContextInfo, base : Ast.InvocationExpression, param : C.ParamSlot, proposal : Ast.EntityValue|Ast.NumberValue) : (D.Recommendation)|null => D.makeArgMinMaxRecommendation(ctx, proposal, base, param, 'desc')), D.recommendationKeyFn, { priority: (1) });
   $grammar.addRule("actionable_system_recommendation_short", [new $runtime.NonTerminal("ctx_with_result_argminmax", "ctx", undefined), new $runtime.NonTerminal("base_table", "base", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void), 0, "currentFunction" as ("currentFunction" extends keyof ReturnType<typeof S.contextKeyFn> ? string : void)]), new $runtime.NonTerminal("out_param_Any", "param", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.paramKeyFn> ? string : void), 0, "currentFunction" as ("currentFunction" extends keyof ReturnType<typeof S.contextKeyFn> ? string : void)]), new $runtime.NonTerminal("constant_name", "proposal", ["value" as ("value" extends keyof ReturnType<typeof C.entityOrNumberValueKeyFn> ? string : void), 0, "id0" as ("id0" extends keyof ReturnType<typeof S.contextKeyFn> ? string : void)])], $locale._("the ${base[plural=one]} with the lowest ${param} is ${proposal}"), ((ctx : S.ContextInfo, base : Ast.InvocationExpression, param : C.ParamSlot, proposal : Ast.EntityValue|Ast.NumberValue) : (D.Recommendation)|null => D.makeArgMinMaxRecommendation(ctx, proposal, base, param, 'asc')), D.recommendationKeyFn, { priority: (1) });
   $grammar.addRule("actionable_system_recommendation_short", [new $runtime.NonTerminal("ctx_with_result_argminmax", "ctx", undefined), new $runtime.NonTerminal("apv_argminmax", "argminmax", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.argMinMaxKeyFn> ? string : void), 0, "currentFunction" as ("currentFunction" extends keyof ReturnType<typeof S.contextKeyFn> ? string : void)]), new $runtime.NonTerminal("base_table", "base", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void), 0, "currentFunction" as ("currentFunction" extends keyof ReturnType<typeof S.contextKeyFn> ? string : void)]), new $runtime.NonTerminal("constant_name", "proposal", ["value" as ("value" extends keyof ReturnType<typeof C.entityOrNumberValueKeyFn> ? string : void), 0, "id0" as ("id0" extends keyof ReturnType<typeof S.contextKeyFn> ? string : void)])], $locale._("the ${argminmax} ${base[plural=one]} is ${proposal}"), ((ctx : S.ContextInfo, argminmax : C.ArgMinMax, base : Ast.InvocationExpression, proposal : Ast.EntityValue|Ast.NumberValue) : (D.Recommendation)|null => D.makeArgMinMaxRecommendation(ctx, proposal, base, argminmax[0], argminmax[1])), D.recommendationKeyFn, { priority: (2) });
   $grammar.declareSymbol("proposal_info_action_pair");
   $grammar.addRule("proposal_info_action_pair", [new $runtime.NonTerminal("result_info_phrase", "res", undefined), new $runtime.NonTerminal("action_coref_recommendation", "action", undefined)], $locale._("is a ${res[plural=one]}. ${action}"), ((res : D.ResultPhrase, action : Ast.Invocation) : ([D.ResultPhrase, Ast.Invocation|null])|null => {
        const resultType = res.info.schema!.getArgType('id');

        if (!resultType || !C.hasArgumentOfType(action, resultType))
            return null;
        return [res, action];
    }), undefined, { weight: (0.8) });
   if (!$options.flags.inference) {
       $grammar.addRule("proposal_info_action_pair", [new $runtime.NonTerminal("result_info_phrase", "res", undefined), new $runtime.NonTerminal("learn_more_offer", undefined, undefined)], $locale._("is a ${res[plural=one]}. ${learn_more_offer}?"), ((res : D.ResultPhrase, $0 : string) : ([D.ResultPhrase, Ast.Invocation|null])|null => {
            return [res, null];
        }), undefined, { weight: (0.2) });
   }
   $grammar.declareSymbol("direct_user_question_answer");
   $grammar.addRule("direct_user_question_answer", [new $runtime.NonTerminal("direct_result_info_phrase", "res", undefined)], "${res}", ((res : D.ResultPhrase) : (D.Recommendation)|null => D.makeThingpediaRecommendation(res.ctx, res.info)), D.recommendationKeyFn, {  });
   $grammar.declareSymbol("actionable_system_display_result_short");
   $grammar.addRule("actionable_system_display_result_short", [new $runtime.NonTerminal("ctx_with_result", "ctx", undefined), new $runtime.NonTerminal("ctx_thingpedia_result", "info", undefined)], $locale._("${ctx} ${info} ."), ((ctx : S.ContextInfo, info : SlotBag) : (D.Recommendation)|null => D.makeDisplayResult(ctx, info)), D.recommendationKeyFn, { priority: (5) });
   $grammar.declareSymbol("system_nonlist_result");
   $grammar.addRule("system_nonlist_result", [new $runtime.NonTerminal("actionable_system_display_result_short", "phrase", undefined)], "${phrase}", ((phrase : D.Recommendation) : (D.Recommendation)|null => D.checkDisplayResult(phrase)), D.recommendationKeyFn, {  });
   $grammar.addRule("system_nonlist_result", [new $runtime.NonTerminal("ctx_with_result_noquestion", "ctx", undefined), new $runtime.NonTerminal("direct_result_info_phrase", "res", undefined)], $locale._("${ctx} ${res}"), ((ctx : S.ContextInfo, res : D.ResultPhrase) : (D.Recommendation)|null => D.checkDisplayResult(D.makeDisplayResult(ctx, res.info))), D.recommendationKeyFn, {  });
   $grammar.addRule("system_nonlist_result", [new $runtime.NonTerminal("ctx_with_result_question", "ctx", undefined), new $runtime.NonTerminal("direct_result_info_phrase", "res", undefined)], $locale._("${ctx} ${res}"), ((ctx : S.ContextInfo, res : D.ResultPhrase) : (D.Recommendation)|null => D.checkDisplayResult(D.makeDisplayResult(ctx, res.info))), D.recommendationKeyFn, { priority: (10) });
   $grammar.addRule("system_nonlist_result", [new $runtime.NonTerminal("actionable_system_display_result_short", "phrase", undefined), new $runtime.NonTerminal("direct_result_info_phrase", "extra", undefined)], $locale._("${phrase} ${extra}"), ((phrase : D.Recommendation, extra : D.ResultPhrase) : (D.Recommendation)|null => D.checkDisplayResult(D.combineDisplayResult(phrase, extra.info))), D.recommendationKeyFn, {  });
   if ($options.flags.anything_else) {
       $grammar.addRule("system_nonlist_result", [new $runtime.NonTerminal("actionable_system_display_result_short", "proposal", undefined), new $runtime.NonTerminal("anything_else_phrase", undefined, undefined)], $locale._("${proposal} ${anything_else_phrase}"), ((proposal : D.Recommendation, $0 : string) : (D.Recommendation)|null => {
        const clone : any = {};
        Object.assign(clone, proposal);
        clone.hasAnythingElse = true;
        return D.checkDisplayResult(clone);
    }), D.recommendationKeyFn, {  });
   }
   $grammar.declareSymbol("system_recommendation");
   $grammar.addRule("system_recommendation", [new $runtime.NonTerminal("ctx_with_action", undefined, undefined), new $runtime.NonTerminal("question_system_recommendation_short", "proposal", undefined)], $locale._("${proposal}."), (($0 : S.ContextInfo, proposal : D.Recommendation) : (D.Recommendation)|null => D.checkRecommendation(proposal, null)), D.recommendationKeyFn, {  });
   $grammar.addRule("system_recommendation", [new $runtime.NonTerminal("ctx_with_action", undefined, undefined), new $runtime.NonTerminal("actionable_system_recommendation_short", "proposal", undefined)], $locale._("${proposal}."), (($0 : S.ContextInfo, proposal : D.Recommendation) : (D.Recommendation)|null => D.checkRecommendation(proposal, null)), D.recommendationKeyFn, {  });
   $grammar.addRule("system_recommendation", [new $runtime.NonTerminal("ctx_with_action", undefined, undefined), new $runtime.NonTerminal("actionable_system_recommendation_short", "proposal", undefined), new $runtime.NonTerminal("learn_more_offer", undefined, undefined)], $locale._("${proposal}. ${learn_more_offer}?"), (($0 : S.ContextInfo, proposal : D.Recommendation, $1 : string) : (D.Recommendation)|null => D.recommendationSetLearnMore(proposal)), D.recommendationKeyFn, {  });
   $grammar.addRule("system_recommendation", [new $runtime.NonTerminal("ctx_without_projection", undefined, undefined), new $runtime.NonTerminal("action_recommendation", "proposal", undefined)], $locale._("${proposal}?"), (($0 : S.ContextInfo, proposal : D.Recommendation) : (D.Recommendation)|null => proposal), D.recommendationKeyFn, {  });
   $grammar.addRule("system_recommendation", [new $runtime.NonTerminal("ctx_without_projection", undefined, undefined), new $runtime.NonTerminal("actionable_system_recommendation_short", "proposal", undefined), new $runtime.NonTerminal("action_coref_recommendation", "action", undefined)], $locale._("${proposal}. ${action}"), (($0 : S.ContextInfo, proposal : D.Recommendation, action : Ast.Invocation) : (D.Recommendation)|null => D.checkActionForRecommendation(proposal, action)), D.recommendationKeyFn, {  });
   $grammar.addRule("system_recommendation", [new $runtime.NonTerminal("question_system_recommendation_short", "proposal", undefined), new $runtime.NonTerminal("result_info_phrase", "res", undefined)], $locale._("{${proposal}? it is a ${res[plural=one]}.|${proposal}, which is a ${res[plural=one]}?}"), ((proposal : D.Recommendation, res : D.ResultPhrase) : (D.Recommendation)|null => D.checkRecommendation(proposal, res.info)), D.recommendationKeyFn, {  });
   $grammar.addRule("system_recommendation", [new $runtime.NonTerminal("action_recommendation", "proposal", undefined), new $runtime.NonTerminal("result_info_phrase", "res", undefined)], $locale._("{${proposal}? it is a ${res[plural=one]}.|${proposal}, which is a ${res[plural=one]}?}"), ((proposal : D.Recommendation, res : D.ResultPhrase) : (D.Recommendation)|null => D.checkRecommendation(proposal, res.info)), D.recommendationKeyFn, {  });
   $grammar.addRule("system_recommendation", [new $runtime.NonTerminal("actionable_system_recommendation_short", "proposal", undefined), new $runtime.NonTerminal("result_info_phrase", "res", undefined)], $locale._("{${proposal}. it is a ${res[plural=one]}.|${proposal}, which is a ${res[plural=one]}.}"), ((proposal : D.Recommendation, res : D.ResultPhrase) : (D.Recommendation)|null => D.checkRecommendation(proposal, res.info)), D.recommendationKeyFn, {  });
   $grammar.addRule("system_recommendation", [new $runtime.NonTerminal("question_system_recommendation_short", "proposal", undefined)], $locale._("${proposal}?"), ((proposal : D.Recommendation) : (D.Recommendation)|null => D.checkRecommendation(proposal, null)), D.recommendationKeyFn, {  });
   $grammar.addRule("system_recommendation", [new $runtime.NonTerminal("action_recommendation", "proposal", undefined)], $locale._("${proposal}?"), ((proposal : D.Recommendation) : (D.Recommendation)|null => D.checkRecommendation(proposal, null)), D.recommendationKeyFn, {  });
   $grammar.addRule("system_recommendation", [new $runtime.NonTerminal("actionable_system_recommendation_short", "proposal", undefined)], $locale._("${proposal}."), ((proposal : D.Recommendation) : (D.Recommendation)|null => D.checkRecommendation(proposal, null)), D.recommendationKeyFn, {  });
   $grammar.addRule("system_recommendation", [new $runtime.NonTerminal("ctx_with_result_question", "ctx", undefined), new $runtime.NonTerminal("direct_answer_phrase", "proposal", ["index" as ("index" extends keyof ReturnType<typeof D.directAnswerPhraseKeyFn> ? string : void), (0) as ReturnType<typeof D.directAnswerPhraseKeyFn>["index"]])], $locale._("${proposal}."), ((ctx : S.ContextInfo, proposal : D.DirectAnswerPhrase) : (D.Recommendation)|null => {
        const rec = D.makeRecommendation(proposal.result.ctx, proposal.name);
        if (!rec)
            return null;
        return D.checkRecommendation(rec, proposal.result.info);
    }), D.recommendationKeyFn, {  });
   $grammar.addRule("system_recommendation", [new $runtime.NonTerminal("direct_user_question_answer", "proposal", undefined)], "${proposal}", ((proposal : D.Recommendation) : (D.Recommendation)|null => D.checkRecommendation(proposal, null)), D.recommendationKeyFn, {  });
   $grammar.addRule("system_recommendation", [new $runtime.NonTerminal("actionable_system_recommendation_short", "proposal", undefined), new $runtime.NonTerminal("proposal_info_action_pair", "pair", undefined)], $locale._("${proposal}. it ${pair}"), ((proposal : D.Recommendation, pair : [D.ResultPhrase, Ast.Invocation|null]) : (D.Recommendation)|null => {
        const [res, action] = pair;
        const maybeProposal = D.checkRecommendation(proposal, res.info);
        if (maybeProposal === null)
            return null;
        if (action === null)
            return D.recommendationSetLearnMore(maybeProposal);
        return D.checkActionForRecommendation(maybeProposal, action);
    }), D.recommendationKeyFn, { weight: (2) });
   $grammar.addRule("system_recommendation", [new $runtime.NonTerminal("ctx_with_result_question", "ctx", undefined), new $runtime.NonTerminal("constant_name", "proposal", undefined), new $runtime.NonTerminal("proposal_info_action_pair", "pair", undefined)], $locale._("${proposal} ${pair}"), ((ctx : S.ContextInfo, proposal : Ast.EntityValue|Ast.NumberValue, pair : [D.ResultPhrase, Ast.Invocation|null]) : (D.Recommendation)|null => {
        const rec = D.makeRecommendation(ctx, proposal);
        if (!rec)
            return null;
        const [res, action] = pair;
        const maybeRec = D.checkRecommendation(rec, res.info);
        if (maybeRec === null)
            return null;
        if (action === null)
            return D.recommendationSetLearnMore(maybeRec);
        return D.checkActionForRecommendation(maybeRec, action);
    }), D.recommendationKeyFn, { weight: (2) });
   $grammar.declareSymbol("recommendation_accept_phrase_with_action");
   $grammar.addRule("recommendation_accept_phrase_with_action", [new $runtime.NonTerminal("accept_phrase", undefined, undefined), new $runtime.NonTerminal("generic_preamble_for_action", undefined, undefined), new $runtime.NonTerminal("coref_action_command", "action", undefined)], $locale._("${accept_phrase} ${generic_preamble_for_action} ${action}"), (($0 : string, $1 : string, action : Ast.Invocation) : (Ast.Invocation)|null => action), C.invocationKeyFn, {  });
   $grammar.declareSymbol("recommendation_accept_phrase_by_name");
   $grammar.addRule("recommendation_accept_phrase_by_name", [new $runtime.NonTerminal("generic_list_proposal_accept_phrase", "name", undefined)], "${name}", ((name : Ast.EntityValue|Ast.NumberValue) : ([Ast.EntityValue|Ast.NumberValue, Ast.Invocation|null])|null => [name, null]), undefined, {  });
   $grammar.addRule("recommendation_accept_phrase_by_name", [new $runtime.NonTerminal("list_proposal_accept_phrase_must_have_action", "name", undefined)], "${name}", ((name : Ast.EntityValue|Ast.NumberValue) : ([Ast.EntityValue|Ast.NumberValue, Ast.Invocation|null])|null => [name, null]), undefined, {  });
   $grammar.addRule("recommendation_accept_phrase_by_name", [new $runtime.NonTerminal("list_proposal_accept_phrase_with_action", "accept", undefined)], "${accept}", ((accept : [Ast.EntityValue|Ast.NumberValue, Ast.Invocation, boolean]) : ([Ast.EntityValue|Ast.NumberValue, Ast.Invocation|null])|null => [accept[0], accept[1]]), undefined, {  });
};
