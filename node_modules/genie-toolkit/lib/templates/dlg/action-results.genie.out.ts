// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>

// Action result templates: used after executing the action
// Either the action was successful, and we're done, or
// the action failed, and we give the user an option to try again

import * as $runtime from "../../sentence-generator/runtime";
import type $SentenceGenerator from "../../sentence-generator/generator";
import * as $SentenceGeneratorTypes from "../../sentence-generator/types";
import * as $I18n from "../../i18n/index";
import assert from 'assert';
import { Ast, } from 'thingtalk';
import * as C from '../ast_manip';
import * as D from '../dialogue_acts';
import * as S from '../state_manip';
import ThingpediaLoader from '../load-thingpedia';
import { SlotBag } from '../slot_bag';
export const complete_past_action_phrase : $SentenceGeneratorTypes.NonTerminal<Ast.Expression> = "complete_past_action_phrase";
export const generic_action_success_phrase : $SentenceGeneratorTypes.NonTerminal<string> = "generic_action_success_phrase";
export const action_success_phrase_with_result : $SentenceGeneratorTypes.NonTerminal<D.ActionSuccessPhraseWithResult> = "action_success_phrase_with_result";
export const action_success_phrase : $SentenceGeneratorTypes.NonTerminal<S.AgentReplyRecord> = "action_success_phrase";
export const action_notification_phrase : $SentenceGeneratorTypes.NonTerminal<S.AgentReplyRecord> = "action_notification_phrase";
export const short_action_error_message : $SentenceGeneratorTypes.NonTerminal<S.ContextInfo> = "short_action_error_message";
export const long_action_error_message : $SentenceGeneratorTypes.NonTerminal<S.ContextInfo> = "long_action_error_message";
export const one_param_try_different_param_question : $SentenceGeneratorTypes.NonTerminal<C.ParamSlot[]> = "one_param_try_different_param_question";
export const two_param_try_different_param_question : $SentenceGeneratorTypes.NonTerminal<C.ParamSlot[]> = "two_param_try_different_param_question";
export const action_error_phrase : $SentenceGeneratorTypes.NonTerminal<S.AgentReplyRecord> = "action_error_phrase";
/**
 * Load the templates in this file.
 *
 * This is an autogenerated method that will be called by the {@link SentenceGenerator}
 * when the templates are imported.
 */
export async function $load($options : $SentenceGeneratorTypes.GrammarOptions, $locale : $I18n.LanguagePack, $grammar : $SentenceGenerator, $loader : ThingpediaLoader) : Promise<void> {
   $grammar.declareSymbol("complete_past_action_phrase");
   $grammar.addRule("complete_past_action_phrase", [new $runtime.NonTerminal("thingpedia_complete_action_past", "action", undefined)], "${action}", ((action : Ast.Expression) : (Ast.Expression)|null => {
        // check against weird primitive templates, because
        // later we don't check the query
        if (!(action instanceof Ast.InvocationExpression))
            return null;
        return action;
    }), C.expressionKeyFn, {  });
   $grammar.addRule("complete_past_action_phrase", [new $runtime.NonTerminal("thingpedia_complete_action_past", "action", undefined)], $locale._("${action} for you"), ((action : Ast.Expression) : (Ast.Expression)|null => {
        // check against weird primitive templates, because
        // later we don't check the query
        if (!(action instanceof Ast.InvocationExpression))
            return null;
        return action;
    }), C.expressionKeyFn, {  });
   $grammar.addRule("complete_past_action_phrase", [new $runtime.NonTerminal("thingpedia_complete_join_action_past", "action", undefined)], "${action}", ((action : Ast.Expression) : (Ast.Expression)|null => action), C.expressionKeyFn, {  });
   $grammar.addRule("complete_past_action_phrase", [new $runtime.NonTerminal("thingpedia_complete_join_action_past", "action", undefined)], $locale._("${action} for you"), ((action : Ast.Expression) : (Ast.Expression)|null => action), C.expressionKeyFn, {  });
   $grammar.addRule("complete_past_action_phrase", [new $runtime.NonTerminal("complete_past_action_phrase", "action", undefined), new $runtime.NonTerminal("preposition_input_param", "param", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.inputParamKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${action} ${param}"), ((action : Ast.Expression, param : C.InputParamSlot) : (Ast.Expression)|null => C.addActionInputParam($loader, action, param)), C.expressionKeyFn, { priority: (0.1) });
   $grammar.addRule("complete_past_action_phrase", [new $runtime.NonTerminal("complete_past_action_phrase", "action", undefined), new $runtime.NonTerminal("npp_input_param", "param", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.inputParamKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${action} {with|having} ${param}"), ((action : Ast.Expression, param : C.InputParamSlot) : (Ast.Expression)|null => C.addActionInputParam($loader, action, param)), C.expressionKeyFn, { priority: (0.1) });
   $grammar.addRule("complete_past_action_phrase", [new $runtime.NonTerminal("complete_past_action_phrase", "action", undefined), new $runtime.NonTerminal("preposition_filter", "param", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${action} ${param}"), ((action : Ast.Expression, param : C.FilterSlot) : (Ast.Expression)|null => {
        if (!(param.ast instanceof Ast.AtomBooleanExpression))
            return null;
        const ipslot = { schema: param.schema, ptype: param.ptype,
            ast: new Ast.InputParam(null, param.ast.name, param.ast.value) };
        return C.addActionInputParam($loader, action, ipslot, { allowOutput: true });
    }), C.expressionKeyFn, { priority: (0.1) });
   $grammar.addRule("complete_past_action_phrase", [new $runtime.NonTerminal("complete_past_action_phrase", "action", undefined), new $runtime.NonTerminal("npp_filter", "param", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.filterKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("${action} {with|having} ${param}"), ((action : Ast.Expression, param : C.FilterSlot) : (Ast.Expression)|null => {
        if (!(param.ast instanceof Ast.AtomBooleanExpression))
            return null;
        const ipslot = { schema: param.schema, ptype: param.ptype,
            ast: new Ast.InputParam(null, param.ast.name, param.ast.value) };
        return C.addActionInputParam($loader, action, ipslot, { allowOutput: true });
    }), C.expressionKeyFn, { priority: (0.1) });
   $grammar.declareSymbol("generic_action_success_phrase");
   $grammar.addRule("generic_action_success_phrase", [], $locale._("your request was completed successfully"), (() : (string)|null => "your request was completed successfully"), undefined, { identity: (true) });
   $grammar.addRule("generic_action_success_phrase", [], $locale._("consider your request done !"), (() : (string)|null => "consider your request done !"), undefined, { identity: (true) });
   $grammar.declareSymbol("action_success_phrase_with_result");
   $grammar.addRule("action_success_phrase_with_result", [new $runtime.NonTerminal("generic_action_success_phrase", undefined, undefined), new $runtime.NonTerminal("direct_result_info_phrase", "result", undefined)], $locale._("${generic_action_success_phrase} . ${result}"), (($0 : string, result : D.ResultPhrase) : (D.ActionSuccessPhraseWithResult)|null => [null, result.info]), D.actionSuccessPhraseWithResultKeyFn, { priority: (1) });
   $grammar.addRule("action_success_phrase_with_result", [new $runtime.NonTerminal("complete_past_action_phrase", "action", undefined), new $runtime.NonTerminal("direct_result_info_phrase", "result", ["functionName" as ("functionName" extends keyof ReturnType<typeof D.resultPhraseKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void)])], $locale._("i ${action} . ${result}"), ((action : Ast.Expression, result : D.ResultPhrase) : (D.ActionSuccessPhraseWithResult)|null => [action, result.info]), D.actionSuccessPhraseWithResultKeyFn, { priority: (2) });
   $grammar.declareSymbol("action_success_phrase");
   $grammar.addRule("action_success_phrase", [new $runtime.NonTerminal("ctx_completed_action_success", "ctx", undefined), new $runtime.NonTerminal("generic_excitement_phrase", undefined, undefined), new $runtime.NonTerminal("ctx_thingpedia_result", "result", undefined)], $locale._("${ctx} ${generic_excitement_phrase} ${result} ."), ((ctx : S.ContextInfo, $0 : string, result : SlotBag) : (S.AgentReplyRecord)|null => D.makeThingpediaActionSuccessPhrase(ctx, result)), undefined, { priority: (5) });
   $grammar.addRule("action_success_phrase", [new $runtime.NonTerminal("ctx_completed_action_success", "ctx", undefined), new $runtime.NonTerminal("generic_excitement_phrase", undefined, undefined), new $runtime.NonTerminal("complete_past_action_phrase", "action", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void), 0, "currentFunction" as ("currentFunction" extends keyof ReturnType<typeof S.contextKeyFn> ? string : void)])], $locale._("${ctx} ${generic_excitement_phrase} i ${action} ."), ((ctx : S.ContextInfo, $0 : string, action : Ast.Expression) : (S.AgentReplyRecord)|null => D.makeCompleteActionSuccessPhrase(ctx, action, null)), undefined, { priority: (2) });
   $grammar.addRule("action_success_phrase", [new $runtime.NonTerminal("ctx_completed_action_success", "ctx", undefined), new $runtime.NonTerminal("generic_excitement_phrase", undefined, undefined), new $runtime.NonTerminal("action_success_phrase_with_result", "phrase", undefined)], $locale._("${ctx} ${generic_excitement_phrase} ${phrase}"), ((ctx : S.ContextInfo, $0 : string, phrase : D.ActionSuccessPhraseWithResult) : (S.AgentReplyRecord)|null => {
        const [action, info] = phrase;
        if (action)
            return D.makeCompleteActionSuccessPhrase(ctx, action, info);
        else
            return D.makeThingpediaActionSuccessPhrase(ctx, info);
    }), undefined, {  });
   $grammar.addRule("action_success_phrase", [new $runtime.NonTerminal("ctx_completed_action_success", "ctx", undefined), new $runtime.NonTerminal("generic_excitement_phrase", undefined, undefined), new $runtime.NonTerminal("generic_action_success_phrase", undefined, undefined)], $locale._("${ctx} ${generic_excitement_phrase} ${generic_action_success_phrase}"), ((ctx : S.ContextInfo, $0 : string, $1 : string) : (S.AgentReplyRecord)|null => D.makeGenericActionSuccessPhrase(ctx)), undefined, { priority: (-10) });
   $grammar.declareSymbol("action_notification_phrase");
   $grammar.addRule("action_notification_phrase", [new $runtime.NonTerminal("ctx_action_notification", "ctx", undefined), new $runtime.NonTerminal("notification_preamble", undefined, undefined), new $runtime.NonTerminal("generic_excitement_phrase", undefined, undefined), new $runtime.NonTerminal("ctx_thingpedia_result", "result", undefined)], $locale._("${ctx} ${notification_preamble} ${generic_excitement_phrase} ${result} ."), ((ctx : S.ContextInfo, $0 : S.ContextInfo, $1 : string, result : SlotBag) : (S.AgentReplyRecord)|null => D.makeThingpediaActionSuccessPhrase(ctx, result)), undefined, { priority: (5) });
   $grammar.addRule("action_notification_phrase", [new $runtime.NonTerminal("ctx_action_notification", "ctx", undefined), new $runtime.NonTerminal("notification_preamble", undefined, undefined), new $runtime.NonTerminal("generic_excitement_phrase", undefined, undefined), new $runtime.NonTerminal("complete_past_action_phrase", "action", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.expressionKeyFn> ? string : void), 0, "currentFunction" as ("currentFunction" extends keyof ReturnType<typeof S.contextKeyFn> ? string : void)])], $locale._("${ctx} ${notification_preamble} ${generic_excitement_phrase} i ${action} ."), ((ctx : S.ContextInfo, $0 : S.ContextInfo, $1 : string, action : Ast.Expression) : (S.AgentReplyRecord)|null => D.makeCompleteActionSuccessPhrase(ctx, action, null)), undefined, { priority: (2) });
   $grammar.addRule("action_notification_phrase", [new $runtime.NonTerminal("ctx_action_notification", "ctx", undefined), new $runtime.NonTerminal("notification_preamble", undefined, undefined), new $runtime.NonTerminal("generic_excitement_phrase", undefined, undefined), new $runtime.NonTerminal("action_success_phrase_with_result", "phrase", undefined)], $locale._("${ctx} ${notification_preamble} ${generic_excitement_phrase} ${phrase}"), ((ctx : S.ContextInfo, $0 : S.ContextInfo, $1 : string, phrase : D.ActionSuccessPhraseWithResult) : (S.AgentReplyRecord)|null => {
        const [action, info] = phrase;
        if (action)
            return D.makeCompleteActionSuccessPhrase(ctx, action, info);
        else
            return D.makeThingpediaActionSuccessPhrase(ctx, info);
    }), undefined, {  });
   $grammar.addRule("action_notification_phrase", [new $runtime.NonTerminal("ctx_action_notification", "ctx", undefined), new $runtime.NonTerminal("notification_preamble", undefined, undefined), new $runtime.NonTerminal("generic_excitement_phrase", undefined, undefined), new $runtime.NonTerminal("generic_action_success_phrase", undefined, undefined)], $locale._("${ctx} ${notification_preamble} ${generic_excitement_phrase} ${generic_action_success_phrase}"), ((ctx : S.ContextInfo, $0 : S.ContextInfo, $1 : string, $2 : string) : (S.AgentReplyRecord)|null => D.makeGenericActionSuccessPhrase(ctx)), undefined, { priority: (-10) });
   $grammar.declareSymbol("short_action_error_message");
   $grammar.addRule("short_action_error_message", [new $runtime.NonTerminal("ctx_completed_action_error", "ctx", undefined), new $runtime.NonTerminal("ctx_thingpedia_error_message", "msg", undefined)], $locale._("${ctx} ${msg} ."), ((ctx : S.ContextInfo, msg : C.ErrorMessage) : (S.ContextInfo)|null => D.checkThingpediaErrorMessage(ctx, msg)), S.contextKeyFn, { priority: (5) });
   $grammar.addRule("short_action_error_message", [new $runtime.NonTerminal("ctx_completed_action_error", "ctx", undefined)], $locale._("${ctx} there was an unexpected error with your command . please try again later or report this issue to my developers"), ((ctx : S.ContextInfo) : (S.ContextInfo)|null => ctx), S.contextKeyFn, {  });
   $grammar.declareSymbol("long_action_error_message");
   $grammar.addRule("long_action_error_message", [new $runtime.NonTerminal("action_description_phrase", "action", undefined), new $runtime.NonTerminal("short_action_error_message", "ctx", undefined)], $locale._("{i could not|it was not possible to} ${action} {:|because} ${ctx}"), ((action : Ast.Invocation, ctx : S.ContextInfo) : (S.ContextInfo)|null => D.checkActionErrorMessage(ctx, action)), S.contextKeyFn, {  });
   $grammar.declareSymbol("one_param_try_different_param_question");
   $grammar.addRule("one_param_try_different_param_question", [new $runtime.NonTerminal("input_param", "p", undefined)], $locale._("would you like to try a different ${p} ?"), ((p : C.ParamSlot) : (C.ParamSlot[])|null => {
        return [p];
    }), C.paramArrayKeyFn, {  });
   $grammar.addRule("one_param_try_different_param_question", [new $runtime.NonTerminal("input_param", "p", undefined)], $locale._("would you like a different ${p} ?"), ((p : C.ParamSlot) : (C.ParamSlot[])|null => {
        return [p];
    }), C.paramArrayKeyFn, {  });
   $grammar.addRule("one_param_try_different_param_question", [new $runtime.NonTerminal("input_param", "p", undefined)], $locale._("shall i try another ${p} ?"), ((p : C.ParamSlot) : (C.ParamSlot[])|null => {
        return [p];
    }), C.paramArrayKeyFn, {  });
   $grammar.addRule("one_param_try_different_param_question", [new $runtime.NonTerminal("input_param", "p", undefined)], $locale._("how about for another ${p} ?"), ((p : C.ParamSlot) : (C.ParamSlot[])|null => {
        return [p];
    }), C.paramArrayKeyFn, {  });
   $grammar.declareSymbol("two_param_try_different_param_question");
   $grammar.addRule("two_param_try_different_param_question", [new $runtime.NonTerminal("input_param", "p1", undefined), new $runtime.NonTerminal("input_param", "p2", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.paramKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.paramKeyFn> ? string : void)])], $locale._("would you like to try a different ${p1} or ${p2} ?"), ((p1 : C.ParamSlot, p2 : C.ParamSlot) : (C.ParamSlot[])|null => {
        assert(C.isSameFunction(p1.schema, p2.schema));
        if (p1 === p2)
            return null;
        return [p1, p2];
    }), C.paramArrayKeyFn, {  });
   $grammar.addRule("two_param_try_different_param_question", [new $runtime.NonTerminal("input_param", "p1", undefined), new $runtime.NonTerminal("input_param", "p2", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.paramKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.paramKeyFn> ? string : void)])], $locale._("would you like a different ${p1} or ${p2} ?"), ((p1 : C.ParamSlot, p2 : C.ParamSlot) : (C.ParamSlot[])|null => {
        assert(C.isSameFunction(p1.schema, p2.schema));
        if (p1 === p2)
            return null;
        return [p1, p2];
    }), C.paramArrayKeyFn, {  });
   $grammar.addRule("two_param_try_different_param_question", [new $runtime.NonTerminal("input_param", "p1", undefined), new $runtime.NonTerminal("input_param", "p2", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.paramKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.paramKeyFn> ? string : void)])], $locale._("shall i try another ${p1} or ${p2} ?"), ((p1 : C.ParamSlot, p2 : C.ParamSlot) : (C.ParamSlot[])|null => {
        assert(C.isSameFunction(p1.schema, p2.schema));
        if (p1 === p2)
            return null;
        return [p1, p2];
    }), C.paramArrayKeyFn, {  });
   $grammar.addRule("two_param_try_different_param_question", [new $runtime.NonTerminal("input_param", "p1", undefined), new $runtime.NonTerminal("input_param", "p2", ["functionName" as ("functionName" extends keyof ReturnType<typeof C.paramKeyFn> ? string : void), 0, "functionName" as ("functionName" extends keyof ReturnType<typeof C.paramKeyFn> ? string : void)])], $locale._("how about for another ${p1} or ${p2} ?"), ((p1 : C.ParamSlot, p2 : C.ParamSlot) : (C.ParamSlot[])|null => {
        assert(C.isSameFunction(p1.schema, p2.schema));
        if (p1 === p2)
            return null;
        return [p1, p2];
    }), C.paramArrayKeyFn, {  });
   $grammar.declareSymbol("action_error_phrase");
   $grammar.addRule("action_error_phrase", [new $runtime.NonTerminal("short_action_error_message", "ctx", undefined)], $locale._("${ctx} ."), ((ctx : S.ContextInfo) : (S.AgentReplyRecord)|null => D.makeActionErrorPhrase(ctx, [])), undefined, {  });
   if (!$options.flags.inference) {
       $grammar.addRule("action_error_phrase", [new $runtime.NonTerminal("sorry_preamble", undefined, undefined), new $runtime.NonTerminal("long_action_error_message", "ctx", undefined)], $locale._("${sorry_preamble} ${ctx} ."), (($0 : string, ctx : S.ContextInfo) : (S.AgentReplyRecord)|null => D.makeActionErrorPhrase(ctx, [])), undefined, {  });
       $grammar.addRule("action_error_phrase", [new $runtime.NonTerminal("sorry_preamble", undefined, undefined), new $runtime.NonTerminal("short_action_error_message", "ctx", undefined), new $runtime.NonTerminal("one_param_try_different_param_question", "questions", undefined)], $locale._("${sorry_preamble} ${ctx} . ${questions}"), (($0 : string, ctx : S.ContextInfo, questions : C.ParamSlot[]) : (S.AgentReplyRecord)|null => D.makeActionErrorPhrase(ctx, questions)), undefined, { weight: (1), priority: (0.5) });
       $grammar.addRule("action_error_phrase", [new $runtime.NonTerminal("sorry_preamble", undefined, undefined), new $runtime.NonTerminal("short_action_error_message", "ctx", undefined), new $runtime.NonTerminal("two_param_try_different_param_question", "questions", undefined)], $locale._("${sorry_preamble} ${ctx} . ${questions}"), (($0 : string, ctx : S.ContextInfo, questions : C.ParamSlot[]) : (S.AgentReplyRecord)|null => D.makeActionErrorPhrase(ctx, questions)), undefined, { weight: (0.5) });
       $grammar.addRule("action_error_phrase", [new $runtime.NonTerminal("sorry_preamble", undefined, undefined), new $runtime.NonTerminal("long_action_error_message", "ctx", undefined), new $runtime.NonTerminal("one_param_try_different_param_question", "questions", undefined)], $locale._("${sorry_preamble} ${ctx} . ${questions}"), (($0 : string, ctx : S.ContextInfo, questions : C.ParamSlot[]) : (S.AgentReplyRecord)|null => D.makeActionErrorPhrase(ctx, questions)), undefined, { weight: (1), priority: (0.5) });
       $grammar.addRule("action_error_phrase", [new $runtime.NonTerminal("sorry_preamble", undefined, undefined), new $runtime.NonTerminal("long_action_error_message", "ctx", undefined), new $runtime.NonTerminal("two_param_try_different_param_question", "questions", undefined)], $locale._("${sorry_preamble} ${ctx} . ${questions}"), (($0 : string, ctx : S.ContextInfo, questions : C.ParamSlot[]) : (S.AgentReplyRecord)|null => D.makeActionErrorPhrase(ctx, questions)), undefined, { weight: (0.5) });
   }
};
