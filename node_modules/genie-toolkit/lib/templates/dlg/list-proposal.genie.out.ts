// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>

// List proposal templates: the search is complete (1-3 search results), and the
// agent reads out the search results, optionally proposing an action to do on them

// A list proposal from the system is followed by:
// - choosing an element from the list (= "positive_list_proposal_reply_pair")
// - some form of search refinement (= "negative_list_proposa_reply_pair")
// - a question about an element of the list (= "list_proposal_search_question_pair")

import * as $runtime from "../../sentence-generator/runtime";
import type $SentenceGenerator from "../../sentence-generator/generator";
import * as $SentenceGeneratorTypes from "../../sentence-generator/types";
import * as $I18n from "../../i18n/index";
import { Ast, } from 'thingtalk';
import * as C from '../ast_manip';
import * as D from '../dialogue_acts';
import * as S from '../state_manip';
import ThingpediaLoader from '../load-thingpedia';
export const system_list_proposal : $SentenceGeneratorTypes.NonTerminal<D.ListProposal> = "system_list_proposal";
export const concat_list_description : $SentenceGeneratorTypes.NonTerminal<D.ListProposal> = "concat_list_description";
export const generic_list_proposal_accept_phrase : $SentenceGeneratorTypes.NonTerminal<Ast.EntityValue|Ast.NumberValue> = "generic_list_proposal_accept_phrase";
export const list_proposal_accept_phrase_must_have_action : $SentenceGeneratorTypes.NonTerminal<Ast.EntityValue|Ast.NumberValue> = "list_proposal_accept_phrase_must_have_action";
export const list_proposal_accept_phrase_with_action : $SentenceGeneratorTypes.NonTerminal<[Ast.EntityValue|Ast.NumberValue, Ast.Invocation, boolean]> = "list_proposal_accept_phrase_with_action";
export const list_proposal_accept_phrase_with_action_by_name : $SentenceGeneratorTypes.NonTerminal<Ast.Invocation> = "list_proposal_accept_phrase_with_action_by_name";
export const list_proposal_tell_me_more : $SentenceGeneratorTypes.NonTerminal<Ast.EntityValue|Ast.NumberValue> = "list_proposal_tell_me_more";
export const positive_list_proposal_reply : $SentenceGeneratorTypes.NonTerminal<[Ast.EntityValue|Ast.NumberValue, Ast.Invocation|null, boolean]> = "positive_list_proposal_reply";
/**
 * Load the templates in this file.
 *
 * This is an autogenerated method that will be called by the {@link SentenceGenerator}
 * when the templates are imported.
 */
export async function $load($options : $SentenceGeneratorTypes.GrammarOptions, $locale : $I18n.LanguagePack, $grammar : $SentenceGenerator, $loader : ThingpediaLoader) : Promise<void> {
   $grammar.declareSymbol("system_list_proposal");
   if (!$options.flags.inference) {
       $grammar.addRule("system_list_proposal", [new $runtime.NonTerminal("ctx_result_name_list", "name_list", undefined)], $locale._("{i see|i have|i have found} ${name_list} . {|would you like to learn more ?|would you like to learn more about either of them ?|would you like to know more about them ?|would you like to hear more about them ?|are you interested to hear more about any of them ?}"), ((name_list : S.NameList) : (D.ListProposal)|null => D.checkListProposal(name_list, null, true)), D.listProposalKeyFn, {  });
   }
   $grammar.addRule("system_list_proposal", [new $runtime.NonTerminal("ctx_result_name_list", "name_list", undefined)], $locale._("{i see|i have|i have found} ${name_list}."), ((name_list : S.NameList) : (D.ListProposal)|null => D.checkListProposal(name_list, null, false)), D.listProposalKeyFn, {  });
   $grammar.addRule("system_list_proposal", [new $runtime.NonTerminal("ctx_result_name_list", "name_list", undefined), new $runtime.NonTerminal("result_info_phrase", "info", undefined)], $locale._("{i see|i have|i have found} ${name_list}. ${name_list.length:select:=2{both|they|all of them}_{they|all of them}} are ${info[plural=other]}."), ((name_list : S.NameList, info : D.ResultPhrase) : (D.ListProposal)|null => D.checkListProposal(name_list, info.info, false)), D.listProposalKeyFn, { priority: (5) });
   $grammar.addRule("system_list_proposal", [new $runtime.NonTerminal("ctx_thingpedia_list_result", "proposal", undefined)], "${proposal}", ((proposal : D.ThingpediaListProposal) : (D.ListProposal)|null => D.checkThingpediaListProposal(proposal, null)), D.listProposalKeyFn, { priority: (20) });
   $grammar.addRule("system_list_proposal", [new $runtime.NonTerminal("ctx_thingpedia_list_result", "proposal", undefined), new $runtime.NonTerminal("result_info_phrase", "info", undefined)], $locale._("${proposal}. {they|all of them} are ${info[plural=other]}."), ((proposal : D.ThingpediaListProposal, info : D.ResultPhrase) : (D.ListProposal)|null => D.checkThingpediaListProposal(proposal, info.info)), D.listProposalKeyFn, { priority: (11) });
   $grammar.addRule("system_list_proposal", [new $runtime.NonTerminal("ctx_result_name_list", "name_list", undefined), new $runtime.NonTerminal("action_coref_list_proposal", "action", undefined)], $locale._("{i see|i have|i have found} ${name_list}. {action}."), ((name_list : S.NameList, action : Ast.Invocation) : (D.ListProposal)|null => D.addActionToListProposal(name_list, action)), D.listProposalKeyFn, { priority: (-1) });
   $grammar.addRule("system_list_proposal", [new $runtime.NonTerminal("ctx_result_name_list", "name_list", undefined), new $runtime.NonTerminal("concat_list_description", "description", ["length" as ("length" extends keyof ReturnType<typeof D.listProposalKeyFn> ? string : void), 0, "length" as ("length" extends keyof ReturnType<typeof S.nameListKeyFn> ? string : void)])], $locale._("{i see|i have|i have found} ${name_list}. ${description}."), ((name_list : S.NameList, description : D.ListProposal) : (D.ListProposal)|null => description), D.listProposalKeyFn, { priority: (0.5) });
   $grammar.addRule("system_list_proposal", [new $runtime.NonTerminal("ctx_with_result_question", "ctx", undefined), new $runtime.NonTerminal("ctx_result_name_list", "name_list", undefined), new $runtime.NonTerminal("result_info_phrase", "info", undefined)], $locale._("${name_list.length:select:=2{both ${name_list} are|${name_list} are both|${name_list} are all}_{${name_list} are all}} ${info[plural=other]}."), ((ctx : S.ContextInfo, name_list : S.NameList, info : D.ResultPhrase) : (D.ListProposal)|null => D.checkListProposal(name_list, info.info, false)), D.listProposalKeyFn, { priority: (10) });
   $grammar.addRule("system_list_proposal", [new $runtime.NonTerminal("ctx_with_result_question", "ctx", undefined), new $runtime.NonTerminal("concat_list_description", "description", undefined)], $locale._("${description}"), ((ctx : S.ContextInfo, description : D.ListProposal) : (D.ListProposal)|null => description), D.listProposalKeyFn, { priority: (4) });
   $grammar.declareSymbol("concat_list_description");
   $grammar.addRule("concat_list_description", [new $runtime.NonTerminal("direct_answer_phrase_0", "p1", undefined), new $runtime.NonTerminal("direct_answer_phrase_1", "p2", undefined)], $locale._("${p1}, {while|whereas|and} ${p2}."), ((p1 : D.DirectAnswerPhrase, p2 : D.DirectAnswerPhrase) : (D.ListProposal)|null => D.makeListProposalFromDirectAnswers(p1, p2)), D.listProposalKeyFn, {  });
   $grammar.addRule("concat_list_description", [new $runtime.NonTerminal("direct_answer_phrase_0", "p1", undefined), new $runtime.NonTerminal("direct_answer_phrase_1", "p2", undefined), new $runtime.NonTerminal("direct_answer_phrase_2", "p3", undefined)], $locale._("${p1}, ${p2}, {and|while|whereas} ${p3}."), ((p1 : D.DirectAnswerPhrase, p2 : D.DirectAnswerPhrase, p3 : D.DirectAnswerPhrase) : (D.ListProposal)|null => D.makeListProposalFromDirectAnswers(p1, p2, p3)), D.listProposalKeyFn, { priority: (1) });
   $grammar.declareSymbol("generic_list_proposal_accept_phrase");
   $grammar.addRule("generic_list_proposal_accept_phrase", [new $runtime.NonTerminal("constant_name", "name", undefined)], $locale._("{ok|yeah|} {i like|i am interested in|i am intrigued by} ${name} ."), ((name : Ast.EntityValue|Ast.NumberValue) : (Ast.EntityValue|Ast.NumberValue)|null => name), C.entityOrNumberValueKeyFn, {  });
   $grammar.addRule("generic_list_proposal_accept_phrase", [new $runtime.NonTerminal("constant_name", "name", undefined)], $locale._("{ok|yeah|} ${name} sounds {good|really good|nice|interesting} ."), ((name : Ast.EntityValue|Ast.NumberValue) : (Ast.EntityValue|Ast.NumberValue)|null => name), C.entityOrNumberValueKeyFn, {  });
   $grammar.declareSymbol("list_proposal_accept_phrase_must_have_action");
   $grammar.addRule("list_proposal_accept_phrase_must_have_action", [new $runtime.NonTerminal("constant_name", "name", undefined)], $locale._("{ok|yeah|} {i will go|i will take|i am good for} ${name} ."), ((name : Ast.EntityValue|Ast.NumberValue) : (Ast.EntityValue|Ast.NumberValue)|null => name), C.entityOrNumberValueKeyFn, {  });
   $grammar.declareSymbol("list_proposal_accept_phrase_with_action");
   $grammar.addRule("list_proposal_accept_phrase_with_action", [new $runtime.NonTerminal("generic_list_proposal_accept_phrase", "name", undefined), new $runtime.NonTerminal("generic_preamble_for_action", undefined, undefined), new $runtime.NonTerminal("coref_action_command", "action", undefined)], $locale._("${name} ${generic_preamble_for_action} ${action}"), ((name : Ast.EntityValue|Ast.NumberValue, $0 : string, action : Ast.Invocation) : ([Ast.EntityValue|Ast.NumberValue, Ast.Invocation, boolean])|null => [name, action, false]), undefined, {  });
   $grammar.addRule("list_proposal_accept_phrase_with_action", [new $runtime.NonTerminal("list_proposal_accept_phrase_must_have_action", "name", undefined), new $runtime.NonTerminal("generic_preamble_for_action", undefined, undefined), new $runtime.NonTerminal("coref_action_command", "action", undefined)], $locale._("${name} ${generic_preamble_for_action} ${action}"), ((name : Ast.EntityValue|Ast.NumberValue, $0 : string, action : Ast.Invocation) : ([Ast.EntityValue|Ast.NumberValue, Ast.Invocation, boolean])|null => [name, action, false]), undefined, {  });
   $grammar.declareSymbol("list_proposal_accept_phrase_with_action_by_name");
   $grammar.addRule("list_proposal_accept_phrase_with_action_by_name", [new $runtime.NonTerminal("generic_preamble_for_action", undefined, undefined), new $runtime.NonTerminal("action_by_name_command", "action", undefined)], $locale._("{ok|yeah|} ${generic_preamble_for_action} ${action}"), (($0 : string, action : Ast.Invocation) : (Ast.Invocation)|null => action), C.invocationKeyFn, {  });
   $grammar.declareSymbol("list_proposal_tell_me_more");
   $grammar.addRule("list_proposal_tell_me_more", [new $runtime.NonTerminal("constant_name", "name", undefined)], $locale._("{ok|yeah|} can you tell me more about ${name} ?"), ((name : Ast.EntityValue|Ast.NumberValue) : (Ast.EntityValue|Ast.NumberValue)|null => name), C.entityOrNumberValueKeyFn, {  });
   $grammar.addRule("list_proposal_tell_me_more", [new $runtime.NonTerminal("constant_name", "name", undefined), new $runtime.NonTerminal("tell_me_more_phrase", undefined, undefined)], $locale._("{ok|yeah|} {i like|i am interested in|i am intrigued by} ${name} . ${tell_me_more_phrase}"), ((name : Ast.EntityValue|Ast.NumberValue, $0 : string) : (Ast.EntityValue|Ast.NumberValue)|null => name), C.entityOrNumberValueKeyFn, {  });
   $grammar.addRule("list_proposal_tell_me_more", [new $runtime.NonTerminal("constant_name", "name", undefined), new $runtime.NonTerminal("tell_me_more_phrase", undefined, undefined)], $locale._("{ok|yeah|} ${name} sounds {good|really good|nice|interesting} . ${tell_me_more_phrase}"), ((name : Ast.EntityValue|Ast.NumberValue, $0 : string) : (Ast.EntityValue|Ast.NumberValue)|null => name), C.entityOrNumberValueKeyFn, {  });
   $grammar.declareSymbol("positive_list_proposal_reply");
   $grammar.addRule("positive_list_proposal_reply", [new $runtime.NonTerminal("generic_list_proposal_accept_phrase", "name", undefined)], "${name}", ((name : Ast.EntityValue|Ast.NumberValue) : ([Ast.EntityValue|Ast.NumberValue, Ast.Invocation|null, boolean])|null => [name, null, false]), undefined, {  });
   $grammar.addRule("positive_list_proposal_reply", [new $runtime.NonTerminal("list_proposal_accept_phrase_must_have_action", "name", undefined)], "${name}", ((name : Ast.EntityValue|Ast.NumberValue) : ([Ast.EntityValue|Ast.NumberValue, Ast.Invocation|null, boolean])|null => [name, null, true]), undefined, {  });
   $grammar.addRule("positive_list_proposal_reply", [new $runtime.NonTerminal("list_proposal_accept_phrase_with_action", "accept", undefined)], "${accept}", ((accept : [Ast.EntityValue|Ast.NumberValue, Ast.Invocation, boolean]) : ([Ast.EntityValue|Ast.NumberValue, Ast.Invocation|null, boolean])|null => accept), undefined, {  });
};
