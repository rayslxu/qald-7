// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2022 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Silei Xu <silei@cs.stanford.edu>

import { Ast, } from 'thingtalk';
import * as C from './ast_manip';
import ThingpediaLoader from './load-thingpedia';

boolean_question = {
    ( ('does'|'do'|'did') table:entity_table 'have' filter:npp_filter with { functionName = table.functionName }
    | ('does'|'do'|'did') table:entity_table 'have' filter:with_filter with { functionName = table.functionName }
    | ('are'|'is'|'was'|'were') table:entity_table ('a'|'an'|'') filter:npi_filter with { functionName = table.functionName }
    | ('are'|'is'|'was'|'were') table:entity_table filter:apv_filter with { functionName = table.functionName }
    | ('are'|'is'|'was'|'were') table:entity_table filter:npv_filter with { functionName = table.functionName }
    | ('does'|'do'|'did') 'not' table:entity_table 'have' filter:npp_filter with { functionName = table.functionName } [weight=0.1]
    | ('does'|'do'|'did') 'not' table:entity_table 'have' filter:with_filter with { functionName = table.functionName } [weight=0.1]
    | ('are'|'is'|'was'|'were') 'not' table:entity_table ('a'|'an'|'') filter:npi_filter with { functionName = table.functionName } [weight=0.1]
    | ('are'|'is'|'was'|'were') 'not' table:entity_table filter:apv_filter with { functionName = table.functionName } [weight=0.1]
    | ('are'|'is'|'was'|'were') 'not' table:entity_table filter:npv_filter with { functionName = table.functionName } [weight=0.1]
    ) => C.makeVerificationQuestion($loader, table, filter);

    ( ('does'|'do'|'did') table:entity_table 'have' 'no' filter:npp_filter with { functionName = table.functionName } [weight=0.1]
    | ('does'|'do'|'did') table:entity_table 'have' 'no' filter:with_filter with { functionName = table.functionName } [weight=0.1]
    | ('are'|'is'|'was'|'were') table:entity_table 'not' ('a'|'an'|'') filter:npi_filter with { functionName = table.functionName } [weight=0.1]
    | ('are'|'is'|'was'|'were') table:entity_table 'not' filter:apv_filter with { functionName = table.functionName } [weight=0.1]
    | ('are'|'is'|'was'|'were') table:entity_table 'not' filter:npv_filter with { functionName = table.functionName } [weight=0.1]
    ) => C.makeVerificationQuestion($loader, table, filter, true);
     
    ( ('does'|'do'|'did') table:entity_table 'have' p:out_param_NotArray__Any with { functionName = table.functionName }
    | ('does'|'do'|'did') 'not' table:entity_table 'have' p:out_param_NotArray__Any with { functionName = table.functionName } [weight=0.1]
    ) => {
        const projection = C.makeFilter($loader, p, '==', new Ast.Value.Null);
        if (!projection)
            return null;
        return C.makeVerificationQuestion($loader, table, projection);
    };

    ('does'|'do'|'did') ('the' | '') table:entity_table 'have' 'no' p:out_param_NotArray__Any with { functionName = table.functionName } [weight=0.1]
    => {
        const projection = C.makeFilter($loader, p, '==', new Ast.Value.Null, true);
        if (!projection)
            return null;
        return C.makeVerificationQuestion($loader, table, projection);
    };

    //TODO: add templates for "are there any XXX"
}