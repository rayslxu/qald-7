import { Placeholder } from './ast';
export declare type EnumFormatter = (x: string, opt?: string) => string;
/**
 * Formatting utilities.
 *
 * This class provides an abstraction over {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl|the Intl API}
 * that ensures the correct locale and timezone information are used.
 */
export default class Formatter {
    protected _locale: string;
    protected _timezone: string | undefined;
    private _formatEnum;
    /**
     * Construct a new format utils object.
     *
     * @param locale - the user's locale, as a BCP47 tag
     * @param timezone - the user's timezone, as a string in the IANA timezone database (e.g. America/Los_Angeles, Europe/Rome)
     */
    constructor(locale: string | undefined, timezone: string | undefined, formatEnum?: EnumFormatter);
    getPluralType(number: number, type: Intl.PluralRuleType | undefined): string;
    formatFallback(value: unknown, precision: number): string;
    formatValue(value: unknown, chunk: Placeholder): string;
    anyToString(value: unknown): string;
    listToString(array: unknown[], options?: any): string;
    /**
     * Convert a measurement to a user-visible string.
     *
     * @param {number} value - the value, in the ThingTalk base unit (e.g. Celius for temperature, meters for distance)
     * @param {number} [precision] - the number of digits after the decimal separator, defaults to 0
     * @param {string} unit - the unit to display as, as a ThingTalk unit code
     * @return {string} the formatted measurement
     */
    measureToString(value: number, precision: number | undefined, unit: string): string;
    numberToString(value: number, precision?: number): string;
    /**
     * Convert a date to a user-visible string (without the time part).
     *
     * This is a small wrapper over {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString|Date.toLocaleString}
     * that applies the correct timezone.
     *
     * @param {Date} date - the date to display
     * @param {Object} [options] - additional options to pass to `toLocaleString`
     * @return {string} the formatted date
     */
    dateToString(date: Date, options?: Intl.DateTimeFormatOptions): string;
    /**
     * Convert a date object to a user-visible string, displaying _only_ the time part.
     *
     * This is a small wrapper over {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString|Date.toLocaleString}
     * that applies the correct timezone.
     *
     * @param {Date} date - the time to display
     * @param {Object} [options] - additional options to pass to `toLocaleString`
     * @return {string} the formatted time
     */
    timeToString(date: Date, options?: Intl.DateTimeFormatOptions): string;
    /**
     * Convert a date object to a user-visible string, displaying both the date and the time part.
     *
     * This is a small wrapper over {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString|Date.toLocaleString}
     * that applies the correct timezone.
     *
     * @param {Date} date - the date to display
     * @param {Object} [options] - additional options to pass to `toLocaleString`
     * @return {string} the formatted date
     */
    dateAndTimeToString(date: Date, options?: Intl.DateTimeFormatOptions): string;
}
