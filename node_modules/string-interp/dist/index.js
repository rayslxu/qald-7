"use strict";
// -*- mode: ts; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// Copyright 2019-2020 The Board of Trustees of the Leland Stanford Junior University
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
//
// See LICENSE for details
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const TTUnits = __importStar(require("thingtalk-units"));
const ast_1 = require("./ast");
const formatter_1 = __importDefault(require("./formatter"));
const parser = __importStar(require("./grammar"));
const utils_1 = require("./utils");
function parse(string) {
    return parser.parse(string);
}
const ALLOWED_OPTIONS = new Set(['%', 'iso-date', 'date', 'time', 'url', 'enum', 'lat', 'lon']);
function typecheck(parsed) {
    for (const chunk of parsed) {
        if (typeof chunk === 'string')
            continue;
        if (chunk instanceof ast_1.Placeholder) {
            if (chunk.default)
                typecheck(chunk.default);
            if (chunk.option === '')
                continue;
            if (ALLOWED_OPTIONS.has(chunk.option))
                continue;
            // everything else is treated as a unit
            TTUnits.normalizeUnit(chunk.option);
        }
        if (chunk instanceof ast_1.Optional)
            typecheck(chunk.pattern);
        if (chunk instanceof ast_1.Select || chunk instanceof ast_1.Plural) {
            for (const variant of chunk.variants.values())
                typecheck(variant);
        }
    }
}
function isNullish(value) {
    return value === undefined || value === null || value === '' ||
        Number.isNaN(value) || (value instanceof Date && Number.isNaN(+value));
}
function replace(formatter, parsed, args, failIfAllMissing, failIfAnyMissing, nullReplacement) {
    let buffer = '';
    let anyFailed = false;
    let allFailed = true;
    for (const chunk of parsed) {
        if (typeof chunk === 'string') {
            buffer += chunk;
            continue;
        }
        if (chunk instanceof ast_1.Select) {
            const value = typeof args === 'function' ? args(chunk.param) : utils_1.get(args, chunk.param);
            let variant;
            if (isNullish(value))
                variant = chunk.variants.get('null');
            else if (chunk.variants.has(String(value)))
                variant = chunk.variants.get(String(value));
            else
                variant = chunk.variants.get('null');
            let replacement;
            if (variant)
                replacement = replace(formatter, variant, args, failIfAnyMissing, false, nullReplacement);
            if (replacement === undefined) {
                anyFailed = true;
                continue;
            }
            buffer += replacement;
            allFailed = false;
        }
        if (chunk instanceof ast_1.Plural) {
            const value = typeof args === 'function' ? args(chunk.param) : utils_1.get(args, chunk.param);
            let variant;
            if (typeof value !== 'number' || isNullish(value))
                variant = chunk.variants.get('other');
            else if (chunk.variants.has(value))
                variant = chunk.variants.get(value);
            else
                variant = chunk.variants.get(formatter.getPluralType(value, chunk.type));
            let replacement;
            if (variant)
                replacement = replace(formatter, variant, args, failIfAnyMissing, false, nullReplacement);
            if (replacement === undefined) {
                anyFailed = true;
                continue;
            }
            buffer += replacement;
            allFailed = false;
        }
        if (chunk instanceof ast_1.Placeholder) {
            const value = typeof args === 'function' ? args(chunk.param) : utils_1.get(args, chunk.param);
            if (isNullish(value)) {
                if (chunk.default) {
                    const replacement = replace(formatter, chunk.default, args, true, false, nullReplacement);
                    if (replacement !== undefined) {
                        allFailed = false;
                        buffer += replacement;
                    }
                    else {
                        anyFailed = true;
                        buffer += nullReplacement;
                    }
                }
                else {
                    anyFailed = true;
                    buffer += nullReplacement;
                }
            }
            else {
                buffer += formatter.formatValue(value, chunk);
                allFailed = false;
            }
        }
        if (chunk instanceof ast_1.Optional) {
            const replacement = replace(formatter, chunk.pattern, args, true, true, nullReplacement);
            if (replacement === undefined)
                continue;
            buffer += replacement;
        }
    }
    if (failIfAnyMissing && anyFailed)
        return undefined;
    // note that "allFailed" will be true if there are no placeholders, hence we check "anyFailed" too
    if (failIfAllMissing && anyFailed && allFailed)
        return undefined;
    return buffer;
}
function compile(string, options = {}) {
    const parsed = parse(string);
    typecheck(parsed);
    const failIfMissing = options.failIfMissing === undefined ? true : options.failIfMissing;
    const nullReplacement = options.nullReplacement || '';
    const formatter = new formatter_1.default(options.locale || 'C', options.timezone, options.formatEnum);
    return function (args) {
        return replace(formatter, parsed, args, failIfMissing, false, nullReplacement);
    };
}
function interpolate(string, args, options) {
    return compile(string, options)(args);
}
exports.default = interpolate;
interpolate.default = interpolate;
interpolate.parse = parse;
interpolate.compile = compile;
interpolate.Formatter = formatter_1.default;
interpolate.Placeholder = ast_1.Placeholder;
interpolate.Optional = ast_1.Optional;
interpolate.Plural = ast_1.Plural;
interpolate.Select = ast_1.Select;
module.exports = interpolate;
//# sourceMappingURL=index.js.map