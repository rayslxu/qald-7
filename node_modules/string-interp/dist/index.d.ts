import { Expansion } from './ast';
import { EnumFormatter } from './formatter';
interface InterpolationOptions {
    locale?: string;
    timezone?: string;
    formatEnum?: EnumFormatter;
    failIfMissing?: boolean;
    nullReplacement?: string;
}
declare type ArgFunction = (x: string) => unknown;
declare type ArgMap = ({
    [key: string]: unknown;
});
declare type ArgsType = ArgFunction | ArgMap;
declare function interpolate(string: string, args: ArgsType, options?: InterpolationOptions): string | undefined;
declare namespace interpolate {
    var _a: typeof import(".").default;
    export var parse: (string: string) => Expansion;
    export var compile: (string: string, options?: InterpolationOptions) => (x: ArgsType) => string | undefined;
    export var Formatter: typeof import("./formatter").default;
    export var Placeholder: typeof import("./ast").Placeholder;
    export var Optional: typeof import("./ast").Optional;
    export var Plural: typeof import("./ast").Plural;
    export var Select: typeof import("./ast").Select;
    export { _a as default };
}
export default interpolate;
