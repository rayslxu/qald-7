Utterance: 
what is mount st helens ?	
TT:
@wd . entity ( ) filter id == " Q4675 " ^^wd:entity ;
SPARQL:
SELECT DISTINCT ?x WHERE { SERVICE wikibase:label { bd:serviceParam wikibase:language "en". wd:Q4675 schema:description ?x. } }

====

Utterance: what state is barack obama senator for ?
TT:
[ < electoral_district / located_in_the_administrative_territorial_entity > of ( position_held filter value == " Q4416090 " ^^wd:p_position_held ) ] of @wd . entity ( ) filter id == " Q76 " ^^wd:entity ;
SPARQL:
SELECT DISTINCT ?x WHERE { 
  <http://www.wikidata.org/entity/Q76> <http://www.wikidata.org/prop/P39> ?p. 
  ?p <http://www.wikidata.org/prop/qualifier/P768>/<http://www.wikidata.org/prop/direct/P131> ?x. 
  ?p <http://www.wikidata.org/prop/statement/P39> <http://www.wikidata.org/entity/Q4416090>. 
}

====

Utterance: who are the current senators from missouri ?
TT: 
@wd . entity ( ) filter contains ( position_held filter contains ( < electoral_district / located_in_the_administrative_territorial_entity > , " Q1581 " ^^wd:p_located_in_the_administrative_territorial_entity ) , " Q4416090 " ^^wd:p_position_held ) ;
SPARQL:
SELECT DISTINCT ?x WHERE { 
    ?x <http://www.wikidata.org/prop/P39> ?p. 
    ?p <http://www.wikidata.org/prop/statement/P39> <http://www.wikidata.org/entity/Q4416090>. 
    ?p <http://www.wikidata.org/prop/qualifier/P768> ?y.  
    ?y <http://www.wikidata.org/prop/direct/P131> <http://www.wikidata.org/entity/Q1581>. 
    FILTER NOT EXISTS { ?p <http://www.wikidata.org/prop/qualifier/P582> ?z. }
}

====

Utterance:who does sonny bill williams play for 2012 ?
TT: 
[ member_of_sports_team filter ( point_in_time == new Date ( 2012 ) ) ] of @wd . human ( ) filter id == " Q2481789 " ^^wd:human ;
SPARQL: 
SELECT DISTINCT ?x WHERE { 
    <http://www.wikidata.org/entity/Q2481789> <http://www.wikidata.org/prop/P54> ?p. 
    ?p <http://www.wikidata.org/prop/statement/P54> ?x. 
    ?p <http://www.wikidata.org/prop/qualifier/P580> ?y. 
    ?p <http://www.wikidata.org/prop/qualifier/P582> ?z. 
    FILTER((y <= "2013-01-01T00:00:00.000Z"^^<http://www.w3.org/2001/XMLSchema#dateTime>) && (z >= "2012-01-01T00:00:00.000Z"^^<http://www.w3.org/2001/XMLSchema#dateTime>)) 
}

====

Utterance: get concerts in 2012
TT: 
@wd . concert ( ) filter point_in_time == new Date ( 2012 ) ;
SPARQL:
SELECT DISTINCT ?x WHERE { 
    ?x <http://www.wikidata.org/prop/direct/P31>/<http://www.wikidata.org/prop/direct/P279>* <http://www.wikidata.org/entity/Q182832>. 
    ?x <http://www.wikidata.org/prop/direct/P585> ?y. 
    FILTER((y >= "2012-01-01T00:00:00.000Z"^^<http://www.w3.org/2001/XMLSchema#dateTime>) && (y <= "2013-01-01T00:00:00.000Z"^^<http://www.w3.org/2001/XMLSchema#dateTime>)) 
}

====

Utterance: what books did beverly cleary right ?
TT: 
@wd . book ( ) filter contains ( author , " Q1316719 " ^^wd:p_author ) ;
SPARQL: 
SELECT DISTINCT ?x WHERE { 
    ?x <http://www.wikidata.org/prop/direct/P31>/<http://www.wikidata.org/prop/direct/P279>* <http://www.wikidata.org/entity/Q47461344>. 
    ?x <http://www.wikidata.org/prop/direct/P50> <http://www.wikidata.org/entity/Q1316719>. 
}

====

Utterance: show me all museums
TT: 
@wd . entity ( ) filter instance_of == " Q207694 " ^^wd:entity_subdomain ;
SPARQL: 
SELECT DISTINCT ?x WHERE { 
    ?x <http://www.wikidata.org/prop/direct/P31>/<http://www.wikidata.org/prop/direct/P279>* <http://www.wikidata.org/entity/Q207694>.
}

====
Utterance: show me museums named after louvre palace
TT: 
@wd . entity ( ) filter contains ( named_after , " Q1075988 " ^^wd:p_named_after ) && instance_of == " Q207694 " ^^wd:entity_subdomain ;
SPARQL: 
SELECT DISTINCT ?x WHERE { 
    ?x <http://www.wikidata.org/prop/direct/P31>/<http://www.wikidata.org/prop/direct/P279>* <http://www.wikidata.org/entity/Q207694>.
    ?x <http://www.wikidata.org/prop/direct/P138> <http://www.wikidata.org/entity/Q1075988>.
}

====
Utterance: show me the owner of museums named after louvre palace
TT: 
[ owned_by ] of @wd . entity ( ) filter instance_of == " Q207694 " ^^wd:entity_subdomain && contains ( named_after , " Q1075988 " ^^wd:p_named_after ) ;
SPARQL: 
SELECT DISTINCT ?y WHERE { 
    ?x <http://www.wikidata.org/prop/direct/P31>/<http://www.wikidata.org/prop/direct/P279>* <http://www.wikidata.org/entity/Q207694>.
    ?x <http://www.wikidata.org/prop/direct/P127> ?y.
    ?x <http://www.wikidata.org/prop/direct/P138> <http://www.wikidata.org/entity/Q1075988>.
}

====
Utterance: Who was the doctoral supervisor of Albert Einstein
TT:
[ doctoral_advisor ] of @wd . human ( ) filter id == " Q937 " ^^wd:human ;
SPARQL: 
SELECT DISTINCT ?x WHERE { 
    <http://www.wikidata.org/entity/Q937> <http://www.wikidata.org/prop/direct/P184> ?x.
}

====
Utterance: Did Kaurism√§ki ever win the Grand Prix at Cannes?
TT: 
[ contains ( award_received , " Q844804 " ^^wd:p_award_received ) ] of @wd . human ( ) filter id == " Q276186 " ^^wd:human ;
SPARQL:
ASK WHERE { 
    <http://www.wikidata.org/entity/Q276186> <http://www.wikidata.org/prop/direct/P166>  <http://www.wikidata.org/entity/Q844804>. 
}

====
Utterance: Which countries have more than two official languages?
TT: 
@wd . country ( ) filter count ( official_language ) >= 2 ;
SPARQL: 
SELECT DISTINCT ?x WHERE { 
    ?x <http://www.wikidata.org/prop/direct/P31>/<http://www.wikidata.org/prop/direct/P279>* <http://www.wikidata.org/entity/Q6256>. 
    ?x <http://www.wikidata.org/prop/direct/P37> ?y. 
} GROUP BY ?x HAVING(COUNT(?y) > 2)

====
Utterance: Give me all cities in New Jersey with more than 10000 inhabitants.
TT:
@wd . city ( ) filter contains ( located_in_the_administrative_territorial_entity , " Q1408 " ^^wd:p_located_in_the_administrative_territorial_entity ) && population >= 10000 ;
SPARQL:
SELECT DISTINCT ?x WHERE { 
    ?x <http://www.wikidata.org/prop/direct/P31>/<http://www.wikidata.org/prop/direct/P279>* <http://www.wikidata.org/entity/Q515>. 
    ?x <http://www.wikidata.org/prop/direct/P131>+ <http://www.wikidata.org/entity/Q1408>. 
    ?x <http://www.wikidata.org/prop/direct/P1082> ?y. 
    FILTER(?y > 10000).
}

====
Utterance: Whose wife is called Mary?
TT: 
@wd . entity ( ) filter contains~ ( spouse , " mary " ) ;
SPARQL: 
SELECT DISTINCT ?x WHERE { 
    ?x <http://www.wikidata.org/prop/direct/P26> ?y.  
    ?y <http://www.w3.org/2000/01/rdf-schema#label> "mary"@en.
}

====
Utterance: Was the wife of president Lincoln called Mary?
TT: 
[ contains~ ( spouse , " mary " ) ] of @wd . human ( ) filter id == " Q91 " ^^wd:human ;
SPARQL: 
ASK WHERE { 
    <http://www.wikidata.org/entity/Q91> <http://www.wikidata.org/prop/direct/P26> ?x.  
    ?x <http://www.w3.org/2000/01/rdf-schema#label> "mary"@en.
}

====
Utterance: Give me the birthdays of all actors of the television show Charmed.
TT: 
[ < cast_member / date_of_birth > ] of @wd . television_series ( ) filter id == " Q162371 " ^^wd:television_series ;
SPARQL: 
SELECT DISTINCT ?x WHERE { <http://www.wikidata.org/entity/Q162371> (<http://www.wikidata.org/prop/direct/P161>|<http://www.wikidata.org/prop/direct/P725>)/<http://www.wikidata.org/prop/direct/P569> ?x. }

====
Utterance: Who wrote the lyrics for the Polish national anthem?
TT:
[ < anthem / lyrics_by > ] of @wd . country ( ) filter id == " Q36 " ^^wd:country ;
SPARQL:
SELECT DISTINCT ?x WHERE { 
    <http://www.wikidata.org/entity/Q36> <http://www.wikidata.org/prop/direct/P85>/<http://www.wikidata.org/prop/direct/P676> ?x. 
}

====
Utterance: Which writers studied in Istanbul?
TT:
@wd . entity ( ) filter contains ( < educated_at / located_in_the_administrative_territorial_entity > , " Q406 " ^^wd:p_located_in_the_administrative_territorial_entity ) && contains ( occupation , " Q36180 " ^^wd:p_occupation ) ;
SPARQL:
SELECT DISTINCT ?x WHERE { 
    ?x <http://www.wikidata.org/prop/direct/P69>/<http://www.wikidata.org/prop/direct/P131>+  <http://www.wikidata.org/entity/Q406>. 
    ?x <http://www.wikidata.org/prop/direct/P106> <http://www.wikidata.org/entity/Q36180>. 
}

====
Utterance: In which city did John F. Kennedy die? 
TT: 
[ < place_of_death / located_in_the_administrative_territorial_entity > : Entity ( wd:city ) ] of @wd . human ( ) filter id == " Q9696 " ^^wd:human ;
SPARQL:
SELECT DISTINCT ?x WHERE {  
    <http://www.wikidata.org/entity/Q9696> <http://www.wikidata.org/prop/direct/P20>/<http://www.wikidata.org/prop/direct/P131>+ ?x. 
    ?x <http://www.wikidata.org/prop/direct/P31>/<http://www.wikidata.org/prop/direct/P279>* <http://www.wikidata.org/entity/Q515>.  
}

====
Utterance: What is the highest mountain in Australia?
TT: 
sort ( elevation_above_sea_level desc of @wd . mountain ( ) filter contains ( continent , " Q3960 " ^^wd:p_continent ) ) [ 1 ] ;
SPARQL:
SELECT DISTINCT ?x WHERE { 
    ?x <http://www.wikidata.org/prop/direct/P31>/<http://www.wikidata.org/prop/direct/P279>* <http://www.wikidata.org/entity/Q8502>. 
    ?x <http://www.wikidata.org/prop/direct/P2044> ?y. 
    ?x <http://www.wikidata.org/prop/direct/P30> <http://www.wikidata.org/entity/Q3960>. 
} ORDER BY DESC(?y) LIMIT 1

==== 
Utterance: Are tree frogs a type of amphibian?
TT:
[ contains ( < parent_taxon * > , " Q10908 " ^^wd:p_parent_taxon ) ] of @wd . taxon ( ) filter id == " Q53696 " ^^wd:taxon ;
SPARQL:
ASK WHERE { 
    <http://www.wikidata.org/entity/Q53696> <http://www.wikidata.org/prop/direct/P171>* <http://www.wikidata.org/entity/Q10908>. 
}

====
Utterance: Give me the websites of companies with more than 500000 employees.
TT:
[ official_website ] of @wd . organization ( ) filter instance_of == " Q4830453 " ^^wd:organization_subdomain && employees >= 500000 ;
SPARQL:
SELECT DISTINCT ?y WHERE { 
    ?x <http://www.wikidata.org/prop/direct/P31>/<http://www.wikidata.org/prop/direct/P279>* <http://www.wikidata.org/entity/Q4830453>. 
    ?x <http://www.wikidata.org/prop/direct/P856> ?y. 
    ?x <http://www.wikidata.org/prop/direct/P1128> ?z. 
    FILTER(?z > 500000). 
}

====
Utterance: Is there a video game called Battle Chess?
TT: 
[ count >= 1 ] of count ( @wd . video_game ( ) filter id =~ " battle chess " ) ;
SPARQL:  
ASK WHERE { 
    ?x <http://www.wikidata.org/prop/direct/P31>/<http://www.wikidata.org/prop/direct/P279>* <http://www.wikidata.org/entity/Q7889>. 
    ?x <http://www.w3.org/2000/01/rdf-schema#label> ?y. 
    FILTER(LCASE(STR(?y)) = "battle chess"). 
}

====
Utterance: Was U.S. president Jackson involved in a war?
TT:
[ count ( conflict ) >= 1 ] of @wd . human ( ) filter id == " Q11817 " ^^wd:human ;
SPARQL: 
ASK WHERE { 
    <http://www.wikidata.org/entity/Q11817> <http://www.wikidata.org/prop/direct/P607> ?x. 
}

====
Utterance: in which u . s . state is mount mckinley located ?
TT: 
[ located_in_the_administrative_territorial_entity ] of @wd . mountain ( ) filter id == " Q130018 " ^^wd:mountain ;
SPARQL: 
SELECT DISTINCT ?x WHERE { 
    <http://www.wikidata.org/entity/Q130018> <http://www.wikidata.org/prop/direct/P131>+ ?x.
}

====
Utterance: which indian company has the most employees ?
TT: 
sort ( employees desc of @wd . organization ( ) filter contains ( country , " Q668 " ^^wd:p_country ) && instance_of == " Q4830453 " ^^wd:organization_subdomain ) [ 1 ] ;
SPARQL: 
SELECT DISTINCT ?x WHERE { 
    ?x <http://www.wikidata.org/prop/direct/P31>/<http://www.wikidata.org/prop/direct/P279>* <http://www.wikidata.org/entity/Q4830453>. 
    ?x <http://www.wikidata.org/prop/direct/P1128> ?y.  
    ?x <http://www.wikidata.org/prop/direct/P17> <http://www.wikidata.org/entity/Q668>.
} ORDER BY DESC(?y) LIMIT 1

====
Utterance: show me protests started after 2000?
TT: 
@wd . entity ( ) filter instance_of == " Q273120 " ^^wd:entity_subdomain && start_time >= new Date ( 2000 ) ;
SPARQL:
SELECT DISTINCT ?x WHERE {
    ?x <http://www.wikidata.org/prop/direct/P31>/<http://www.wikidata.org/prop/direct/P279>* <http://www.wikidata.org/entity/Q273120>. 
    ?x <http://www.wikidata.org/prop/direct/P580> ?y.
    FILTER(?y > "2000-01-01T00:00:00.000Z"^^<http://www.w3.org/2001/XMLSchema#dateTime>).
}

====
Utterance: Which museum exhibits The Scream by Munch?
TT: 
[ < has_parts / location > : Entity ( wd:art_museum ) ] of @wd . entity ( ) filter id == " Q471379 " ^^wd:entity ;
SPARQL:
SELECT DISTINCT ?x WHERE { 
    <http://www.wikidata.org/entity/Q471379> <http://www.wikidata.org/prop/direct/P527>/<http://www.wikidata.org/prop/direct/P276> ?x. 
    ?x <http://www.wikidata.org/prop/direct/P31>/<http://www.wikidata.org/prop/direct/P279>* <http://www.wikidata.org/entity/Q207694>.
}


====
Utterance: who are the US presidents since 2000? 
TT:
[ head_of_government filter end_time >= new Date ( 2000 ) ] of @wd . country ( ) filter id == " Q30 " ^^wd:country ;
SPARQL: 
SELECT DISTINCT ?x WHERE {
    <http://www.wikidata.org/entity/Q30> <http://www.wikidata.org/prop/P6> ?p.
    ?p <http://www.wikidata.org/prop/statement/P6> ?x.
    ?p <http://www.wikidata.org/prop/qualifier/P582> ?y.
    FILTER(?y > "2000-01-01T00:00:00.000Z"^^<http://www.w3.org/2001/XMLSchema#dateTime>).
}

====
Utterance: when did obama start to be the us president? 
TT:
[ start_time of ( head_of_government filter value == " Q76 " ^^wd:p_head_of_government ) ] of @wd . country ( ) filter id == " Q30 " ^^wd:country ;
SPARQL: 
SELECT DISTINCT ?x WHERE {
    <http://www.wikidata.org/entity/Q30> <http://www.wikidata.org/prop/P6> ?p.
    ?p <http://www.wikidata.org/prop/qualifier/P580> ?x.
    ?p <http://www.wikidata.org/prop/statement/P6> <http://www.wikidata.org/entity/Q76>.
}

====
Utterance: How many countries are there in Europe ? 
TT: 
count ( @wd . country ( ) filter contains ( continent , " Q46 " ^^wd:p_continent ) ) ;
SPARQL: 
SELECT (COUNT(DISTINCT ?x) as ?count) WHERE {
    ?x <http://www.wikidata.org/prop/direct/P31>/<http://www.wikidata.org/prop/direct/P279>* <http://www.wikidata.org/entity/Q6256>. 
    ?x <http://www.wikidata.org/prop/direct/P30> <http://www.wikidata.org/entity/Q46>. 
}

====
Utterance: how many children do US president have on average? 
TT:
avg ( number_of_children of @wd . entity ( ) filter contains ( position_held , " Q11696 " ^^wd:p_position_held ) ) ;
SPARQL: 
SELECT (AVG(?y) as ?avg) WHERE {
    ?x <http://www.wikidata.org/prop/direct/P1971> ?y.
    ?x <http://www.wikidata.org/prop/direct/P39> <http://www.wikidata.org/entity/Q11696>. 
}

====
Utterance: Does the Isar flow into a lake?
TT:
[ contains ( mouth_of_the_watercourse , any ( [ id ] of @wd . lake ( ) ) ) ] of @wd . river ( ) filter id == " Q106588 " ^^wd:river ;
SPARQL:
ASK WHERE { 
    <http://www.wikidata.org/entity/Q106588> <http://www.wikidata.org/prop/direct/P403> ?x. 
    ?x <http://www.wikidata.org/prop/direct/P31>/<http://www.wikidata.org/prop/direct/P279>* <http://www.wikidata.org/entity/Q23397>. 
}

====
Utterance: mountain lower than the Annapurna?
TT:
@wd . mountain ( ) filter elevation_above_sea_level <= any ( [ elevation_above_sea_level ] of @wd . mountain ( ) filter id == " Q16466024 " ^^wd:mountain ) ;
SPARQL: 
SELECT DISTINCT ?x WHERE { 
    ?x <http://www.wikidata.org/prop/direct/P31>/<http://www.wikidata.org/prop/direct/P279>* <http://www.wikidata.org/entity/Q8502>. 
    ?x <http://www.wikidata.org/prop/direct/P2044> ?y. 
    <http://www.wikidata.org/entity/Q16466024> <http://www.wikidata.org/prop/direct/P2044> ?z. 
    FILTER(?y < ?z). 
}

====
Utterance: Which mountain is the highest after the Annapurna?
TT:
sort ( elevation_above_sea_level desc of @wd . mountain ( ) filter elevation_above_sea_level <= any ( [ elevation_above_sea_level ] of @wd . mountain ( ) filter id == " Q16466024 " ^^wd:mountain ) ) [ 1 ] ;
SPARQL: 
SELECT DISTINCT ?x WHERE { 
    ?x <http://www.wikidata.org/prop/direct/P31>/<http://www.wikidata.org/prop/direct/P279>* <http://www.wikidata.org/entity/Q8502>. 
    ?x <http://www.wikidata.org/prop/direct/P2044> ?y. 
    <http://www.wikidata.org/entity/Q16466024> <http://www.wikidata.org/prop/direct/P2044> ?z. 
    FILTER(?y < ?z). 
} ORDER BY DESC(?y) LIMIT 1

====
Utterance: Is Lake Baikal bigger than the Great Bear Lake?
TT: 
[ area >= any ( [ area ] of @wd . lake ( ) filter id == " Q5525 " ^^wd:lake ) ] of @wd . lake ( ) filter id == " Q5513 " ^^wd:lake ;
SPARQL:
ASK WHERE { 
    <http://www.wikidata.org/entity/Q5513> <http://www.wikidata.org/prop/direct/P2046> ?x. 
    <http://www.wikidata.org/entity/Q5525> <http://www.wikidata.org/prop/direct/P2046> ?y. 
    FILTER(?x > ?y).
}

====
Utterance: who is the daughter of robert kennedy married to ?
TT: 
[ spouse ] of @wd . entity ( ) filter in_array ( id , any ( [ child ] of @wd . entity ( ) filter id == " Q25310 " ^^wd:entity ) ) && sex_or_gender == enum female ;
SPARQL:
SELECT DISTINCT ?y WHERE { 
    ?x <http://www.wikidata.org/prop/direct/P26> ?y. 
    <http://www.wikidata.org/entity/Q25310> <http://www.wikidata.org/prop/direct/P40> ?x. 
    ?x <http://www.wikidata.org/prop/direct/P21> <http://www.wikidata.org/entity/Q6581072>. 
}

====
Utterance: how many people live in the capital of australia ?
TT: 
[ population ] of @wd . entity ( ) filter in_array ( id , any ( [ capital ] of @wd . entity ( ) filter id == " Q408 " ^^wd:entity ) ) ;
SPARQL:
SELECT DISTINCT ?y WHERE { 
    ?x <http://www.wikidata.org/prop/direct/P1082> ?y. 
    <http://www.wikidata.org/entity/Q408> <http://www.wikidata.org/prop/direct/P36> ?x. 
}


====
Utterance: give me all cosmonauts
TT: 
@wd . entity ( ) filter ( contains ( country_of_citizenship , " Q15180 " ^^wd:entity ) || contains ( country_of_citizenship , " Q159 " ^^wd:entity ) ) && contains ( occupation , " Q11631 " ^^wd:entity ) ;
SPARQL:
SELECT DISTINCT ?x WHERE { 
    { ?x <http://www.wikidata.org/prop/direct/P27> <http://www.wikidata.org/entity/Q15180>. } UNION { ?x <http://www.wikidata.org/prop/direct/P27> <http://www.wikidata.org/entity/Q159>. } 
    ?x <http://www.wikidata.org/prop/direct/P106> <http://www.wikidata.org/entity/Q11631>. 
}

====
Utterance: where are the netherlands on a world map ?
TT:
[ location ] of @wd . entity ( ) filter id == " Q55 " ^^wd:entity ;
SPARQL:
SELECT DISTINCT ?x WHERE { 
    <http://www.wikidata.org/entity/Q55> (<http://www.wikidata.org/prop/direct/P276>|<http://www.wikidata.org/prop/direct/P625>) ?x. 
}

====
Utterance: what character did natalie portman play in star wars ?	
TT: 
[ character_role of ( cast_member filter value == " Q37876 " ^^wd:p_cast_member ) ] of @wd . entity ( ) filter contains ( media_franchise , " Q462 " ^^wd:p_media_franchise ) ;
SPARQL:
SELECT DISTINCT ?y WHERE { 
  ?x <http://www.wikidata.org/prop/direct/P8345> <http://www.wikidata.org/entity/Q462>. 
  ?x (<http://www.wikidata.org/prop/P161>|<http://www.wikidata.org/prop/P725>) ?p. 
  ?p <http://www.wikidata.org/prop/qualifier/P453> ?y. 
  ?p (<http://www.wikidata.org/prop/statement/P161>|<http://www.wikidata.org/prop/statement/P725>) <http://www.wikidata.org/entity/Q37876>. 
}